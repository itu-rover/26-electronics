
F7_VCU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000123c8  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002ca4  080125c8  080125c8  000135c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801526c  0801526c  00017208  2**0
                  CONTENTS
  4 .ARM          00000008  0801526c  0801526c  0001626c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015274  08015274  00017208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015274  08015274  00016274  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015278  08015278  00016278  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c8  20000000  0801527c  00017000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  200000c8  08015344  000170c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000168  080153e4  00017168  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000a888  20000208  08015484  00017208  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  2000aa90  08015484  00017a90  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  00017208  2**0
                  CONTENTS, READONLY
 14 .debug_info   000237f5  00000000  00000000  00017236  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00006228  00000000  00000000  0003aa2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001bd8  00000000  00000000  00040c58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001615  00000000  00000000  00042830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00036341  00000000  00000000  00043e45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0002cca5  00000000  00000000  0007a186  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00112403  00000000  00000000  000a6e2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  001b922e  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00007cec  00000000  00000000  001b9274  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 000000ad  00000000  00000000  001c0f60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000208 	.word	0x20000208
 800021c:	00000000 	.word	0x00000000
 8000220:	080125b0 	.word	0x080125b0

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000020c 	.word	0x2000020c
 800023c:	080125b0 	.word	0x080125b0

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000300:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000304:	f000 b96a 	b.w	80005dc <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	460c      	mov	r4, r1
 8000328:	2b00      	cmp	r3, #0
 800032a:	d14e      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032c:	4694      	mov	ip, r2
 800032e:	458c      	cmp	ip, r1
 8000330:	4686      	mov	lr, r0
 8000332:	fab2 f282 	clz	r2, r2
 8000336:	d962      	bls.n	80003fe <__udivmoddi4+0xde>
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0320 	rsb	r3, r2, #32
 800033e:	4091      	lsls	r1, r2
 8000340:	fa20 f303 	lsr.w	r3, r0, r3
 8000344:	fa0c fc02 	lsl.w	ip, ip, r2
 8000348:	4319      	orrs	r1, r3
 800034a:	fa00 fe02 	lsl.w	lr, r0, r2
 800034e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000352:	fa1f f68c 	uxth.w	r6, ip
 8000356:	fbb1 f4f7 	udiv	r4, r1, r7
 800035a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035e:	fb07 1114 	mls	r1, r7, r4, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb04 f106 	mul.w	r1, r4, r6
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000376:	f080 8112 	bcs.w	800059e <__udivmoddi4+0x27e>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 810f 	bls.w	800059e <__udivmoddi4+0x27e>
 8000380:	3c02      	subs	r4, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a59      	subs	r1, r3, r1
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb1 f0f7 	udiv	r0, r1, r7
 800038e:	fb07 1110 	mls	r1, r7, r0, r1
 8000392:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000396:	fb00 f606 	mul.w	r6, r0, r6
 800039a:	429e      	cmp	r6, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x94>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80003a6:	f080 80fc 	bcs.w	80005a2 <__udivmoddi4+0x282>
 80003aa:	429e      	cmp	r6, r3
 80003ac:	f240 80f9 	bls.w	80005a2 <__udivmoddi4+0x282>
 80003b0:	4463      	add	r3, ip
 80003b2:	3802      	subs	r0, #2
 80003b4:	1b9b      	subs	r3, r3, r6
 80003b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003ba:	2100      	movs	r1, #0
 80003bc:	b11d      	cbz	r5, 80003c6 <__udivmoddi4+0xa6>
 80003be:	40d3      	lsrs	r3, r2
 80003c0:	2200      	movs	r2, #0
 80003c2:	e9c5 3200 	strd	r3, r2, [r5]
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d905      	bls.n	80003da <__udivmoddi4+0xba>
 80003ce:	b10d      	cbz	r5, 80003d4 <__udivmoddi4+0xb4>
 80003d0:	e9c5 0100 	strd	r0, r1, [r5]
 80003d4:	2100      	movs	r1, #0
 80003d6:	4608      	mov	r0, r1
 80003d8:	e7f5      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003da:	fab3 f183 	clz	r1, r3
 80003de:	2900      	cmp	r1, #0
 80003e0:	d146      	bne.n	8000470 <__udivmoddi4+0x150>
 80003e2:	42a3      	cmp	r3, r4
 80003e4:	d302      	bcc.n	80003ec <__udivmoddi4+0xcc>
 80003e6:	4290      	cmp	r0, r2
 80003e8:	f0c0 80f0 	bcc.w	80005cc <__udivmoddi4+0x2ac>
 80003ec:	1a86      	subs	r6, r0, r2
 80003ee:	eb64 0303 	sbc.w	r3, r4, r3
 80003f2:	2001      	movs	r0, #1
 80003f4:	2d00      	cmp	r5, #0
 80003f6:	d0e6      	beq.n	80003c6 <__udivmoddi4+0xa6>
 80003f8:	e9c5 6300 	strd	r6, r3, [r5]
 80003fc:	e7e3      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003fe:	2a00      	cmp	r2, #0
 8000400:	f040 8090 	bne.w	8000524 <__udivmoddi4+0x204>
 8000404:	eba1 040c 	sub.w	r4, r1, ip
 8000408:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800040c:	fa1f f78c 	uxth.w	r7, ip
 8000410:	2101      	movs	r1, #1
 8000412:	fbb4 f6f8 	udiv	r6, r4, r8
 8000416:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041a:	fb08 4416 	mls	r4, r8, r6, r4
 800041e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000422:	fb07 f006 	mul.w	r0, r7, r6
 8000426:	4298      	cmp	r0, r3
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x11c>
 800042a:	eb1c 0303 	adds.w	r3, ip, r3
 800042e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x11a>
 8000434:	4298      	cmp	r0, r3
 8000436:	f200 80cd 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 800043a:	4626      	mov	r6, r4
 800043c:	1a1c      	subs	r4, r3, r0
 800043e:	fa1f f38e 	uxth.w	r3, lr
 8000442:	fbb4 f0f8 	udiv	r0, r4, r8
 8000446:	fb08 4410 	mls	r4, r8, r0, r4
 800044a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800044e:	fb00 f707 	mul.w	r7, r0, r7
 8000452:	429f      	cmp	r7, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x148>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800045e:	d202      	bcs.n	8000466 <__udivmoddi4+0x146>
 8000460:	429f      	cmp	r7, r3
 8000462:	f200 80b0 	bhi.w	80005c6 <__udivmoddi4+0x2a6>
 8000466:	4620      	mov	r0, r4
 8000468:	1bdb      	subs	r3, r3, r7
 800046a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800046e:	e7a5      	b.n	80003bc <__udivmoddi4+0x9c>
 8000470:	f1c1 0620 	rsb	r6, r1, #32
 8000474:	408b      	lsls	r3, r1
 8000476:	fa22 f706 	lsr.w	r7, r2, r6
 800047a:	431f      	orrs	r7, r3
 800047c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000480:	fa04 f301 	lsl.w	r3, r4, r1
 8000484:	ea43 030c 	orr.w	r3, r3, ip
 8000488:	40f4      	lsrs	r4, r6
 800048a:	fa00 f801 	lsl.w	r8, r0, r1
 800048e:	0c38      	lsrs	r0, r7, #16
 8000490:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000494:	fbb4 fef0 	udiv	lr, r4, r0
 8000498:	fa1f fc87 	uxth.w	ip, r7
 800049c:	fb00 441e 	mls	r4, r0, lr, r4
 80004a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004a4:	fb0e f90c 	mul.w	r9, lr, ip
 80004a8:	45a1      	cmp	r9, r4
 80004aa:	fa02 f201 	lsl.w	r2, r2, r1
 80004ae:	d90a      	bls.n	80004c6 <__udivmoddi4+0x1a6>
 80004b0:	193c      	adds	r4, r7, r4
 80004b2:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80004b6:	f080 8084 	bcs.w	80005c2 <__udivmoddi4+0x2a2>
 80004ba:	45a1      	cmp	r9, r4
 80004bc:	f240 8081 	bls.w	80005c2 <__udivmoddi4+0x2a2>
 80004c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	eba4 0409 	sub.w	r4, r4, r9
 80004ca:	fa1f f983 	uxth.w	r9, r3
 80004ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80004d2:	fb00 4413 	mls	r4, r0, r3, r4
 80004d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004da:	fb03 fc0c 	mul.w	ip, r3, ip
 80004de:	45a4      	cmp	ip, r4
 80004e0:	d907      	bls.n	80004f2 <__udivmoddi4+0x1d2>
 80004e2:	193c      	adds	r4, r7, r4
 80004e4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80004e8:	d267      	bcs.n	80005ba <__udivmoddi4+0x29a>
 80004ea:	45a4      	cmp	ip, r4
 80004ec:	d965      	bls.n	80005ba <__udivmoddi4+0x29a>
 80004ee:	3b02      	subs	r3, #2
 80004f0:	443c      	add	r4, r7
 80004f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004f6:	fba0 9302 	umull	r9, r3, r0, r2
 80004fa:	eba4 040c 	sub.w	r4, r4, ip
 80004fe:	429c      	cmp	r4, r3
 8000500:	46ce      	mov	lr, r9
 8000502:	469c      	mov	ip, r3
 8000504:	d351      	bcc.n	80005aa <__udivmoddi4+0x28a>
 8000506:	d04e      	beq.n	80005a6 <__udivmoddi4+0x286>
 8000508:	b155      	cbz	r5, 8000520 <__udivmoddi4+0x200>
 800050a:	ebb8 030e 	subs.w	r3, r8, lr
 800050e:	eb64 040c 	sbc.w	r4, r4, ip
 8000512:	fa04 f606 	lsl.w	r6, r4, r6
 8000516:	40cb      	lsrs	r3, r1
 8000518:	431e      	orrs	r6, r3
 800051a:	40cc      	lsrs	r4, r1
 800051c:	e9c5 6400 	strd	r6, r4, [r5]
 8000520:	2100      	movs	r1, #0
 8000522:	e750      	b.n	80003c6 <__udivmoddi4+0xa6>
 8000524:	f1c2 0320 	rsb	r3, r2, #32
 8000528:	fa20 f103 	lsr.w	r1, r0, r3
 800052c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000530:	fa24 f303 	lsr.w	r3, r4, r3
 8000534:	4094      	lsls	r4, r2
 8000536:	430c      	orrs	r4, r1
 8000538:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800053c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000540:	fa1f f78c 	uxth.w	r7, ip
 8000544:	fbb3 f0f8 	udiv	r0, r3, r8
 8000548:	fb08 3110 	mls	r1, r8, r0, r3
 800054c:	0c23      	lsrs	r3, r4, #16
 800054e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000552:	fb00 f107 	mul.w	r1, r0, r7
 8000556:	4299      	cmp	r1, r3
 8000558:	d908      	bls.n	800056c <__udivmoddi4+0x24c>
 800055a:	eb1c 0303 	adds.w	r3, ip, r3
 800055e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000562:	d22c      	bcs.n	80005be <__udivmoddi4+0x29e>
 8000564:	4299      	cmp	r1, r3
 8000566:	d92a      	bls.n	80005be <__udivmoddi4+0x29e>
 8000568:	3802      	subs	r0, #2
 800056a:	4463      	add	r3, ip
 800056c:	1a5b      	subs	r3, r3, r1
 800056e:	b2a4      	uxth	r4, r4
 8000570:	fbb3 f1f8 	udiv	r1, r3, r8
 8000574:	fb08 3311 	mls	r3, r8, r1, r3
 8000578:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800057c:	fb01 f307 	mul.w	r3, r1, r7
 8000580:	42a3      	cmp	r3, r4
 8000582:	d908      	bls.n	8000596 <__udivmoddi4+0x276>
 8000584:	eb1c 0404 	adds.w	r4, ip, r4
 8000588:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800058c:	d213      	bcs.n	80005b6 <__udivmoddi4+0x296>
 800058e:	42a3      	cmp	r3, r4
 8000590:	d911      	bls.n	80005b6 <__udivmoddi4+0x296>
 8000592:	3902      	subs	r1, #2
 8000594:	4464      	add	r4, ip
 8000596:	1ae4      	subs	r4, r4, r3
 8000598:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800059c:	e739      	b.n	8000412 <__udivmoddi4+0xf2>
 800059e:	4604      	mov	r4, r0
 80005a0:	e6f0      	b.n	8000384 <__udivmoddi4+0x64>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e706      	b.n	80003b4 <__udivmoddi4+0x94>
 80005a6:	45c8      	cmp	r8, r9
 80005a8:	d2ae      	bcs.n	8000508 <__udivmoddi4+0x1e8>
 80005aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80005b2:	3801      	subs	r0, #1
 80005b4:	e7a8      	b.n	8000508 <__udivmoddi4+0x1e8>
 80005b6:	4631      	mov	r1, r6
 80005b8:	e7ed      	b.n	8000596 <__udivmoddi4+0x276>
 80005ba:	4603      	mov	r3, r0
 80005bc:	e799      	b.n	80004f2 <__udivmoddi4+0x1d2>
 80005be:	4630      	mov	r0, r6
 80005c0:	e7d4      	b.n	800056c <__udivmoddi4+0x24c>
 80005c2:	46d6      	mov	lr, sl
 80005c4:	e77f      	b.n	80004c6 <__udivmoddi4+0x1a6>
 80005c6:	4463      	add	r3, ip
 80005c8:	3802      	subs	r0, #2
 80005ca:	e74d      	b.n	8000468 <__udivmoddi4+0x148>
 80005cc:	4606      	mov	r6, r0
 80005ce:	4623      	mov	r3, r4
 80005d0:	4608      	mov	r0, r1
 80005d2:	e70f      	b.n	80003f4 <__udivmoddi4+0xd4>
 80005d4:	3e02      	subs	r6, #2
 80005d6:	4463      	add	r3, ip
 80005d8:	e730      	b.n	800043c <__udivmoddi4+0x11c>
 80005da:	bf00      	nop

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <parseData>:
//char txBuff[MAX_PAYLOAD_SIZE];
//BitOperationHandler bitOperations[MAX_BIT_OPERATIONS] = { NULL };

// Data Parsing Function
void parseData(const uint8_t *data, uint16_t length, ProtocolType tu_ip)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b084      	sub	sp, #16
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
 80005e8:	460b      	mov	r3, r1
 80005ea:	807b      	strh	r3, [r7, #2]
 80005ec:	4613      	mov	r3, r2
 80005ee:	707b      	strb	r3, [r7, #1]
    if (length < 4) {
 80005f0:	887b      	ldrh	r3, [r7, #2]
 80005f2:	2b03      	cmp	r3, #3
 80005f4:	d92b      	bls.n	800064e <parseData+0x6e>
        return;  // Invalid data length
    }

    // Parse the packet
    myPacket.timeStamp = (data[0] << 8) | data[1];
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	781b      	ldrb	r3, [r3, #0]
 80005fa:	021b      	lsls	r3, r3, #8
 80005fc:	b21a      	sxth	r2, r3
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	3301      	adds	r3, #1
 8000602:	781b      	ldrb	r3, [r3, #0]
 8000604:	b21b      	sxth	r3, r3
 8000606:	4313      	orrs	r3, r2
 8000608:	b21b      	sxth	r3, r3
 800060a:	b29a      	uxth	r2, r3
 800060c:	4b12      	ldr	r3, [pc, #72]	@ (8000658 <parseData+0x78>)
 800060e:	801a      	strh	r2, [r3, #0]
    myPacket.pID = (data[2] << 8) | data[3];
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	3302      	adds	r3, #2
 8000614:	781b      	ldrb	r3, [r3, #0]
 8000616:	021b      	lsls	r3, r3, #8
 8000618:	b21a      	sxth	r2, r3
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	3303      	adds	r3, #3
 800061e:	781b      	ldrb	r3, [r3, #0]
 8000620:	b21b      	sxth	r3, r3
 8000622:	4313      	orrs	r3, r2
 8000624:	b21b      	sxth	r3, r3
 8000626:	b29a      	uxth	r2, r3
 8000628:	4b0b      	ldr	r3, [pc, #44]	@ (8000658 <parseData+0x78>)
 800062a:	805a      	strh	r2, [r3, #2]

    uint16_t payloadSize = length - (sizeof(myPacket.pID) + sizeof(myPacket.timeStamp));
 800062c:	887b      	ldrh	r3, [r7, #2]
 800062e:	3b04      	subs	r3, #4
 8000630:	81fb      	strh	r3, [r7, #14]
    memcpy(myPacket.payload, &data[4], payloadSize);
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	3304      	adds	r3, #4
 8000636:	89fa      	ldrh	r2, [r7, #14]
 8000638:	4619      	mov	r1, r3
 800063a:	4808      	ldr	r0, [pc, #32]	@ (800065c <parseData+0x7c>)
 800063c:	f010 fffb 	bl	8011636 <memcpy>

    comProcessHandler(payloadSize - 1);
 8000640:	89fb      	ldrh	r3, [r7, #14]
 8000642:	3b01      	subs	r3, #1
 8000644:	b29b      	uxth	r3, r3
 8000646:	4618      	mov	r0, r3
 8000648:	f000 f80a 	bl	8000660 <comProcessHandler>
 800064c:	e000      	b.n	8000650 <parseData+0x70>
        return;  // Invalid data length
 800064e:	bf00      	nop
}
 8000650:	3710      	adds	r7, #16
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	20000224 	.word	0x20000224
 800065c:	20000228 	.word	0x20000228

08000660 <comProcessHandler>:

void comProcessHandler(uint16_t length)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b086      	sub	sp, #24
 8000664:	af00      	add	r7, sp, #0
 8000666:	4603      	mov	r3, r0
 8000668:	80fb      	strh	r3, [r7, #6]
	//packet->timeStamp; Karsilastirma icin kullanilacak

	/* Gelen paket doğru mu diye bakmak için Flag */
	uint8_t flag = 0;
 800066a:	2300      	movs	r3, #0
 800066c:	75fb      	strb	r3, [r7, #23]

	extern DataPacket myPacket;

	uint16_t process = myPacket.pID;
 800066e:	4b19      	ldr	r3, [pc, #100]	@ (80006d4 <comProcessHandler+0x74>)
 8000670:	885b      	ldrh	r3, [r3, #2]
 8000672:	81fb      	strh	r3, [r7, #14]

    for (int i = 0; i < 16; i++) {
 8000674:	2300      	movs	r3, #0
 8000676:	613b      	str	r3, [r7, #16]
 8000678:	e01a      	b.n	80006b0 <comProcessHandler+0x50>
        if ((process >> i) & 1){
 800067a:	89fa      	ldrh	r2, [r7, #14]
 800067c:	693b      	ldr	r3, [r7, #16]
 800067e:	fa42 f303 	asr.w	r3, r2, r3
 8000682:	f003 0301 	and.w	r3, r3, #1
 8000686:	2b00      	cmp	r3, #0
 8000688:	d00f      	beq.n	80006aa <comProcessHandler+0x4a>
            if (bitOperations[i] != NULL) {
 800068a:	4a13      	ldr	r2, [pc, #76]	@ (80006d8 <comProcessHandler+0x78>)
 800068c:	693b      	ldr	r3, [r7, #16]
 800068e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000692:	2b00      	cmp	r3, #0
 8000694:	d009      	beq.n	80006aa <comProcessHandler+0x4a>
                bitOperations[i](myPacket.payload, length);
 8000696:	4a10      	ldr	r2, [pc, #64]	@ (80006d8 <comProcessHandler+0x78>)
 8000698:	693b      	ldr	r3, [r7, #16]
 800069a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800069e:	88fa      	ldrh	r2, [r7, #6]
 80006a0:	4611      	mov	r1, r2
 80006a2:	480e      	ldr	r0, [pc, #56]	@ (80006dc <comProcessHandler+0x7c>)
 80006a4:	4798      	blx	r3
                flag = 1;
 80006a6:	2301      	movs	r3, #1
 80006a8:	75fb      	strb	r3, [r7, #23]
    for (int i = 0; i < 16; i++) {
 80006aa:	693b      	ldr	r3, [r7, #16]
 80006ac:	3301      	adds	r3, #1
 80006ae:	613b      	str	r3, [r7, #16]
 80006b0:	693b      	ldr	r3, [r7, #16]
 80006b2:	2b0f      	cmp	r3, #15
 80006b4:	dde1      	ble.n	800067a <comProcessHandler+0x1a>
            }
        }

    }
    if (flag == 0){
 80006b6:	7dfb      	ldrb	r3, [r7, #23]
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d106      	bne.n	80006ca <comProcessHandler+0x6a>
    	snprintf(ethBuf, sizeof(ethBuf), "WrongPackage");
 80006bc:	4a08      	ldr	r2, [pc, #32]	@ (80006e0 <comProcessHandler+0x80>)
 80006be:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80006c2:	4808      	ldr	r0, [pc, #32]	@ (80006e4 <comProcessHandler+0x84>)
 80006c4:	f010 fe6e 	bl	80113a4 <sniprintf>
    }
    return;
 80006c8:	bf00      	nop
 80006ca:	bf00      	nop
}
 80006cc:	3718      	adds	r7, #24
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	20000224 	.word	0x20000224
 80006d8:	20000000 	.word	0x20000000
 80006dc:	20000228 	.word	0x20000228
 80006e0:	080125cc 	.word	0x080125cc
 80006e4:	20000520 	.word	0x20000520

080006e8 <drivetrain_motorCommand>:

// Motor Command Handlers
void drivetrain_motorCommand(uint8_t* payload, uint16_t length){
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b082      	sub	sp, #8
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
 80006f0:	460b      	mov	r3, r1
 80006f2:	807b      	strh	r3, [r7, #2]
	//*(payload + 8) = "\0"; zaten burası \0
	snprintf(ethBuf, sizeof(ethBuf), "%s","drivetrain_motorCommand");
 80006f4:	4b08      	ldr	r3, [pc, #32]	@ (8000718 <drivetrain_motorCommand+0x30>)
 80006f6:	4a09      	ldr	r2, [pc, #36]	@ (800071c <drivetrain_motorCommand+0x34>)
 80006f8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80006fc:	4808      	ldr	r0, [pc, #32]	@ (8000720 <drivetrain_motorCommand+0x38>)
 80006fe:	f010 fe51 	bl	80113a4 <sniprintf>
	snprintf(txBuff, length, "%s", (char*)payload);
 8000702:	8879      	ldrh	r1, [r7, #2]
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	4a05      	ldr	r2, [pc, #20]	@ (800071c <drivetrain_motorCommand+0x34>)
 8000708:	4806      	ldr	r0, [pc, #24]	@ (8000724 <drivetrain_motorCommand+0x3c>)
 800070a:	f010 fe4b 	bl	80113a4 <sniprintf>

	/* WDT baslatilacak 200ms. Eger timestamp degismezse durma komutu	*/
	/* Her atlanılan timestamp icin de bir sayac eklenilecek			*/
	return;
 800070e:	bf00      	nop
}
 8000710:	3708      	adds	r7, #8
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	080125dc 	.word	0x080125dc
 800071c:	080125f4 	.word	0x080125f4
 8000720:	20000520 	.word	0x20000520
 8000724:	20000508 	.word	0x20000508

08000728 <roboticarm_motorCommand>:

void roboticarm_motorCommand(uint8_t* payload, uint16_t length)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b082      	sub	sp, #8
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
 8000730:	460b      	mov	r3, r1
 8000732:	807b      	strh	r3, [r7, #2]
    snprintf(ethBuf, sizeof(ethBuf), "roboticarm_motorCommand");
 8000734:	4a04      	ldr	r2, [pc, #16]	@ (8000748 <roboticarm_motorCommand+0x20>)
 8000736:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800073a:	4804      	ldr	r0, [pc, #16]	@ (800074c <roboticarm_motorCommand+0x24>)
 800073c:	f010 fe32 	bl	80113a4 <sniprintf>
}
 8000740:	bf00      	nop
 8000742:	3708      	adds	r7, #8
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}
 8000748:	080125f8 	.word	0x080125f8
 800074c:	20000520 	.word	0x20000520

08000750 <science_motorCommand>:

void science_motorCommand(uint8_t* payload, uint16_t length)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
 8000758:	460b      	mov	r3, r1
 800075a:	807b      	strh	r3, [r7, #2]
    snprintf(ethBuf, sizeof(ethBuf), "science_motorCommand");
 800075c:	4a04      	ldr	r2, [pc, #16]	@ (8000770 <science_motorCommand+0x20>)
 800075e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000762:	4804      	ldr	r0, [pc, #16]	@ (8000774 <science_motorCommand+0x24>)
 8000764:	f010 fe1e 	bl	80113a4 <sniprintf>
}
 8000768:	bf00      	nop
 800076a:	3708      	adds	r7, #8
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}
 8000770:	08012610 	.word	0x08012610
 8000774:	20000520 	.word	0x20000520

08000778 <gnssData>:

void gnssData(uint8_t* payload, uint16_t length)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b082      	sub	sp, #8
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
 8000780:	460b      	mov	r3, r1
 8000782:	807b      	strh	r3, [r7, #2]
    snprintf(ethBuf, sizeof(ethBuf), "gnssData");
 8000784:	4a04      	ldr	r2, [pc, #16]	@ (8000798 <gnssData+0x20>)
 8000786:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800078a:	4804      	ldr	r0, [pc, #16]	@ (800079c <gnssData+0x24>)
 800078c:	f010 fe0a 	bl	80113a4 <sniprintf>
}
 8000790:	bf00      	nop
 8000792:	3708      	adds	r7, #8
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	08012628 	.word	0x08012628
 800079c:	20000520 	.word	0x20000520

080007a0 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80007a4:	f3bf 8f4f 	dsb	sy
}
 80007a8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80007aa:	f3bf 8f6f 	isb	sy
}
 80007ae:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80007b0:	4b0d      	ldr	r3, [pc, #52]	@ (80007e8 <SCB_EnableICache+0x48>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80007b8:	f3bf 8f4f 	dsb	sy
}
 80007bc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80007be:	f3bf 8f6f 	isb	sy
}
 80007c2:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80007c4:	4b08      	ldr	r3, [pc, #32]	@ (80007e8 <SCB_EnableICache+0x48>)
 80007c6:	695b      	ldr	r3, [r3, #20]
 80007c8:	4a07      	ldr	r2, [pc, #28]	@ (80007e8 <SCB_EnableICache+0x48>)
 80007ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80007ce:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80007d0:	f3bf 8f4f 	dsb	sy
}
 80007d4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80007d6:	f3bf 8f6f 	isb	sy
}
 80007da:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 80007dc:	bf00      	nop
 80007de:	46bd      	mov	sp, r7
 80007e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e4:	4770      	bx	lr
 80007e6:	bf00      	nop
 80007e8:	e000ed00 	.word	0xe000ed00

080007ec <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	b085      	sub	sp, #20
 80007f0:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 80007f2:	4b1f      	ldr	r3, [pc, #124]	@ (8000870 <SCB_EnableDCache+0x84>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80007fa:	f3bf 8f4f 	dsb	sy
}
 80007fe:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000800:	4b1b      	ldr	r3, [pc, #108]	@ (8000870 <SCB_EnableDCache+0x84>)
 8000802:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000806:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	0b5b      	lsrs	r3, r3, #13
 800080c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000810:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	08db      	lsrs	r3, r3, #3
 8000816:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800081a:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800081c:	68fb      	ldr	r3, [r7, #12]
 800081e:	015a      	lsls	r2, r3, #5
 8000820:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8000824:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000826:	68ba      	ldr	r2, [r7, #8]
 8000828:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800082a:	4911      	ldr	r1, [pc, #68]	@ (8000870 <SCB_EnableDCache+0x84>)
 800082c:	4313      	orrs	r3, r2
 800082e:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000832:	68bb      	ldr	r3, [r7, #8]
 8000834:	1e5a      	subs	r2, r3, #1
 8000836:	60ba      	str	r2, [r7, #8]
 8000838:	2b00      	cmp	r3, #0
 800083a:	d1ef      	bne.n	800081c <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 800083c:	68fb      	ldr	r3, [r7, #12]
 800083e:	1e5a      	subs	r2, r3, #1
 8000840:	60fa      	str	r2, [r7, #12]
 8000842:	2b00      	cmp	r3, #0
 8000844:	d1e5      	bne.n	8000812 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8000846:	f3bf 8f4f 	dsb	sy
}
 800084a:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800084c:	4b08      	ldr	r3, [pc, #32]	@ (8000870 <SCB_EnableDCache+0x84>)
 800084e:	695b      	ldr	r3, [r3, #20]
 8000850:	4a07      	ldr	r2, [pc, #28]	@ (8000870 <SCB_EnableDCache+0x84>)
 8000852:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000856:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000858:	f3bf 8f4f 	dsb	sy
}
 800085c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800085e:	f3bf 8f6f 	isb	sy
}
 8000862:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8000864:	bf00      	nop
 8000866:	3714      	adds	r7, #20
 8000868:	46bd      	mov	sp, r7
 800086a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086e:	4770      	bx	lr
 8000870:	e000ed00 	.word	0xe000ed00

08000874 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8000878:	f7ff ff92 	bl	80007a0 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 800087c:	f7ff ffb6 	bl	80007ec <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000880:	f001 f9dc 	bl	8001c3c <HAL_Init>

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000884:	f000 fa86 	bl	8000d94 <MPU_Config>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000888:	f000 f830 	bl	80008ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800088c:	f000 f9ae 	bl	8000bec <MX_GPIO_Init>
  MX_DMA_Init();
 8000890:	f000 f986 	bl	8000ba0 <MX_DMA_Init>
  MX_TIM1_Init();
 8000894:	f000 f8f8 	bl	8000a88 <MX_TIM1_Init>
  MX_SPI2_Init();
 8000898:	f000 f8b8 	bl	8000a0c <MX_SPI2_Init>
  MX_LWIP_Init();
 800089c:	f004 ff38 	bl	8005710 <MX_LWIP_Init>
  MX_TIM6_Init();
 80008a0:	f000 f946 	bl	8000b30 <MX_TIM6_Init>
  MX_CRC_Init();
 80008a4:	f000 f890 	bl	80009c8 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */
  //udpServer_init();
  udpClient_connect();
 80008a8:	f000 ffe4 	bl	8001874 <udpClient_connect>
  tcp_server_init();
 80008ac:	f000 fd30 	bl	8001310 <tcp_server_init>
  //HAL_TIM_Base_Start_IT(&htim1);
  HAL_TIM_Base_Start_IT(&htim6);
 80008b0:	480a      	ldr	r0, [pc, #40]	@ (80008dc <main+0x68>)
 80008b2:	f004 fabf 	bl	8004e34 <HAL_TIM_Base_Start_IT>
  HAL_GPIO_WritePin(GPIOA, NSS_2_Pin, GPIO_PIN_SET);
 80008b6:	2201      	movs	r2, #1
 80008b8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80008bc:	4808      	ldr	r0, [pc, #32]	@ (80008e0 <main+0x6c>)
 80008be:	f003 fc89 	bl	80041d4 <HAL_GPIO_WritePin>

  //udpClient_connect();
  txBuff[20] = HAL_CRC_Calculate(&hcrc, txBuff, sizeof(txBuff)-CRC_TYPE);
 80008c2:	2214      	movs	r2, #20
 80008c4:	4907      	ldr	r1, [pc, #28]	@ (80008e4 <main+0x70>)
 80008c6:	4808      	ldr	r0, [pc, #32]	@ (80008e8 <main+0x74>)
 80008c8:	f001 fc36 	bl	8002138 <HAL_CRC_Calculate>
 80008cc:	4603      	mov	r3, r0
 80008ce:	b2da      	uxtb	r2, r3
 80008d0:	4b04      	ldr	r3, [pc, #16]	@ (80008e4 <main+0x70>)
 80008d2:	751a      	strb	r2, [r3, #20]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  MX_LWIP_Process();
 80008d4:	f005 f868 	bl	80059a8 <MX_LWIP_Process>
 80008d8:	e7fc      	b.n	80008d4 <main+0x60>
 80008da:	bf00      	nop
 80008dc:	200004bc 	.word	0x200004bc
 80008e0:	40020000 	.word	0x40020000
 80008e4:	20000508 	.word	0x20000508
 80008e8:	20000328 	.word	0x20000328

080008ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b094      	sub	sp, #80	@ 0x50
 80008f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008f2:	f107 031c 	add.w	r3, r7, #28
 80008f6:	2234      	movs	r2, #52	@ 0x34
 80008f8:	2100      	movs	r1, #0
 80008fa:	4618      	mov	r0, r3
 80008fc:	f010 fe13 	bl	8011526 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000900:	f107 0308 	add.w	r3, r7, #8
 8000904:	2200      	movs	r2, #0
 8000906:	601a      	str	r2, [r3, #0]
 8000908:	605a      	str	r2, [r3, #4]
 800090a:	609a      	str	r2, [r3, #8]
 800090c:	60da      	str	r2, [r3, #12]
 800090e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000910:	4b2b      	ldr	r3, [pc, #172]	@ (80009c0 <SystemClock_Config+0xd4>)
 8000912:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000914:	4a2a      	ldr	r2, [pc, #168]	@ (80009c0 <SystemClock_Config+0xd4>)
 8000916:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800091a:	6413      	str	r3, [r2, #64]	@ 0x40
 800091c:	4b28      	ldr	r3, [pc, #160]	@ (80009c0 <SystemClock_Config+0xd4>)
 800091e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000920:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000924:	607b      	str	r3, [r7, #4]
 8000926:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000928:	4b26      	ldr	r3, [pc, #152]	@ (80009c4 <SystemClock_Config+0xd8>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	4a25      	ldr	r2, [pc, #148]	@ (80009c4 <SystemClock_Config+0xd8>)
 800092e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000932:	6013      	str	r3, [r2, #0]
 8000934:	4b23      	ldr	r3, [pc, #140]	@ (80009c4 <SystemClock_Config+0xd8>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800093c:	603b      	str	r3, [r7, #0]
 800093e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000940:	2301      	movs	r3, #1
 8000942:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000944:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000948:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800094a:	2302      	movs	r3, #2
 800094c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800094e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000952:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000954:	2308      	movs	r3, #8
 8000956:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000958:	23d8      	movs	r3, #216	@ 0xd8
 800095a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800095c:	2302      	movs	r3, #2
 800095e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000960:	2302      	movs	r3, #2
 8000962:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000964:	2302      	movs	r3, #2
 8000966:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000968:	f107 031c 	add.w	r3, r7, #28
 800096c:	4618      	mov	r0, r3
 800096e:	f003 fcb5 	bl	80042dc <HAL_RCC_OscConfig>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d001      	beq.n	800097c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000978:	f000 fa3a 	bl	8000df0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800097c:	f003 fc5e 	bl	800423c <HAL_PWREx_EnableOverDrive>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000986:	f000 fa33 	bl	8000df0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800098a:	230f      	movs	r3, #15
 800098c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800098e:	2302      	movs	r3, #2
 8000990:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000992:	2300      	movs	r3, #0
 8000994:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000996:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800099a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800099c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009a0:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80009a2:	f107 0308 	add.w	r3, r7, #8
 80009a6:	2107      	movs	r1, #7
 80009a8:	4618      	mov	r0, r3
 80009aa:	f003 ff45 	bl	8004838 <HAL_RCC_ClockConfig>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d001      	beq.n	80009b8 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 80009b4:	f000 fa1c 	bl	8000df0 <Error_Handler>
  }
}
 80009b8:	bf00      	nop
 80009ba:	3750      	adds	r7, #80	@ 0x50
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	40023800 	.word	0x40023800
 80009c4:	40007000 	.word	0x40007000

080009c8 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80009cc:	4b0d      	ldr	r3, [pc, #52]	@ (8000a04 <MX_CRC_Init+0x3c>)
 80009ce:	4a0e      	ldr	r2, [pc, #56]	@ (8000a08 <MX_CRC_Init+0x40>)
 80009d0:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80009d2:	4b0c      	ldr	r3, [pc, #48]	@ (8000a04 <MX_CRC_Init+0x3c>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80009d8:	4b0a      	ldr	r3, [pc, #40]	@ (8000a04 <MX_CRC_Init+0x3c>)
 80009da:	2200      	movs	r2, #0
 80009dc:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80009de:	4b09      	ldr	r3, [pc, #36]	@ (8000a04 <MX_CRC_Init+0x3c>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80009e4:	4b07      	ldr	r3, [pc, #28]	@ (8000a04 <MX_CRC_Init+0x3c>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80009ea:	4b06      	ldr	r3, [pc, #24]	@ (8000a04 <MX_CRC_Init+0x3c>)
 80009ec:	2201      	movs	r2, #1
 80009ee:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80009f0:	4804      	ldr	r0, [pc, #16]	@ (8000a04 <MX_CRC_Init+0x3c>)
 80009f2:	f001 fb3d 	bl	8002070 <HAL_CRC_Init>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80009fc:	f000 f9f8 	bl	8000df0 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000a00:	bf00      	nop
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	20000328 	.word	0x20000328
 8000a08:	40023000 	.word	0x40023000

08000a0c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000a10:	4b1b      	ldr	r3, [pc, #108]	@ (8000a80 <MX_SPI2_Init+0x74>)
 8000a12:	4a1c      	ldr	r2, [pc, #112]	@ (8000a84 <MX_SPI2_Init+0x78>)
 8000a14:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000a16:	4b1a      	ldr	r3, [pc, #104]	@ (8000a80 <MX_SPI2_Init+0x74>)
 8000a18:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000a1c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000a1e:	4b18      	ldr	r3, [pc, #96]	@ (8000a80 <MX_SPI2_Init+0x74>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a24:	4b16      	ldr	r3, [pc, #88]	@ (8000a80 <MX_SPI2_Init+0x74>)
 8000a26:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000a2a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a2c:	4b14      	ldr	r3, [pc, #80]	@ (8000a80 <MX_SPI2_Init+0x74>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a32:	4b13      	ldr	r3, [pc, #76]	@ (8000a80 <MX_SPI2_Init+0x74>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000a38:	4b11      	ldr	r3, [pc, #68]	@ (8000a80 <MX_SPI2_Init+0x74>)
 8000a3a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000a3e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000a40:	4b0f      	ldr	r3, [pc, #60]	@ (8000a80 <MX_SPI2_Init+0x74>)
 8000a42:	2208      	movs	r2, #8
 8000a44:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a46:	4b0e      	ldr	r3, [pc, #56]	@ (8000a80 <MX_SPI2_Init+0x74>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a4c:	4b0c      	ldr	r3, [pc, #48]	@ (8000a80 <MX_SPI2_Init+0x74>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a52:	4b0b      	ldr	r3, [pc, #44]	@ (8000a80 <MX_SPI2_Init+0x74>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000a58:	4b09      	ldr	r3, [pc, #36]	@ (8000a80 <MX_SPI2_Init+0x74>)
 8000a5a:	2207      	movs	r2, #7
 8000a5c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000a5e:	4b08      	ldr	r3, [pc, #32]	@ (8000a80 <MX_SPI2_Init+0x74>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000a64:	4b06      	ldr	r3, [pc, #24]	@ (8000a80 <MX_SPI2_Init+0x74>)
 8000a66:	2208      	movs	r2, #8
 8000a68:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000a6a:	4805      	ldr	r0, [pc, #20]	@ (8000a80 <MX_SPI2_Init+0x74>)
 8000a6c:	f004 f8e0 	bl	8004c30 <HAL_SPI_Init>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d001      	beq.n	8000a7a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000a76:	f000 f9bb 	bl	8000df0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000a7a:	bf00      	nop
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	2000034c 	.word	0x2000034c
 8000a84:	40003800 	.word	0x40003800

08000a88 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b088      	sub	sp, #32
 8000a8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a8e:	f107 0310 	add.w	r3, r7, #16
 8000a92:	2200      	movs	r2, #0
 8000a94:	601a      	str	r2, [r3, #0]
 8000a96:	605a      	str	r2, [r3, #4]
 8000a98:	609a      	str	r2, [r3, #8]
 8000a9a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a9c:	1d3b      	adds	r3, r7, #4
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	601a      	str	r2, [r3, #0]
 8000aa2:	605a      	str	r2, [r3, #4]
 8000aa4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000aa6:	4b20      	ldr	r3, [pc, #128]	@ (8000b28 <MX_TIM1_Init+0xa0>)
 8000aa8:	4a20      	ldr	r2, [pc, #128]	@ (8000b2c <MX_TIM1_Init+0xa4>)
 8000aaa:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 12000;
 8000aac:	4b1e      	ldr	r3, [pc, #120]	@ (8000b28 <MX_TIM1_Init+0xa0>)
 8000aae:	f642 62e0 	movw	r2, #12000	@ 0x2ee0
 8000ab2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ab4:	4b1c      	ldr	r3, [pc, #112]	@ (8000b28 <MX_TIM1_Init+0xa0>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000;
 8000aba:	4b1b      	ldr	r3, [pc, #108]	@ (8000b28 <MX_TIM1_Init+0xa0>)
 8000abc:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000ac0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ac2:	4b19      	ldr	r3, [pc, #100]	@ (8000b28 <MX_TIM1_Init+0xa0>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000ac8:	4b17      	ldr	r3, [pc, #92]	@ (8000b28 <MX_TIM1_Init+0xa0>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ace:	4b16      	ldr	r3, [pc, #88]	@ (8000b28 <MX_TIM1_Init+0xa0>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000ad4:	4814      	ldr	r0, [pc, #80]	@ (8000b28 <MX_TIM1_Init+0xa0>)
 8000ad6:	f004 f956 	bl	8004d86 <HAL_TIM_Base_Init>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d001      	beq.n	8000ae4 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 8000ae0:	f000 f986 	bl	8000df0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ae4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ae8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000aea:	f107 0310 	add.w	r3, r7, #16
 8000aee:	4619      	mov	r1, r3
 8000af0:	480d      	ldr	r0, [pc, #52]	@ (8000b28 <MX_TIM1_Init+0xa0>)
 8000af2:	f004 fb1f 	bl	8005134 <HAL_TIM_ConfigClockSource>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000afc:	f000 f978 	bl	8000df0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b00:	2300      	movs	r3, #0
 8000b02:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000b04:	2300      	movs	r3, #0
 8000b06:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b0c:	1d3b      	adds	r3, r7, #4
 8000b0e:	4619      	mov	r1, r3
 8000b10:	4805      	ldr	r0, [pc, #20]	@ (8000b28 <MX_TIM1_Init+0xa0>)
 8000b12:	f004 fd51 	bl	80055b8 <HAL_TIMEx_MasterConfigSynchronization>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d001      	beq.n	8000b20 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000b1c:	f000 f968 	bl	8000df0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000b20:	bf00      	nop
 8000b22:	3720      	adds	r7, #32
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	20000470 	.word	0x20000470
 8000b2c:	40010000 	.word	0x40010000

08000b30 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b084      	sub	sp, #16
 8000b34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b36:	1d3b      	adds	r3, r7, #4
 8000b38:	2200      	movs	r2, #0
 8000b3a:	601a      	str	r2, [r3, #0]
 8000b3c:	605a      	str	r2, [r3, #4]
 8000b3e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000b40:	4b15      	ldr	r3, [pc, #84]	@ (8000b98 <MX_TIM6_Init+0x68>)
 8000b42:	4a16      	ldr	r2, [pc, #88]	@ (8000b9c <MX_TIM6_Init+0x6c>)
 8000b44:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 4160-1;
 8000b46:	4b14      	ldr	r3, [pc, #80]	@ (8000b98 <MX_TIM6_Init+0x68>)
 8000b48:	f241 023f 	movw	r2, #4159	@ 0x103f
 8000b4c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b4e:	4b12      	ldr	r3, [pc, #72]	@ (8000b98 <MX_TIM6_Init+0x68>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 5000-1;
 8000b54:	4b10      	ldr	r3, [pc, #64]	@ (8000b98 <MX_TIM6_Init+0x68>)
 8000b56:	f241 3287 	movw	r2, #4999	@ 0x1387
 8000b5a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b5c:	4b0e      	ldr	r3, [pc, #56]	@ (8000b98 <MX_TIM6_Init+0x68>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000b62:	480d      	ldr	r0, [pc, #52]	@ (8000b98 <MX_TIM6_Init+0x68>)
 8000b64:	f004 f90f 	bl	8004d86 <HAL_TIM_Base_Init>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d001      	beq.n	8000b72 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8000b6e:	f000 f93f 	bl	8000df0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b72:	2300      	movs	r3, #0
 8000b74:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b76:	2300      	movs	r3, #0
 8000b78:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000b7a:	1d3b      	adds	r3, r7, #4
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	4806      	ldr	r0, [pc, #24]	@ (8000b98 <MX_TIM6_Init+0x68>)
 8000b80:	f004 fd1a 	bl	80055b8 <HAL_TIMEx_MasterConfigSynchronization>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d001      	beq.n	8000b8e <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8000b8a:	f000 f931 	bl	8000df0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000b8e:	bf00      	nop
 8000b90:	3710      	adds	r7, #16
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	200004bc 	.word	0x200004bc
 8000b9c:	40001000 	.word	0x40001000

08000ba0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b082      	sub	sp, #8
 8000ba4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ba6:	4b10      	ldr	r3, [pc, #64]	@ (8000be8 <MX_DMA_Init+0x48>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000baa:	4a0f      	ldr	r2, [pc, #60]	@ (8000be8 <MX_DMA_Init+0x48>)
 8000bac:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000bb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bb2:	4b0d      	ldr	r3, [pc, #52]	@ (8000be8 <MX_DMA_Init+0x48>)
 8000bb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bb6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000bba:	607b      	str	r3, [r7, #4]
 8000bbc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 2, 0);
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	2102      	movs	r1, #2
 8000bc2:	200c      	movs	r0, #12
 8000bc4:	f001 f9a5 	bl	8001f12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000bc8:	200c      	movs	r0, #12
 8000bca:	f001 f9be 	bl	8001f4a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 2, 0);
 8000bce:	2200      	movs	r2, #0
 8000bd0:	2102      	movs	r1, #2
 8000bd2:	200f      	movs	r0, #15
 8000bd4:	f001 f99d 	bl	8001f12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000bd8:	200f      	movs	r0, #15
 8000bda:	f001 f9b6 	bl	8001f4a <HAL_NVIC_EnableIRQ>

}
 8000bde:	bf00      	nop
 8000be0:	3708      	adds	r7, #8
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	40023800 	.word	0x40023800

08000bec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b08c      	sub	sp, #48	@ 0x30
 8000bf0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf2:	f107 031c 	add.w	r3, r7, #28
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	601a      	str	r2, [r3, #0]
 8000bfa:	605a      	str	r2, [r3, #4]
 8000bfc:	609a      	str	r2, [r3, #8]
 8000bfe:	60da      	str	r2, [r3, #12]
 8000c00:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c02:	4b5e      	ldr	r3, [pc, #376]	@ (8000d7c <MX_GPIO_Init+0x190>)
 8000c04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c06:	4a5d      	ldr	r2, [pc, #372]	@ (8000d7c <MX_GPIO_Init+0x190>)
 8000c08:	f043 0304 	orr.w	r3, r3, #4
 8000c0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c0e:	4b5b      	ldr	r3, [pc, #364]	@ (8000d7c <MX_GPIO_Init+0x190>)
 8000c10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c12:	f003 0304 	and.w	r3, r3, #4
 8000c16:	61bb      	str	r3, [r7, #24]
 8000c18:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c1a:	4b58      	ldr	r3, [pc, #352]	@ (8000d7c <MX_GPIO_Init+0x190>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c1e:	4a57      	ldr	r2, [pc, #348]	@ (8000d7c <MX_GPIO_Init+0x190>)
 8000c20:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c24:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c26:	4b55      	ldr	r3, [pc, #340]	@ (8000d7c <MX_GPIO_Init+0x190>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c2e:	617b      	str	r3, [r7, #20]
 8000c30:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c32:	4b52      	ldr	r3, [pc, #328]	@ (8000d7c <MX_GPIO_Init+0x190>)
 8000c34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c36:	4a51      	ldr	r2, [pc, #324]	@ (8000d7c <MX_GPIO_Init+0x190>)
 8000c38:	f043 0301 	orr.w	r3, r3, #1
 8000c3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c3e:	4b4f      	ldr	r3, [pc, #316]	@ (8000d7c <MX_GPIO_Init+0x190>)
 8000c40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c42:	f003 0301 	and.w	r3, r3, #1
 8000c46:	613b      	str	r3, [r7, #16]
 8000c48:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c4a:	4b4c      	ldr	r3, [pc, #304]	@ (8000d7c <MX_GPIO_Init+0x190>)
 8000c4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c4e:	4a4b      	ldr	r2, [pc, #300]	@ (8000d7c <MX_GPIO_Init+0x190>)
 8000c50:	f043 0302 	orr.w	r3, r3, #2
 8000c54:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c56:	4b49      	ldr	r3, [pc, #292]	@ (8000d7c <MX_GPIO_Init+0x190>)
 8000c58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c5a:	f003 0302 	and.w	r3, r3, #2
 8000c5e:	60fb      	str	r3, [r7, #12]
 8000c60:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c62:	4b46      	ldr	r3, [pc, #280]	@ (8000d7c <MX_GPIO_Init+0x190>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c66:	4a45      	ldr	r2, [pc, #276]	@ (8000d7c <MX_GPIO_Init+0x190>)
 8000c68:	f043 0308 	orr.w	r3, r3, #8
 8000c6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c6e:	4b43      	ldr	r3, [pc, #268]	@ (8000d7c <MX_GPIO_Init+0x190>)
 8000c70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c72:	f003 0308 	and.w	r3, r3, #8
 8000c76:	60bb      	str	r3, [r7, #8]
 8000c78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c7a:	4b40      	ldr	r3, [pc, #256]	@ (8000d7c <MX_GPIO_Init+0x190>)
 8000c7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c7e:	4a3f      	ldr	r2, [pc, #252]	@ (8000d7c <MX_GPIO_Init+0x190>)
 8000c80:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000c84:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c86:	4b3d      	ldr	r3, [pc, #244]	@ (8000d7c <MX_GPIO_Init+0x190>)
 8000c88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000c8e:	607b      	str	r3, [r7, #4]
 8000c90:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|NSS_2_Pin|LD3_Pin|LD2_Pin
 8000c92:	2200      	movs	r2, #0
 8000c94:	f245 2181 	movw	r1, #21121	@ 0x5281
 8000c98:	4839      	ldr	r0, [pc, #228]	@ (8000d80 <MX_GPIO_Init+0x194>)
 8000c9a:	f003 fa9b 	bl	80041d4 <HAL_GPIO_WritePin>
                          |NSS_1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	2140      	movs	r1, #64	@ 0x40
 8000ca2:	4838      	ldr	r0, [pc, #224]	@ (8000d84 <MX_GPIO_Init+0x198>)
 8000ca4:	f003 fa96 	bl	80041d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000ca8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000cac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000cae:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000cb2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000cb8:	f107 031c 	add.w	r3, r7, #28
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	4832      	ldr	r0, [pc, #200]	@ (8000d88 <MX_GPIO_Init+0x19c>)
 8000cc0:	f003 f8dc 	bl	8003e7c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin NSS_2_Pin LD3_Pin LD2_Pin
                           NSS_1_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|NSS_2_Pin|LD3_Pin|LD2_Pin
 8000cc4:	f245 2381 	movw	r3, #21121	@ 0x5281
 8000cc8:	61fb      	str	r3, [r7, #28]
                          |NSS_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cca:	2301      	movs	r3, #1
 8000ccc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cd6:	f107 031c 	add.w	r3, r7, #28
 8000cda:	4619      	mov	r1, r3
 8000cdc:	4828      	ldr	r0, [pc, #160]	@ (8000d80 <MX_GPIO_Init+0x194>)
 8000cde:	f003 f8cd 	bl	8003e7c <HAL_GPIO_Init>

  /*Configure GPIO pins : STLK_RX_Pin STLK_TX_Pin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000ce2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000ce6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce8:	2302      	movs	r3, #2
 8000cea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cec:	2300      	movs	r3, #0
 8000cee:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cf0:	2303      	movs	r3, #3
 8000cf2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000cf4:	2307      	movs	r3, #7
 8000cf6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cf8:	f107 031c 	add.w	r3, r7, #28
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	4823      	ldr	r0, [pc, #140]	@ (8000d8c <MX_GPIO_Init+0x1a0>)
 8000d00:	f003 f8bc 	bl	8003e7c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000d04:	2340      	movs	r3, #64	@ 0x40
 8000d06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d08:	2301      	movs	r3, #1
 8000d0a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d10:	2300      	movs	r3, #0
 8000d12:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000d14:	f107 031c 	add.w	r3, r7, #28
 8000d18:	4619      	mov	r1, r3
 8000d1a:	481a      	ldr	r0, [pc, #104]	@ (8000d84 <MX_GPIO_Init+0x198>)
 8000d1c:	f003 f8ae 	bl	8003e7c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000d20:	2380      	movs	r3, #128	@ 0x80
 8000d22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d24:	2300      	movs	r3, #0
 8000d26:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000d2c:	f107 031c 	add.w	r3, r7, #28
 8000d30:	4619      	mov	r1, r3
 8000d32:	4814      	ldr	r0, [pc, #80]	@ (8000d84 <MX_GPIO_Init+0x198>)
 8000d34:	f003 f8a2 	bl	8003e7c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000d38:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8000d3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d3e:	2302      	movs	r3, #2
 8000d40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d42:	2300      	movs	r3, #0
 8000d44:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d46:	2303      	movs	r3, #3
 8000d48:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000d4a:	230a      	movs	r3, #10
 8000d4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d4e:	f107 031c 	add.w	r3, r7, #28
 8000d52:	4619      	mov	r1, r3
 8000d54:	480e      	ldr	r0, [pc, #56]	@ (8000d90 <MX_GPIO_Init+0x1a4>)
 8000d56:	f003 f891 	bl	8003e7c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000d5a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000d5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d60:	2300      	movs	r3, #0
 8000d62:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d64:	2300      	movs	r3, #0
 8000d66:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000d68:	f107 031c 	add.w	r3, r7, #28
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	4808      	ldr	r0, [pc, #32]	@ (8000d90 <MX_GPIO_Init+0x1a4>)
 8000d70:	f003 f884 	bl	8003e7c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d74:	bf00      	nop
 8000d76:	3730      	adds	r7, #48	@ 0x30
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	40023800 	.word	0x40023800
 8000d80:	40020400 	.word	0x40020400
 8000d84:	40021800 	.word	0x40021800
 8000d88:	40020800 	.word	0x40020800
 8000d8c:	40020c00 	.word	0x40020c00
 8000d90:	40020000 	.word	0x40020000

08000d94 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b084      	sub	sp, #16
 8000d98:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000d9a:	463b      	mov	r3, r7
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	601a      	str	r2, [r3, #0]
 8000da0:	605a      	str	r2, [r3, #4]
 8000da2:	609a      	str	r2, [r3, #8]
 8000da4:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000da6:	f001 f8eb 	bl	8001f80 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000daa:	2301      	movs	r3, #1
 8000dac:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000dae:	2300      	movs	r3, #0
 8000db0:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x20040000;
 8000db2:	4b0e      	ldr	r3, [pc, #56]	@ (8000dec <MPU_Config+0x58>)
 8000db4:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_16KB;
 8000db6:	230d      	movs	r3, #13
 8000db8:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8000dce:	2301      	movs	r3, #1
 8000dd0:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000dd6:	463b      	mov	r3, r7
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f001 f909 	bl	8001ff0 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000dde:	2004      	movs	r0, #4
 8000de0:	f001 f8e6 	bl	8001fb0 <HAL_MPU_Enable>

}
 8000de4:	bf00      	nop
 8000de6:	3710      	adds	r7, #16
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	20040000 	.word	0x20040000

08000df0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000df4:	b672      	cpsid	i
}
 8000df6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000df8:	bf00      	nop
 8000dfa:	e7fd      	b.n	8000df8 <Error_Handler+0x8>

08000dfc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b083      	sub	sp, #12
 8000e00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000e02:	4b0f      	ldr	r3, [pc, #60]	@ (8000e40 <HAL_MspInit+0x44>)
 8000e04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e06:	4a0e      	ldr	r2, [pc, #56]	@ (8000e40 <HAL_MspInit+0x44>)
 8000e08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e0c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e0e:	4b0c      	ldr	r3, [pc, #48]	@ (8000e40 <HAL_MspInit+0x44>)
 8000e10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e16:	607b      	str	r3, [r7, #4]
 8000e18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e1a:	4b09      	ldr	r3, [pc, #36]	@ (8000e40 <HAL_MspInit+0x44>)
 8000e1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e1e:	4a08      	ldr	r2, [pc, #32]	@ (8000e40 <HAL_MspInit+0x44>)
 8000e20:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e24:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e26:	4b06      	ldr	r3, [pc, #24]	@ (8000e40 <HAL_MspInit+0x44>)
 8000e28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e2a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e2e:	603b      	str	r3, [r7, #0]
 8000e30:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e32:	bf00      	nop
 8000e34:	370c      	adds	r7, #12
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop
 8000e40:	40023800 	.word	0x40023800

08000e44 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b085      	sub	sp, #20
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4a0a      	ldr	r2, [pc, #40]	@ (8000e7c <HAL_CRC_MspInit+0x38>)
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d10b      	bne.n	8000e6e <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000e56:	4b0a      	ldr	r3, [pc, #40]	@ (8000e80 <HAL_CRC_MspInit+0x3c>)
 8000e58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e5a:	4a09      	ldr	r2, [pc, #36]	@ (8000e80 <HAL_CRC_MspInit+0x3c>)
 8000e5c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000e60:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e62:	4b07      	ldr	r3, [pc, #28]	@ (8000e80 <HAL_CRC_MspInit+0x3c>)
 8000e64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e66:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000e6a:	60fb      	str	r3, [r7, #12]
 8000e6c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000e6e:	bf00      	nop
 8000e70:	3714      	adds	r7, #20
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop
 8000e7c:	40023000 	.word	0x40023000
 8000e80:	40023800 	.word	0x40023800

08000e84 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b08a      	sub	sp, #40	@ 0x28
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e8c:	f107 0314 	add.w	r3, r7, #20
 8000e90:	2200      	movs	r2, #0
 8000e92:	601a      	str	r2, [r3, #0]
 8000e94:	605a      	str	r2, [r3, #4]
 8000e96:	609a      	str	r2, [r3, #8]
 8000e98:	60da      	str	r2, [r3, #12]
 8000e9a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4a53      	ldr	r2, [pc, #332]	@ (8000ff0 <HAL_SPI_MspInit+0x16c>)
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	f040 809f 	bne.w	8000fe6 <HAL_SPI_MspInit+0x162>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000ea8:	4b52      	ldr	r3, [pc, #328]	@ (8000ff4 <HAL_SPI_MspInit+0x170>)
 8000eaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eac:	4a51      	ldr	r2, [pc, #324]	@ (8000ff4 <HAL_SPI_MspInit+0x170>)
 8000eae:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000eb2:	6413      	str	r3, [r2, #64]	@ 0x40
 8000eb4:	4b4f      	ldr	r3, [pc, #316]	@ (8000ff4 <HAL_SPI_MspInit+0x170>)
 8000eb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eb8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ebc:	613b      	str	r3, [r7, #16]
 8000ebe:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ec0:	4b4c      	ldr	r3, [pc, #304]	@ (8000ff4 <HAL_SPI_MspInit+0x170>)
 8000ec2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ec4:	4a4b      	ldr	r2, [pc, #300]	@ (8000ff4 <HAL_SPI_MspInit+0x170>)
 8000ec6:	f043 0304 	orr.w	r3, r3, #4
 8000eca:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ecc:	4b49      	ldr	r3, [pc, #292]	@ (8000ff4 <HAL_SPI_MspInit+0x170>)
 8000ece:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ed0:	f003 0304 	and.w	r3, r3, #4
 8000ed4:	60fb      	str	r3, [r7, #12]
 8000ed6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ed8:	4b46      	ldr	r3, [pc, #280]	@ (8000ff4 <HAL_SPI_MspInit+0x170>)
 8000eda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000edc:	4a45      	ldr	r2, [pc, #276]	@ (8000ff4 <HAL_SPI_MspInit+0x170>)
 8000ede:	f043 0308 	orr.w	r3, r3, #8
 8000ee2:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ee4:	4b43      	ldr	r3, [pc, #268]	@ (8000ff4 <HAL_SPI_MspInit+0x170>)
 8000ee6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ee8:	f003 0308 	and.w	r3, r3, #8
 8000eec:	60bb      	str	r3, [r7, #8]
 8000eee:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PD3     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000ef0:	230c      	movs	r3, #12
 8000ef2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef4:	2302      	movs	r3, #2
 8000ef6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000efc:	2303      	movs	r3, #3
 8000efe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000f00:	2305      	movs	r3, #5
 8000f02:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f04:	f107 0314 	add.w	r3, r7, #20
 8000f08:	4619      	mov	r1, r3
 8000f0a:	483b      	ldr	r0, [pc, #236]	@ (8000ff8 <HAL_SPI_MspInit+0x174>)
 8000f0c:	f002 ffb6 	bl	8003e7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000f10:	2308      	movs	r3, #8
 8000f12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f14:	2302      	movs	r3, #2
 8000f16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f1c:	2303      	movs	r3, #3
 8000f1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000f20:	2305      	movs	r3, #5
 8000f22:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f24:	f107 0314 	add.w	r3, r7, #20
 8000f28:	4619      	mov	r1, r3
 8000f2a:	4834      	ldr	r0, [pc, #208]	@ (8000ffc <HAL_SPI_MspInit+0x178>)
 8000f2c:	f002 ffa6 	bl	8003e7c <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8000f30:	4b33      	ldr	r3, [pc, #204]	@ (8001000 <HAL_SPI_MspInit+0x17c>)
 8000f32:	4a34      	ldr	r2, [pc, #208]	@ (8001004 <HAL_SPI_MspInit+0x180>)
 8000f34:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8000f36:	4b32      	ldr	r3, [pc, #200]	@ (8001000 <HAL_SPI_MspInit+0x17c>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000f3c:	4b30      	ldr	r3, [pc, #192]	@ (8001000 <HAL_SPI_MspInit+0x17c>)
 8000f3e:	2240      	movs	r2, #64	@ 0x40
 8000f40:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f42:	4b2f      	ldr	r3, [pc, #188]	@ (8001000 <HAL_SPI_MspInit+0x17c>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000f48:	4b2d      	ldr	r3, [pc, #180]	@ (8001000 <HAL_SPI_MspInit+0x17c>)
 8000f4a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000f4e:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f50:	4b2b      	ldr	r3, [pc, #172]	@ (8001000 <HAL_SPI_MspInit+0x17c>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f56:	4b2a      	ldr	r3, [pc, #168]	@ (8001000 <HAL_SPI_MspInit+0x17c>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8000f5c:	4b28      	ldr	r3, [pc, #160]	@ (8001000 <HAL_SPI_MspInit+0x17c>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000f62:	4b27      	ldr	r3, [pc, #156]	@ (8001000 <HAL_SPI_MspInit+0x17c>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f68:	4b25      	ldr	r3, [pc, #148]	@ (8001000 <HAL_SPI_MspInit+0x17c>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8000f6e:	4824      	ldr	r0, [pc, #144]	@ (8001000 <HAL_SPI_MspInit+0x17c>)
 8000f70:	f001 fa84 	bl	800247c <HAL_DMA_Init>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d001      	beq.n	8000f7e <HAL_SPI_MspInit+0xfa>
    {
      Error_Handler();
 8000f7a:	f7ff ff39 	bl	8000df0 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	4a1f      	ldr	r2, [pc, #124]	@ (8001000 <HAL_SPI_MspInit+0x17c>)
 8000f82:	655a      	str	r2, [r3, #84]	@ 0x54
 8000f84:	4a1e      	ldr	r2, [pc, #120]	@ (8001000 <HAL_SPI_MspInit+0x17c>)
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Stream1;
 8000f8a:	4b1f      	ldr	r3, [pc, #124]	@ (8001008 <HAL_SPI_MspInit+0x184>)
 8000f8c:	4a1f      	ldr	r2, [pc, #124]	@ (800100c <HAL_SPI_MspInit+0x188>)
 8000f8e:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_9;
 8000f90:	4b1d      	ldr	r3, [pc, #116]	@ (8001008 <HAL_SPI_MspInit+0x184>)
 8000f92:	f04f 5290 	mov.w	r2, #301989888	@ 0x12000000
 8000f96:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f98:	4b1b      	ldr	r3, [pc, #108]	@ (8001008 <HAL_SPI_MspInit+0x184>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f9e:	4b1a      	ldr	r3, [pc, #104]	@ (8001008 <HAL_SPI_MspInit+0x184>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000fa4:	4b18      	ldr	r3, [pc, #96]	@ (8001008 <HAL_SPI_MspInit+0x184>)
 8000fa6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000faa:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000fac:	4b16      	ldr	r3, [pc, #88]	@ (8001008 <HAL_SPI_MspInit+0x184>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000fb2:	4b15      	ldr	r3, [pc, #84]	@ (8001008 <HAL_SPI_MspInit+0x184>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8000fb8:	4b13      	ldr	r3, [pc, #76]	@ (8001008 <HAL_SPI_MspInit+0x184>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000fbe:	4b12      	ldr	r3, [pc, #72]	@ (8001008 <HAL_SPI_MspInit+0x184>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000fc4:	4b10      	ldr	r3, [pc, #64]	@ (8001008 <HAL_SPI_MspInit+0x184>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8000fca:	480f      	ldr	r0, [pc, #60]	@ (8001008 <HAL_SPI_MspInit+0x184>)
 8000fcc:	f001 fa56 	bl	800247c <HAL_DMA_Init>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <HAL_SPI_MspInit+0x156>
    {
      Error_Handler();
 8000fd6:	f7ff ff0b 	bl	8000df0 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	4a0a      	ldr	r2, [pc, #40]	@ (8001008 <HAL_SPI_MspInit+0x184>)
 8000fde:	659a      	str	r2, [r3, #88]	@ 0x58
 8000fe0:	4a09      	ldr	r2, [pc, #36]	@ (8001008 <HAL_SPI_MspInit+0x184>)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000fe6:	bf00      	nop
 8000fe8:	3728      	adds	r7, #40	@ 0x28
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	40003800 	.word	0x40003800
 8000ff4:	40023800 	.word	0x40023800
 8000ff8:	40020800 	.word	0x40020800
 8000ffc:	40020c00 	.word	0x40020c00
 8001000:	200003b0 	.word	0x200003b0
 8001004:	40026070 	.word	0x40026070
 8001008:	20000410 	.word	0x20000410
 800100c:	40026028 	.word	0x40026028

08001010 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b084      	sub	sp, #16
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4a1a      	ldr	r2, [pc, #104]	@ (8001088 <HAL_TIM_Base_MspInit+0x78>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d114      	bne.n	800104c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001022:	4b1a      	ldr	r3, [pc, #104]	@ (800108c <HAL_TIM_Base_MspInit+0x7c>)
 8001024:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001026:	4a19      	ldr	r2, [pc, #100]	@ (800108c <HAL_TIM_Base_MspInit+0x7c>)
 8001028:	f043 0301 	orr.w	r3, r3, #1
 800102c:	6453      	str	r3, [r2, #68]	@ 0x44
 800102e:	4b17      	ldr	r3, [pc, #92]	@ (800108c <HAL_TIM_Base_MspInit+0x7c>)
 8001030:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001032:	f003 0301 	and.w	r3, r3, #1
 8001036:	60fb      	str	r3, [r7, #12]
 8001038:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 2, 0);
 800103a:	2200      	movs	r2, #0
 800103c:	2102      	movs	r1, #2
 800103e:	2019      	movs	r0, #25
 8001040:	f000 ff67 	bl	8001f12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001044:	2019      	movs	r0, #25
 8001046:	f000 ff80 	bl	8001f4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800104a:	e018      	b.n	800107e <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM6)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4a0f      	ldr	r2, [pc, #60]	@ (8001090 <HAL_TIM_Base_MspInit+0x80>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d113      	bne.n	800107e <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001056:	4b0d      	ldr	r3, [pc, #52]	@ (800108c <HAL_TIM_Base_MspInit+0x7c>)
 8001058:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800105a:	4a0c      	ldr	r2, [pc, #48]	@ (800108c <HAL_TIM_Base_MspInit+0x7c>)
 800105c:	f043 0310 	orr.w	r3, r3, #16
 8001060:	6413      	str	r3, [r2, #64]	@ 0x40
 8001062:	4b0a      	ldr	r3, [pc, #40]	@ (800108c <HAL_TIM_Base_MspInit+0x7c>)
 8001064:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001066:	f003 0310 	and.w	r3, r3, #16
 800106a:	60bb      	str	r3, [r7, #8]
 800106c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 2, 0);
 800106e:	2200      	movs	r2, #0
 8001070:	2102      	movs	r1, #2
 8001072:	2036      	movs	r0, #54	@ 0x36
 8001074:	f000 ff4d 	bl	8001f12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001078:	2036      	movs	r0, #54	@ 0x36
 800107a:	f000 ff66 	bl	8001f4a <HAL_NVIC_EnableIRQ>
}
 800107e:	bf00      	nop
 8001080:	3710      	adds	r7, #16
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	40010000 	.word	0x40010000
 800108c:	40023800 	.word	0x40023800
 8001090:	40001000 	.word	0x40001000

08001094 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001098:	bf00      	nop
 800109a:	e7fd      	b.n	8001098 <NMI_Handler+0x4>

0800109c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010a0:	bf00      	nop
 80010a2:	e7fd      	b.n	80010a0 <HardFault_Handler+0x4>

080010a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010a8:	bf00      	nop
 80010aa:	e7fd      	b.n	80010a8 <MemManage_Handler+0x4>

080010ac <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010b0:	bf00      	nop
 80010b2:	e7fd      	b.n	80010b0 <BusFault_Handler+0x4>

080010b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010b8:	bf00      	nop
 80010ba:	e7fd      	b.n	80010b8 <UsageFault_Handler+0x4>

080010bc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010c0:	bf00      	nop
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr

080010ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010ca:	b480      	push	{r7}
 80010cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010ce:	bf00      	nop
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr

080010d8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010dc:	bf00      	nop
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr

080010e6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010e6:	b580      	push	{r7, lr}
 80010e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010ea:	f000 fdf3 	bl	8001cd4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010ee:	bf00      	nop
 80010f0:	bd80      	pop	{r7, pc}
	...

080010f4 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 80010f8:	4802      	ldr	r0, [pc, #8]	@ (8001104 <DMA1_Stream1_IRQHandler+0x10>)
 80010fa:	f001 fa6d 	bl	80025d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80010fe:	bf00      	nop
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	20000410 	.word	0x20000410

08001108 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 800110c:	4802      	ldr	r0, [pc, #8]	@ (8001118 <DMA1_Stream4_IRQHandler+0x10>)
 800110e:	f001 fa63 	bl	80025d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8001112:	bf00      	nop
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	200003b0 	.word	0x200003b0

0800111c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001120:	4802      	ldr	r0, [pc, #8]	@ (800112c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001122:	f003 feff 	bl	8004f24 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001126:	bf00      	nop
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	20000470 	.word	0x20000470

08001130 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001134:	4802      	ldr	r0, [pc, #8]	@ (8001140 <TIM6_DAC_IRQHandler+0x10>)
 8001136:	f003 fef5 	bl	8004f24 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800113a:	bf00      	nop
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	200004bc 	.word	0x200004bc

08001144 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001148:	4802      	ldr	r0, [pc, #8]	@ (8001154 <ETH_IRQHandler+0x10>)
 800114a:	f001 ffab 	bl	80030a4 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 800114e:	bf00      	nop
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	20004fb0 	.word	0x20004fb0

08001158 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
  return 1;
 800115c:	2301      	movs	r3, #1
}
 800115e:	4618      	mov	r0, r3
 8001160:	46bd      	mov	sp, r7
 8001162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001166:	4770      	bx	lr

08001168 <_kill>:

int _kill(int pid, int sig)
{
 8001168:	b480      	push	{r7}
 800116a:	b083      	sub	sp, #12
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
 8001170:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001172:	4b05      	ldr	r3, [pc, #20]	@ (8001188 <_kill+0x20>)
 8001174:	2216      	movs	r2, #22
 8001176:	601a      	str	r2, [r3, #0]
  return -1;
 8001178:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800117c:	4618      	mov	r0, r3
 800117e:	370c      	adds	r7, #12
 8001180:	46bd      	mov	sp, r7
 8001182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001186:	4770      	bx	lr
 8001188:	2000aa80 	.word	0x2000aa80

0800118c <_exit>:

void _exit (int status)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001194:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001198:	6878      	ldr	r0, [r7, #4]
 800119a:	f7ff ffe5 	bl	8001168 <_kill>
  while (1) {}    /* Make sure we hang here */
 800119e:	bf00      	nop
 80011a0:	e7fd      	b.n	800119e <_exit+0x12>

080011a2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80011a2:	b580      	push	{r7, lr}
 80011a4:	b086      	sub	sp, #24
 80011a6:	af00      	add	r7, sp, #0
 80011a8:	60f8      	str	r0, [r7, #12]
 80011aa:	60b9      	str	r1, [r7, #8]
 80011ac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011ae:	2300      	movs	r3, #0
 80011b0:	617b      	str	r3, [r7, #20]
 80011b2:	e00a      	b.n	80011ca <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80011b4:	f3af 8000 	nop.w
 80011b8:	4601      	mov	r1, r0
 80011ba:	68bb      	ldr	r3, [r7, #8]
 80011bc:	1c5a      	adds	r2, r3, #1
 80011be:	60ba      	str	r2, [r7, #8]
 80011c0:	b2ca      	uxtb	r2, r1
 80011c2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011c4:	697b      	ldr	r3, [r7, #20]
 80011c6:	3301      	adds	r3, #1
 80011c8:	617b      	str	r3, [r7, #20]
 80011ca:	697a      	ldr	r2, [r7, #20]
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	429a      	cmp	r2, r3
 80011d0:	dbf0      	blt.n	80011b4 <_read+0x12>
  }

  return len;
 80011d2:	687b      	ldr	r3, [r7, #4]
}
 80011d4:	4618      	mov	r0, r3
 80011d6:	3718      	adds	r7, #24
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}

080011dc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b086      	sub	sp, #24
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	60f8      	str	r0, [r7, #12]
 80011e4:	60b9      	str	r1, [r7, #8]
 80011e6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011e8:	2300      	movs	r3, #0
 80011ea:	617b      	str	r3, [r7, #20]
 80011ec:	e009      	b.n	8001202 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80011ee:	68bb      	ldr	r3, [r7, #8]
 80011f0:	1c5a      	adds	r2, r3, #1
 80011f2:	60ba      	str	r2, [r7, #8]
 80011f4:	781b      	ldrb	r3, [r3, #0]
 80011f6:	4618      	mov	r0, r3
 80011f8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	3301      	adds	r3, #1
 8001200:	617b      	str	r3, [r7, #20]
 8001202:	697a      	ldr	r2, [r7, #20]
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	429a      	cmp	r2, r3
 8001208:	dbf1      	blt.n	80011ee <_write+0x12>
  }
  return len;
 800120a:	687b      	ldr	r3, [r7, #4]
}
 800120c:	4618      	mov	r0, r3
 800120e:	3718      	adds	r7, #24
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}

08001214 <_close>:

int _close(int file)
{
 8001214:	b480      	push	{r7}
 8001216:	b083      	sub	sp, #12
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800121c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001220:	4618      	mov	r0, r3
 8001222:	370c      	adds	r7, #12
 8001224:	46bd      	mov	sp, r7
 8001226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122a:	4770      	bx	lr

0800122c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800122c:	b480      	push	{r7}
 800122e:	b083      	sub	sp, #12
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
 8001234:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800123c:	605a      	str	r2, [r3, #4]
  return 0;
 800123e:	2300      	movs	r3, #0
}
 8001240:	4618      	mov	r0, r3
 8001242:	370c      	adds	r7, #12
 8001244:	46bd      	mov	sp, r7
 8001246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124a:	4770      	bx	lr

0800124c <_isatty>:

int _isatty(int file)
{
 800124c:	b480      	push	{r7}
 800124e:	b083      	sub	sp, #12
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001254:	2301      	movs	r3, #1
}
 8001256:	4618      	mov	r0, r3
 8001258:	370c      	adds	r7, #12
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr

08001262 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001262:	b480      	push	{r7}
 8001264:	b085      	sub	sp, #20
 8001266:	af00      	add	r7, sp, #0
 8001268:	60f8      	str	r0, [r7, #12]
 800126a:	60b9      	str	r1, [r7, #8]
 800126c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800126e:	2300      	movs	r3, #0
}
 8001270:	4618      	mov	r0, r3
 8001272:	3714      	adds	r7, #20
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr

0800127c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800127c:	b480      	push	{r7}
 800127e:	b087      	sub	sp, #28
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001284:	4a14      	ldr	r2, [pc, #80]	@ (80012d8 <_sbrk+0x5c>)
 8001286:	4b15      	ldr	r3, [pc, #84]	@ (80012dc <_sbrk+0x60>)
 8001288:	1ad3      	subs	r3, r2, r3
 800128a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001290:	4b13      	ldr	r3, [pc, #76]	@ (80012e0 <_sbrk+0x64>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d102      	bne.n	800129e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001298:	4b11      	ldr	r3, [pc, #68]	@ (80012e0 <_sbrk+0x64>)
 800129a:	4a12      	ldr	r2, [pc, #72]	@ (80012e4 <_sbrk+0x68>)
 800129c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800129e:	4b10      	ldr	r3, [pc, #64]	@ (80012e0 <_sbrk+0x64>)
 80012a0:	681a      	ldr	r2, [r3, #0]
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	4413      	add	r3, r2
 80012a6:	693a      	ldr	r2, [r7, #16]
 80012a8:	429a      	cmp	r2, r3
 80012aa:	d205      	bcs.n	80012b8 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 80012ac:	4b0e      	ldr	r3, [pc, #56]	@ (80012e8 <_sbrk+0x6c>)
 80012ae:	220c      	movs	r2, #12
 80012b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012b2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80012b6:	e009      	b.n	80012cc <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 80012b8:	4b09      	ldr	r3, [pc, #36]	@ (80012e0 <_sbrk+0x64>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012be:	4b08      	ldr	r3, [pc, #32]	@ (80012e0 <_sbrk+0x64>)
 80012c0:	681a      	ldr	r2, [r3, #0]
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	4413      	add	r3, r2
 80012c6:	4a06      	ldr	r2, [pc, #24]	@ (80012e0 <_sbrk+0x64>)
 80012c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012ca:	68fb      	ldr	r3, [r7, #12]
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	371c      	adds	r7, #28
 80012d0:	46bd      	mov	sp, r7
 80012d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d6:	4770      	bx	lr
 80012d8:	20080000 	.word	0x20080000
 80012dc:	00000400 	.word	0x00000400
 80012e0:	20000560 	.word	0x20000560
 80012e4:	2000aa90 	.word	0x2000aa90
 80012e8:	2000aa80 	.word	0x2000aa80

080012ec <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012f0:	4b06      	ldr	r3, [pc, #24]	@ (800130c <SystemInit+0x20>)
 80012f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80012f6:	4a05      	ldr	r2, [pc, #20]	@ (800130c <SystemInit+0x20>)
 80012f8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80012fc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001300:	bf00      	nop
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr
 800130a:	bf00      	nop
 800130c:	e000ed00 	.word	0xe000ed00

08001310 <tcp_server_init>:
   3. Listen for the  incoming requests by the client
   4. Accept the Request, and now the server is ready for the data transfer
 */

void tcp_server_init(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b084      	sub	sp, #16
 8001314:	af00      	add	r7, sp, #0
	/* 1. create new tcp pcb */
	struct tcp_pcb *tpcb;

	tpcb = tcp_new();
 8001316:	f008 f975 	bl	8009604 <tcp_new>
 800131a:	60f8      	str	r0, [r7, #12]

	err_t err;

	/* 2. bind _pcb to port 7 ( protocol) */
	ip_addr_t myIPADDR;
	IP_ADDR4(&myIPADDR, 192, 168, 1, 2);
 800131c:	4b10      	ldr	r3, [pc, #64]	@ (8001360 <tcp_server_init+0x50>)
 800131e:	607b      	str	r3, [r7, #4]
	err = tcp_bind(tpcb, &myIPADDR, 6300);
 8001320:	1d3b      	adds	r3, r7, #4
 8001322:	f641 029c 	movw	r2, #6300	@ 0x189c
 8001326:	4619      	mov	r1, r3
 8001328:	68f8      	ldr	r0, [r7, #12]
 800132a:	f007 f8c5 	bl	80084b8 <tcp_bind>
 800132e:	4603      	mov	r3, r0
 8001330:	72fb      	strb	r3, [r7, #11]

	if (err == ERR_OK)
 8001332:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d109      	bne.n	800134e <tcp_server_init+0x3e>
	{
		/* 3. start tcp listening for _pcb */
		tpcb = tcp_listen(tpcb);
 800133a:	21ff      	movs	r1, #255	@ 0xff
 800133c:	68f8      	ldr	r0, [r7, #12]
 800133e:	f007 f973 	bl	8008628 <tcp_listen_with_backlog>
 8001342:	60f8      	str	r0, [r7, #12]

		/* 4. initialize LwIP tcp_accept callback function */
		tcp_accept(tpcb, tcp_server_accept);
 8001344:	4907      	ldr	r1, [pc, #28]	@ (8001364 <tcp_server_init+0x54>)
 8001346:	68f8      	ldr	r0, [r7, #12]
 8001348:	f008 f9dc 	bl	8009704 <tcp_accept>
	else
	{
		/* deallocate the pcb */
		memp_free(MEMP_TCP_PCB, tpcb);
	}
}
 800134c:	e003      	b.n	8001356 <tcp_server_init+0x46>
		memp_free(MEMP_TCP_PCB, tpcb);
 800134e:	68f9      	ldr	r1, [r7, #12]
 8001350:	2001      	movs	r0, #1
 8001352:	f005 fc05 	bl	8006b60 <memp_free>
}
 8001356:	bf00      	nop
 8001358:	3710      	adds	r7, #16
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	0201a8c0 	.word	0x0201a8c0
 8001364:	08001369 	.word	0x08001369

08001368 <tcp_server_accept>:
  * @param  newpcb: pointer on tcp_pcb struct for the newly created tcp connection
  * @param  err: not used
  * @retval err_t: error status
  */
static err_t tcp_server_accept(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b086      	sub	sp, #24
 800136c:	af00      	add	r7, sp, #0
 800136e:	60f8      	str	r0, [r7, #12]
 8001370:	60b9      	str	r1, [r7, #8]
 8001372:	4613      	mov	r3, r2
 8001374:	71fb      	strb	r3, [r7, #7]

  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  /* set priority for the newly accepted tcp connection newpcb */
  tcp_setprio(newpcb, TCP_PRIO_MIN);
 8001376:	2101      	movs	r1, #1
 8001378:	68b8      	ldr	r0, [r7, #8]
 800137a:	f007 ff51 	bl	8009220 <tcp_setprio>

  /* allocate structure es to maintain tcp connection information */
  es = (struct tcp_server_struct *)mem_malloc(sizeof(struct tcp_server_struct));
 800137e:	200c      	movs	r0, #12
 8001380:	f005 f9ee 	bl	8006760 <mem_malloc>
 8001384:	6138      	str	r0, [r7, #16]
  if (es != NULL)
 8001386:	693b      	ldr	r3, [r7, #16]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d01f      	beq.n	80013cc <tcp_server_accept+0x64>
  {
    es->state = ES_ACCEPTED;
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	2201      	movs	r2, #1
 8001390:	701a      	strb	r2, [r3, #0]
    es->pcb = newpcb;
 8001392:	693b      	ldr	r3, [r7, #16]
 8001394:	68ba      	ldr	r2, [r7, #8]
 8001396:	605a      	str	r2, [r3, #4]
    es->retries = 0;
 8001398:	693b      	ldr	r3, [r7, #16]
 800139a:	2200      	movs	r2, #0
 800139c:	705a      	strb	r2, [r3, #1]
    es->p = NULL;
 800139e:	693b      	ldr	r3, [r7, #16]
 80013a0:	2200      	movs	r2, #0
 80013a2:	609a      	str	r2, [r3, #8]

    /* pass newly allocated es structure as argument to newpcb */
    tcp_arg(newpcb, es);
 80013a4:	6939      	ldr	r1, [r7, #16]
 80013a6:	68b8      	ldr	r0, [r7, #8]
 80013a8:	f008 f934 	bl	8009614 <tcp_arg>

    /* initialize lwip tcp_recv callback function for newpcb  */
    tcp_recv(newpcb, tcp_server_recv);
 80013ac:	490d      	ldr	r1, [pc, #52]	@ (80013e4 <tcp_server_accept+0x7c>)
 80013ae:	68b8      	ldr	r0, [r7, #8]
 80013b0:	f008 f942 	bl	8009638 <tcp_recv>

    /* initialize lwip tcp_err callback function for newpcb  */
    tcp_err(newpcb, tcp_server_error);
 80013b4:	490c      	ldr	r1, [pc, #48]	@ (80013e8 <tcp_server_accept+0x80>)
 80013b6:	68b8      	ldr	r0, [r7, #8]
 80013b8:	f008 f982 	bl	80096c0 <tcp_err>

    /* initialize lwip tcp_poll callback function for newpcb */
    tcp_poll(newpcb, tcp_server_poll, 0);
 80013bc:	2200      	movs	r2, #0
 80013be:	490b      	ldr	r1, [pc, #44]	@ (80013ec <tcp_server_accept+0x84>)
 80013c0:	68b8      	ldr	r0, [r7, #8]
 80013c2:	f008 f9b7 	bl	8009734 <tcp_poll>

    ret_err = ERR_OK;
 80013c6:	2300      	movs	r3, #0
 80013c8:	75fb      	strb	r3, [r7, #23]
 80013ca:	e005      	b.n	80013d8 <tcp_server_accept+0x70>
  }
  else
  {
    /*  close tcp connection */
    tcp_server_connection_close(newpcb, es);
 80013cc:	6939      	ldr	r1, [r7, #16]
 80013ce:	68b8      	ldr	r0, [r7, #8]
 80013d0:	f000 f965 	bl	800169e <tcp_server_connection_close>
    /* return memory error */
    ret_err = ERR_MEM;
 80013d4:	23ff      	movs	r3, #255	@ 0xff
 80013d6:	75fb      	strb	r3, [r7, #23]
  }
  return ret_err;
 80013d8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80013dc:	4618      	mov	r0, r3
 80013de:	3718      	adds	r7, #24
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	080013f1 	.word	0x080013f1
 80013e8:	08001525 	.word	0x08001525
 80013ec:	08001549 	.word	0x08001549

080013f0 <tcp_server_recv>:
  * @param  pbuf: pointer on the received pbuf
  * @param  err: error information regarding the reveived pbuf
  * @retval err_t: error code
  */
static err_t tcp_server_recv(void *arg, struct tcp_pcb *tpcb, struct pbuf *p, err_t err)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b088      	sub	sp, #32
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	60f8      	str	r0, [r7, #12]
 80013f8:	60b9      	str	r1, [r7, #8]
 80013fa:	607a      	str	r2, [r7, #4]
 80013fc:	70fb      	strb	r3, [r7, #3]
  struct tcp_server_struct *es;
  err_t ret_err;

  LWIP_ASSERT("arg != NULL",arg != NULL);
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d105      	bne.n	8001410 <tcp_server_recv+0x20>
 8001404:	4b43      	ldr	r3, [pc, #268]	@ (8001514 <tcp_server_recv+0x124>)
 8001406:	22c6      	movs	r2, #198	@ 0xc6
 8001408:	4943      	ldr	r1, [pc, #268]	@ (8001518 <tcp_server_recv+0x128>)
 800140a:	4844      	ldr	r0, [pc, #272]	@ (800151c <tcp_server_recv+0x12c>)
 800140c:	f00f ffb8 	bl	8011380 <iprintf>

  es = (struct tcp_server_struct *)arg;
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	61bb      	str	r3, [r7, #24]

  /* if we receive an empty tcp frame from client => close connection */
  if (p == NULL)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d116      	bne.n	8001448 <tcp_server_recv+0x58>
  {
    /* remote host closed connection */
    es->state = ES_CLOSING;
 800141a:	69bb      	ldr	r3, [r7, #24]
 800141c:	2203      	movs	r2, #3
 800141e:	701a      	strb	r2, [r3, #0]
    if(es->p == NULL)
 8001420:	69bb      	ldr	r3, [r7, #24]
 8001422:	689b      	ldr	r3, [r3, #8]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d104      	bne.n	8001432 <tcp_server_recv+0x42>
    {
       /* we're done sending, close connection */
       tcp_server_connection_close(tpcb, es);
 8001428:	69b9      	ldr	r1, [r7, #24]
 800142a:	68b8      	ldr	r0, [r7, #8]
 800142c:	f000 f937 	bl	800169e <tcp_server_connection_close>
 8001430:	e007      	b.n	8001442 <tcp_server_recv+0x52>
    }
    else
    {
      /* we're not done yet */
      /* acknowledge received packet */
      tcp_sent(tpcb, tcp_server_sent);
 8001432:	493b      	ldr	r1, [pc, #236]	@ (8001520 <tcp_server_recv+0x130>)
 8001434:	68b8      	ldr	r0, [r7, #8]
 8001436:	f008 f921 	bl	800967c <tcp_sent>

      /* send remaining data*/
      tcp_server_send(tpcb, es);
 800143a:	69b9      	ldr	r1, [r7, #24]
 800143c:	68b8      	ldr	r0, [r7, #8]
 800143e:	f000 f8db 	bl	80015f8 <tcp_server_send>
    }
    ret_err = ERR_OK;
 8001442:	2300      	movs	r3, #0
 8001444:	77fb      	strb	r3, [r7, #31]
 8001446:	e05f      	b.n	8001508 <tcp_server_recv+0x118>
  }
  /* else : a non empty frame was received from client but for some reason err != ERR_OK */
  else if(err != ERR_OK)
 8001448:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800144c:	2b00      	cmp	r3, #0
 800144e:	d00b      	beq.n	8001468 <tcp_server_recv+0x78>
  {
    /* free received pbuf*/
    if (p != NULL)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d005      	beq.n	8001462 <tcp_server_recv+0x72>
    {
      es->p = NULL;
 8001456:	69bb      	ldr	r3, [r7, #24]
 8001458:	2200      	movs	r2, #0
 800145a:	609a      	str	r2, [r3, #8]
      pbuf_free(p);
 800145c:	6878      	ldr	r0, [r7, #4]
 800145e:	f006 f9f5 	bl	800784c <pbuf_free>
    }
    ret_err = err;
 8001462:	78fb      	ldrb	r3, [r7, #3]
 8001464:	77fb      	strb	r3, [r7, #31]
 8001466:	e04f      	b.n	8001508 <tcp_server_recv+0x118>
  }
  else if(es->state == ES_ACCEPTED)
 8001468:	69bb      	ldr	r3, [r7, #24]
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	2b01      	cmp	r3, #1
 800146e:	d110      	bne.n	8001492 <tcp_server_recv+0xa2>
  {
    /* first data chunk in p->payload */
    es->state = ES_RECEIVED;
 8001470:	69bb      	ldr	r3, [r7, #24]
 8001472:	2202      	movs	r2, #2
 8001474:	701a      	strb	r2, [r3, #0]

    /* store reference to incoming pbuf (chain) */
    es->p = p;
 8001476:	69bb      	ldr	r3, [r7, #24]
 8001478:	687a      	ldr	r2, [r7, #4]
 800147a:	609a      	str	r2, [r3, #8]

    /* initialize LwIP tcp_sent callback function */
    tcp_sent(tpcb, tcp_server_sent);
 800147c:	4928      	ldr	r1, [pc, #160]	@ (8001520 <tcp_server_recv+0x130>)
 800147e:	68b8      	ldr	r0, [r7, #8]
 8001480:	f008 f8fc 	bl	800967c <tcp_sent>

    /* handle the received data */
    tcp_server_handle(tpcb, es);
 8001484:	69b9      	ldr	r1, [r7, #24]
 8001486:	68b8      	ldr	r0, [r7, #8]
 8001488:	f000 f930 	bl	80016ec <tcp_server_handle>

    ret_err = ERR_OK;
 800148c:	2300      	movs	r3, #0
 800148e:	77fb      	strb	r3, [r7, #31]
 8001490:	e03a      	b.n	8001508 <tcp_server_recv+0x118>
  }
  else if (es->state == ES_RECEIVED)
 8001492:	69bb      	ldr	r3, [r7, #24]
 8001494:	781b      	ldrb	r3, [r3, #0]
 8001496:	2b02      	cmp	r3, #2
 8001498:	d115      	bne.n	80014c6 <tcp_server_recv+0xd6>
  {
    /* more data received from client and previous data has been already sent*/
    if(es->p == NULL)
 800149a:	69bb      	ldr	r3, [r7, #24]
 800149c:	689b      	ldr	r3, [r3, #8]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d107      	bne.n	80014b2 <tcp_server_recv+0xc2>
    {
      es->p = p;
 80014a2:	69bb      	ldr	r3, [r7, #24]
 80014a4:	687a      	ldr	r2, [r7, #4]
 80014a6:	609a      	str	r2, [r3, #8]

      /* handle the received data */
      tcp_server_handle(tpcb, es);
 80014a8:	69b9      	ldr	r1, [r7, #24]
 80014aa:	68b8      	ldr	r0, [r7, #8]
 80014ac:	f000 f91e 	bl	80016ec <tcp_server_handle>
 80014b0:	e006      	b.n	80014c0 <tcp_server_recv+0xd0>
    else
    {
      struct pbuf *ptr;

      /* chain pbufs to the end of what we recv'ed previously  */
      ptr = es->p;
 80014b2:	69bb      	ldr	r3, [r7, #24]
 80014b4:	689b      	ldr	r3, [r3, #8]
 80014b6:	617b      	str	r3, [r7, #20]
      pbuf_chain(ptr,p);
 80014b8:	6879      	ldr	r1, [r7, #4]
 80014ba:	6978      	ldr	r0, [r7, #20]
 80014bc:	f006 fade 	bl	8007a7c <pbuf_chain>
    }
    ret_err = ERR_OK;
 80014c0:	2300      	movs	r3, #0
 80014c2:	77fb      	strb	r3, [r7, #31]
 80014c4:	e020      	b.n	8001508 <tcp_server_recv+0x118>
  }
  else if(es->state == ES_CLOSING)
 80014c6:	69bb      	ldr	r3, [r7, #24]
 80014c8:	781b      	ldrb	r3, [r3, #0]
 80014ca:	2b03      	cmp	r3, #3
 80014cc:	d10e      	bne.n	80014ec <tcp_server_recv+0xfc>
  {
    /* odd case, remote side closing twice, trash data */
    tcp_recved(tpcb, p->tot_len);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	891b      	ldrh	r3, [r3, #8]
 80014d2:	4619      	mov	r1, r3
 80014d4:	68b8      	ldr	r0, [r7, #8]
 80014d6:	f007 f9bd 	bl	8008854 <tcp_recved>
    es->p = NULL;
 80014da:	69bb      	ldr	r3, [r7, #24]
 80014dc:	2200      	movs	r2, #0
 80014de:	609a      	str	r2, [r3, #8]
    pbuf_free(p);
 80014e0:	6878      	ldr	r0, [r7, #4]
 80014e2:	f006 f9b3 	bl	800784c <pbuf_free>
    ret_err = ERR_OK;
 80014e6:	2300      	movs	r3, #0
 80014e8:	77fb      	strb	r3, [r7, #31]
 80014ea:	e00d      	b.n	8001508 <tcp_server_recv+0x118>
  }
  else
  {
    /* unknown es->state, trash data  */
    tcp_recved(tpcb, p->tot_len);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	891b      	ldrh	r3, [r3, #8]
 80014f0:	4619      	mov	r1, r3
 80014f2:	68b8      	ldr	r0, [r7, #8]
 80014f4:	f007 f9ae 	bl	8008854 <tcp_recved>
    es->p = NULL;
 80014f8:	69bb      	ldr	r3, [r7, #24]
 80014fa:	2200      	movs	r2, #0
 80014fc:	609a      	str	r2, [r3, #8]
    pbuf_free(p);
 80014fe:	6878      	ldr	r0, [r7, #4]
 8001500:	f006 f9a4 	bl	800784c <pbuf_free>
    ret_err = ERR_OK;
 8001504:	2300      	movs	r3, #0
 8001506:	77fb      	strb	r3, [r7, #31]
  }
  return ret_err;
 8001508:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800150c:	4618      	mov	r0, r3
 800150e:	3720      	adds	r7, #32
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}
 8001514:	08012634 	.word	0x08012634
 8001518:	08012650 	.word	0x08012650
 800151c:	0801265c 	.word	0x0801265c
 8001520:	080015a9 	.word	0x080015a9

08001524 <tcp_server_error>:
  * @param  arg: pointer on argument parameter
  * @param  err: not used
  * @retval None
  */
static void tcp_server_error(void *arg, err_t err)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b084      	sub	sp, #16
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
 800152c:	460b      	mov	r3, r1
 800152e:	70fb      	strb	r3, [r7, #3]
  struct tcp_server_struct *es;

  LWIP_UNUSED_ARG(err);

  es = (struct tcp_server_struct *)arg;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	60fb      	str	r3, [r7, #12]
  if (es != NULL)
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d002      	beq.n	8001540 <tcp_server_error+0x1c>
  {
    /*  free es structure */
    mem_free(es);
 800153a:	68f8      	ldr	r0, [r7, #12]
 800153c:	f004 ffaa 	bl	8006494 <mem_free>
  }
}
 8001540:	bf00      	nop
 8001542:	3710      	adds	r7, #16
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}

08001548 <tcp_server_poll>:
  * @param  arg: pointer on argument passed to callback
  * @param  tpcb: pointer on the tcp_pcb for the current tcp connection
  * @retval err_t: error code
  */
static err_t tcp_server_poll(void *arg, struct tcp_pcb *tpcb)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b084      	sub	sp, #16
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
 8001550:	6039      	str	r1, [r7, #0]
  err_t ret_err;
  struct tcp_server_struct *es;

  es = (struct tcp_server_struct *)arg;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	60bb      	str	r3, [r7, #8]
  if (es != NULL)
 8001556:	68bb      	ldr	r3, [r7, #8]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d017      	beq.n	800158c <tcp_server_poll+0x44>
  {
    if (es->p != NULL)
 800155c:	68bb      	ldr	r3, [r7, #8]
 800155e:	689b      	ldr	r3, [r3, #8]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d008      	beq.n	8001576 <tcp_server_poll+0x2e>
    {
      tcp_sent(tpcb, tcp_server_sent);
 8001564:	490f      	ldr	r1, [pc, #60]	@ (80015a4 <tcp_server_poll+0x5c>)
 8001566:	6838      	ldr	r0, [r7, #0]
 8001568:	f008 f888 	bl	800967c <tcp_sent>
      /* there is a remaining pbuf (chain) , try to send data */
      tcp_server_send(tpcb, es);
 800156c:	68b9      	ldr	r1, [r7, #8]
 800156e:	6838      	ldr	r0, [r7, #0]
 8001570:	f000 f842 	bl	80015f8 <tcp_server_send>
 8001574:	e007      	b.n	8001586 <tcp_server_poll+0x3e>
    }
    else
    {
      /* no remaining pbuf (chain)  */
      if(es->state == ES_CLOSING)
 8001576:	68bb      	ldr	r3, [r7, #8]
 8001578:	781b      	ldrb	r3, [r3, #0]
 800157a:	2b03      	cmp	r3, #3
 800157c:	d103      	bne.n	8001586 <tcp_server_poll+0x3e>
      {
        /*  close tcp connection */
        tcp_server_connection_close(tpcb, es);
 800157e:	68b9      	ldr	r1, [r7, #8]
 8001580:	6838      	ldr	r0, [r7, #0]
 8001582:	f000 f88c 	bl	800169e <tcp_server_connection_close>
      }
    }
    ret_err = ERR_OK;
 8001586:	2300      	movs	r3, #0
 8001588:	73fb      	strb	r3, [r7, #15]
 800158a:	e004      	b.n	8001596 <tcp_server_poll+0x4e>
  }
  else
  {
    /* nothing to be done */
    tcp_abort(tpcb);
 800158c:	6838      	ldr	r0, [r7, #0]
 800158e:	f006 ff87 	bl	80084a0 <tcp_abort>
    ret_err = ERR_ABRT;
 8001592:	23f3      	movs	r3, #243	@ 0xf3
 8001594:	73fb      	strb	r3, [r7, #15]
  }
  return ret_err;
 8001596:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800159a:	4618      	mov	r0, r3
 800159c:	3710      	adds	r7, #16
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	080015a9 	.word	0x080015a9

080015a8 <tcp_server_sent>:
  *         is received from remote host for sent data)
  * @param  None
  * @retval None
  */
static err_t tcp_server_sent(void *arg, struct tcp_pcb *tpcb, u16_t len)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b086      	sub	sp, #24
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	60f8      	str	r0, [r7, #12]
 80015b0:	60b9      	str	r1, [r7, #8]
 80015b2:	4613      	mov	r3, r2
 80015b4:	80fb      	strh	r3, [r7, #6]
  struct tcp_server_struct *es;

  LWIP_UNUSED_ARG(len);

  es = (struct tcp_server_struct *)arg;
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	617b      	str	r3, [r7, #20]
  es->retries = 0;
 80015ba:	697b      	ldr	r3, [r7, #20]
 80015bc:	2200      	movs	r2, #0
 80015be:	705a      	strb	r2, [r3, #1]

  if(es->p != NULL)
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	689b      	ldr	r3, [r3, #8]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d008      	beq.n	80015da <tcp_server_sent+0x32>
  {
    /* still got pbufs to send */
    tcp_sent(tpcb, tcp_server_sent);
 80015c8:	490a      	ldr	r1, [pc, #40]	@ (80015f4 <tcp_server_sent+0x4c>)
 80015ca:	68b8      	ldr	r0, [r7, #8]
 80015cc:	f008 f856 	bl	800967c <tcp_sent>
    tcp_server_send(tpcb, es);
 80015d0:	6979      	ldr	r1, [r7, #20]
 80015d2:	68b8      	ldr	r0, [r7, #8]
 80015d4:	f000 f810 	bl	80015f8 <tcp_server_send>
 80015d8:	e007      	b.n	80015ea <tcp_server_sent+0x42>
  }
  else
  {
    /* if no more data to send and client closed connection*/
    if(es->state == ES_CLOSING)
 80015da:	697b      	ldr	r3, [r7, #20]
 80015dc:	781b      	ldrb	r3, [r3, #0]
 80015de:	2b03      	cmp	r3, #3
 80015e0:	d103      	bne.n	80015ea <tcp_server_sent+0x42>
      tcp_server_connection_close(tpcb, es);
 80015e2:	6979      	ldr	r1, [r7, #20]
 80015e4:	68b8      	ldr	r0, [r7, #8]
 80015e6:	f000 f85a 	bl	800169e <tcp_server_connection_close>
  }
  return ERR_OK;
 80015ea:	2300      	movs	r3, #0
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	3718      	adds	r7, #24
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	080015a9 	.word	0x080015a9

080015f8 <tcp_server_send>:
  * @param  tpcb: pointer on the tcp_pcb connection
  * @param  es: pointer on _state structure
  * @retval None
  */
static void tcp_server_send(struct tcp_pcb *tpcb, struct tcp_server_struct *es)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b086      	sub	sp, #24
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
 8001600:	6039      	str	r1, [r7, #0]
  struct pbuf *ptr;
  err_t wr_err = ERR_OK;
 8001602:	2300      	movs	r3, #0
 8001604:	75fb      	strb	r3, [r7, #23]

  while ((wr_err == ERR_OK) &&
 8001606:	e036      	b.n	8001676 <tcp_server_send+0x7e>
         (es->p != NULL) &&
         (es->p->len <= tcp_sndbuf(tpcb)))
  {

    /* get pointer on pbuf from es structure */
    ptr = es->p;
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	689b      	ldr	r3, [r3, #8]
 800160c:	613b      	str	r3, [r7, #16]

    /* enqueue data for transmission */
    wr_err = tcp_write(tpcb, ptr->payload, ptr->len, 1);
 800160e:	693b      	ldr	r3, [r7, #16]
 8001610:	6859      	ldr	r1, [r3, #4]
 8001612:	693b      	ldr	r3, [r7, #16]
 8001614:	895a      	ldrh	r2, [r3, #10]
 8001616:	2301      	movs	r3, #1
 8001618:	6878      	ldr	r0, [r7, #4]
 800161a:	f00a ff37 	bl	800c48c <tcp_write>
 800161e:	4603      	mov	r3, r0
 8001620:	75fb      	strb	r3, [r7, #23]

    if (wr_err == ERR_OK)
 8001622:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d11d      	bne.n	8001666 <tcp_server_send+0x6e>
    {
      u16_t plen;
      u8_t freed;

      plen = ptr->len;
 800162a:	693b      	ldr	r3, [r7, #16]
 800162c:	895b      	ldrh	r3, [r3, #10]
 800162e:	81fb      	strh	r3, [r7, #14]

      /* continue with next pbuf in chain (if any) */
      es->p = ptr->next;
 8001630:	693b      	ldr	r3, [r7, #16]
 8001632:	681a      	ldr	r2, [r3, #0]
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	609a      	str	r2, [r3, #8]

      if(es->p != NULL)
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	689b      	ldr	r3, [r3, #8]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d004      	beq.n	800164a <tcp_server_send+0x52>
      {
        /* increment reference count for es->p */
        pbuf_ref(es->p);
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	689b      	ldr	r3, [r3, #8]
 8001644:	4618      	mov	r0, r3
 8001646:	f006 f9a1 	bl	800798c <pbuf_ref>

     /* chop first pbuf from chain */
      do
      {
        /* try hard to free pbuf */
        freed = pbuf_free(ptr);
 800164a:	6938      	ldr	r0, [r7, #16]
 800164c:	f006 f8fe 	bl	800784c <pbuf_free>
 8001650:	4603      	mov	r3, r0
 8001652:	737b      	strb	r3, [r7, #13]
      }
      while(freed == 0);
 8001654:	7b7b      	ldrb	r3, [r7, #13]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d0f7      	beq.n	800164a <tcp_server_send+0x52>
     /* we can read more data now */
     tcp_recved(tpcb, plen);
 800165a:	89fb      	ldrh	r3, [r7, #14]
 800165c:	4619      	mov	r1, r3
 800165e:	6878      	ldr	r0, [r7, #4]
 8001660:	f007 f8f8 	bl	8008854 <tcp_recved>
 8001664:	e007      	b.n	8001676 <tcp_server_send+0x7e>
   }
   else if(wr_err == ERR_MEM)
 8001666:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800166a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800166e:	d102      	bne.n	8001676 <tcp_server_send+0x7e>
   {
      /* we are low on memory, try later / harder, defer to poll */
     es->p = ptr;
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	693a      	ldr	r2, [r7, #16]
 8001674:	609a      	str	r2, [r3, #8]
         (es->p != NULL) &&
 8001676:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d10b      	bne.n	8001696 <tcp_server_send+0x9e>
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	689b      	ldr	r3, [r3, #8]
  while ((wr_err == ERR_OK) &&
 8001682:	2b00      	cmp	r3, #0
 8001684:	d007      	beq.n	8001696 <tcp_server_send+0x9e>
         (es->p->len <= tcp_sndbuf(tpcb)))
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	689b      	ldr	r3, [r3, #8]
 800168a:	895a      	ldrh	r2, [r3, #10]
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
         (es->p != NULL) &&
 8001692:	429a      	cmp	r2, r3
 8001694:	d9b8      	bls.n	8001608 <tcp_server_send+0x10>
   else
   {
     /* other problem ?? */
   }
  }
}
 8001696:	bf00      	nop
 8001698:	3718      	adds	r7, #24
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}

0800169e <tcp_server_connection_close>:
  * @param  tcp_pcb: pointer on the tcp connection
  * @param  es: pointer on _state structure
  * @retval None
  */
static void tcp_server_connection_close(struct tcp_pcb *tpcb, struct tcp_server_struct *es)
{
 800169e:	b580      	push	{r7, lr}
 80016a0:	b082      	sub	sp, #8
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	6078      	str	r0, [r7, #4]
 80016a6:	6039      	str	r1, [r7, #0]

  /* remove all callbacks */
  tcp_arg(tpcb, NULL);
 80016a8:	2100      	movs	r1, #0
 80016aa:	6878      	ldr	r0, [r7, #4]
 80016ac:	f007 ffb2 	bl	8009614 <tcp_arg>
  tcp_sent(tpcb, NULL);
 80016b0:	2100      	movs	r1, #0
 80016b2:	6878      	ldr	r0, [r7, #4]
 80016b4:	f007 ffe2 	bl	800967c <tcp_sent>
  tcp_recv(tpcb, NULL);
 80016b8:	2100      	movs	r1, #0
 80016ba:	6878      	ldr	r0, [r7, #4]
 80016bc:	f007 ffbc 	bl	8009638 <tcp_recv>
  tcp_err(tpcb, NULL);
 80016c0:	2100      	movs	r1, #0
 80016c2:	6878      	ldr	r0, [r7, #4]
 80016c4:	f007 fffc 	bl	80096c0 <tcp_err>
  tcp_poll(tpcb, NULL, 0);
 80016c8:	2200      	movs	r2, #0
 80016ca:	2100      	movs	r1, #0
 80016cc:	6878      	ldr	r0, [r7, #4]
 80016ce:	f008 f831 	bl	8009734 <tcp_poll>

  /* delete es structure */
  if (es != NULL)
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d002      	beq.n	80016de <tcp_server_connection_close+0x40>
  {
    mem_free(es);
 80016d8:	6838      	ldr	r0, [r7, #0]
 80016da:	f004 fedb 	bl	8006494 <mem_free>
  }

  /* close tcp connection */
  tcp_close(tpcb);
 80016de:	6878      	ldr	r0, [r7, #4]
 80016e0:	f006 fdf4 	bl	80082cc <tcp_close>
}
 80016e4:	bf00      	nop
 80016e6:	3708      	adds	r7, #8
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}

080016ec <tcp_server_handle>:

/* Handle the incoming TCP Data */

static void tcp_server_handle (struct tcp_pcb *tpcb, struct tcp_server_struct *es)
{
 80016ec:	b590      	push	{r4, r7, lr}
 80016ee:	b09d      	sub	sp, #116	@ 0x74
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
 80016f4:	6039      	str	r1, [r7, #0]
	struct tcp_server_struct *esTx = (struct tcp_server_struct *)0x20002000;
 80016f6:	f04f 2320 	mov.w	r3, #536879104	@ 0x20002000
 80016fa:	66fb      	str	r3, [r7, #108]	@ 0x6c

	/* Extract the IP */
	//char *remIP = ipaddr_ntoa(&inIP);

	// DECODE MESSAGE
	tcp_decode_message(es);
 80016fc:	6838      	ldr	r0, [r7, #0]
 80016fe:	f000 f861 	bl	80017c4 <tcp_decode_message>

	esTx->state = es->state;
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	781a      	ldrb	r2, [r3, #0]
 8001706:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001708:	701a      	strb	r2, [r3, #0]
	esTx->pcb = es->pcb;
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	685a      	ldr	r2, [r3, #4]
 800170e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001710:	605a      	str	r2, [r3, #4]
	esTx->p = es->p;
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	689a      	ldr	r2, [r3, #8]
 8001716:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001718:	609a      	str	r2, [r3, #8]

	char buf[100];
	memset (buf, '\0', 100);
 800171a:	f107 0308 	add.w	r3, r7, #8
 800171e:	2264      	movs	r2, #100	@ 0x64
 8001720:	2100      	movs	r1, #0
 8001722:	4618      	mov	r0, r3
 8001724:	f00f feff 	bl	8011526 <memset>

	//strncpy(buf, (char *)es->p->payload, es->p->tot_len);
	strncpy(buf, (char *)ethBuf, es->p->tot_len);
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	689b      	ldr	r3, [r3, #8]
 800172c:	891b      	ldrh	r3, [r3, #8]
 800172e:	461a      	mov	r2, r3
 8001730:	f107 0308 	add.w	r3, r7, #8
 8001734:	4921      	ldr	r1, [pc, #132]	@ (80017bc <tcp_server_handle+0xd0>)
 8001736:	4618      	mov	r0, r3
 8001738:	f00f fefd 	bl	8011536 <strncpy>
	strcat (buf, "+");
 800173c:	f107 0308 	add.w	r3, r7, #8
 8001740:	4618      	mov	r0, r3
 8001742:	f7fe fd7d 	bl	8000240 <strlen>
 8001746:	4603      	mov	r3, r0
 8001748:	461a      	mov	r2, r3
 800174a:	f107 0308 	add.w	r3, r7, #8
 800174e:	4413      	add	r3, r2
 8001750:	491b      	ldr	r1, [pc, #108]	@ (80017c0 <tcp_server_handle+0xd4>)
 8001752:	461a      	mov	r2, r3
 8001754:	460b      	mov	r3, r1
 8001756:	881b      	ldrh	r3, [r3, #0]
 8001758:	8013      	strh	r3, [r2, #0]


	esTx->p->payload = (void *)buf;
 800175a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800175c:	689b      	ldr	r3, [r3, #8]
 800175e:	f107 0208 	add.w	r2, r7, #8
 8001762:	605a      	str	r2, [r3, #4]
	esTx->p->tot_len = (es->p->tot_len - es->p->len) + strlen (buf);
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	689b      	ldr	r3, [r3, #8]
 8001768:	891a      	ldrh	r2, [r3, #8]
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	689b      	ldr	r3, [r3, #8]
 800176e:	895b      	ldrh	r3, [r3, #10]
 8001770:	1ad3      	subs	r3, r2, r3
 8001772:	b29c      	uxth	r4, r3
 8001774:	f107 0308 	add.w	r3, r7, #8
 8001778:	4618      	mov	r0, r3
 800177a:	f7fe fd61 	bl	8000240 <strlen>
 800177e:	4603      	mov	r3, r0
 8001780:	b29a      	uxth	r2, r3
 8001782:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001784:	689b      	ldr	r3, [r3, #8]
 8001786:	4422      	add	r2, r4
 8001788:	b292      	uxth	r2, r2
 800178a:	811a      	strh	r2, [r3, #8]
	esTx->p->len = strlen (buf);
 800178c:	f107 0308 	add.w	r3, r7, #8
 8001790:	4618      	mov	r0, r3
 8001792:	f7fe fd55 	bl	8000240 <strlen>
 8001796:	4602      	mov	r2, r0
 8001798:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800179a:	689b      	ldr	r3, [r3, #8]
 800179c:	b292      	uxth	r2, r2
 800179e:	815a      	strh	r2, [r3, #10]

	tcp_server_send(tpcb, esTx);
 80017a0:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80017a2:	6878      	ldr	r0, [r7, #4]
 80017a4:	f7ff ff28 	bl	80015f8 <tcp_server_send>

	pbuf_free(es->p);
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	689b      	ldr	r3, [r3, #8]
 80017ac:	4618      	mov	r0, r3
 80017ae:	f006 f84d 	bl	800784c <pbuf_free>

}
 80017b2:	bf00      	nop
 80017b4:	3774      	adds	r7, #116	@ 0x74
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd90      	pop	{r4, r7, pc}
 80017ba:	bf00      	nop
 80017bc:	20000520 	.word	0x20000520
 80017c0:	08012684 	.word	0x08012684

080017c4 <tcp_decode_message>:

static void tcp_decode_message(struct tcp_server_struct *es)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b09c      	sub	sp, #112	@ 0x70
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]

	char buf[100];


	//memset (ethBuf, '\0', 1024);
	memset (buf, '\0', 100);
 80017cc:	f107 030c 	add.w	r3, r7, #12
 80017d0:	2264      	movs	r2, #100	@ 0x64
 80017d2:	2100      	movs	r1, #0
 80017d4:	4618      	mov	r0, r3
 80017d6:	f00f fea6 	bl	8011526 <memset>
	strncpy(buf, (char *)es->p->payload, es->p->tot_len);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	689b      	ldr	r3, [r3, #8]
 80017de:	6859      	ldr	r1, [r3, #4]
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	689b      	ldr	r3, [r3, #8]
 80017e4:	891b      	ldrh	r3, [r3, #8]
 80017e6:	461a      	mov	r2, r3
 80017e8:	f107 030c 	add.w	r3, r7, #12
 80017ec:	4618      	mov	r0, r3
 80017ee:	f00f fea2 	bl	8011536 <strncpy>
	parseData(buf,es->p->len);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	689b      	ldr	r3, [r3, #8]
 80017f6:	895b      	ldrh	r3, [r3, #10]
 80017f8:	461a      	mov	r2, r3
 80017fa:	f107 030c 	add.w	r3, r7, #12
 80017fe:	4611      	mov	r1, r2
 8001800:	4618      	mov	r0, r3
 8001802:	f7fe feed 	bl	80005e0 <parseData>
	//strncpy(&ethBuf, (char *)es->p->payload, es->p->tot_len);
	if(buf[0] == 'L')
 8001806:	7b3b      	ldrb	r3, [r7, #12]
 8001808:	2b4c      	cmp	r3, #76	@ 0x4c
 800180a:	d105      	bne.n	8001818 <tcp_decode_message+0x54>
	{
		process_led(buf);
 800180c:	f107 030c 	add.w	r3, r7, #12
 8001810:	4618      	mov	r0, r3
 8001812:	f000 f805 	bl	8001820 <process_led>
	}
	else
	{

	}
	return;
 8001816:	bf00      	nop
 8001818:	bf00      	nop
}
 800181a:	3770      	adds	r7, #112	@ 0x70
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}

08001820 <process_led>:

static void process_led(char *buf)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
	if(buf[1]=='T')
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	3301      	adds	r3, #1
 800182c:	781b      	ldrb	r3, [r3, #0]
 800182e:	2b54      	cmp	r3, #84	@ 0x54
 8001830:	d104      	bne.n	800183c <process_led+0x1c>
	{
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8001832:	2180      	movs	r1, #128	@ 0x80
 8001834:	480e      	ldr	r0, [pc, #56]	@ (8001870 <process_led+0x50>)
 8001836:	f002 fce6 	bl	8004206 <HAL_GPIO_TogglePin>
	}
	else if(buf[1]=='R')
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7,GPIO_PIN_RESET);
	}
}
 800183a:	e014      	b.n	8001866 <process_led+0x46>
	else if(buf[1]=='S')
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	3301      	adds	r3, #1
 8001840:	781b      	ldrb	r3, [r3, #0]
 8001842:	2b53      	cmp	r3, #83	@ 0x53
 8001844:	d105      	bne.n	8001852 <process_led+0x32>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7,GPIO_PIN_SET);
 8001846:	2201      	movs	r2, #1
 8001848:	2180      	movs	r1, #128	@ 0x80
 800184a:	4809      	ldr	r0, [pc, #36]	@ (8001870 <process_led+0x50>)
 800184c:	f002 fcc2 	bl	80041d4 <HAL_GPIO_WritePin>
}
 8001850:	e009      	b.n	8001866 <process_led+0x46>
	else if(buf[1]=='R')
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	3301      	adds	r3, #1
 8001856:	781b      	ldrb	r3, [r3, #0]
 8001858:	2b52      	cmp	r3, #82	@ 0x52
 800185a:	d104      	bne.n	8001866 <process_led+0x46>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7,GPIO_PIN_RESET);
 800185c:	2200      	movs	r2, #0
 800185e:	2180      	movs	r1, #128	@ 0x80
 8001860:	4803      	ldr	r0, [pc, #12]	@ (8001870 <process_led+0x50>)
 8001862:	f002 fcb7 	bl	80041d4 <HAL_GPIO_WritePin>
}
 8001866:	bf00      	nop
 8001868:	3708      	adds	r7, #8
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	40020400 	.word	0x40020400

08001874 <udpClient_connect>:
struct udp_pcb *upcb;
char buffer[100];
int counter = 0;

void udpClient_connect(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b084      	sub	sp, #16
 8001878:	af00      	add	r7, sp, #0
	err_t err;

	/* 1. Create a new UDP control block  */
	upcb = udp_new();
 800187a:	f00d f973 	bl	800eb64 <udp_new>
 800187e:	4603      	mov	r3, r0
 8001880:	4a14      	ldr	r2, [pc, #80]	@ (80018d4 <udpClient_connect+0x60>)
 8001882:	6013      	str	r3, [r2, #0]

	/* Bind the block to module's IP and port */
	ip_addr_t myIPaddr;
	IP_ADDR4(&myIPaddr, 192, 168, 1, 2);
 8001884:	4b14      	ldr	r3, [pc, #80]	@ (80018d8 <udpClient_connect+0x64>)
 8001886:	60bb      	str	r3, [r7, #8]
	udp_bind(upcb, &myIPaddr, 6101);
 8001888:	4b12      	ldr	r3, [pc, #72]	@ (80018d4 <udpClient_connect+0x60>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f107 0108 	add.w	r1, r7, #8
 8001890:	f241 72d5 	movw	r2, #6101	@ 0x17d5
 8001894:	4618      	mov	r0, r3
 8001896:	f00d f84f 	bl	800e938 <udp_bind>


	/* configure destination IP address and port */
	ip_addr_t DestIPaddr;
	IP_ADDR4(&DestIPaddr, 192, 168, 1, 81);
 800189a:	4b10      	ldr	r3, [pc, #64]	@ (80018dc <udpClient_connect+0x68>)
 800189c:	607b      	str	r3, [r7, #4]
	err= udp_connect(upcb, &DestIPaddr, 6102);
 800189e:	4b0d      	ldr	r3, [pc, #52]	@ (80018d4 <udpClient_connect+0x60>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	1d39      	adds	r1, r7, #4
 80018a4:	f241 72d6 	movw	r2, #6102	@ 0x17d6
 80018a8:	4618      	mov	r0, r3
 80018aa:	f00d f8cd 	bl	800ea48 <udp_connect>
 80018ae:	4603      	mov	r3, r0
 80018b0:	73fb      	strb	r3, [r7, #15]

	if (err == ERR_OK)
 80018b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d108      	bne.n	80018cc <udpClient_connect+0x58>
	{
		/* 2. Send message to server */
		udpClient_send ();
 80018ba:	f000 f813 	bl	80018e4 <udpClient_send>

		/* 3. Set a receive callback for the upcb */
		udp_recv(upcb, udp_client_receive_callback, NULL);
 80018be:	4b05      	ldr	r3, [pc, #20]	@ (80018d4 <udpClient_connect+0x60>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	2200      	movs	r2, #0
 80018c4:	4906      	ldr	r1, [pc, #24]	@ (80018e0 <udpClient_connect+0x6c>)
 80018c6:	4618      	mov	r0, r3
 80018c8:	f00d f92c 	bl	800eb24 <udp_recv>
	}
}
 80018cc:	bf00      	nop
 80018ce:	3710      	adds	r7, #16
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	20000564 	.word	0x20000564
 80018d8:	0201a8c0 	.word	0x0201a8c0
 80018dc:	5101a8c0 	.word	0x5101a8c0
 80018e0:	08001951 	.word	0x08001951

080018e4 <udpClient_send>:

// Called in main.c
void udpClient_send(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b09c      	sub	sp, #112	@ 0x70
 80018e8:	af00      	add	r7, sp, #0
  struct pbuf *txBuf = (struct pbuf * )0x20006000;
 80018ea:	4b15      	ldr	r3, [pc, #84]	@ (8001940 <udpClient_send+0x5c>)
 80018ec:	66fb      	str	r3, [r7, #108]	@ 0x6c
  char data[100];

  int len = sprintf(data, "sending UDP client message %d", counter);
 80018ee:	4b15      	ldr	r3, [pc, #84]	@ (8001944 <udpClient_send+0x60>)
 80018f0:	681a      	ldr	r2, [r3, #0]
 80018f2:	1d3b      	adds	r3, r7, #4
 80018f4:	4914      	ldr	r1, [pc, #80]	@ (8001948 <udpClient_send+0x64>)
 80018f6:	4618      	mov	r0, r3
 80018f8:	f00f fd88 	bl	801140c <siprintf>
 80018fc:	66b8      	str	r0, [r7, #104]	@ 0x68

  /* allocate pbuf from pool*/
  txBuf = pbuf_alloc(PBUF_TRANSPORT, len, PBUF_RAM);
 80018fe:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001900:	b29b      	uxth	r3, r3
 8001902:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8001906:	4619      	mov	r1, r3
 8001908:	2036      	movs	r0, #54	@ 0x36
 800190a:	f005 fcbb 	bl	8007284 <pbuf_alloc>
 800190e:	66f8      	str	r0, [r7, #108]	@ 0x6c

  if (txBuf != NULL)
 8001910:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001912:	2b00      	cmp	r3, #0
 8001914:	d00f      	beq.n	8001936 <udpClient_send+0x52>
  {
    /* copy data to pbuf */
    pbuf_take(txBuf, data, len);
 8001916:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001918:	b29a      	uxth	r2, r3
 800191a:	1d3b      	adds	r3, r7, #4
 800191c:	4619      	mov	r1, r3
 800191e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8001920:	f006 fa00 	bl	8007d24 <pbuf_take>

    /* send udp data */
    udp_send(upcb, txBuf);
 8001924:	4b09      	ldr	r3, [pc, #36]	@ (800194c <udpClient_send+0x68>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800192a:	4618      	mov	r0, r3
 800192c:	f00c fe1a 	bl	800e564 <udp_send>

    /* free pbuf */
    pbuf_free(txBuf);
 8001930:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8001932:	f005 ff8b 	bl	800784c <pbuf_free>
  }
}
 8001936:	bf00      	nop
 8001938:	3770      	adds	r7, #112	@ 0x70
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	20006000 	.word	0x20006000
 8001944:	200005cc 	.word	0x200005cc
 8001948:	08012688 	.word	0x08012688
 800194c:	20000564 	.word	0x20000564

08001950 <udp_client_receive_callback>:


void udp_client_receive_callback(void *arg, struct udp_pcb *upcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b084      	sub	sp, #16
 8001954:	af00      	add	r7, sp, #0
 8001956:	60f8      	str	r0, [r7, #12]
 8001958:	60b9      	str	r1, [r7, #8]
 800195a:	607a      	str	r2, [r7, #4]
 800195c:	603b      	str	r3, [r7, #0]
	/* Copy the data from the pbuf */
	strncpy (buffer, (char *)p->payload, p->len);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6859      	ldr	r1, [r3, #4]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	895b      	ldrh	r3, [r3, #10]
 8001966:	461a      	mov	r2, r3
 8001968:	4808      	ldr	r0, [pc, #32]	@ (800198c <udp_client_receive_callback+0x3c>)
 800196a:	f00f fde4 	bl	8011536 <strncpy>

	/*increment message count */
	counter++;
 800196e:	4b08      	ldr	r3, [pc, #32]	@ (8001990 <udp_client_receive_callback+0x40>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	3301      	adds	r3, #1
 8001974:	4a06      	ldr	r2, [pc, #24]	@ (8001990 <udp_client_receive_callback+0x40>)
 8001976:	6013      	str	r3, [r2, #0]
	udp_parse_message(p);
 8001978:	6878      	ldr	r0, [r7, #4]
 800197a:	f000 f80b 	bl	8001994 <udp_parse_message>
	/* Free receive pbuf */
	pbuf_free(p);
 800197e:	6878      	ldr	r0, [r7, #4]
 8001980:	f005 ff64 	bl	800784c <pbuf_free>
}
 8001984:	bf00      	nop
 8001986:	3710      	adds	r7, #16
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}
 800198c:	20000568 	.word	0x20000568
 8001990:	200005cc 	.word	0x200005cc

08001994 <udp_parse_message>:

void udp_parse_message(struct pbuf *p){
 8001994:	b580      	push	{r7, lr}
 8001996:	b09c      	sub	sp, #112	@ 0x70
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]

	char buf[100];


	//memset (ethBuf, '\0', 1024);
	memset (buf, '\0', 100);
 800199c:	f107 030c 	add.w	r3, r7, #12
 80019a0:	2264      	movs	r2, #100	@ 0x64
 80019a2:	2100      	movs	r1, #0
 80019a4:	4618      	mov	r0, r3
 80019a6:	f00f fdbe 	bl	8011526 <memset>
	strncpy(buf, (char *)p->payload, p->tot_len);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6859      	ldr	r1, [r3, #4]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	891b      	ldrh	r3, [r3, #8]
 80019b2:	461a      	mov	r2, r3
 80019b4:	f107 030c 	add.w	r3, r7, #12
 80019b8:	4618      	mov	r0, r3
 80019ba:	f00f fdbc 	bl	8011536 <strncpy>
	//parseData(buf,p->len,TCP_IP);
	strncpy(&ethBuf, (char *)p->payload, p->tot_len);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6859      	ldr	r1, [r3, #4]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	891b      	ldrh	r3, [r3, #8]
 80019c6:	461a      	mov	r2, r3
 80019c8:	4803      	ldr	r0, [pc, #12]	@ (80019d8 <udp_parse_message+0x44>)
 80019ca:	f00f fdb4 	bl	8011536 <strncpy>
	return;
 80019ce:	bf00      	nop
}
 80019d0:	3770      	adds	r7, #112	@ 0x70
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	20000520 	.word	0x20000520

080019dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80019dc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001a14 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80019e0:	f7ff fc84 	bl	80012ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80019e4:	480c      	ldr	r0, [pc, #48]	@ (8001a18 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80019e6:	490d      	ldr	r1, [pc, #52]	@ (8001a1c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80019e8:	4a0d      	ldr	r2, [pc, #52]	@ (8001a20 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80019ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019ec:	e002      	b.n	80019f4 <LoopCopyDataInit>

080019ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019f2:	3304      	adds	r3, #4

080019f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019f8:	d3f9      	bcc.n	80019ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019fa:	4a0a      	ldr	r2, [pc, #40]	@ (8001a24 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80019fc:	4c0a      	ldr	r4, [pc, #40]	@ (8001a28 <LoopFillZerobss+0x22>)
  movs r3, #0
 80019fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a00:	e001      	b.n	8001a06 <LoopFillZerobss>

08001a02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a04:	3204      	adds	r2, #4

08001a06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a08:	d3fb      	bcc.n	8001a02 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001a0a:	f00f fded 	bl	80115e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a0e:	f7fe ff31 	bl	8000874 <main>
  bx  lr    
 8001a12:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001a14:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001a18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a1c:	200000c8 	.word	0x200000c8
  ldr r2, =_sidata
 8001a20:	0801527c 	.word	0x0801527c
  ldr r2, =_sbss
 8001a24:	20000208 	.word	0x20000208
  ldr r4, =_ebss
 8001a28:	2000aa90 	.word	0x2000aa90

08001a2c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a2c:	e7fe      	b.n	8001a2c <ADC_IRQHandler>

08001a2e <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8001a2e:	b480      	push	{r7}
 8001a30:	b083      	sub	sp, #12
 8001a32:	af00      	add	r7, sp, #0
 8001a34:	6078      	str	r0, [r7, #4]
 8001a36:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d00b      	beq.n	8001a56 <LAN8742_RegisterBusIO+0x28>
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	68db      	ldr	r3, [r3, #12]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d007      	beq.n	8001a56 <LAN8742_RegisterBusIO+0x28>
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	689b      	ldr	r3, [r3, #8]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d003      	beq.n	8001a56 <LAN8742_RegisterBusIO+0x28>
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	691b      	ldr	r3, [r3, #16]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d102      	bne.n	8001a5c <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8001a56:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001a5a:	e014      	b.n	8001a86 <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	681a      	ldr	r2, [r3, #0]
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	685a      	ldr	r2, [r3, #4]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	68da      	ldr	r2, [r3, #12]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	689a      	ldr	r2, [r3, #8]
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	691a      	ldr	r2, [r3, #16]
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 8001a84:	2300      	movs	r3, #0
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	370c      	adds	r7, #12
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr

08001a92 <LAN8742_Init>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ADDRESS_ERROR if cannot find device address
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8001a92:	b580      	push	{r7, lr}
 8001a94:	b086      	sub	sp, #24
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	60fb      	str	r3, [r7, #12]
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d139      	bne.n	8001b22 <LAN8742_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	689b      	ldr	r3, [r3, #8]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d002      	beq.n	8001abc <LAN8742_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	689b      	ldr	r3, [r3, #8]
 8001aba:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2220      	movs	r2, #32
 8001ac0:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	617b      	str	r3, [r7, #20]
 8001ac6:	e01c      	b.n	8001b02 <LAN8742_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	695b      	ldr	r3, [r3, #20]
 8001acc:	f107 020c 	add.w	r2, r7, #12
 8001ad0:	2112      	movs	r1, #18
 8001ad2:	6978      	ldr	r0, [r7, #20]
 8001ad4:	4798      	blx	r3
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	da03      	bge.n	8001ae4 <LAN8742_Init+0x52>
       {
         status = LAN8742_STATUS_READ_ERROR;
 8001adc:	f06f 0304 	mvn.w	r3, #4
 8001ae0:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 8001ae2:	e00b      	b.n	8001afc <LAN8742_Init+0x6a>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	f003 031f 	and.w	r3, r3, #31
 8001aea:	697a      	ldr	r2, [r7, #20]
 8001aec:	429a      	cmp	r2, r3
 8001aee:	d105      	bne.n	8001afc <LAN8742_Init+0x6a>
       {
         pObj->DevAddr = addr;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	697a      	ldr	r2, [r7, #20]
 8001af4:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8001af6:	2300      	movs	r3, #0
 8001af8:	613b      	str	r3, [r7, #16]
         break;
 8001afa:	e005      	b.n	8001b08 <LAN8742_Init+0x76>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	3301      	adds	r3, #1
 8001b00:	617b      	str	r3, [r7, #20]
 8001b02:	697b      	ldr	r3, [r7, #20]
 8001b04:	2b1f      	cmp	r3, #31
 8001b06:	d9df      	bls.n	8001ac8 <LAN8742_Init+0x36>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	2b1f      	cmp	r3, #31
 8001b0e:	d902      	bls.n	8001b16 <LAN8742_Init+0x84>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8001b10:	f06f 0302 	mvn.w	r3, #2
 8001b14:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8001b16:	693b      	ldr	r3, [r7, #16]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d102      	bne.n	8001b22 <LAN8742_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2201      	movs	r2, #1
 8001b20:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 8001b22:	693b      	ldr	r3, [r7, #16]
 }
 8001b24:	4618      	mov	r0, r3
 8001b26:	3718      	adds	r7, #24
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}

08001b2c <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b084      	sub	sp, #16
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8001b34:	2300      	movs	r3, #0
 8001b36:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	695b      	ldr	r3, [r3, #20]
 8001b3c:	687a      	ldr	r2, [r7, #4]
 8001b3e:	6810      	ldr	r0, [r2, #0]
 8001b40:	f107 020c 	add.w	r2, r7, #12
 8001b44:	2101      	movs	r1, #1
 8001b46:	4798      	blx	r3
 8001b48:	4603      	mov	r3, r0
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	da02      	bge.n	8001b54 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001b4e:	f06f 0304 	mvn.w	r3, #4
 8001b52:	e06e      	b.n	8001c32 <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	695b      	ldr	r3, [r3, #20]
 8001b58:	687a      	ldr	r2, [r7, #4]
 8001b5a:	6810      	ldr	r0, [r2, #0]
 8001b5c:	f107 020c 	add.w	r2, r7, #12
 8001b60:	2101      	movs	r1, #1
 8001b62:	4798      	blx	r3
 8001b64:	4603      	mov	r3, r0
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	da02      	bge.n	8001b70 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001b6a:	f06f 0304 	mvn.w	r3, #4
 8001b6e:	e060      	b.n	8001c32 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	f003 0304 	and.w	r3, r3, #4
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d101      	bne.n	8001b7e <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e059      	b.n	8001c32 <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	695b      	ldr	r3, [r3, #20]
 8001b82:	687a      	ldr	r2, [r7, #4]
 8001b84:	6810      	ldr	r0, [r2, #0]
 8001b86:	f107 020c 	add.w	r2, r7, #12
 8001b8a:	2100      	movs	r1, #0
 8001b8c:	4798      	blx	r3
 8001b8e:	4603      	mov	r3, r0
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	da02      	bge.n	8001b9a <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001b94:	f06f 0304 	mvn.w	r3, #4
 8001b98:	e04b      	b.n	8001c32 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d11b      	bne.n	8001bdc <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d006      	beq.n	8001bbc <LAN8742_GetLinkState+0x90>
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d001      	beq.n	8001bbc <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001bb8:	2302      	movs	r3, #2
 8001bba:	e03a      	b.n	8001c32 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d001      	beq.n	8001bca <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001bc6:	2303      	movs	r3, #3
 8001bc8:	e033      	b.n	8001c32 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d001      	beq.n	8001bd8 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001bd4:	2304      	movs	r3, #4
 8001bd6:	e02c      	b.n	8001c32 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001bd8:	2305      	movs	r3, #5
 8001bda:	e02a      	b.n	8001c32 <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	695b      	ldr	r3, [r3, #20]
 8001be0:	687a      	ldr	r2, [r7, #4]
 8001be2:	6810      	ldr	r0, [r2, #0]
 8001be4:	f107 020c 	add.w	r2, r7, #12
 8001be8:	211f      	movs	r1, #31
 8001bea:	4798      	blx	r3
 8001bec:	4603      	mov	r3, r0
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	da02      	bge.n	8001bf8 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8001bf2:	f06f 0304 	mvn.w	r3, #4
 8001bf6:	e01c      	b.n	8001c32 <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d101      	bne.n	8001c06 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8001c02:	2306      	movs	r3, #6
 8001c04:	e015      	b.n	8001c32 <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	f003 031c 	and.w	r3, r3, #28
 8001c0c:	2b18      	cmp	r3, #24
 8001c0e:	d101      	bne.n	8001c14 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001c10:	2302      	movs	r3, #2
 8001c12:	e00e      	b.n	8001c32 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	f003 031c 	and.w	r3, r3, #28
 8001c1a:	2b08      	cmp	r3, #8
 8001c1c:	d101      	bne.n	8001c22 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001c1e:	2303      	movs	r3, #3
 8001c20:	e007      	b.n	8001c32 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	f003 031c 	and.w	r3, r3, #28
 8001c28:	2b14      	cmp	r3, #20
 8001c2a:	d101      	bne.n	8001c30 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001c2c:	2304      	movs	r3, #4
 8001c2e:	e000      	b.n	8001c32 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001c30:	2305      	movs	r3, #5
    }
  }
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	3710      	adds	r7, #16
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}
	...

08001c3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	af00      	add	r7, sp, #0
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCELERATOR_ENABLE != 0)
  __HAL_FLASH_ART_ENABLE();
 8001c40:	4b0b      	ldr	r3, [pc, #44]	@ (8001c70 <HAL_Init+0x34>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a0a      	ldr	r2, [pc, #40]	@ (8001c70 <HAL_Init+0x34>)
 8001c46:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001c4a:	6013      	str	r3, [r2, #0]
#endif /* ART_ACCELERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c4c:	4b08      	ldr	r3, [pc, #32]	@ (8001c70 <HAL_Init+0x34>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a07      	ldr	r2, [pc, #28]	@ (8001c70 <HAL_Init+0x34>)
 8001c52:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c56:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c58:	2003      	movs	r0, #3
 8001c5a:	f000 f94f 	bl	8001efc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c5e:	2000      	movs	r0, #0
 8001c60:	f000 f808 	bl	8001c74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c64:	f7ff f8ca 	bl	8000dfc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c68:	2300      	movs	r3, #0
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	40023c00 	.word	0x40023c00

08001c74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b082      	sub	sp, #8
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c7c:	4b12      	ldr	r3, [pc, #72]	@ (8001cc8 <HAL_InitTick+0x54>)
 8001c7e:	681a      	ldr	r2, [r3, #0]
 8001c80:	4b12      	ldr	r3, [pc, #72]	@ (8001ccc <HAL_InitTick+0x58>)
 8001c82:	781b      	ldrb	r3, [r3, #0]
 8001c84:	4619      	mov	r1, r3
 8001c86:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c92:	4618      	mov	r0, r3
 8001c94:	f000 f967 	bl	8001f66 <HAL_SYSTICK_Config>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d001      	beq.n	8001ca2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e00e      	b.n	8001cc0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2b0f      	cmp	r3, #15
 8001ca6:	d80a      	bhi.n	8001cbe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ca8:	2200      	movs	r2, #0
 8001caa:	6879      	ldr	r1, [r7, #4]
 8001cac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001cb0:	f000 f92f 	bl	8001f12 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001cb4:	4a06      	ldr	r2, [pc, #24]	@ (8001cd0 <HAL_InitTick+0x5c>)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	e000      	b.n	8001cc0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	3708      	adds	r7, #8
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	20000040 	.word	0x20000040
 8001ccc:	20000048 	.word	0x20000048
 8001cd0:	20000044 	.word	0x20000044

08001cd4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cd8:	4b06      	ldr	r3, [pc, #24]	@ (8001cf4 <HAL_IncTick+0x20>)
 8001cda:	781b      	ldrb	r3, [r3, #0]
 8001cdc:	461a      	mov	r2, r3
 8001cde:	4b06      	ldr	r3, [pc, #24]	@ (8001cf8 <HAL_IncTick+0x24>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4413      	add	r3, r2
 8001ce4:	4a04      	ldr	r2, [pc, #16]	@ (8001cf8 <HAL_IncTick+0x24>)
 8001ce6:	6013      	str	r3, [r2, #0]
}
 8001ce8:	bf00      	nop
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr
 8001cf2:	bf00      	nop
 8001cf4:	20000048 	.word	0x20000048
 8001cf8:	200005d0 	.word	0x200005d0

08001cfc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	af00      	add	r7, sp, #0
  return uwTick;
 8001d00:	4b03      	ldr	r3, [pc, #12]	@ (8001d10 <HAL_GetTick+0x14>)
 8001d02:	681b      	ldr	r3, [r3, #0]
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr
 8001d0e:	bf00      	nop
 8001d10:	200005d0 	.word	0x200005d0

08001d14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b084      	sub	sp, #16
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d1c:	f7ff ffee 	bl	8001cfc <HAL_GetTick>
 8001d20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001d2c:	d005      	beq.n	8001d3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d2e:	4b0a      	ldr	r3, [pc, #40]	@ (8001d58 <HAL_Delay+0x44>)
 8001d30:	781b      	ldrb	r3, [r3, #0]
 8001d32:	461a      	mov	r2, r3
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	4413      	add	r3, r2
 8001d38:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d3a:	bf00      	nop
 8001d3c:	f7ff ffde 	bl	8001cfc <HAL_GetTick>
 8001d40:	4602      	mov	r2, r0
 8001d42:	68bb      	ldr	r3, [r7, #8]
 8001d44:	1ad3      	subs	r3, r2, r3
 8001d46:	68fa      	ldr	r2, [r7, #12]
 8001d48:	429a      	cmp	r2, r3
 8001d4a:	d8f7      	bhi.n	8001d3c <HAL_Delay+0x28>
  {
  }
}
 8001d4c:	bf00      	nop
 8001d4e:	bf00      	nop
 8001d50:	3710      	adds	r7, #16
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	20000048 	.word	0x20000048

08001d5c <__NVIC_SetPriorityGrouping>:
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b085      	sub	sp, #20
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	f003 0307 	and.w	r3, r3, #7
 8001d6a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d6c:	4b0b      	ldr	r3, [pc, #44]	@ (8001d9c <__NVIC_SetPriorityGrouping+0x40>)
 8001d6e:	68db      	ldr	r3, [r3, #12]
 8001d70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d72:	68ba      	ldr	r2, [r7, #8]
 8001d74:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001d78:	4013      	ands	r3, r2
 8001d7a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d80:	68bb      	ldr	r3, [r7, #8]
 8001d82:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001d84:	4b06      	ldr	r3, [pc, #24]	@ (8001da0 <__NVIC_SetPriorityGrouping+0x44>)
 8001d86:	4313      	orrs	r3, r2
 8001d88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d8a:	4a04      	ldr	r2, [pc, #16]	@ (8001d9c <__NVIC_SetPriorityGrouping+0x40>)
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	60d3      	str	r3, [r2, #12]
}
 8001d90:	bf00      	nop
 8001d92:	3714      	adds	r7, #20
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr
 8001d9c:	e000ed00 	.word	0xe000ed00
 8001da0:	05fa0000 	.word	0x05fa0000

08001da4 <__NVIC_GetPriorityGrouping>:
{
 8001da4:	b480      	push	{r7}
 8001da6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001da8:	4b04      	ldr	r3, [pc, #16]	@ (8001dbc <__NVIC_GetPriorityGrouping+0x18>)
 8001daa:	68db      	ldr	r3, [r3, #12]
 8001dac:	0a1b      	lsrs	r3, r3, #8
 8001dae:	f003 0307 	and.w	r3, r3, #7
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr
 8001dbc:	e000ed00 	.word	0xe000ed00

08001dc0 <__NVIC_EnableIRQ>:
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b083      	sub	sp, #12
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	db0b      	blt.n	8001dea <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dd2:	79fb      	ldrb	r3, [r7, #7]
 8001dd4:	f003 021f 	and.w	r2, r3, #31
 8001dd8:	4907      	ldr	r1, [pc, #28]	@ (8001df8 <__NVIC_EnableIRQ+0x38>)
 8001dda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dde:	095b      	lsrs	r3, r3, #5
 8001de0:	2001      	movs	r0, #1
 8001de2:	fa00 f202 	lsl.w	r2, r0, r2
 8001de6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001dea:	bf00      	nop
 8001dec:	370c      	adds	r7, #12
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr
 8001df6:	bf00      	nop
 8001df8:	e000e100 	.word	0xe000e100

08001dfc <__NVIC_SetPriority>:
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b083      	sub	sp, #12
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	4603      	mov	r3, r0
 8001e04:	6039      	str	r1, [r7, #0]
 8001e06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	db0a      	blt.n	8001e26 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	b2da      	uxtb	r2, r3
 8001e14:	490c      	ldr	r1, [pc, #48]	@ (8001e48 <__NVIC_SetPriority+0x4c>)
 8001e16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e1a:	0112      	lsls	r2, r2, #4
 8001e1c:	b2d2      	uxtb	r2, r2
 8001e1e:	440b      	add	r3, r1
 8001e20:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001e24:	e00a      	b.n	8001e3c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	b2da      	uxtb	r2, r3
 8001e2a:	4908      	ldr	r1, [pc, #32]	@ (8001e4c <__NVIC_SetPriority+0x50>)
 8001e2c:	79fb      	ldrb	r3, [r7, #7]
 8001e2e:	f003 030f 	and.w	r3, r3, #15
 8001e32:	3b04      	subs	r3, #4
 8001e34:	0112      	lsls	r2, r2, #4
 8001e36:	b2d2      	uxtb	r2, r2
 8001e38:	440b      	add	r3, r1
 8001e3a:	761a      	strb	r2, [r3, #24]
}
 8001e3c:	bf00      	nop
 8001e3e:	370c      	adds	r7, #12
 8001e40:	46bd      	mov	sp, r7
 8001e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e46:	4770      	bx	lr
 8001e48:	e000e100 	.word	0xe000e100
 8001e4c:	e000ed00 	.word	0xe000ed00

08001e50 <NVIC_EncodePriority>:
{
 8001e50:	b480      	push	{r7}
 8001e52:	b089      	sub	sp, #36	@ 0x24
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	60f8      	str	r0, [r7, #12]
 8001e58:	60b9      	str	r1, [r7, #8]
 8001e5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	f003 0307 	and.w	r3, r3, #7
 8001e62:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e64:	69fb      	ldr	r3, [r7, #28]
 8001e66:	f1c3 0307 	rsb	r3, r3, #7
 8001e6a:	2b04      	cmp	r3, #4
 8001e6c:	bf28      	it	cs
 8001e6e:	2304      	movcs	r3, #4
 8001e70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e72:	69fb      	ldr	r3, [r7, #28]
 8001e74:	3304      	adds	r3, #4
 8001e76:	2b06      	cmp	r3, #6
 8001e78:	d902      	bls.n	8001e80 <NVIC_EncodePriority+0x30>
 8001e7a:	69fb      	ldr	r3, [r7, #28]
 8001e7c:	3b03      	subs	r3, #3
 8001e7e:	e000      	b.n	8001e82 <NVIC_EncodePriority+0x32>
 8001e80:	2300      	movs	r3, #0
 8001e82:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e84:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001e88:	69bb      	ldr	r3, [r7, #24]
 8001e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8e:	43da      	mvns	r2, r3
 8001e90:	68bb      	ldr	r3, [r7, #8]
 8001e92:	401a      	ands	r2, r3
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e98:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	fa01 f303 	lsl.w	r3, r1, r3
 8001ea2:	43d9      	mvns	r1, r3
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ea8:	4313      	orrs	r3, r2
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	3724      	adds	r7, #36	@ 0x24
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr
	...

08001eb8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b082      	sub	sp, #8
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	3b01      	subs	r3, #1
 8001ec4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001ec8:	d301      	bcc.n	8001ece <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e00f      	b.n	8001eee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ece:	4a0a      	ldr	r2, [pc, #40]	@ (8001ef8 <SysTick_Config+0x40>)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	3b01      	subs	r3, #1
 8001ed4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ed6:	210f      	movs	r1, #15
 8001ed8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001edc:	f7ff ff8e 	bl	8001dfc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ee0:	4b05      	ldr	r3, [pc, #20]	@ (8001ef8 <SysTick_Config+0x40>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ee6:	4b04      	ldr	r3, [pc, #16]	@ (8001ef8 <SysTick_Config+0x40>)
 8001ee8:	2207      	movs	r2, #7
 8001eea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001eec:	2300      	movs	r3, #0
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	3708      	adds	r7, #8
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	e000e010 	.word	0xe000e010

08001efc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b082      	sub	sp, #8
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f04:	6878      	ldr	r0, [r7, #4]
 8001f06:	f7ff ff29 	bl	8001d5c <__NVIC_SetPriorityGrouping>
}
 8001f0a:	bf00      	nop
 8001f0c:	3708      	adds	r7, #8
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}

08001f12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f12:	b580      	push	{r7, lr}
 8001f14:	b086      	sub	sp, #24
 8001f16:	af00      	add	r7, sp, #0
 8001f18:	4603      	mov	r3, r0
 8001f1a:	60b9      	str	r1, [r7, #8]
 8001f1c:	607a      	str	r2, [r7, #4]
 8001f1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001f20:	2300      	movs	r3, #0
 8001f22:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f24:	f7ff ff3e 	bl	8001da4 <__NVIC_GetPriorityGrouping>
 8001f28:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f2a:	687a      	ldr	r2, [r7, #4]
 8001f2c:	68b9      	ldr	r1, [r7, #8]
 8001f2e:	6978      	ldr	r0, [r7, #20]
 8001f30:	f7ff ff8e 	bl	8001e50 <NVIC_EncodePriority>
 8001f34:	4602      	mov	r2, r0
 8001f36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f3a:	4611      	mov	r1, r2
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f7ff ff5d 	bl	8001dfc <__NVIC_SetPriority>
}
 8001f42:	bf00      	nop
 8001f44:	3718      	adds	r7, #24
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}

08001f4a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f4a:	b580      	push	{r7, lr}
 8001f4c:	b082      	sub	sp, #8
 8001f4e:	af00      	add	r7, sp, #0
 8001f50:	4603      	mov	r3, r0
 8001f52:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f7ff ff31 	bl	8001dc0 <__NVIC_EnableIRQ>
}
 8001f5e:	bf00      	nop
 8001f60:	3708      	adds	r7, #8
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}

08001f66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f66:	b580      	push	{r7, lr}
 8001f68:	b082      	sub	sp, #8
 8001f6a:	af00      	add	r7, sp, #0
 8001f6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f6e:	6878      	ldr	r0, [r7, #4]
 8001f70:	f7ff ffa2 	bl	8001eb8 <SysTick_Config>
 8001f74:	4603      	mov	r3, r0
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	3708      	adds	r7, #8
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
	...

08001f80 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001f80:	b480      	push	{r7}
 8001f82:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001f84:	f3bf 8f5f 	dmb	sy
}
 8001f88:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001f8a:	4b07      	ldr	r3, [pc, #28]	@ (8001fa8 <HAL_MPU_Disable+0x28>)
 8001f8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f8e:	4a06      	ldr	r2, [pc, #24]	@ (8001fa8 <HAL_MPU_Disable+0x28>)
 8001f90:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f94:	6253      	str	r3, [r2, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001f96:	4b05      	ldr	r3, [pc, #20]	@ (8001fac <HAL_MPU_Disable+0x2c>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	605a      	str	r2, [r3, #4]
}
 8001f9c:	bf00      	nop
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa4:	4770      	bx	lr
 8001fa6:	bf00      	nop
 8001fa8:	e000ed00 	.word	0xe000ed00
 8001fac:	e000ed90 	.word	0xe000ed90

08001fb0 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b083      	sub	sp, #12
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001fb8:	4a0b      	ldr	r2, [pc, #44]	@ (8001fe8 <HAL_MPU_Enable+0x38>)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	f043 0301 	orr.w	r3, r3, #1
 8001fc0:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001fc2:	4b0a      	ldr	r3, [pc, #40]	@ (8001fec <HAL_MPU_Enable+0x3c>)
 8001fc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fc6:	4a09      	ldr	r2, [pc, #36]	@ (8001fec <HAL_MPU_Enable+0x3c>)
 8001fc8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001fcc:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001fce:	f3bf 8f4f 	dsb	sy
}
 8001fd2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001fd4:	f3bf 8f6f 	isb	sy
}
 8001fd8:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001fda:	bf00      	nop
 8001fdc:	370c      	adds	r7, #12
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr
 8001fe6:	bf00      	nop
 8001fe8:	e000ed90 	.word	0xe000ed90
 8001fec:	e000ed00 	.word	0xe000ed00

08001ff0 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b083      	sub	sp, #12
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	785a      	ldrb	r2, [r3, #1]
 8001ffc:	4b1b      	ldr	r3, [pc, #108]	@ (800206c <HAL_MPU_ConfigRegion+0x7c>)
 8001ffe:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8002000:	4b1a      	ldr	r3, [pc, #104]	@ (800206c <HAL_MPU_ConfigRegion+0x7c>)
 8002002:	691b      	ldr	r3, [r3, #16]
 8002004:	4a19      	ldr	r2, [pc, #100]	@ (800206c <HAL_MPU_ConfigRegion+0x7c>)
 8002006:	f023 0301 	bic.w	r3, r3, #1
 800200a:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 800200c:	4a17      	ldr	r2, [pc, #92]	@ (800206c <HAL_MPU_ConfigRegion+0x7c>)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	7b1b      	ldrb	r3, [r3, #12]
 8002018:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	7adb      	ldrb	r3, [r3, #11]
 800201e:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002020:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	7a9b      	ldrb	r3, [r3, #10]
 8002026:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002028:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	7b5b      	ldrb	r3, [r3, #13]
 800202e:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002030:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	7b9b      	ldrb	r3, [r3, #14]
 8002036:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002038:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	7bdb      	ldrb	r3, [r3, #15]
 800203e:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002040:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	7a5b      	ldrb	r3, [r3, #9]
 8002046:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002048:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	7a1b      	ldrb	r3, [r3, #8]
 800204e:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002050:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8002052:	687a      	ldr	r2, [r7, #4]
 8002054:	7812      	ldrb	r2, [r2, #0]
 8002056:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002058:	4a04      	ldr	r2, [pc, #16]	@ (800206c <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800205a:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800205c:	6113      	str	r3, [r2, #16]
}
 800205e:	bf00      	nop
 8002060:	370c      	adds	r7, #12
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr
 800206a:	bf00      	nop
 800206c:	e000ed90 	.word	0xe000ed90

08002070 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b082      	sub	sp, #8
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d101      	bne.n	8002082 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800207e:	2301      	movs	r3, #1
 8002080:	e054      	b.n	800212c <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	7f5b      	ldrb	r3, [r3, #29]
 8002086:	b2db      	uxtb	r3, r3
 8002088:	2b00      	cmp	r3, #0
 800208a:	d105      	bne.n	8002098 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2200      	movs	r2, #0
 8002090:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002092:	6878      	ldr	r0, [r7, #4]
 8002094:	f7fe fed6 	bl	8000e44 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2202      	movs	r2, #2
 800209c:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	791b      	ldrb	r3, [r3, #4]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d10c      	bne.n	80020c0 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a22      	ldr	r2, [pc, #136]	@ (8002134 <HAL_CRC_Init+0xc4>)
 80020ac:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	689a      	ldr	r2, [r3, #8]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f022 0218 	bic.w	r2, r2, #24
 80020bc:	609a      	str	r2, [r3, #8]
 80020be:	e00c      	b.n	80020da <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6899      	ldr	r1, [r3, #8]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	68db      	ldr	r3, [r3, #12]
 80020c8:	461a      	mov	r2, r3
 80020ca:	6878      	ldr	r0, [r7, #4]
 80020cc:	f000 f948 	bl	8002360 <HAL_CRCEx_Polynomial_Set>
 80020d0:	4603      	mov	r3, r0
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d001      	beq.n	80020da <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	e028      	b.n	800212c <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	795b      	ldrb	r3, [r3, #5]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d105      	bne.n	80020ee <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80020ea:	611a      	str	r2, [r3, #16]
 80020ec:	e004      	b.n	80020f8 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	687a      	ldr	r2, [r7, #4]
 80020f4:	6912      	ldr	r2, [r2, #16]
 80020f6:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	695a      	ldr	r2, [r3, #20]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	430a      	orrs	r2, r1
 800210c:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	699a      	ldr	r2, [r3, #24]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	430a      	orrs	r2, r1
 8002122:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2201      	movs	r2, #1
 8002128:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800212a:	2300      	movs	r3, #0
}
 800212c:	4618      	mov	r0, r3
 800212e:	3708      	adds	r7, #8
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}
 8002134:	04c11db7 	.word	0x04c11db7

08002138 <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b086      	sub	sp, #24
 800213c:	af00      	add	r7, sp, #0
 800213e:	60f8      	str	r0, [r7, #12]
 8002140:	60b9      	str	r1, [r7, #8]
 8002142:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8002144:	2300      	movs	r3, #0
 8002146:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	2202      	movs	r2, #2
 800214c:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	689a      	ldr	r2, [r3, #8]
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f042 0201 	orr.w	r2, r2, #1
 800215c:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	6a1b      	ldr	r3, [r3, #32]
 8002162:	2b03      	cmp	r3, #3
 8002164:	d006      	beq.n	8002174 <HAL_CRC_Calculate+0x3c>
 8002166:	2b03      	cmp	r3, #3
 8002168:	d829      	bhi.n	80021be <HAL_CRC_Calculate+0x86>
 800216a:	2b01      	cmp	r3, #1
 800216c:	d019      	beq.n	80021a2 <HAL_CRC_Calculate+0x6a>
 800216e:	2b02      	cmp	r3, #2
 8002170:	d01e      	beq.n	80021b0 <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 8002172:	e024      	b.n	80021be <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 8002174:	2300      	movs	r3, #0
 8002176:	617b      	str	r3, [r7, #20]
 8002178:	e00a      	b.n	8002190 <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 800217a:	697b      	ldr	r3, [r7, #20]
 800217c:	009b      	lsls	r3, r3, #2
 800217e:	68ba      	ldr	r2, [r7, #8]
 8002180:	441a      	add	r2, r3
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	6812      	ldr	r2, [r2, #0]
 8002188:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	3301      	adds	r3, #1
 800218e:	617b      	str	r3, [r7, #20]
 8002190:	697a      	ldr	r2, [r7, #20]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	429a      	cmp	r2, r3
 8002196:	d3f0      	bcc.n	800217a <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	613b      	str	r3, [r7, #16]
      break;
 80021a0:	e00e      	b.n	80021c0 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 80021a2:	687a      	ldr	r2, [r7, #4]
 80021a4:	68b9      	ldr	r1, [r7, #8]
 80021a6:	68f8      	ldr	r0, [r7, #12]
 80021a8:	f000 f812 	bl	80021d0 <CRC_Handle_8>
 80021ac:	6138      	str	r0, [r7, #16]
      break;
 80021ae:	e007      	b.n	80021c0 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 80021b0:	687a      	ldr	r2, [r7, #4]
 80021b2:	68b9      	ldr	r1, [r7, #8]
 80021b4:	68f8      	ldr	r0, [r7, #12]
 80021b6:	f000 f899 	bl	80022ec <CRC_Handle_16>
 80021ba:	6138      	str	r0, [r7, #16]
      break;
 80021bc:	e000      	b.n	80021c0 <HAL_CRC_Calculate+0x88>
      break;
 80021be:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	2201      	movs	r2, #1
 80021c4:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 80021c6:	693b      	ldr	r3, [r7, #16]
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	3718      	adds	r7, #24
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}

080021d0 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b089      	sub	sp, #36	@ 0x24
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	60f8      	str	r0, [r7, #12]
 80021d8:	60b9      	str	r1, [r7, #8]
 80021da:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 80021dc:	2300      	movs	r3, #0
 80021de:	61fb      	str	r3, [r7, #28]
 80021e0:	e023      	b.n	800222a <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80021e2:	69fb      	ldr	r3, [r7, #28]
 80021e4:	009b      	lsls	r3, r3, #2
 80021e6:	68ba      	ldr	r2, [r7, #8]
 80021e8:	4413      	add	r3, r2
 80021ea:	781b      	ldrb	r3, [r3, #0]
 80021ec:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 80021ee:	69fb      	ldr	r3, [r7, #28]
 80021f0:	009b      	lsls	r3, r3, #2
 80021f2:	3301      	adds	r3, #1
 80021f4:	68b9      	ldr	r1, [r7, #8]
 80021f6:	440b      	add	r3, r1
 80021f8:	781b      	ldrb	r3, [r3, #0]
 80021fa:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80021fc:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 80021fe:	69fb      	ldr	r3, [r7, #28]
 8002200:	009b      	lsls	r3, r3, #2
 8002202:	3302      	adds	r3, #2
 8002204:	68b9      	ldr	r1, [r7, #8]
 8002206:	440b      	add	r3, r1
 8002208:	781b      	ldrb	r3, [r3, #0]
 800220a:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 800220c:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 800220e:	69fb      	ldr	r3, [r7, #28]
 8002210:	009b      	lsls	r3, r3, #2
 8002212:	3303      	adds	r3, #3
 8002214:	68b9      	ldr	r1, [r7, #8]
 8002216:	440b      	add	r3, r1
 8002218:	781b      	ldrb	r3, [r3, #0]
 800221a:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8002220:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8002222:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 8002224:	69fb      	ldr	r3, [r7, #28]
 8002226:	3301      	adds	r3, #1
 8002228:	61fb      	str	r3, [r7, #28]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	089b      	lsrs	r3, r3, #2
 800222e:	69fa      	ldr	r2, [r7, #28]
 8002230:	429a      	cmp	r2, r3
 8002232:	d3d6      	bcc.n	80021e2 <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	f003 0303 	and.w	r3, r3, #3
 800223a:	2b00      	cmp	r3, #0
 800223c:	d04d      	beq.n	80022da <CRC_Handle_8+0x10a>
  {
    if ((BufferLength % 4U) == 1U)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	f003 0303 	and.w	r3, r3, #3
 8002244:	2b01      	cmp	r3, #1
 8002246:	d107      	bne.n	8002258 <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 8002248:	69fb      	ldr	r3, [r7, #28]
 800224a:	009b      	lsls	r3, r3, #2
 800224c:	68ba      	ldr	r2, [r7, #8]
 800224e:	4413      	add	r3, r2
 8002250:	68fa      	ldr	r2, [r7, #12]
 8002252:	6812      	ldr	r2, [r2, #0]
 8002254:	781b      	ldrb	r3, [r3, #0]
 8002256:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	f003 0303 	and.w	r3, r3, #3
 800225e:	2b02      	cmp	r3, #2
 8002260:	d116      	bne.n	8002290 <CRC_Handle_8+0xc0>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8002262:	69fb      	ldr	r3, [r7, #28]
 8002264:	009b      	lsls	r3, r3, #2
 8002266:	68ba      	ldr	r2, [r7, #8]
 8002268:	4413      	add	r3, r2
 800226a:	781b      	ldrb	r3, [r3, #0]
 800226c:	021b      	lsls	r3, r3, #8
 800226e:	b21a      	sxth	r2, r3
 8002270:	69fb      	ldr	r3, [r7, #28]
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	3301      	adds	r3, #1
 8002276:	68b9      	ldr	r1, [r7, #8]
 8002278:	440b      	add	r3, r1
 800227a:	781b      	ldrb	r3, [r3, #0]
 800227c:	b21b      	sxth	r3, r3
 800227e:	4313      	orrs	r3, r2
 8002280:	b21b      	sxth	r3, r3
 8002282:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	617b      	str	r3, [r7, #20]
      *pReg = data;
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	8b7a      	ldrh	r2, [r7, #26]
 800228e:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	f003 0303 	and.w	r3, r3, #3
 8002296:	2b03      	cmp	r3, #3
 8002298:	d11f      	bne.n	80022da <CRC_Handle_8+0x10a>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	009b      	lsls	r3, r3, #2
 800229e:	68ba      	ldr	r2, [r7, #8]
 80022a0:	4413      	add	r3, r2
 80022a2:	781b      	ldrb	r3, [r3, #0]
 80022a4:	021b      	lsls	r3, r3, #8
 80022a6:	b21a      	sxth	r2, r3
 80022a8:	69fb      	ldr	r3, [r7, #28]
 80022aa:	009b      	lsls	r3, r3, #2
 80022ac:	3301      	adds	r3, #1
 80022ae:	68b9      	ldr	r1, [r7, #8]
 80022b0:	440b      	add	r3, r1
 80022b2:	781b      	ldrb	r3, [r3, #0]
 80022b4:	b21b      	sxth	r3, r3
 80022b6:	4313      	orrs	r3, r2
 80022b8:	b21b      	sxth	r3, r3
 80022ba:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	617b      	str	r3, [r7, #20]
      *pReg = data;
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	8b7a      	ldrh	r2, [r7, #26]
 80022c6:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 80022c8:	69fb      	ldr	r3, [r7, #28]
 80022ca:	009b      	lsls	r3, r3, #2
 80022cc:	3302      	adds	r3, #2
 80022ce:	68ba      	ldr	r2, [r7, #8]
 80022d0:	4413      	add	r3, r2
 80022d2:	68fa      	ldr	r2, [r7, #12]
 80022d4:	6812      	ldr	r2, [r2, #0]
 80022d6:	781b      	ldrb	r3, [r3, #0]
 80022d8:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	681b      	ldr	r3, [r3, #0]
}
 80022e0:	4618      	mov	r0, r3
 80022e2:	3724      	adds	r7, #36	@ 0x24
 80022e4:	46bd      	mov	sp, r7
 80022e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ea:	4770      	bx	lr

080022ec <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b087      	sub	sp, #28
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	60f8      	str	r0, [r7, #12]
 80022f4:	60b9      	str	r1, [r7, #8]
 80022f6:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 80022f8:	2300      	movs	r3, #0
 80022fa:	617b      	str	r3, [r7, #20]
 80022fc:	e013      	b.n	8002326 <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	009b      	lsls	r3, r3, #2
 8002302:	68ba      	ldr	r2, [r7, #8]
 8002304:	4413      	add	r3, r2
 8002306:	881b      	ldrh	r3, [r3, #0]
 8002308:	041a      	lsls	r2, r3, #16
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	009b      	lsls	r3, r3, #2
 800230e:	3302      	adds	r3, #2
 8002310:	68b9      	ldr	r1, [r7, #8]
 8002312:	440b      	add	r3, r1
 8002314:	881b      	ldrh	r3, [r3, #0]
 8002316:	4619      	mov	r1, r3
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	430a      	orrs	r2, r1
 800231e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	3301      	adds	r3, #1
 8002324:	617b      	str	r3, [r7, #20]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	085b      	lsrs	r3, r3, #1
 800232a:	697a      	ldr	r2, [r7, #20]
 800232c:	429a      	cmp	r2, r3
 800232e:	d3e6      	bcc.n	80022fe <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	f003 0301 	and.w	r3, r3, #1
 8002336:	2b00      	cmp	r3, #0
 8002338:	d009      	beq.n	800234e <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	009b      	lsls	r3, r3, #2
 8002344:	68ba      	ldr	r2, [r7, #8]
 8002346:	4413      	add	r3, r2
 8002348:	881a      	ldrh	r2, [r3, #0]
 800234a:	693b      	ldr	r3, [r7, #16]
 800234c:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	681b      	ldr	r3, [r3, #0]
}
 8002354:	4618      	mov	r0, r3
 8002356:	371c      	adds	r7, #28
 8002358:	46bd      	mov	sp, r7
 800235a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235e:	4770      	bx	lr

08002360 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8002360:	b480      	push	{r7}
 8002362:	b087      	sub	sp, #28
 8002364:	af00      	add	r7, sp, #0
 8002366:	60f8      	str	r0, [r7, #12]
 8002368:	60b9      	str	r1, [r7, #8]
 800236a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800236c:	2300      	movs	r3, #0
 800236e:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8002370:	231f      	movs	r3, #31
 8002372:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	f003 0301 	and.w	r3, r3, #1
 800237a:	2b00      	cmp	r3, #0
 800237c:	d102      	bne.n	8002384 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 800237e:	2301      	movs	r3, #1
 8002380:	75fb      	strb	r3, [r7, #23]
 8002382:	e063      	b.n	800244c <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8002384:	bf00      	nop
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	1e5a      	subs	r2, r3, #1
 800238a:	613a      	str	r2, [r7, #16]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d009      	beq.n	80023a4 <HAL_CRCEx_Polynomial_Set+0x44>
 8002390:	693b      	ldr	r3, [r7, #16]
 8002392:	f003 031f 	and.w	r3, r3, #31
 8002396:	68ba      	ldr	r2, [r7, #8]
 8002398:	fa22 f303 	lsr.w	r3, r2, r3
 800239c:	f003 0301 	and.w	r3, r3, #1
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d0f0      	beq.n	8002386 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2b18      	cmp	r3, #24
 80023a8:	d846      	bhi.n	8002438 <HAL_CRCEx_Polynomial_Set+0xd8>
 80023aa:	a201      	add	r2, pc, #4	@ (adr r2, 80023b0 <HAL_CRCEx_Polynomial_Set+0x50>)
 80023ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023b0:	0800243f 	.word	0x0800243f
 80023b4:	08002439 	.word	0x08002439
 80023b8:	08002439 	.word	0x08002439
 80023bc:	08002439 	.word	0x08002439
 80023c0:	08002439 	.word	0x08002439
 80023c4:	08002439 	.word	0x08002439
 80023c8:	08002439 	.word	0x08002439
 80023cc:	08002439 	.word	0x08002439
 80023d0:	0800242d 	.word	0x0800242d
 80023d4:	08002439 	.word	0x08002439
 80023d8:	08002439 	.word	0x08002439
 80023dc:	08002439 	.word	0x08002439
 80023e0:	08002439 	.word	0x08002439
 80023e4:	08002439 	.word	0x08002439
 80023e8:	08002439 	.word	0x08002439
 80023ec:	08002439 	.word	0x08002439
 80023f0:	08002421 	.word	0x08002421
 80023f4:	08002439 	.word	0x08002439
 80023f8:	08002439 	.word	0x08002439
 80023fc:	08002439 	.word	0x08002439
 8002400:	08002439 	.word	0x08002439
 8002404:	08002439 	.word	0x08002439
 8002408:	08002439 	.word	0x08002439
 800240c:	08002439 	.word	0x08002439
 8002410:	08002415 	.word	0x08002415
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	2b06      	cmp	r3, #6
 8002418:	d913      	bls.n	8002442 <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800241e:	e010      	b.n	8002442 <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	2b07      	cmp	r3, #7
 8002424:	d90f      	bls.n	8002446 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800242a:	e00c      	b.n	8002446 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 800242c:	693b      	ldr	r3, [r7, #16]
 800242e:	2b0f      	cmp	r3, #15
 8002430:	d90b      	bls.n	800244a <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8002436:	e008      	b.n	800244a <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8002438:	2301      	movs	r3, #1
 800243a:	75fb      	strb	r3, [r7, #23]
        break;
 800243c:	e006      	b.n	800244c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800243e:	bf00      	nop
 8002440:	e004      	b.n	800244c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8002442:	bf00      	nop
 8002444:	e002      	b.n	800244c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8002446:	bf00      	nop
 8002448:	e000      	b.n	800244c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800244a:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 800244c:	7dfb      	ldrb	r3, [r7, #23]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d10d      	bne.n	800246e <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	68ba      	ldr	r2, [r7, #8]
 8002458:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	f023 0118 	bic.w	r1, r3, #24
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	687a      	ldr	r2, [r7, #4]
 800246a:	430a      	orrs	r2, r1
 800246c:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800246e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002470:	4618      	mov	r0, r3
 8002472:	371c      	adds	r7, #28
 8002474:	46bd      	mov	sp, r7
 8002476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247a:	4770      	bx	lr

0800247c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b086      	sub	sp, #24
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002484:	2300      	movs	r3, #0
 8002486:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002488:	f7ff fc38 	bl	8001cfc <HAL_GetTick>
 800248c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d101      	bne.n	8002498 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002494:	2301      	movs	r3, #1
 8002496:	e099      	b.n	80025cc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2202      	movs	r2, #2
 800249c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2200      	movs	r2, #0
 80024a4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	681a      	ldr	r2, [r3, #0]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f022 0201 	bic.w	r2, r2, #1
 80024b6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024b8:	e00f      	b.n	80024da <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80024ba:	f7ff fc1f 	bl	8001cfc <HAL_GetTick>
 80024be:	4602      	mov	r2, r0
 80024c0:	693b      	ldr	r3, [r7, #16]
 80024c2:	1ad3      	subs	r3, r2, r3
 80024c4:	2b05      	cmp	r3, #5
 80024c6:	d908      	bls.n	80024da <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2220      	movs	r2, #32
 80024cc:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2203      	movs	r2, #3
 80024d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80024d6:	2303      	movs	r3, #3
 80024d8:	e078      	b.n	80025cc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f003 0301 	and.w	r3, r3, #1
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d1e8      	bne.n	80024ba <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80024f0:	697a      	ldr	r2, [r7, #20]
 80024f2:	4b38      	ldr	r3, [pc, #224]	@ (80025d4 <HAL_DMA_Init+0x158>)
 80024f4:	4013      	ands	r3, r2
 80024f6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	685a      	ldr	r2, [r3, #4]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002506:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	691b      	ldr	r3, [r3, #16]
 800250c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002512:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	699b      	ldr	r3, [r3, #24]
 8002518:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800251e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6a1b      	ldr	r3, [r3, #32]
 8002524:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002526:	697a      	ldr	r2, [r7, #20]
 8002528:	4313      	orrs	r3, r2
 800252a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002530:	2b04      	cmp	r3, #4
 8002532:	d107      	bne.n	8002544 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800253c:	4313      	orrs	r3, r2
 800253e:	697a      	ldr	r2, [r7, #20]
 8002540:	4313      	orrs	r3, r2
 8002542:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	697a      	ldr	r2, [r7, #20]
 800254a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	695b      	ldr	r3, [r3, #20]
 8002552:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	f023 0307 	bic.w	r3, r3, #7
 800255a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002560:	697a      	ldr	r2, [r7, #20]
 8002562:	4313      	orrs	r3, r2
 8002564:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800256a:	2b04      	cmp	r3, #4
 800256c:	d117      	bne.n	800259e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002572:	697a      	ldr	r2, [r7, #20]
 8002574:	4313      	orrs	r3, r2
 8002576:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800257c:	2b00      	cmp	r3, #0
 800257e:	d00e      	beq.n	800259e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002580:	6878      	ldr	r0, [r7, #4]
 8002582:	f000 f9e9 	bl	8002958 <DMA_CheckFifoParam>
 8002586:	4603      	mov	r3, r0
 8002588:	2b00      	cmp	r3, #0
 800258a:	d008      	beq.n	800259e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2240      	movs	r2, #64	@ 0x40
 8002590:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2200      	movs	r2, #0
 8002596:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800259a:	2301      	movs	r3, #1
 800259c:	e016      	b.n	80025cc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	697a      	ldr	r2, [r7, #20]
 80025a4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80025a6:	6878      	ldr	r0, [r7, #4]
 80025a8:	f000 f9a0 	bl	80028ec <DMA_CalcBaseAndBitshift>
 80025ac:	4603      	mov	r3, r0
 80025ae:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025b4:	223f      	movs	r2, #63	@ 0x3f
 80025b6:	409a      	lsls	r2, r3
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2200      	movs	r2, #0
 80025c0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2201      	movs	r2, #1
 80025c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80025ca:	2300      	movs	r3, #0
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	3718      	adds	r7, #24
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}
 80025d4:	e010803f 	.word	0xe010803f

080025d8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b086      	sub	sp, #24
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80025e0:	2300      	movs	r3, #0
 80025e2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80025e4:	4b8e      	ldr	r3, [pc, #568]	@ (8002820 <HAL_DMA_IRQHandler+0x248>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a8e      	ldr	r2, [pc, #568]	@ (8002824 <HAL_DMA_IRQHandler+0x24c>)
 80025ea:	fba2 2303 	umull	r2, r3, r2, r3
 80025ee:	0a9b      	lsrs	r3, r3, #10
 80025f0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025f6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002602:	2208      	movs	r2, #8
 8002604:	409a      	lsls	r2, r3
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	4013      	ands	r3, r2
 800260a:	2b00      	cmp	r3, #0
 800260c:	d01a      	beq.n	8002644 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f003 0304 	and.w	r3, r3, #4
 8002618:	2b00      	cmp	r3, #0
 800261a:	d013      	beq.n	8002644 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	681a      	ldr	r2, [r3, #0]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f022 0204 	bic.w	r2, r2, #4
 800262a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002630:	2208      	movs	r2, #8
 8002632:	409a      	lsls	r2, r3
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800263c:	f043 0201 	orr.w	r2, r3, #1
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002648:	2201      	movs	r2, #1
 800264a:	409a      	lsls	r2, r3
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	4013      	ands	r3, r2
 8002650:	2b00      	cmp	r3, #0
 8002652:	d012      	beq.n	800267a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	695b      	ldr	r3, [r3, #20]
 800265a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800265e:	2b00      	cmp	r3, #0
 8002660:	d00b      	beq.n	800267a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002666:	2201      	movs	r2, #1
 8002668:	409a      	lsls	r2, r3
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002672:	f043 0202 	orr.w	r2, r3, #2
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800267e:	2204      	movs	r2, #4
 8002680:	409a      	lsls	r2, r3
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	4013      	ands	r3, r2
 8002686:	2b00      	cmp	r3, #0
 8002688:	d012      	beq.n	80026b0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f003 0302 	and.w	r3, r3, #2
 8002694:	2b00      	cmp	r3, #0
 8002696:	d00b      	beq.n	80026b0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800269c:	2204      	movs	r2, #4
 800269e:	409a      	lsls	r2, r3
 80026a0:	693b      	ldr	r3, [r7, #16]
 80026a2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026a8:	f043 0204 	orr.w	r2, r3, #4
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026b4:	2210      	movs	r2, #16
 80026b6:	409a      	lsls	r2, r3
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	4013      	ands	r3, r2
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d043      	beq.n	8002748 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f003 0308 	and.w	r3, r3, #8
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d03c      	beq.n	8002748 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026d2:	2210      	movs	r2, #16
 80026d4:	409a      	lsls	r2, r3
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d018      	beq.n	800271a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d108      	bne.n	8002708 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d024      	beq.n	8002748 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002702:	6878      	ldr	r0, [r7, #4]
 8002704:	4798      	blx	r3
 8002706:	e01f      	b.n	8002748 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800270c:	2b00      	cmp	r3, #0
 800270e:	d01b      	beq.n	8002748 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002714:	6878      	ldr	r0, [r7, #4]
 8002716:	4798      	blx	r3
 8002718:	e016      	b.n	8002748 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002724:	2b00      	cmp	r3, #0
 8002726:	d107      	bne.n	8002738 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	681a      	ldr	r2, [r3, #0]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f022 0208 	bic.w	r2, r2, #8
 8002736:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800273c:	2b00      	cmp	r3, #0
 800273e:	d003      	beq.n	8002748 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002744:	6878      	ldr	r0, [r7, #4]
 8002746:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800274c:	2220      	movs	r2, #32
 800274e:	409a      	lsls	r2, r3
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	4013      	ands	r3, r2
 8002754:	2b00      	cmp	r3, #0
 8002756:	f000 808f 	beq.w	8002878 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f003 0310 	and.w	r3, r3, #16
 8002764:	2b00      	cmp	r3, #0
 8002766:	f000 8087 	beq.w	8002878 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800276e:	2220      	movs	r2, #32
 8002770:	409a      	lsls	r2, r3
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800277c:	b2db      	uxtb	r3, r3
 800277e:	2b05      	cmp	r3, #5
 8002780:	d136      	bne.n	80027f0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f022 0216 	bic.w	r2, r2, #22
 8002790:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	695a      	ldr	r2, [r3, #20]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80027a0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d103      	bne.n	80027b2 <HAL_DMA_IRQHandler+0x1da>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d007      	beq.n	80027c2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	681a      	ldr	r2, [r3, #0]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f022 0208 	bic.w	r2, r2, #8
 80027c0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027c6:	223f      	movs	r2, #63	@ 0x3f
 80027c8:	409a      	lsls	r2, r3
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2201      	movs	r2, #1
 80027d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2200      	movs	r2, #0
 80027da:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d07e      	beq.n	80028e4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80027ea:	6878      	ldr	r0, [r7, #4]
 80027ec:	4798      	blx	r3
        }
        return;
 80027ee:	e079      	b.n	80028e4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d01d      	beq.n	800283a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002808:	2b00      	cmp	r3, #0
 800280a:	d10d      	bne.n	8002828 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002810:	2b00      	cmp	r3, #0
 8002812:	d031      	beq.n	8002878 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002818:	6878      	ldr	r0, [r7, #4]
 800281a:	4798      	blx	r3
 800281c:	e02c      	b.n	8002878 <HAL_DMA_IRQHandler+0x2a0>
 800281e:	bf00      	nop
 8002820:	20000040 	.word	0x20000040
 8002824:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800282c:	2b00      	cmp	r3, #0
 800282e:	d023      	beq.n	8002878 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002834:	6878      	ldr	r0, [r7, #4]
 8002836:	4798      	blx	r3
 8002838:	e01e      	b.n	8002878 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002844:	2b00      	cmp	r3, #0
 8002846:	d10f      	bne.n	8002868 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	681a      	ldr	r2, [r3, #0]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f022 0210 	bic.w	r2, r2, #16
 8002856:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2201      	movs	r2, #1
 800285c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2200      	movs	r2, #0
 8002864:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800286c:	2b00      	cmp	r3, #0
 800286e:	d003      	beq.n	8002878 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002874:	6878      	ldr	r0, [r7, #4]
 8002876:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800287c:	2b00      	cmp	r3, #0
 800287e:	d032      	beq.n	80028e6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002884:	f003 0301 	and.w	r3, r3, #1
 8002888:	2b00      	cmp	r3, #0
 800288a:	d022      	beq.n	80028d2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2205      	movs	r2, #5
 8002890:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f022 0201 	bic.w	r2, r2, #1
 80028a2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	3301      	adds	r3, #1
 80028a8:	60bb      	str	r3, [r7, #8]
 80028aa:	697a      	ldr	r2, [r7, #20]
 80028ac:	429a      	cmp	r2, r3
 80028ae:	d307      	bcc.n	80028c0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 0301 	and.w	r3, r3, #1
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d1f2      	bne.n	80028a4 <HAL_DMA_IRQHandler+0x2cc>
 80028be:	e000      	b.n	80028c2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80028c0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2201      	movs	r2, #1
 80028c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2200      	movs	r2, #0
 80028ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d005      	beq.n	80028e6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028de:	6878      	ldr	r0, [r7, #4]
 80028e0:	4798      	blx	r3
 80028e2:	e000      	b.n	80028e6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80028e4:	bf00      	nop
    }
  }
}
 80028e6:	3718      	adds	r7, #24
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}

080028ec <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b085      	sub	sp, #20
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	b2db      	uxtb	r3, r3
 80028fa:	3b10      	subs	r3, #16
 80028fc:	4a13      	ldr	r2, [pc, #76]	@ (800294c <DMA_CalcBaseAndBitshift+0x60>)
 80028fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002902:	091b      	lsrs	r3, r3, #4
 8002904:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002906:	4a12      	ldr	r2, [pc, #72]	@ (8002950 <DMA_CalcBaseAndBitshift+0x64>)
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	4413      	add	r3, r2
 800290c:	781b      	ldrb	r3, [r3, #0]
 800290e:	461a      	mov	r2, r3
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	2b03      	cmp	r3, #3
 8002918:	d908      	bls.n	800292c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	461a      	mov	r2, r3
 8002920:	4b0c      	ldr	r3, [pc, #48]	@ (8002954 <DMA_CalcBaseAndBitshift+0x68>)
 8002922:	4013      	ands	r3, r2
 8002924:	1d1a      	adds	r2, r3, #4
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	659a      	str	r2, [r3, #88]	@ 0x58
 800292a:	e006      	b.n	800293a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	461a      	mov	r2, r3
 8002932:	4b08      	ldr	r3, [pc, #32]	@ (8002954 <DMA_CalcBaseAndBitshift+0x68>)
 8002934:	4013      	ands	r3, r2
 8002936:	687a      	ldr	r2, [r7, #4]
 8002938:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800293e:	4618      	mov	r0, r3
 8002940:	3714      	adds	r7, #20
 8002942:	46bd      	mov	sp, r7
 8002944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002948:	4770      	bx	lr
 800294a:	bf00      	nop
 800294c:	aaaaaaab 	.word	0xaaaaaaab
 8002950:	08015098 	.word	0x08015098
 8002954:	fffffc00 	.word	0xfffffc00

08002958 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002958:	b480      	push	{r7}
 800295a:	b085      	sub	sp, #20
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002960:	2300      	movs	r3, #0
 8002962:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002968:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	699b      	ldr	r3, [r3, #24]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d11f      	bne.n	80029b2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002972:	68bb      	ldr	r3, [r7, #8]
 8002974:	2b03      	cmp	r3, #3
 8002976:	d856      	bhi.n	8002a26 <DMA_CheckFifoParam+0xce>
 8002978:	a201      	add	r2, pc, #4	@ (adr r2, 8002980 <DMA_CheckFifoParam+0x28>)
 800297a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800297e:	bf00      	nop
 8002980:	08002991 	.word	0x08002991
 8002984:	080029a3 	.word	0x080029a3
 8002988:	08002991 	.word	0x08002991
 800298c:	08002a27 	.word	0x08002a27
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002994:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002998:	2b00      	cmp	r3, #0
 800299a:	d046      	beq.n	8002a2a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800299c:	2301      	movs	r3, #1
 800299e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029a0:	e043      	b.n	8002a2a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029a6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80029aa:	d140      	bne.n	8002a2e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80029ac:	2301      	movs	r3, #1
 80029ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029b0:	e03d      	b.n	8002a2e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	699b      	ldr	r3, [r3, #24]
 80029b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80029ba:	d121      	bne.n	8002a00 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80029bc:	68bb      	ldr	r3, [r7, #8]
 80029be:	2b03      	cmp	r3, #3
 80029c0:	d837      	bhi.n	8002a32 <DMA_CheckFifoParam+0xda>
 80029c2:	a201      	add	r2, pc, #4	@ (adr r2, 80029c8 <DMA_CheckFifoParam+0x70>)
 80029c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029c8:	080029d9 	.word	0x080029d9
 80029cc:	080029df 	.word	0x080029df
 80029d0:	080029d9 	.word	0x080029d9
 80029d4:	080029f1 	.word	0x080029f1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80029d8:	2301      	movs	r3, #1
 80029da:	73fb      	strb	r3, [r7, #15]
      break;
 80029dc:	e030      	b.n	8002a40 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029e2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d025      	beq.n	8002a36 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029ee:	e022      	b.n	8002a36 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029f4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80029f8:	d11f      	bne.n	8002a3a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80029fa:	2301      	movs	r3, #1
 80029fc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80029fe:	e01c      	b.n	8002a3a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	2b02      	cmp	r3, #2
 8002a04:	d903      	bls.n	8002a0e <DMA_CheckFifoParam+0xb6>
 8002a06:	68bb      	ldr	r3, [r7, #8]
 8002a08:	2b03      	cmp	r3, #3
 8002a0a:	d003      	beq.n	8002a14 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002a0c:	e018      	b.n	8002a40 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	73fb      	strb	r3, [r7, #15]
      break;
 8002a12:	e015      	b.n	8002a40 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a18:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d00e      	beq.n	8002a3e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002a20:	2301      	movs	r3, #1
 8002a22:	73fb      	strb	r3, [r7, #15]
      break;
 8002a24:	e00b      	b.n	8002a3e <DMA_CheckFifoParam+0xe6>
      break;
 8002a26:	bf00      	nop
 8002a28:	e00a      	b.n	8002a40 <DMA_CheckFifoParam+0xe8>
      break;
 8002a2a:	bf00      	nop
 8002a2c:	e008      	b.n	8002a40 <DMA_CheckFifoParam+0xe8>
      break;
 8002a2e:	bf00      	nop
 8002a30:	e006      	b.n	8002a40 <DMA_CheckFifoParam+0xe8>
      break;
 8002a32:	bf00      	nop
 8002a34:	e004      	b.n	8002a40 <DMA_CheckFifoParam+0xe8>
      break;
 8002a36:	bf00      	nop
 8002a38:	e002      	b.n	8002a40 <DMA_CheckFifoParam+0xe8>
      break;   
 8002a3a:	bf00      	nop
 8002a3c:	e000      	b.n	8002a40 <DMA_CheckFifoParam+0xe8>
      break;
 8002a3e:	bf00      	nop
    }
  } 
  
  return status; 
 8002a40:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	3714      	adds	r7, #20
 8002a46:	46bd      	mov	sp, r7
 8002a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4c:	4770      	bx	lr
 8002a4e:	bf00      	nop

08002a50 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b084      	sub	sp, #16
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d101      	bne.n	8002a62 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e086      	b.n	8002b70 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d106      	bne.n	8002a7a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2223      	movs	r2, #35	@ 0x23
 8002a70:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002a74:	6878      	ldr	r0, [r7, #4]
 8002a76:	f003 f97f 	bl	8005d78 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a7a:	4b3f      	ldr	r3, [pc, #252]	@ (8002b78 <HAL_ETH_Init+0x128>)
 8002a7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a7e:	4a3e      	ldr	r2, [pc, #248]	@ (8002b78 <HAL_ETH_Init+0x128>)
 8002a80:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002a84:	6453      	str	r3, [r2, #68]	@ 0x44
 8002a86:	4b3c      	ldr	r3, [pc, #240]	@ (8002b78 <HAL_ETH_Init+0x128>)
 8002a88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a8a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a8e:	60bb      	str	r3, [r7, #8]
 8002a90:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002a92:	4b3a      	ldr	r3, [pc, #232]	@ (8002b7c <HAL_ETH_Init+0x12c>)
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	4a39      	ldr	r2, [pc, #228]	@ (8002b7c <HAL_ETH_Init+0x12c>)
 8002a98:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002a9c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002a9e:	4b37      	ldr	r3, [pc, #220]	@ (8002b7c <HAL_ETH_Init+0x12c>)
 8002aa0:	685a      	ldr	r2, [r3, #4]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	4935      	ldr	r1, [pc, #212]	@ (8002b7c <HAL_ETH_Init+0x12c>)
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8002aac:	4b33      	ldr	r3, [pc, #204]	@ (8002b7c <HAL_ETH_Init+0x12c>)
 8002aae:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	687a      	ldr	r2, [r7, #4]
 8002abc:	6812      	ldr	r2, [r2, #0]
 8002abe:	f043 0301 	orr.w	r3, r3, #1
 8002ac2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002ac6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002ac8:	f7ff f918 	bl	8001cfc <HAL_GetTick>
 8002acc:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002ace:	e011      	b.n	8002af4 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002ad0:	f7ff f914 	bl	8001cfc <HAL_GetTick>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	1ad3      	subs	r3, r2, r3
 8002ada:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002ade:	d909      	bls.n	8002af4 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2204      	movs	r2, #4
 8002ae4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	22e0      	movs	r2, #224	@ 0xe0
 8002aec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8002af0:	2301      	movs	r3, #1
 8002af2:	e03d      	b.n	8002b70 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f003 0301 	and.w	r3, r3, #1
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d1e4      	bne.n	8002ad0 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002b06:	6878      	ldr	r0, [r7, #4]
 8002b08:	f000 fefc 	bl	8003904 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002b0c:	6878      	ldr	r0, [r7, #4]
 8002b0e:	f000 ffa7 	bl	8003a60 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002b12:	6878      	ldr	r0, [r7, #4]
 8002b14:	f000 fffd 	bl	8003b12 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	461a      	mov	r2, r3
 8002b1e:	2100      	movs	r1, #0
 8002b20:	6878      	ldr	r0, [r7, #4]
 8002b22:	f000 ff65 	bl	80039f0 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8002b34:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	4b0f      	ldr	r3, [pc, #60]	@ (8002b80 <HAL_ETH_Init+0x130>)
 8002b44:	430b      	orrs	r3, r1
 8002b46:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 8002b5a:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2200      	movs	r2, #0
 8002b62:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2210      	movs	r2, #16
 8002b6a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8002b6e:	2300      	movs	r3, #0
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	3710      	adds	r7, #16
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}
 8002b78:	40023800 	.word	0x40023800
 8002b7c:	40013800 	.word	0x40013800
 8002b80:	00020060 	.word	0x00020060

08002b84 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b084      	sub	sp, #16
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002b92:	2b10      	cmp	r3, #16
 8002b94:	d150      	bne.n	8002c38 <HAL_ETH_Start+0xb4>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2223      	movs	r2, #35	@ 0x23
 8002b9a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2204      	movs	r2, #4
 8002ba2:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8002ba4:	6878      	ldr	r0, [r7, #4]
 8002ba6:	f000 f9f9 	bl	8002f9c <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	681a      	ldr	r2, [r3, #0]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f042 0208 	orr.w	r2, r2, #8
 8002bb8:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002bc2:	2001      	movs	r0, #1
 8002bc4:	f7ff f8a6 	bl	8001d14 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	68fa      	ldr	r2, [r7, #12]
 8002bce:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	681a      	ldr	r2, [r3, #0]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f042 0204 	orr.w	r2, r2, #4
 8002bde:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002be8:	2001      	movs	r0, #1
 8002bea:	f7ff f893 	bl	8001d14 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	68fa      	ldr	r2, [r7, #12]
 8002bf4:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8002bf6:	6878      	ldr	r0, [r7, #4]
 8002bf8:	f000 fd20 	bl	800363c <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002c04:	699b      	ldr	r3, [r3, #24]
 8002c06:	687a      	ldr	r2, [r7, #4]
 8002c08:	6812      	ldr	r2, [r2, #0]
 8002c0a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002c0e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002c12:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002c1c:	699b      	ldr	r3, [r3, #24]
 8002c1e:	687a      	ldr	r2, [r7, #4]
 8002c20:	6812      	ldr	r2, [r2, #0]
 8002c22:	f043 0302 	orr.w	r3, r3, #2
 8002c26:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002c2a:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2223      	movs	r2, #35	@ 0x23
 8002c30:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    return HAL_OK;
 8002c34:	2300      	movs	r3, #0
 8002c36:	e000      	b.n	8002c3a <HAL_ETH_Start+0xb6>
  }
  else
  {
    return HAL_ERROR;
 8002c38:	2301      	movs	r3, #1
  }
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3710      	adds	r7, #16
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}

08002c42 <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 8002c42:	b580      	push	{r7, lr}
 8002c44:	b084      	sub	sp, #16
 8002c46:	af00      	add	r7, sp, #0
 8002c48:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002c50:	2b23      	cmp	r3, #35	@ 0x23
 8002c52:	d14a      	bne.n	8002cea <HAL_ETH_Stop+0xa8>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2223      	movs	r2, #35	@ 0x23
 8002c58:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002c64:	699b      	ldr	r3, [r3, #24]
 8002c66:	687a      	ldr	r2, [r7, #4]
 8002c68:	6812      	ldr	r2, [r2, #0]
 8002c6a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002c6e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002c72:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002c7c:	699b      	ldr	r3, [r3, #24]
 8002c7e:	687a      	ldr	r2, [r7, #4]
 8002c80:	6812      	ldr	r2, [r2, #0]
 8002c82:	f023 0302 	bic.w	r3, r3, #2
 8002c86:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002c8a:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f022 0204 	bic.w	r2, r2, #4
 8002c9a:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002ca4:	2001      	movs	r0, #1
 8002ca6:	f7ff f835 	bl	8001d14 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	68fa      	ldr	r2, [r7, #12]
 8002cb0:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	f000 fcc2 	bl	800363c <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	681a      	ldr	r2, [r3, #0]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f022 0208 	bic.w	r2, r2, #8
 8002cc6:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002cd0:	2001      	movs	r0, #1
 8002cd2:	f7ff f81f 	bl	8001d14 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	68fa      	ldr	r2, [r7, #12]
 8002cdc:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2210      	movs	r2, #16
 8002ce2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	e000      	b.n	8002cec <HAL_ETH_Stop+0xaa>
  }
  else
  {
    return HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
  }
}
 8002cec:	4618      	mov	r0, r3
 8002cee:	3710      	adds	r7, #16
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bd80      	pop	{r7, pc}

08002cf4 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig, uint32_t Timeout)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b086      	sub	sp, #24
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	60f8      	str	r0, [r7, #12]
 8002cfc:	60b9      	str	r1, [r7, #8]
 8002cfe:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d109      	bne.n	8002d1a <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d0c:	f043 0201 	orr.w	r2, r3, #1
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	e07c      	b.n	8002e14 <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002d20:	2b23      	cmp	r3, #35	@ 0x23
 8002d22:	d176      	bne.n	8002e12 <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8002d24:	2200      	movs	r2, #0
 8002d26:	68b9      	ldr	r1, [r7, #8]
 8002d28:	68f8      	ldr	r0, [r7, #12]
 8002d2a:	f000 ff61 	bl	8003bf0 <ETH_Prepare_Tx_Descriptors>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d009      	beq.n	8002d48 <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d3a:	f043 0202 	orr.w	r2, r3, #2
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	e065      	b.n	8002e14 <HAL_ETH_Transmit+0x120>
  __ASM volatile ("dsb 0xF":::"memory");
 8002d48:	f3bf 8f4f 	dsb	sy
}
 8002d4c:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	3206      	adds	r2, #6
 8002d56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d5a:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d60:	1c5a      	adds	r2, r3, #1
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	629a      	str	r2, [r3, #40]	@ 0x28
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d6a:	2b03      	cmp	r3, #3
 8002d6c:	d904      	bls.n	8002d78 <HAL_ETH_Transmit+0x84>
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d72:	1f1a      	subs	r2, r3, #4
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681a      	ldr	r2, [r3, #0]
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	3106      	adds	r1, #6
 8002d84:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002d88:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002d8c:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 8002d8e:	f7fe ffb5 	bl	8001cfc <HAL_GetTick>
 8002d92:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8002d94:	e037      	b.n	8002e06 <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002d9e:	695b      	ldr	r3, [r3, #20]
 8002da0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d011      	beq.n	8002dcc <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dae:	f043 0208 	orr.w	r2, r3, #8
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002dc0:	695a      	ldr	r2, [r3, #20]
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        /* Return function status */
        return HAL_ERROR;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	e023      	b.n	8002e14 <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002dd2:	d018      	beq.n	8002e06 <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002dd4:	f7fe ff92 	bl	8001cfc <HAL_GetTick>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	1ad3      	subs	r3, r2, r3
 8002dde:	687a      	ldr	r2, [r7, #4]
 8002de0:	429a      	cmp	r2, r3
 8002de2:	d302      	bcc.n	8002dea <HAL_ETH_Transmit+0xf6>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d10d      	bne.n	8002e06 <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002df0:	f043 0204 	orr.w	r2, r3, #4
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 8002e00:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	e006      	b.n	8002e14 <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	dbc3      	blt.n	8002d96 <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	e000      	b.n	8002e14 <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
  }
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	3718      	adds	r7, #24
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}

08002e1c <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b088      	sub	sp, #32
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
 8002e24:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8002e26:	2300      	movs	r3, #0
 8002e28:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d109      	bne.n	8002e48 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e3a:	f043 0201 	orr.w	r2, r3, #1
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8002e44:	2301      	movs	r3, #1
 8002e46:	e0a4      	b.n	8002f92 <HAL_ETH_ReadData+0x176>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002e4e:	2b23      	cmp	r3, #35	@ 0x23
 8002e50:	d001      	beq.n	8002e56 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	e09d      	b.n	8002f92 <HAL_ETH_ReadData+0x176>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e5a:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	69fa      	ldr	r2, [r7, #28]
 8002e60:	3212      	adds	r2, #18
 8002e62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e66:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002e6c:	f1c3 0304 	rsb	r3, r3, #4
 8002e70:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8002e72:	e066      	b.n	8002f42 <HAL_ETH_ReadData+0x126>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8002e74:	69bb      	ldr	r3, [r7, #24]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d007      	beq.n	8002e90 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 8002e80:	69bb      	ldr	r3, [r7, #24]
 8002e82:	69da      	ldr	r2, [r3, #28]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 8002e88:	69bb      	ldr	r3, [r7, #24]
 8002e8a:	699a      	ldr	r2, [r3, #24]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8002e90:	69bb      	ldr	r3, [r7, #24]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d103      	bne.n	8002ea4 <HAL_ETH_ReadData+0x88>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d03c      	beq.n	8002f1e <HAL_ETH_ReadData+0x102>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8002ea4:	69bb      	ldr	r3, [r7, #24]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d005      	beq.n	8002ebc <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT);
 8002ebc:	69bb      	ldr	r3, [r7, #24]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	0c1b      	lsrs	r3, r3, #16
 8002ec2:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8002ec6:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8002ec8:	69bb      	ldr	r3, [r7, #24]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d005      	beq.n	8002ee0 <HAL_ETH_ReadData+0xc4>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8002ed4:	69bb      	ldr	r3, [r7, #24]
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 8002edc:	2301      	movs	r3, #1
 8002ede:	74fb      	strb	r3, [r7, #19]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8002ee0:	69bb      	ldr	r3, [r7, #24]
 8002ee2:	689a      	ldr	r2, [r3, #8]
 8002ee4:	69bb      	ldr	r3, [r7, #24]
 8002ee6:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8002ef4:	69bb      	ldr	r3, [r7, #24]
 8002ef6:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8002ef8:	461a      	mov	r2, r3
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	b29b      	uxth	r3, r3
 8002efe:	f003 f905 	bl	800610c <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f06:	1c5a      	adds	r2, r3, #1
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	441a      	add	r2, r3
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8002f18:	69bb      	ldr	r3, [r7, #24]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8002f1e:	69fb      	ldr	r3, [r7, #28]
 8002f20:	3301      	adds	r3, #1
 8002f22:	61fb      	str	r3, [r7, #28]
 8002f24:	69fb      	ldr	r3, [r7, #28]
 8002f26:	2b03      	cmp	r3, #3
 8002f28:	d902      	bls.n	8002f30 <HAL_ETH_ReadData+0x114>
 8002f2a:	69fb      	ldr	r3, [r7, #28]
 8002f2c:	3b04      	subs	r3, #4
 8002f2e:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	69fa      	ldr	r2, [r7, #28]
 8002f34:	3212      	adds	r2, #18
 8002f36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f3a:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	3301      	adds	r3, #1
 8002f40:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8002f42:	69bb      	ldr	r3, [r7, #24]
 8002f44:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	db06      	blt.n	8002f58 <HAL_ETH_ReadData+0x13c>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8002f4a:	697a      	ldr	r2, [r7, #20]
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	429a      	cmp	r2, r3
 8002f50:	d202      	bcs.n	8002f58 <HAL_ETH_ReadData+0x13c>
         && (rxdataready == 0U))
 8002f52:	7cfb      	ldrb	r3, [r7, #19]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d08d      	beq.n	8002e74 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	441a      	add	r2, r3
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d002      	beq.n	8002f72 <HAL_ETH_ReadData+0x156>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8002f6c:	6878      	ldr	r0, [r7, #4]
 8002f6e:	f000 f815 	bl	8002f9c <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	69fa      	ldr	r2, [r7, #28]
 8002f76:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 8002f78:	7cfb      	ldrb	r3, [r7, #19]
 8002f7a:	2b01      	cmp	r3, #1
 8002f7c:	d108      	bne.n	8002f90 <HAL_ETH_ReadData+0x174>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	e000      	b.n	8002f92 <HAL_ETH_ReadData+0x176>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8002f90:	2301      	movs	r3, #1
}
 8002f92:	4618      	mov	r0, r3
 8002f94:	3720      	adds	r7, #32
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}
	...

08002f9c <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b088      	sub	sp, #32
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002fb0:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	69fa      	ldr	r2, [r7, #28]
 8002fb6:	3212      	adds	r2, #18
 8002fb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fbc:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002fc2:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8002fc4:	e042      	b.n	800304c <ETH_UpdateDescriptor+0xb0>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	6a1b      	ldr	r3, [r3, #32]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d112      	bne.n	8002ff4 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8002fce:	f107 0308 	add.w	r3, r7, #8
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f003 f86a 	bl	80060ac <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d102      	bne.n	8002fe4 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	74fb      	strb	r3, [r7, #19]
 8002fe2:	e007      	b.n	8002ff4 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	461a      	mov	r2, r3
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8002fec:	68bb      	ldr	r3, [r7, #8]
 8002fee:	461a      	mov	r2, r3
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8002ff4:	7cfb      	ldrb	r3, [r7, #19]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d028      	beq.n	800304c <ETH_UpdateDescriptor+0xb0>
    {
      if (heth->RxDescList.ItMode == 0U)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d106      	bne.n	8003010 <ETH_UpdateDescriptor+0x74>
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_DIC | ETH_DMARXDESC_RCH);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	695a      	ldr	r2, [r3, #20]
 8003006:	4b26      	ldr	r3, [pc, #152]	@ (80030a0 <ETH_UpdateDescriptor+0x104>)
 8003008:	4313      	orrs	r3, r2
 800300a:	697a      	ldr	r2, [r7, #20]
 800300c:	6053      	str	r3, [r2, #4]
 800300e:	e005      	b.n	800301c <ETH_UpdateDescriptor+0x80>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_RCH);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	695b      	ldr	r3, [r3, #20]
 8003014:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8003028:	69fb      	ldr	r3, [r7, #28]
 800302a:	3301      	adds	r3, #1
 800302c:	61fb      	str	r3, [r7, #28]
 800302e:	69fb      	ldr	r3, [r7, #28]
 8003030:	2b03      	cmp	r3, #3
 8003032:	d902      	bls.n	800303a <ETH_UpdateDescriptor+0x9e>
 8003034:	69fb      	ldr	r3, [r7, #28]
 8003036:	3b04      	subs	r3, #4
 8003038:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	69fa      	ldr	r2, [r7, #28]
 800303e:	3212      	adds	r2, #18
 8003040:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003044:	617b      	str	r3, [r7, #20]
      desccount--;
 8003046:	69bb      	ldr	r3, [r7, #24]
 8003048:	3b01      	subs	r3, #1
 800304a:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 800304c:	69bb      	ldr	r3, [r7, #24]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d002      	beq.n	8003058 <ETH_UpdateDescriptor+0xbc>
 8003052:	7cfb      	ldrb	r3, [r7, #19]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d1b6      	bne.n	8002fc6 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800305c:	69ba      	ldr	r2, [r7, #24]
 800305e:	429a      	cmp	r2, r3
 8003060:	d01a      	beq.n	8003098 <ETH_UpdateDescriptor+0xfc>
  {
    /* Set the tail pointer index */
    tailidx = (descidx + 1U) % ETH_RX_DESC_CNT;
 8003062:	69fb      	ldr	r3, [r7, #28]
 8003064:	3301      	adds	r3, #1
 8003066:	f003 0303 	and.w	r3, r3, #3
 800306a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 800306c:	f3bf 8f5f 	dmb	sy
}
 8003070:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6919      	ldr	r1, [r3, #16]
 8003076:	68fa      	ldr	r2, [r7, #12]
 8003078:	4613      	mov	r3, r2
 800307a:	009b      	lsls	r3, r3, #2
 800307c:	4413      	add	r3, r2
 800307e:	00db      	lsls	r3, r3, #3
 8003080:	18ca      	adds	r2, r1, r3
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800308a:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	69fa      	ldr	r2, [r7, #28]
 8003090:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	69ba      	ldr	r2, [r7, #24]
 8003096:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 8003098:	bf00      	nop
 800309a:	3720      	adds	r7, #32
 800309c:	46bd      	mov	sp, r7
 800309e:	bd80      	pop	{r7, pc}
 80030a0:	80004000 	.word	0x80004000

080030a4 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b086      	sub	sp, #24
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  uint32_t mac_flag = READ_REG(heth->Instance->MACSR);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030b2:	617b      	str	r3, [r7, #20]
  uint32_t dma_flag = READ_REG(heth->Instance->DMASR);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80030bc:	695b      	ldr	r3, [r3, #20]
 80030be:	613b      	str	r3, [r7, #16]
  uint32_t dma_itsource = READ_REG(heth->Instance->DMAIER);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80030c8:	69db      	ldr	r3, [r3, #28]
 80030ca:	60fb      	str	r3, [r7, #12]
  uint32_t exti_flag = READ_REG(EXTI->PR);
 80030cc:	4b4b      	ldr	r3, [pc, #300]	@ (80031fc <HAL_ETH_IRQHandler+0x158>)
 80030ce:	695b      	ldr	r3, [r3, #20]
 80030d0:	60bb      	str	r3, [r7, #8]

  /* Packet received */
  if (((dma_flag & ETH_DMASR_RS) != 0U) && ((dma_itsource & ETH_DMAIER_RIE) != 0U))
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d00e      	beq.n	80030fa <HAL_ETH_IRQHandler+0x56>
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d009      	beq.n	80030fa <HAL_ETH_IRQHandler+0x56>
  {
    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80030ee:	461a      	mov	r2, r3
 80030f0:	4b43      	ldr	r3, [pc, #268]	@ (8003200 <HAL_ETH_IRQHandler+0x15c>)
 80030f2:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 80030f4:	6878      	ldr	r0, [r7, #4]
 80030f6:	f000 f891 	bl	800321c <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Packet transmitted */
  if (((dma_flag & ETH_DMASR_TS) != 0U) && ((dma_itsource & ETH_DMAIER_TIE) != 0U))
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	f003 0301 	and.w	r3, r3, #1
 8003100:	2b00      	cmp	r3, #0
 8003102:	d00f      	beq.n	8003124 <HAL_ETH_IRQHandler+0x80>
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	f003 0301 	and.w	r3, r3, #1
 800310a:	2b00      	cmp	r3, #0
 800310c:	d00a      	beq.n	8003124 <HAL_ETH_IRQHandler+0x80>
  {
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003116:	461a      	mov	r2, r3
 8003118:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 800311c:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Transmit complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 800311e:	6878      	ldr	r0, [r7, #4]
 8003120:	f000 f872 	bl	8003208 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH DMA Error */
  if (((dma_flag & ETH_DMASR_AIS) != 0U) && ((dma_itsource & ETH_DMAIER_AISE) != 0U))
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800312a:	2b00      	cmp	r3, #0
 800312c:	d042      	beq.n	80031b4 <HAL_ETH_IRQHandler+0x110>
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003134:	2b00      	cmp	r3, #0
 8003136:	d03d      	beq.n	80031b4 <HAL_ETH_IRQHandler+0x110>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800313e:	f043 0208 	orr.w	r2, r3, #8
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* if fatal bus error occurred */
    if ((dma_flag & ETH_DMASR_FBES) != 0U)
 8003148:	693b      	ldr	r3, [r7, #16]
 800314a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800314e:	2b00      	cmp	r3, #0
 8003150:	d01a      	beq.n	8003188 <HAL_ETH_IRQHandler+0xe4>
    {
      /* Get DMA error code  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800315a:	695a      	ldr	r2, [r3, #20]
 800315c:	4b29      	ldr	r3, [pc, #164]	@ (8003204 <HAL_ETH_IRQHandler+0x160>)
 800315e:	4013      	ands	r3, r2
 8003160:	687a      	ldr	r2, [r7, #4]
 8003162:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

      /* Disable all interrupts */
      __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800316e:	69db      	ldr	r3, [r3, #28]
 8003170:	687a      	ldr	r2, [r7, #4]
 8003172:	6812      	ldr	r2, [r2, #0]
 8003174:	f423 33c0 	bic.w	r3, r3, #98304	@ 0x18000
 8003178:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800317c:	61d3      	str	r3, [r2, #28]

      /* Set HAL state to ERROR */
      heth->gState = HAL_ETH_STATE_ERROR;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	22e0      	movs	r2, #224	@ 0xe0
 8003182:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8003186:	e012      	b.n	80031ae <HAL_ETH_IRQHandler+0x10a>
    }
    else
    {
      /* Get DMA error status  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003190:	695a      	ldr	r2, [r3, #20]
 8003192:	f248 6380 	movw	r3, #34432	@ 0x8680
 8003196:	4013      	ands	r3, r2
 8003198:	687a      	ldr	r2, [r7, #4]
 800319a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
                                                            ETH_DMASR_RBUS | ETH_DMASR_AIS));

      /* Clear the interrupt summary flag */
      __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80031a6:	461a      	mov	r2, r3
 80031a8:	f248 6380 	movw	r3, #34432	@ 0x8680
 80031ac:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet DMA Error callback */
    HAL_ETH_ErrorCallback(heth);
 80031ae:	6878      	ldr	r0, [r7, #4]
 80031b0:	f000 f83e 	bl	8003230 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }


  /* ETH PMT IT */
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	f003 0308 	and.w	r3, r3, #8
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d00e      	beq.n	80031dc <HAL_ETH_IRQHandler+0x138>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031c4:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 80031ce:	6878      	ldr	r0, [r7, #4]
 80031d0:	f000 f838 	bl	8003244 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2200      	movs	r2, #0
 80031d8:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  }


  /* check ETH WAKEUP exti flag */
  if ((exti_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d006      	beq.n	80031f4 <HAL_ETH_IRQHandler+0x150>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 80031e6:	4b05      	ldr	r3, [pc, #20]	@ (80031fc <HAL_ETH_IRQHandler+0x158>)
 80031e8:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80031ec:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 80031ee:	6878      	ldr	r0, [r7, #4]
 80031f0:	f000 f832 	bl	8003258 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 80031f4:	bf00      	nop
 80031f6:	3718      	adds	r7, #24
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bd80      	pop	{r7, pc}
 80031fc:	40013c00 	.word	0x40013c00
 8003200:	00010040 	.word	0x00010040
 8003204:	007e2000 	.word	0x007e2000

08003208 <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8003208:	b480      	push	{r7}
 800320a:	b083      	sub	sp, #12
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 8003210:	bf00      	nop
 8003212:	370c      	adds	r7, #12
 8003214:	46bd      	mov	sp, r7
 8003216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321a:	4770      	bx	lr

0800321c <HAL_ETH_RxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 800321c:	b480      	push	{r7}
 800321e:	b083      	sub	sp, #12
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_RxCpltCallback could be implemented in the user file
  */
}
 8003224:	bf00      	nop
 8003226:	370c      	adds	r7, #12
 8003228:	46bd      	mov	sp, r7
 800322a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322e:	4770      	bx	lr

08003230 <HAL_ETH_ErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8003230:	b480      	push	{r7}
 8003232:	b083      	sub	sp, #12
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */
}
 8003238:	bf00      	nop
 800323a:	370c      	adds	r7, #12
 800323c:	46bd      	mov	sp, r7
 800323e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003242:	4770      	bx	lr

08003244 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8003244:	b480      	push	{r7}
 8003246:	b083      	sub	sp, #12
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 800324c:	bf00      	nop
 800324e:	370c      	adds	r7, #12
 8003250:	46bd      	mov	sp, r7
 8003252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003256:	4770      	bx	lr

08003258 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8003258:	b480      	push	{r7}
 800325a:	b083      	sub	sp, #12
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8003260:	bf00      	nop
 8003262:	370c      	adds	r7, #12
 8003264:	46bd      	mov	sp, r7
 8003266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326a:	4770      	bx	lr

0800326c <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b086      	sub	sp, #24
 8003270:	af00      	add	r7, sp, #0
 8003272:	60f8      	str	r0, [r7, #12]
 8003274:	60b9      	str	r1, [r7, #8]
 8003276:	607a      	str	r2, [r7, #4]
 8003278:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	691b      	ldr	r3, [r3, #16]
 8003280:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	f003 031c 	and.w	r3, r3, #28
 8003288:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 800328a:	68bb      	ldr	r3, [r7, #8]
 800328c:	02db      	lsls	r3, r3, #11
 800328e:	b29b      	uxth	r3, r3
 8003290:	697a      	ldr	r2, [r7, #20]
 8003292:	4313      	orrs	r3, r2
 8003294:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	019b      	lsls	r3, r3, #6
 800329a:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 800329e:	697a      	ldr	r2, [r7, #20]
 80032a0:	4313      	orrs	r3, r2
 80032a2:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	f023 0302 	bic.w	r3, r3, #2
 80032aa:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 80032ac:	697b      	ldr	r3, [r7, #20]
 80032ae:	f043 0301 	orr.w	r3, r3, #1
 80032b2:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	697a      	ldr	r2, [r7, #20]
 80032ba:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 80032bc:	f7fe fd1e 	bl	8001cfc <HAL_GetTick>
 80032c0:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80032c2:	e00d      	b.n	80032e0 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 80032c4:	f7fe fd1a 	bl	8001cfc <HAL_GetTick>
 80032c8:	4602      	mov	r2, r0
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	1ad3      	subs	r3, r2, r3
 80032ce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80032d2:	d301      	bcc.n	80032d8 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 80032d4:	2301      	movs	r3, #1
 80032d6:	e010      	b.n	80032fa <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	691b      	ldr	r3, [r3, #16]
 80032de:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	f003 0301 	and.w	r3, r3, #1
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d1ec      	bne.n	80032c4 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	695b      	ldr	r3, [r3, #20]
 80032f0:	b29b      	uxth	r3, r3
 80032f2:	461a      	mov	r2, r3
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80032f8:	2300      	movs	r3, #0
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	3718      	adds	r7, #24
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}

08003302 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8003302:	b580      	push	{r7, lr}
 8003304:	b086      	sub	sp, #24
 8003306:	af00      	add	r7, sp, #0
 8003308:	60f8      	str	r0, [r7, #12]
 800330a:	60b9      	str	r1, [r7, #8]
 800330c:	607a      	str	r2, [r7, #4]
 800330e:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	691b      	ldr	r3, [r3, #16]
 8003316:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	f003 031c 	and.w	r3, r3, #28
 800331e:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	02db      	lsls	r3, r3, #11
 8003324:	b29b      	uxth	r3, r3
 8003326:	697a      	ldr	r2, [r7, #20]
 8003328:	4313      	orrs	r3, r2
 800332a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	019b      	lsls	r3, r3, #6
 8003330:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8003334:	697a      	ldr	r2, [r7, #20]
 8003336:	4313      	orrs	r3, r2
 8003338:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	f043 0302 	orr.w	r3, r3, #2
 8003340:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8003342:	697b      	ldr	r3, [r7, #20]
 8003344:	f043 0301 	orr.w	r3, r3, #1
 8003348:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	b29a      	uxth	r2, r3
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	697a      	ldr	r2, [r7, #20]
 800335a:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 800335c:	f7fe fcce 	bl	8001cfc <HAL_GetTick>
 8003360:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003362:	e00d      	b.n	8003380 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8003364:	f7fe fcca 	bl	8001cfc <HAL_GetTick>
 8003368:	4602      	mov	r2, r0
 800336a:	693b      	ldr	r3, [r7, #16]
 800336c:	1ad3      	subs	r3, r2, r3
 800336e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003372:	d301      	bcc.n	8003378 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8003374:	2301      	movs	r3, #1
 8003376:	e009      	b.n	800338c <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	691b      	ldr	r3, [r3, #16]
 800337e:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003380:	697b      	ldr	r3, [r7, #20]
 8003382:	f003 0301 	and.w	r3, r3, #1
 8003386:	2b00      	cmp	r3, #0
 8003388:	d1ec      	bne.n	8003364 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 800338a:	2300      	movs	r3, #0
}
 800338c:	4618      	mov	r0, r3
 800338e:	3718      	adds	r7, #24
 8003390:	46bd      	mov	sp, r7
 8003392:	bd80      	pop	{r7, pc}

08003394 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8003394:	b480      	push	{r7}
 8003396:	b083      	sub	sp, #12
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
 800339c:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d101      	bne.n	80033a8 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 80033a4:	2301      	movs	r3, #1
 80033a6:	e0e6      	b.n	8003576 <HAL_ETH_GetMACConfig+0x1e2>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f003 0310 	and.w	r3, r3, #16
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	bf14      	ite	ne
 80033b6:	2301      	movne	r3, #1
 80033b8:	2300      	moveq	r3, #0
 80033ba:	b2db      	uxtb	r3, r3
 80033bc:	461a      	mov	r2, r3
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80033dc:	2b00      	cmp	r3, #0
 80033de:	bf0c      	ite	eq
 80033e0:	2301      	moveq	r3, #1
 80033e2:	2300      	movne	r3, #0
 80033e4:	b2db      	uxtb	r3, r3
 80033e6:	461a      	mov	r2, r3
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
                                        ? ENABLE : DISABLE;
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	bf14      	ite	ne
 80033fc:	2301      	movne	r3, #1
 80033fe:	2300      	moveq	r3, #0
 8003400:	b2db      	uxtb	r3, r3
 8003402:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003412:	2b00      	cmp	r3, #0
 8003414:	bf0c      	ite	eq
 8003416:	2301      	moveq	r3, #1
 8003418:	2300      	movne	r3, #0
 800341a:	b2db      	uxtb	r3, r3
 800341c:	461a      	mov	r2, r3
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800342c:	2b00      	cmp	r3, #0
 800342e:	bf14      	ite	ne
 8003430:	2301      	movne	r3, #1
 8003432:	2300      	moveq	r3, #0
 8003434:	b2db      	uxtb	r3, r3
 8003436:	461a      	mov	r2, r3
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003462:	2b00      	cmp	r3, #0
 8003464:	bf0c      	ite	eq
 8003466:	2301      	moveq	r3, #1
 8003468:	2300      	movne	r3, #0
 800346a:	b2db      	uxtb	r3, r3
 800346c:	461a      	mov	r2, r3
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800347c:	2b00      	cmp	r3, #0
 800347e:	bf0c      	ite	eq
 8003480:	2301      	moveq	r3, #1
 8003482:	2300      	movne	r3, #0
 8003484:	b2db      	uxtb	r3, r3
 8003486:	461a      	mov	r2, r3
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003496:	2b00      	cmp	r3, #0
 8003498:	bf14      	ite	ne
 800349a:	2301      	movne	r3, #1
 800349c:	2300      	moveq	r3, #0
 800349e:	b2db      	uxtb	r3, r3
 80034a0:	461a      	mov	r2, r3
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f403 2260 	and.w	r2, r3, #917504	@ 0xe0000
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034be:	2b00      	cmp	r3, #0
 80034c0:	bf14      	ite	ne
 80034c2:	2301      	movne	r3, #1
 80034c4:	2300      	moveq	r3, #0
 80034c6:	b2db      	uxtb	r3, r3
 80034c8:	461a      	mov	r2, r3
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	711a      	strb	r2, [r3, #4]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSTF) >> 25U) > 0U) ? ENABLE : DISABLE;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034d8:	2b00      	cmp	r3, #0
 80034da:	bf14      	ite	ne
 80034dc:	2301      	movne	r3, #1
 80034de:	2300      	moveq	r3, #0
 80034e0:	b2db      	uxtb	r3, r3
 80034e2:	461a      	mov	r2, r3
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	739a      	strb	r2, [r3, #14]

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	699b      	ldr	r3, [r3, #24]
 80034ee:	f003 0302 	and.w	r3, r3, #2
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	bf14      	ite	ne
 80034f6:	2301      	movne	r3, #1
 80034f8:	2300      	moveq	r3, #0
 80034fa:	b2db      	uxtb	r3, r3
 80034fc:	461a      	mov	r2, r3
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	699b      	ldr	r3, [r3, #24]
 800350a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800350e:	2b00      	cmp	r3, #0
 8003510:	bf0c      	ite	eq
 8003512:	2301      	moveq	r3, #1
 8003514:	2300      	movne	r3, #0
 8003516:	b2db      	uxtb	r3, r3
 8003518:	461a      	mov	r2, r3
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	699b      	ldr	r3, [r3, #24]
 8003526:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	699b      	ldr	r3, [r3, #24]
 8003534:	0c1b      	lsrs	r3, r3, #16
 8003536:	b29a      	uxth	r2, r3
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	699b      	ldr	r3, [r3, #24]
 8003542:	f003 0304 	and.w	r3, r3, #4
 8003546:	2b00      	cmp	r3, #0
 8003548:	bf14      	ite	ne
 800354a:	2301      	movne	r3, #1
 800354c:	2300      	moveq	r3, #0
 800354e:	b2db      	uxtb	r3, r3
 8003550:	461a      	mov	r2, r3
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	699b      	ldr	r3, [r3, #24]
 800355e:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8003562:	2b00      	cmp	r3, #0
 8003564:	bf14      	ite	ne
 8003566:	2301      	movne	r3, #1
 8003568:	2300      	moveq	r3, #0
 800356a:	b2db      	uxtb	r3, r3
 800356c:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  return HAL_OK;
 8003574:	2300      	movs	r3, #0
}
 8003576:	4618      	mov	r0, r3
 8003578:	370c      	adds	r7, #12
 800357a:	46bd      	mov	sp, r7
 800357c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003580:	4770      	bx	lr

08003582 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8003582:	b580      	push	{r7, lr}
 8003584:	b082      	sub	sp, #8
 8003586:	af00      	add	r7, sp, #0
 8003588:	6078      	str	r0, [r7, #4]
 800358a:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d101      	bne.n	8003596 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8003592:	2301      	movs	r3, #1
 8003594:	e00b      	b.n	80035ae <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800359c:	2b10      	cmp	r3, #16
 800359e:	d105      	bne.n	80035ac <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 80035a0:	6839      	ldr	r1, [r7, #0]
 80035a2:	6878      	ldr	r0, [r7, #4]
 80035a4:	f000 f870 	bl	8003688 <ETH_SetMACConfig>

    return HAL_OK;
 80035a8:	2300      	movs	r3, #0
 80035aa:	e000      	b.n	80035ae <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 80035ac:	2301      	movs	r3, #1
  }
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	3708      	adds	r7, #8
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}
	...

080035b8 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b084      	sub	sp, #16
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	691b      	ldr	r3, [r3, #16]
 80035c6:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	f023 031c 	bic.w	r3, r3, #28
 80035ce:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80035d0:	f001 fb22 	bl	8004c18 <HAL_RCC_GetHCLKFreq>
 80035d4:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	4a14      	ldr	r2, [pc, #80]	@ (800362c <HAL_ETH_SetMDIOClockRange+0x74>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d804      	bhi.n	80035e8 <HAL_ETH_SetMDIOClockRange+0x30>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	f043 0308 	orr.w	r3, r3, #8
 80035e4:	60fb      	str	r3, [r7, #12]
 80035e6:	e019      	b.n	800361c <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 60000000U)
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	4a11      	ldr	r2, [pc, #68]	@ (8003630 <HAL_ETH_SetMDIOClockRange+0x78>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d204      	bcs.n	80035fa <HAL_ETH_SetMDIOClockRange+0x42>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	f043 030c 	orr.w	r3, r3, #12
 80035f6:	60fb      	str	r3, [r7, #12]
 80035f8:	e010      	b.n	800361c <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 100000000U)
 80035fa:	68bb      	ldr	r3, [r7, #8]
 80035fc:	4a0d      	ldr	r2, [pc, #52]	@ (8003634 <HAL_ETH_SetMDIOClockRange+0x7c>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d90c      	bls.n	800361c <HAL_ETH_SetMDIOClockRange+0x64>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if (hclk < 150000000U)
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	4a0c      	ldr	r2, [pc, #48]	@ (8003638 <HAL_ETH_SetMDIOClockRange+0x80>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d804      	bhi.n	8003614 <HAL_ETH_SetMDIOClockRange+0x5c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	f043 0304 	orr.w	r3, r3, #4
 8003610:	60fb      	str	r3, [r7, #12]
 8003612:	e003      	b.n	800361c <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else /* (hclk >= 150000000)  */
  {
    /* CSR Clock >= 150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	f043 0310 	orr.w	r3, r3, #16
 800361a:	60fb      	str	r3, [r7, #12]
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	68fa      	ldr	r2, [r7, #12]
 8003622:	611a      	str	r2, [r3, #16]
}
 8003624:	bf00      	nop
 8003626:	3710      	adds	r7, #16
 8003628:	46bd      	mov	sp, r7
 800362a:	bd80      	pop	{r7, pc}
 800362c:	02160ebf 	.word	0x02160ebf
 8003630:	03938700 	.word	0x03938700
 8003634:	05f5e0ff 	.word	0x05f5e0ff
 8003638:	08f0d17f 	.word	0x08f0d17f

0800363c <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b084      	sub	sp, #16
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8003644:	2300      	movs	r3, #0
 8003646:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003650:	699b      	ldr	r3, [r3, #24]
 8003652:	687a      	ldr	r2, [r7, #4]
 8003654:	6812      	ldr	r2, [r2, #0]
 8003656:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800365a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800365e:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003668:	699b      	ldr	r3, [r3, #24]
 800366a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800366c:	2001      	movs	r0, #1
 800366e:	f7fe fb51 	bl	8001d14 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681a      	ldr	r2, [r3, #0]
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800367c:	6193      	str	r3, [r2, #24]
}
 800367e:	bf00      	nop
 8003680:	3710      	adds	r7, #16
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}
	...

08003688 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b084      	sub	sp, #16
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
 8003690:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800369a:	68fa      	ldr	r2, [r7, #12]
 800369c:	4b53      	ldr	r3, [pc, #332]	@ (80037ec <ETH_SetMACConfig+0x164>)
 800369e:	4013      	ands	r3, r2
 80036a0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	7b9b      	ldrb	r3, [r3, #14]
 80036a6:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80036a8:	683a      	ldr	r2, [r7, #0]
 80036aa:	7c12      	ldrb	r2, [r2, #16]
 80036ac:	2a00      	cmp	r2, #0
 80036ae:	d102      	bne.n	80036b6 <ETH_SetMACConfig+0x2e>
 80036b0:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80036b4:	e000      	b.n	80036b8 <ETH_SetMACConfig+0x30>
 80036b6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80036b8:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80036ba:	683a      	ldr	r2, [r7, #0]
 80036bc:	7c52      	ldrb	r2, [r2, #17]
 80036be:	2a00      	cmp	r2, #0
 80036c0:	d102      	bne.n	80036c8 <ETH_SetMACConfig+0x40>
 80036c2:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80036c6:	e000      	b.n	80036ca <ETH_SetMACConfig+0x42>
 80036c8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80036ca:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80036d0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	7fdb      	ldrb	r3, [r3, #31]
 80036d6:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80036d8:	431a      	orrs	r2, r3
                        macconf->Speed |
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80036de:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80036e0:	683a      	ldr	r2, [r7, #0]
 80036e2:	7f92      	ldrb	r2, [r2, #30]
 80036e4:	2a00      	cmp	r2, #0
 80036e6:	d102      	bne.n	80036ee <ETH_SetMACConfig+0x66>
 80036e8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80036ec:	e000      	b.n	80036f0 <ETH_SetMACConfig+0x68>
 80036ee:	2200      	movs	r2, #0
                        macconf->Speed |
 80036f0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	7f1b      	ldrb	r3, [r3, #28]
 80036f6:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80036f8:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80036fe:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	791b      	ldrb	r3, [r3, #4]
 8003704:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8003706:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003708:	683a      	ldr	r2, [r7, #0]
 800370a:	f892 2020 	ldrb.w	r2, [r2, #32]
 800370e:	2a00      	cmp	r2, #0
 8003710:	d102      	bne.n	8003718 <ETH_SetMACConfig+0x90>
 8003712:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003716:	e000      	b.n	800371a <ETH_SetMACConfig+0x92>
 8003718:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800371a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	7bdb      	ldrb	r3, [r3, #15]
 8003720:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003722:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003728:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003730:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8003732:	4313      	orrs	r3, r2
 8003734:	68fa      	ldr	r2, [r7, #12]
 8003736:	4313      	orrs	r3, r2
 8003738:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	68fa      	ldr	r2, [r7, #12]
 8003740:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800374a:	2001      	movs	r0, #1
 800374c:	f7fe fae2 	bl	8001d14 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	68fa      	ldr	r2, [r7, #12]
 8003756:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	699b      	ldr	r3, [r3, #24]
 800375e:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8003760:	68fa      	ldr	r2, [r7, #12]
 8003762:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8003766:	4013      	ands	r3, r2
 8003768:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800376e:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003770:	683a      	ldr	r2, [r7, #0]
 8003772:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8003776:	2a00      	cmp	r2, #0
 8003778:	d101      	bne.n	800377e <ETH_SetMACConfig+0xf6>
 800377a:	2280      	movs	r2, #128	@ 0x80
 800377c:	e000      	b.n	8003780 <ETH_SetMACConfig+0xf8>
 800377e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003780:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003786:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003788:	683a      	ldr	r2, [r7, #0]
 800378a:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 800378e:	2a01      	cmp	r2, #1
 8003790:	d101      	bne.n	8003796 <ETH_SetMACConfig+0x10e>
 8003792:	2208      	movs	r2, #8
 8003794:	e000      	b.n	8003798 <ETH_SetMACConfig+0x110>
 8003796:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8003798:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800379a:	683a      	ldr	r2, [r7, #0]
 800379c:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 80037a0:	2a01      	cmp	r2, #1
 80037a2:	d101      	bne.n	80037a8 <ETH_SetMACConfig+0x120>
 80037a4:	2204      	movs	r2, #4
 80037a6:	e000      	b.n	80037aa <ETH_SetMACConfig+0x122>
 80037a8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80037aa:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80037ac:	683a      	ldr	r2, [r7, #0]
 80037ae:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 80037b2:	2a01      	cmp	r2, #1
 80037b4:	d101      	bne.n	80037ba <ETH_SetMACConfig+0x132>
 80037b6:	2202      	movs	r2, #2
 80037b8:	e000      	b.n	80037bc <ETH_SetMACConfig+0x134>
 80037ba:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80037bc:	4313      	orrs	r3, r2
 80037be:	68fa      	ldr	r2, [r7, #12]
 80037c0:	4313      	orrs	r3, r2
 80037c2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	68fa      	ldr	r2, [r7, #12]
 80037ca:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	699b      	ldr	r3, [r3, #24]
 80037d2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80037d4:	2001      	movs	r0, #1
 80037d6:	f7fe fa9d 	bl	8001d14 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	68fa      	ldr	r2, [r7, #12]
 80037e0:	619a      	str	r2, [r3, #24]
}
 80037e2:	bf00      	nop
 80037e4:	3710      	adds	r7, #16
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}
 80037ea:	bf00      	nop
 80037ec:	fd20810f 	.word	0xfd20810f

080037f0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b084      	sub	sp, #16
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
 80037f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003802:	699b      	ldr	r3, [r3, #24]
 8003804:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8003806:	68fa      	ldr	r2, [r7, #12]
 8003808:	4b3d      	ldr	r3, [pc, #244]	@ (8003900 <ETH_SetDMAConfig+0x110>)
 800380a:	4013      	ands	r3, r2
 800380c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	7b1b      	ldrb	r3, [r3, #12]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d102      	bne.n	800381c <ETH_SetDMAConfig+0x2c>
 8003816:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800381a:	e000      	b.n	800381e <ETH_SetDMAConfig+0x2e>
 800381c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	7b5b      	ldrb	r3, [r3, #13]
 8003822:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003824:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003826:	683a      	ldr	r2, [r7, #0]
 8003828:	7f52      	ldrb	r2, [r2, #29]
 800382a:	2a00      	cmp	r2, #0
 800382c:	d102      	bne.n	8003834 <ETH_SetDMAConfig+0x44>
 800382e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003832:	e000      	b.n	8003836 <ETH_SetDMAConfig+0x46>
 8003834:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003836:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	7b9b      	ldrb	r3, [r3, #14]
 800383c:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800383e:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003844:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	7f1b      	ldrb	r3, [r3, #28]
 800384a:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 800384c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	7f9b      	ldrb	r3, [r3, #30]
 8003852:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003854:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800385a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003862:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003864:	4313      	orrs	r3, r2
 8003866:	68fa      	ldr	r2, [r7, #12]
 8003868:	4313      	orrs	r3, r2
 800386a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003874:	461a      	mov	r2, r3
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003882:	699b      	ldr	r3, [r3, #24]
 8003884:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003886:	2001      	movs	r0, #1
 8003888:	f7fe fa44 	bl	8001d14 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003894:	461a      	mov	r2, r3
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	791b      	ldrb	r3, [r3, #4]
 800389e:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80038a4:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80038aa:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80038b0:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80038b8:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80038ba:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038c0:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80038c2:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80038c8:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80038ca:	687a      	ldr	r2, [r7, #4]
 80038cc:	6812      	ldr	r2, [r2, #0]
 80038ce:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80038d2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80038d6:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80038e4:	2001      	movs	r0, #1
 80038e6:	f7fe fa15 	bl	8001d14 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80038f2:	461a      	mov	r2, r3
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	6013      	str	r3, [r2, #0]
}
 80038f8:	bf00      	nop
 80038fa:	3710      	adds	r7, #16
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}
 8003900:	f8de3f23 	.word	0xf8de3f23

08003904 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b0a6      	sub	sp, #152	@ 0x98
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 800390c:	2301      	movs	r3, #1
 800390e:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8003912:	2301      	movs	r3, #1
 8003914:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8003918:	2300      	movs	r3, #0
 800391a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800391c:	2300      	movs	r3, #0
 800391e:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8003922:	2301      	movs	r3, #1
 8003924:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8003928:	2300      	movs	r3, #0
 800392a:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800392e:	2301      	movs	r3, #1
 8003930:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8003934:	2301      	movs	r3, #1
 8003936:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 800393a:	2300      	movs	r3, #0
 800393c:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8003940:	2300      	movs	r3, #0
 8003942:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003946:	2300      	movs	r3, #0
 8003948:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 800394a:	2300      	movs	r3, #0
 800394c:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8003950:	2300      	movs	r3, #0
 8003952:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8003954:	2300      	movs	r3, #0
 8003956:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800395a:	2300      	movs	r3, #0
 800395c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8003960:	2300      	movs	r3, #0
 8003962:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8003966:	2300      	movs	r3, #0
 8003968:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800396c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003970:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8003972:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003976:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8003978:	2300      	movs	r3, #0
 800397a:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800397e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003982:	4619      	mov	r1, r3
 8003984:	6878      	ldr	r0, [r7, #4]
 8003986:	f7ff fe7f 	bl	8003688 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 800398a:	2301      	movs	r3, #1
 800398c:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 800398e:	2301      	movs	r3, #1
 8003990:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8003992:	2301      	movs	r3, #1
 8003994:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8003998:	2301      	movs	r3, #1
 800399a:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800399c:	2300      	movs	r3, #0
 800399e:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80039a0:	2300      	movs	r3, #0
 80039a2:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80039a6:	2300      	movs	r3, #0
 80039a8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80039ac:	2300      	movs	r3, #0
 80039ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80039b0:	2301      	movs	r3, #1
 80039b2:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80039b6:	2301      	movs	r3, #1
 80039b8:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80039ba:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80039be:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80039c0:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80039c4:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80039c6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80039ca:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80039cc:	2301      	movs	r3, #1
 80039ce:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80039d2:	2300      	movs	r3, #0
 80039d4:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80039d6:	2300      	movs	r3, #0
 80039d8:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80039da:	f107 0308 	add.w	r3, r7, #8
 80039de:	4619      	mov	r1, r3
 80039e0:	6878      	ldr	r0, [r7, #4]
 80039e2:	f7ff ff05 	bl	80037f0 <ETH_SetDMAConfig>
}
 80039e6:	bf00      	nop
 80039e8:	3798      	adds	r7, #152	@ 0x98
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}
	...

080039f0 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80039f0:	b480      	push	{r7}
 80039f2:	b087      	sub	sp, #28
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	60f8      	str	r0, [r7, #12]
 80039f8:	60b9      	str	r1, [r7, #8]
 80039fa:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	3305      	adds	r3, #5
 8003a00:	781b      	ldrb	r3, [r3, #0]
 8003a02:	021b      	lsls	r3, r3, #8
 8003a04:	687a      	ldr	r2, [r7, #4]
 8003a06:	3204      	adds	r2, #4
 8003a08:	7812      	ldrb	r2, [r2, #0]
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8003a0e:	68ba      	ldr	r2, [r7, #8]
 8003a10:	4b11      	ldr	r3, [pc, #68]	@ (8003a58 <ETH_MACAddressConfig+0x68>)
 8003a12:	4413      	add	r3, r2
 8003a14:	461a      	mov	r2, r3
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	3303      	adds	r3, #3
 8003a1e:	781b      	ldrb	r3, [r3, #0]
 8003a20:	061a      	lsls	r2, r3, #24
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	3302      	adds	r3, #2
 8003a26:	781b      	ldrb	r3, [r3, #0]
 8003a28:	041b      	lsls	r3, r3, #16
 8003a2a:	431a      	orrs	r2, r3
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	3301      	adds	r3, #1
 8003a30:	781b      	ldrb	r3, [r3, #0]
 8003a32:	021b      	lsls	r3, r3, #8
 8003a34:	4313      	orrs	r3, r2
 8003a36:	687a      	ldr	r2, [r7, #4]
 8003a38:	7812      	ldrb	r2, [r2, #0]
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8003a3e:	68ba      	ldr	r2, [r7, #8]
 8003a40:	4b06      	ldr	r3, [pc, #24]	@ (8003a5c <ETH_MACAddressConfig+0x6c>)
 8003a42:	4413      	add	r3, r2
 8003a44:	461a      	mov	r2, r3
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	6013      	str	r3, [r2, #0]
}
 8003a4a:	bf00      	nop
 8003a4c:	371c      	adds	r7, #28
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a54:	4770      	bx	lr
 8003a56:	bf00      	nop
 8003a58:	40028040 	.word	0x40028040
 8003a5c:	40028044 	.word	0x40028044

08003a60 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8003a60:	b480      	push	{r7}
 8003a62:	b085      	sub	sp, #20
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003a68:	2300      	movs	r3, #0
 8003a6a:	60fb      	str	r3, [r7, #12]
 8003a6c:	e03e      	b.n	8003aec <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	68d9      	ldr	r1, [r3, #12]
 8003a72:	68fa      	ldr	r2, [r7, #12]
 8003a74:	4613      	mov	r3, r2
 8003a76:	009b      	lsls	r3, r3, #2
 8003a78:	4413      	add	r3, r2
 8003a7a:	00db      	lsls	r3, r3, #3
 8003a7c:	440b      	add	r3, r1
 8003a7e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	2200      	movs	r2, #0
 8003a84:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	2200      	movs	r2, #0
 8003a96:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8003a98:	68b9      	ldr	r1, [r7, #8]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	68fa      	ldr	r2, [r7, #12]
 8003a9e:	3206      	adds	r2, #6
 8003aa0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	2b02      	cmp	r3, #2
 8003ab4:	d80c      	bhi.n	8003ad0 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	68d9      	ldr	r1, [r3, #12]
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	1c5a      	adds	r2, r3, #1
 8003abe:	4613      	mov	r3, r2
 8003ac0:	009b      	lsls	r3, r3, #2
 8003ac2:	4413      	add	r3, r2
 8003ac4:	00db      	lsls	r3, r3, #3
 8003ac6:	440b      	add	r3, r1
 8003ac8:	461a      	mov	r2, r3
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	60da      	str	r2, [r3, #12]
 8003ace:	e004      	b.n	8003ada <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	68db      	ldr	r3, [r3, #12]
 8003ad4:	461a      	mov	r2, r3
 8003ad6:	68bb      	ldr	r3, [r7, #8]
 8003ad8:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8003ae2:	68bb      	ldr	r3, [r7, #8]
 8003ae4:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	3301      	adds	r3, #1
 8003aea:	60fb      	str	r3, [r7, #12]
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	2b03      	cmp	r3, #3
 8003af0:	d9bd      	bls.n	8003a6e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2200      	movs	r2, #0
 8003af6:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	68da      	ldr	r2, [r3, #12]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003b04:	611a      	str	r2, [r3, #16]
}
 8003b06:	bf00      	nop
 8003b08:	3714      	adds	r7, #20
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b10:	4770      	bx	lr

08003b12 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8003b12:	b480      	push	{r7}
 8003b14:	b085      	sub	sp, #20
 8003b16:	af00      	add	r7, sp, #0
 8003b18:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	60fb      	str	r3, [r7, #12]
 8003b1e:	e048      	b.n	8003bb2 <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6919      	ldr	r1, [r3, #16]
 8003b24:	68fa      	ldr	r2, [r7, #12]
 8003b26:	4613      	mov	r3, r2
 8003b28:	009b      	lsls	r3, r3, #2
 8003b2a:	4413      	add	r3, r2
 8003b2c:	00db      	lsls	r3, r3, #3
 8003b2e:	440b      	add	r3, r1
 8003b30:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	2200      	movs	r2, #0
 8003b36:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	2200      	movs	r2, #0
 8003b42:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	2200      	movs	r2, #0
 8003b48:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	2200      	movs	r2, #0
 8003b54:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8003b5c:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	695b      	ldr	r3, [r3, #20]
 8003b62:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8003b66:	68bb      	ldr	r3, [r7, #8]
 8003b68:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003b72:	68bb      	ldr	r3, [r7, #8]
 8003b74:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8003b76:	68b9      	ldr	r1, [r7, #8]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	68fa      	ldr	r2, [r7, #12]
 8003b7c:	3212      	adds	r2, #18
 8003b7e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	2b02      	cmp	r3, #2
 8003b86:	d80c      	bhi.n	8003ba2 <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6919      	ldr	r1, [r3, #16]
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	1c5a      	adds	r2, r3, #1
 8003b90:	4613      	mov	r3, r2
 8003b92:	009b      	lsls	r3, r3, #2
 8003b94:	4413      	add	r3, r2
 8003b96:	00db      	lsls	r3, r3, #3
 8003b98:	440b      	add	r3, r1
 8003b9a:	461a      	mov	r2, r3
 8003b9c:	68bb      	ldr	r3, [r7, #8]
 8003b9e:	60da      	str	r2, [r3, #12]
 8003ba0:	e004      	b.n	8003bac <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	691b      	ldr	r3, [r3, #16]
 8003ba6:	461a      	mov	r2, r3
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	3301      	adds	r3, #1
 8003bb0:	60fb      	str	r3, [r7, #12]
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	2b03      	cmp	r3, #3
 8003bb6:	d9b3      	bls.n	8003b20 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	691a      	ldr	r2, [r3, #16]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003be2:	60da      	str	r2, [r3, #12]
}
 8003be4:	bf00      	nop
 8003be6:	3714      	adds	r7, #20
 8003be8:	46bd      	mov	sp, r7
 8003bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bee:	4770      	bx	lr

08003bf0 <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b091      	sub	sp, #68	@ 0x44
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	60f8      	str	r0, [r7, #12]
 8003bf8:	60b9      	str	r1, [r7, #8]
 8003bfa:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	3318      	adds	r3, #24
 8003c00:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8003c02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c04:	691b      	ldr	r3, [r3, #16]
 8003c06:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8003c08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c0a:	691b      	ldr	r3, [r3, #16]
 8003c0c:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 8003c0e:	2300      	movs	r3, #0
 8003c10:	637b      	str	r3, [r7, #52]	@ 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003c12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c14:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003c16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c1a:	633b      	str	r3, [r7, #48]	@ 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	689b      	ldr	r3, [r3, #8]
 8003c20:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t           bd_count = 0;
 8003c22:	2300      	movs	r3, #0
 8003c24:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8003c26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003c2e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003c32:	d007      	beq.n	8003c44 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8003c34:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c38:	3304      	adds	r3, #4
 8003c3a:	009b      	lsls	r3, r3, #2
 8003c3c:	4413      	add	r3, r2
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d001      	beq.n	8003c48 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8003c44:	2302      	movs	r3, #2
 8003c46:	e111      	b.n	8003e6c <ETH_Prepare_Tx_Descriptors+0x27c>
  }


  descnbr += 1U;
 8003c48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c4a:	3301      	adds	r3, #1
 8003c4c:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8003c4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	461a      	mov	r2, r3
 8003c54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c56:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8003c58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c5a:	685a      	ldr	r2, [r3, #4]
 8003c5c:	4b86      	ldr	r3, [pc, #536]	@ (8003e78 <ETH_Prepare_Tx_Descriptors+0x288>)
 8003c5e:	4013      	ands	r3, r2
 8003c60:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003c62:	6852      	ldr	r2, [r2, #4]
 8003c64:	431a      	orrs	r2, r3
 8003c66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c68:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f003 0301 	and.w	r3, r3, #1
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d008      	beq.n	8003c88 <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8003c76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	695b      	ldr	r3, [r3, #20]
 8003c82:	431a      	orrs	r2, r3
 8003c84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c86:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f003 0320 	and.w	r3, r3, #32
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d008      	beq.n	8003ca6 <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8003c94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	691b      	ldr	r3, [r3, #16]
 8003ca0:	431a      	orrs	r2, r3
 8003ca2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ca4:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f003 0304 	and.w	r3, r3, #4
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d005      	beq.n	8003cbe <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8003cb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003cba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cbc:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8003cbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003cc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cc8:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8003cca:	e082      	b.n	8003dd2 <ETH_Prepare_Tx_Descriptors+0x1e2>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8003ccc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8003cd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cd6:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d006      	beq.n	8003cec <ETH_Prepare_Tx_Descriptors+0xfc>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8003cde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8003ce6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ce8:	601a      	str	r2, [r3, #0]
 8003cea:	e005      	b.n	8003cf8 <ETH_Prepare_Tx_Descriptors+0x108>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8003cec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003cf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cf6:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8003cf8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003cfa:	3301      	adds	r3, #1
 8003cfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003cfe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d00:	2b03      	cmp	r3, #3
 8003d02:	d902      	bls.n	8003d0a <ETH_Prepare_Tx_Descriptors+0x11a>
 8003d04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d06:	3b04      	subs	r3, #4
 8003d08:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003d0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d0c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003d0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d12:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8003d14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003d1c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003d20:	d007      	beq.n	8003d32 <ETH_Prepare_Tx_Descriptors+0x142>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8003d22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d26:	3304      	adds	r3, #4
 8003d28:	009b      	lsls	r3, r3, #2
 8003d2a:	4413      	add	r3, r2
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d029      	beq.n	8003d86 <ETH_Prepare_Tx_Descriptors+0x196>
    {
      descidx = firstdescidx;
 8003d32:	6a3b      	ldr	r3, [r7, #32]
 8003d34:	63fb      	str	r3, [r7, #60]	@ 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003d36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d38:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003d3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d3e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8003d40:	2300      	movs	r3, #0
 8003d42:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003d44:	e019      	b.n	8003d7a <ETH_Prepare_Tx_Descriptors+0x18a>
  __ASM volatile ("dmb 0xF":::"memory");
 8003d46:	f3bf 8f5f 	dmb	sy
}
 8003d4a:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8003d4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003d54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d56:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8003d58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d5a:	3301      	adds	r3, #1
 8003d5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003d5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d60:	2b03      	cmp	r3, #3
 8003d62:	d902      	bls.n	8003d6a <ETH_Prepare_Tx_Descriptors+0x17a>
 8003d64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d66:	3b04      	subs	r3, #4
 8003d68:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003d6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d6c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003d6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d72:	633b      	str	r3, [r7, #48]	@ 0x30
      for (idx = 0; idx < descnbr; idx ++)
 8003d74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d76:	3301      	adds	r3, #1
 8003d78:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003d7a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003d7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d7e:	429a      	cmp	r2, r3
 8003d80:	d3e1      	bcc.n	8003d46 <ETH_Prepare_Tx_Descriptors+0x156>
      }

      return HAL_ETH_ERROR_BUSY;
 8003d82:	2302      	movs	r3, #2
 8003d84:	e072      	b.n	8003e6c <ETH_Prepare_Tx_Descriptors+0x27c>
    }

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8003d86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003d8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d90:	601a      	str	r2, [r3, #0]

    descnbr += 1U;
 8003d92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d94:	3301      	adds	r3, #1
 8003d96:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8003d98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d9a:	689b      	ldr	r3, [r3, #8]
 8003d9c:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8003d9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	461a      	mov	r2, r3
 8003da4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003da6:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8003da8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003daa:	685a      	ldr	r2, [r3, #4]
 8003dac:	4b32      	ldr	r3, [pc, #200]	@ (8003e78 <ETH_Prepare_Tx_Descriptors+0x288>)
 8003dae:	4013      	ands	r3, r2
 8003db0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003db2:	6852      	ldr	r2, [r2, #4]
 8003db4:	431a      	orrs	r2, r3
 8003db6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003db8:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8003dba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dbc:	3301      	adds	r3, #1
 8003dbe:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 8003dc0:	f3bf 8f5f 	dmb	sy
}
 8003dc4:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8003dc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003dce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dd0:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8003dd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003dd4:	689b      	ldr	r3, [r3, #8]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	f47f af78 	bne.w	8003ccc <ETH_Prepare_Tx_Descriptors+0xdc>
  }

  if (ItMode != ((uint32_t)RESET))
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d006      	beq.n	8003df0 <ETH_Prepare_Tx_Descriptors+0x200>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8003de2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8003dea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dec:	601a      	str	r2, [r3, #0]
 8003dee:	e005      	b.n	8003dfc <ETH_Prepare_Tx_Descriptors+0x20c>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8003df0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003df8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dfa:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8003dfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8003e04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e06:	601a      	str	r2, [r3, #0]

  /* Get address of first descriptor */
  dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8003e08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e0a:	6a3a      	ldr	r2, [r7, #32]
 8003e0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e10:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 8003e12:	f3bf 8f5f 	dmb	sy
}
 8003e16:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8003e18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003e20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e22:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8003e24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e26:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003e28:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003e2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e2c:	3304      	adds	r3, #4
 8003e2e:	009b      	lsls	r3, r3, #2
 8003e30:	440b      	add	r3, r1
 8003e32:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8003e34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e36:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003e38:	611a      	str	r2, [r3, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e3a:	f3ef 8310 	mrs	r3, PRIMASK
 8003e3e:	613b      	str	r3, [r7, #16]
  return(result);
 8003e40:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 8003e42:	61fb      	str	r3, [r7, #28]
 8003e44:	2301      	movs	r3, #1
 8003e46:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e48:	697b      	ldr	r3, [r7, #20]
 8003e4a:	f383 8810 	msr	PRIMASK, r3
}
 8003e4e:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8003e50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e52:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003e54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e56:	4413      	add	r3, r2
 8003e58:	1c5a      	adds	r2, r3, #1
 8003e5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e5c:	629a      	str	r2, [r3, #40]	@ 0x28
 8003e5e:	69fb      	ldr	r3, [r7, #28]
 8003e60:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e62:	69bb      	ldr	r3, [r7, #24]
 8003e64:	f383 8810 	msr	PRIMASK, r3
}
 8003e68:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8003e6a:	2300      	movs	r3, #0
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	3744      	adds	r7, #68	@ 0x44
 8003e70:	46bd      	mov	sp, r7
 8003e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e76:	4770      	bx	lr
 8003e78:	ffffe000 	.word	0xffffe000

08003e7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	b089      	sub	sp, #36	@ 0x24
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
 8003e84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003e86:	2300      	movs	r3, #0
 8003e88:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003e92:	2300      	movs	r3, #0
 8003e94:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8003e96:	2300      	movs	r3, #0
 8003e98:	61fb      	str	r3, [r7, #28]
 8003e9a:	e175      	b.n	8004188 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003e9c:	2201      	movs	r2, #1
 8003e9e:	69fb      	ldr	r3, [r7, #28]
 8003ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	697a      	ldr	r2, [r7, #20]
 8003eac:	4013      	ands	r3, r2
 8003eae:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8003eb0:	693a      	ldr	r2, [r7, #16]
 8003eb2:	697b      	ldr	r3, [r7, #20]
 8003eb4:	429a      	cmp	r2, r3
 8003eb6:	f040 8164 	bne.w	8004182 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	f003 0303 	and.w	r3, r3, #3
 8003ec2:	2b01      	cmp	r3, #1
 8003ec4:	d005      	beq.n	8003ed2 <HAL_GPIO_Init+0x56>
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	f003 0303 	and.w	r3, r3, #3
 8003ece:	2b02      	cmp	r3, #2
 8003ed0:	d130      	bne.n	8003f34 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	689b      	ldr	r3, [r3, #8]
 8003ed6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003ed8:	69fb      	ldr	r3, [r7, #28]
 8003eda:	005b      	lsls	r3, r3, #1
 8003edc:	2203      	movs	r2, #3
 8003ede:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee2:	43db      	mvns	r3, r3
 8003ee4:	69ba      	ldr	r2, [r7, #24]
 8003ee6:	4013      	ands	r3, r2
 8003ee8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	68da      	ldr	r2, [r3, #12]
 8003eee:	69fb      	ldr	r3, [r7, #28]
 8003ef0:	005b      	lsls	r3, r3, #1
 8003ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef6:	69ba      	ldr	r2, [r7, #24]
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	69ba      	ldr	r2, [r7, #24]
 8003f00:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003f08:	2201      	movs	r2, #1
 8003f0a:	69fb      	ldr	r3, [r7, #28]
 8003f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f10:	43db      	mvns	r3, r3
 8003f12:	69ba      	ldr	r2, [r7, #24]
 8003f14:	4013      	ands	r3, r2
 8003f16:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	091b      	lsrs	r3, r3, #4
 8003f1e:	f003 0201 	and.w	r2, r3, #1
 8003f22:	69fb      	ldr	r3, [r7, #28]
 8003f24:	fa02 f303 	lsl.w	r3, r2, r3
 8003f28:	69ba      	ldr	r2, [r7, #24]
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	69ba      	ldr	r2, [r7, #24]
 8003f32:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	f003 0303 	and.w	r3, r3, #3
 8003f3c:	2b03      	cmp	r3, #3
 8003f3e:	d017      	beq.n	8003f70 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	68db      	ldr	r3, [r3, #12]
 8003f44:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003f46:	69fb      	ldr	r3, [r7, #28]
 8003f48:	005b      	lsls	r3, r3, #1
 8003f4a:	2203      	movs	r2, #3
 8003f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f50:	43db      	mvns	r3, r3
 8003f52:	69ba      	ldr	r2, [r7, #24]
 8003f54:	4013      	ands	r3, r2
 8003f56:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	689a      	ldr	r2, [r3, #8]
 8003f5c:	69fb      	ldr	r3, [r7, #28]
 8003f5e:	005b      	lsls	r3, r3, #1
 8003f60:	fa02 f303 	lsl.w	r3, r2, r3
 8003f64:	69ba      	ldr	r2, [r7, #24]
 8003f66:	4313      	orrs	r3, r2
 8003f68:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	69ba      	ldr	r2, [r7, #24]
 8003f6e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	f003 0303 	and.w	r3, r3, #3
 8003f78:	2b02      	cmp	r3, #2
 8003f7a:	d123      	bne.n	8003fc4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003f7c:	69fb      	ldr	r3, [r7, #28]
 8003f7e:	08da      	lsrs	r2, r3, #3
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	3208      	adds	r2, #8
 8003f84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003f8a:	69fb      	ldr	r3, [r7, #28]
 8003f8c:	f003 0307 	and.w	r3, r3, #7
 8003f90:	009b      	lsls	r3, r3, #2
 8003f92:	220f      	movs	r2, #15
 8003f94:	fa02 f303 	lsl.w	r3, r2, r3
 8003f98:	43db      	mvns	r3, r3
 8003f9a:	69ba      	ldr	r2, [r7, #24]
 8003f9c:	4013      	ands	r3, r2
 8003f9e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	691a      	ldr	r2, [r3, #16]
 8003fa4:	69fb      	ldr	r3, [r7, #28]
 8003fa6:	f003 0307 	and.w	r3, r3, #7
 8003faa:	009b      	lsls	r3, r3, #2
 8003fac:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb0:	69ba      	ldr	r2, [r7, #24]
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003fb6:	69fb      	ldr	r3, [r7, #28]
 8003fb8:	08da      	lsrs	r2, r3, #3
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	3208      	adds	r2, #8
 8003fbe:	69b9      	ldr	r1, [r7, #24]
 8003fc0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003fca:	69fb      	ldr	r3, [r7, #28]
 8003fcc:	005b      	lsls	r3, r3, #1
 8003fce:	2203      	movs	r2, #3
 8003fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fd4:	43db      	mvns	r3, r3
 8003fd6:	69ba      	ldr	r2, [r7, #24]
 8003fd8:	4013      	ands	r3, r2
 8003fda:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	f003 0203 	and.w	r2, r3, #3
 8003fe4:	69fb      	ldr	r3, [r7, #28]
 8003fe6:	005b      	lsls	r3, r3, #1
 8003fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fec:	69ba      	ldr	r2, [r7, #24]
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	69ba      	ldr	r2, [r7, #24]
 8003ff6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004000:	2b00      	cmp	r3, #0
 8004002:	f000 80be 	beq.w	8004182 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004006:	4b66      	ldr	r3, [pc, #408]	@ (80041a0 <HAL_GPIO_Init+0x324>)
 8004008:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800400a:	4a65      	ldr	r2, [pc, #404]	@ (80041a0 <HAL_GPIO_Init+0x324>)
 800400c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004010:	6453      	str	r3, [r2, #68]	@ 0x44
 8004012:	4b63      	ldr	r3, [pc, #396]	@ (80041a0 <HAL_GPIO_Init+0x324>)
 8004014:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004016:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800401a:	60fb      	str	r3, [r7, #12]
 800401c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800401e:	4a61      	ldr	r2, [pc, #388]	@ (80041a4 <HAL_GPIO_Init+0x328>)
 8004020:	69fb      	ldr	r3, [r7, #28]
 8004022:	089b      	lsrs	r3, r3, #2
 8004024:	3302      	adds	r3, #2
 8004026:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800402a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800402c:	69fb      	ldr	r3, [r7, #28]
 800402e:	f003 0303 	and.w	r3, r3, #3
 8004032:	009b      	lsls	r3, r3, #2
 8004034:	220f      	movs	r2, #15
 8004036:	fa02 f303 	lsl.w	r3, r2, r3
 800403a:	43db      	mvns	r3, r3
 800403c:	69ba      	ldr	r2, [r7, #24]
 800403e:	4013      	ands	r3, r2
 8004040:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	4a58      	ldr	r2, [pc, #352]	@ (80041a8 <HAL_GPIO_Init+0x32c>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d037      	beq.n	80040ba <HAL_GPIO_Init+0x23e>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	4a57      	ldr	r2, [pc, #348]	@ (80041ac <HAL_GPIO_Init+0x330>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d031      	beq.n	80040b6 <HAL_GPIO_Init+0x23a>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	4a56      	ldr	r2, [pc, #344]	@ (80041b0 <HAL_GPIO_Init+0x334>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d02b      	beq.n	80040b2 <HAL_GPIO_Init+0x236>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	4a55      	ldr	r2, [pc, #340]	@ (80041b4 <HAL_GPIO_Init+0x338>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d025      	beq.n	80040ae <HAL_GPIO_Init+0x232>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	4a54      	ldr	r2, [pc, #336]	@ (80041b8 <HAL_GPIO_Init+0x33c>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d01f      	beq.n	80040aa <HAL_GPIO_Init+0x22e>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	4a53      	ldr	r2, [pc, #332]	@ (80041bc <HAL_GPIO_Init+0x340>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d019      	beq.n	80040a6 <HAL_GPIO_Init+0x22a>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	4a52      	ldr	r2, [pc, #328]	@ (80041c0 <HAL_GPIO_Init+0x344>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d013      	beq.n	80040a2 <HAL_GPIO_Init+0x226>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	4a51      	ldr	r2, [pc, #324]	@ (80041c4 <HAL_GPIO_Init+0x348>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d00d      	beq.n	800409e <HAL_GPIO_Init+0x222>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	4a50      	ldr	r2, [pc, #320]	@ (80041c8 <HAL_GPIO_Init+0x34c>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d007      	beq.n	800409a <HAL_GPIO_Init+0x21e>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	4a4f      	ldr	r2, [pc, #316]	@ (80041cc <HAL_GPIO_Init+0x350>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d101      	bne.n	8004096 <HAL_GPIO_Init+0x21a>
 8004092:	2309      	movs	r3, #9
 8004094:	e012      	b.n	80040bc <HAL_GPIO_Init+0x240>
 8004096:	230a      	movs	r3, #10
 8004098:	e010      	b.n	80040bc <HAL_GPIO_Init+0x240>
 800409a:	2308      	movs	r3, #8
 800409c:	e00e      	b.n	80040bc <HAL_GPIO_Init+0x240>
 800409e:	2307      	movs	r3, #7
 80040a0:	e00c      	b.n	80040bc <HAL_GPIO_Init+0x240>
 80040a2:	2306      	movs	r3, #6
 80040a4:	e00a      	b.n	80040bc <HAL_GPIO_Init+0x240>
 80040a6:	2305      	movs	r3, #5
 80040a8:	e008      	b.n	80040bc <HAL_GPIO_Init+0x240>
 80040aa:	2304      	movs	r3, #4
 80040ac:	e006      	b.n	80040bc <HAL_GPIO_Init+0x240>
 80040ae:	2303      	movs	r3, #3
 80040b0:	e004      	b.n	80040bc <HAL_GPIO_Init+0x240>
 80040b2:	2302      	movs	r3, #2
 80040b4:	e002      	b.n	80040bc <HAL_GPIO_Init+0x240>
 80040b6:	2301      	movs	r3, #1
 80040b8:	e000      	b.n	80040bc <HAL_GPIO_Init+0x240>
 80040ba:	2300      	movs	r3, #0
 80040bc:	69fa      	ldr	r2, [r7, #28]
 80040be:	f002 0203 	and.w	r2, r2, #3
 80040c2:	0092      	lsls	r2, r2, #2
 80040c4:	4093      	lsls	r3, r2
 80040c6:	69ba      	ldr	r2, [r7, #24]
 80040c8:	4313      	orrs	r3, r2
 80040ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80040cc:	4935      	ldr	r1, [pc, #212]	@ (80041a4 <HAL_GPIO_Init+0x328>)
 80040ce:	69fb      	ldr	r3, [r7, #28]
 80040d0:	089b      	lsrs	r3, r3, #2
 80040d2:	3302      	adds	r3, #2
 80040d4:	69ba      	ldr	r2, [r7, #24]
 80040d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80040da:	4b3d      	ldr	r3, [pc, #244]	@ (80041d0 <HAL_GPIO_Init+0x354>)
 80040dc:	689b      	ldr	r3, [r3, #8]
 80040de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	43db      	mvns	r3, r3
 80040e4:	69ba      	ldr	r2, [r7, #24]
 80040e6:	4013      	ands	r3, r2
 80040e8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d003      	beq.n	80040fe <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80040f6:	69ba      	ldr	r2, [r7, #24]
 80040f8:	693b      	ldr	r3, [r7, #16]
 80040fa:	4313      	orrs	r3, r2
 80040fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80040fe:	4a34      	ldr	r2, [pc, #208]	@ (80041d0 <HAL_GPIO_Init+0x354>)
 8004100:	69bb      	ldr	r3, [r7, #24]
 8004102:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004104:	4b32      	ldr	r3, [pc, #200]	@ (80041d0 <HAL_GPIO_Init+0x354>)
 8004106:	68db      	ldr	r3, [r3, #12]
 8004108:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	43db      	mvns	r3, r3
 800410e:	69ba      	ldr	r2, [r7, #24]
 8004110:	4013      	ands	r3, r2
 8004112:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800411c:	2b00      	cmp	r3, #0
 800411e:	d003      	beq.n	8004128 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004120:	69ba      	ldr	r2, [r7, #24]
 8004122:	693b      	ldr	r3, [r7, #16]
 8004124:	4313      	orrs	r3, r2
 8004126:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004128:	4a29      	ldr	r2, [pc, #164]	@ (80041d0 <HAL_GPIO_Init+0x354>)
 800412a:	69bb      	ldr	r3, [r7, #24]
 800412c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800412e:	4b28      	ldr	r3, [pc, #160]	@ (80041d0 <HAL_GPIO_Init+0x354>)
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004134:	693b      	ldr	r3, [r7, #16]
 8004136:	43db      	mvns	r3, r3
 8004138:	69ba      	ldr	r2, [r7, #24]
 800413a:	4013      	ands	r3, r2
 800413c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004146:	2b00      	cmp	r3, #0
 8004148:	d003      	beq.n	8004152 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800414a:	69ba      	ldr	r2, [r7, #24]
 800414c:	693b      	ldr	r3, [r7, #16]
 800414e:	4313      	orrs	r3, r2
 8004150:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004152:	4a1f      	ldr	r2, [pc, #124]	@ (80041d0 <HAL_GPIO_Init+0x354>)
 8004154:	69bb      	ldr	r3, [r7, #24]
 8004156:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004158:	4b1d      	ldr	r3, [pc, #116]	@ (80041d0 <HAL_GPIO_Init+0x354>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800415e:	693b      	ldr	r3, [r7, #16]
 8004160:	43db      	mvns	r3, r3
 8004162:	69ba      	ldr	r2, [r7, #24]
 8004164:	4013      	ands	r3, r2
 8004166:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004170:	2b00      	cmp	r3, #0
 8004172:	d003      	beq.n	800417c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004174:	69ba      	ldr	r2, [r7, #24]
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	4313      	orrs	r3, r2
 800417a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800417c:	4a14      	ldr	r2, [pc, #80]	@ (80041d0 <HAL_GPIO_Init+0x354>)
 800417e:	69bb      	ldr	r3, [r7, #24]
 8004180:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8004182:	69fb      	ldr	r3, [r7, #28]
 8004184:	3301      	adds	r3, #1
 8004186:	61fb      	str	r3, [r7, #28]
 8004188:	69fb      	ldr	r3, [r7, #28]
 800418a:	2b0f      	cmp	r3, #15
 800418c:	f67f ae86 	bls.w	8003e9c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004190:	bf00      	nop
 8004192:	bf00      	nop
 8004194:	3724      	adds	r7, #36	@ 0x24
 8004196:	46bd      	mov	sp, r7
 8004198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419c:	4770      	bx	lr
 800419e:	bf00      	nop
 80041a0:	40023800 	.word	0x40023800
 80041a4:	40013800 	.word	0x40013800
 80041a8:	40020000 	.word	0x40020000
 80041ac:	40020400 	.word	0x40020400
 80041b0:	40020800 	.word	0x40020800
 80041b4:	40020c00 	.word	0x40020c00
 80041b8:	40021000 	.word	0x40021000
 80041bc:	40021400 	.word	0x40021400
 80041c0:	40021800 	.word	0x40021800
 80041c4:	40021c00 	.word	0x40021c00
 80041c8:	40022000 	.word	0x40022000
 80041cc:	40022400 	.word	0x40022400
 80041d0:	40013c00 	.word	0x40013c00

080041d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80041d4:	b480      	push	{r7}
 80041d6:	b083      	sub	sp, #12
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
 80041dc:	460b      	mov	r3, r1
 80041de:	807b      	strh	r3, [r7, #2]
 80041e0:	4613      	mov	r3, r2
 80041e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80041e4:	787b      	ldrb	r3, [r7, #1]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d003      	beq.n	80041f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80041ea:	887a      	ldrh	r2, [r7, #2]
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80041f0:	e003      	b.n	80041fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80041f2:	887b      	ldrh	r3, [r7, #2]
 80041f4:	041a      	lsls	r2, r3, #16
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	619a      	str	r2, [r3, #24]
}
 80041fa:	bf00      	nop
 80041fc:	370c      	adds	r7, #12
 80041fe:	46bd      	mov	sp, r7
 8004200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004204:	4770      	bx	lr

08004206 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004206:	b480      	push	{r7}
 8004208:	b085      	sub	sp, #20
 800420a:	af00      	add	r7, sp, #0
 800420c:	6078      	str	r0, [r7, #4]
 800420e:	460b      	mov	r3, r1
 8004210:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	695b      	ldr	r3, [r3, #20]
 8004216:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004218:	887a      	ldrh	r2, [r7, #2]
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	4013      	ands	r3, r2
 800421e:	041a      	lsls	r2, r3, #16
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	43d9      	mvns	r1, r3
 8004224:	887b      	ldrh	r3, [r7, #2]
 8004226:	400b      	ands	r3, r1
 8004228:	431a      	orrs	r2, r3
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	619a      	str	r2, [r3, #24]
}
 800422e:	bf00      	nop
 8004230:	3714      	adds	r7, #20
 8004232:	46bd      	mov	sp, r7
 8004234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004238:	4770      	bx	lr
	...

0800423c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b082      	sub	sp, #8
 8004240:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8004242:	2300      	movs	r3, #0
 8004244:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004246:	4b23      	ldr	r3, [pc, #140]	@ (80042d4 <HAL_PWREx_EnableOverDrive+0x98>)
 8004248:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800424a:	4a22      	ldr	r2, [pc, #136]	@ (80042d4 <HAL_PWREx_EnableOverDrive+0x98>)
 800424c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004250:	6413      	str	r3, [r2, #64]	@ 0x40
 8004252:	4b20      	ldr	r3, [pc, #128]	@ (80042d4 <HAL_PWREx_EnableOverDrive+0x98>)
 8004254:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004256:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800425a:	603b      	str	r3, [r7, #0]
 800425c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800425e:	4b1e      	ldr	r3, [pc, #120]	@ (80042d8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4a1d      	ldr	r2, [pc, #116]	@ (80042d8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004264:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004268:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800426a:	f7fd fd47 	bl	8001cfc <HAL_GetTick>
 800426e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004270:	e009      	b.n	8004286 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004272:	f7fd fd43 	bl	8001cfc <HAL_GetTick>
 8004276:	4602      	mov	r2, r0
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	1ad3      	subs	r3, r2, r3
 800427c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004280:	d901      	bls.n	8004286 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8004282:	2303      	movs	r3, #3
 8004284:	e022      	b.n	80042cc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004286:	4b14      	ldr	r3, [pc, #80]	@ (80042d8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800428e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004292:	d1ee      	bne.n	8004272 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004294:	4b10      	ldr	r3, [pc, #64]	@ (80042d8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a0f      	ldr	r2, [pc, #60]	@ (80042d8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800429a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800429e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80042a0:	f7fd fd2c 	bl	8001cfc <HAL_GetTick>
 80042a4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80042a6:	e009      	b.n	80042bc <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80042a8:	f7fd fd28 	bl	8001cfc <HAL_GetTick>
 80042ac:	4602      	mov	r2, r0
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	1ad3      	subs	r3, r2, r3
 80042b2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80042b6:	d901      	bls.n	80042bc <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80042b8:	2303      	movs	r3, #3
 80042ba:	e007      	b.n	80042cc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80042bc:	4b06      	ldr	r3, [pc, #24]	@ (80042d8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042c4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80042c8:	d1ee      	bne.n	80042a8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80042ca:	2300      	movs	r3, #0
}
 80042cc:	4618      	mov	r0, r3
 80042ce:	3708      	adds	r7, #8
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bd80      	pop	{r7, pc}
 80042d4:	40023800 	.word	0x40023800
 80042d8:	40007000 	.word	0x40007000

080042dc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b086      	sub	sp, #24
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80042e4:	2300      	movs	r3, #0
 80042e6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d101      	bne.n	80042f2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80042ee:	2301      	movs	r3, #1
 80042f0:	e29b      	b.n	800482a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f003 0301 	and.w	r3, r3, #1
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	f000 8087 	beq.w	800440e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004300:	4b96      	ldr	r3, [pc, #600]	@ (800455c <HAL_RCC_OscConfig+0x280>)
 8004302:	689b      	ldr	r3, [r3, #8]
 8004304:	f003 030c 	and.w	r3, r3, #12
 8004308:	2b04      	cmp	r3, #4
 800430a:	d00c      	beq.n	8004326 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800430c:	4b93      	ldr	r3, [pc, #588]	@ (800455c <HAL_RCC_OscConfig+0x280>)
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	f003 030c 	and.w	r3, r3, #12
 8004314:	2b08      	cmp	r3, #8
 8004316:	d112      	bne.n	800433e <HAL_RCC_OscConfig+0x62>
 8004318:	4b90      	ldr	r3, [pc, #576]	@ (800455c <HAL_RCC_OscConfig+0x280>)
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004320:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004324:	d10b      	bne.n	800433e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004326:	4b8d      	ldr	r3, [pc, #564]	@ (800455c <HAL_RCC_OscConfig+0x280>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800432e:	2b00      	cmp	r3, #0
 8004330:	d06c      	beq.n	800440c <HAL_RCC_OscConfig+0x130>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d168      	bne.n	800440c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800433a:	2301      	movs	r3, #1
 800433c:	e275      	b.n	800482a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004346:	d106      	bne.n	8004356 <HAL_RCC_OscConfig+0x7a>
 8004348:	4b84      	ldr	r3, [pc, #528]	@ (800455c <HAL_RCC_OscConfig+0x280>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a83      	ldr	r2, [pc, #524]	@ (800455c <HAL_RCC_OscConfig+0x280>)
 800434e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004352:	6013      	str	r3, [r2, #0]
 8004354:	e02e      	b.n	80043b4 <HAL_RCC_OscConfig+0xd8>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d10c      	bne.n	8004378 <HAL_RCC_OscConfig+0x9c>
 800435e:	4b7f      	ldr	r3, [pc, #508]	@ (800455c <HAL_RCC_OscConfig+0x280>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4a7e      	ldr	r2, [pc, #504]	@ (800455c <HAL_RCC_OscConfig+0x280>)
 8004364:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004368:	6013      	str	r3, [r2, #0]
 800436a:	4b7c      	ldr	r3, [pc, #496]	@ (800455c <HAL_RCC_OscConfig+0x280>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a7b      	ldr	r2, [pc, #492]	@ (800455c <HAL_RCC_OscConfig+0x280>)
 8004370:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004374:	6013      	str	r3, [r2, #0]
 8004376:	e01d      	b.n	80043b4 <HAL_RCC_OscConfig+0xd8>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004380:	d10c      	bne.n	800439c <HAL_RCC_OscConfig+0xc0>
 8004382:	4b76      	ldr	r3, [pc, #472]	@ (800455c <HAL_RCC_OscConfig+0x280>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a75      	ldr	r2, [pc, #468]	@ (800455c <HAL_RCC_OscConfig+0x280>)
 8004388:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800438c:	6013      	str	r3, [r2, #0]
 800438e:	4b73      	ldr	r3, [pc, #460]	@ (800455c <HAL_RCC_OscConfig+0x280>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4a72      	ldr	r2, [pc, #456]	@ (800455c <HAL_RCC_OscConfig+0x280>)
 8004394:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004398:	6013      	str	r3, [r2, #0]
 800439a:	e00b      	b.n	80043b4 <HAL_RCC_OscConfig+0xd8>
 800439c:	4b6f      	ldr	r3, [pc, #444]	@ (800455c <HAL_RCC_OscConfig+0x280>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a6e      	ldr	r2, [pc, #440]	@ (800455c <HAL_RCC_OscConfig+0x280>)
 80043a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80043a6:	6013      	str	r3, [r2, #0]
 80043a8:	4b6c      	ldr	r3, [pc, #432]	@ (800455c <HAL_RCC_OscConfig+0x280>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a6b      	ldr	r2, [pc, #428]	@ (800455c <HAL_RCC_OscConfig+0x280>)
 80043ae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80043b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d013      	beq.n	80043e4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043bc:	f7fd fc9e 	bl	8001cfc <HAL_GetTick>
 80043c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043c2:	e008      	b.n	80043d6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043c4:	f7fd fc9a 	bl	8001cfc <HAL_GetTick>
 80043c8:	4602      	mov	r2, r0
 80043ca:	693b      	ldr	r3, [r7, #16]
 80043cc:	1ad3      	subs	r3, r2, r3
 80043ce:	2b64      	cmp	r3, #100	@ 0x64
 80043d0:	d901      	bls.n	80043d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80043d2:	2303      	movs	r3, #3
 80043d4:	e229      	b.n	800482a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043d6:	4b61      	ldr	r3, [pc, #388]	@ (800455c <HAL_RCC_OscConfig+0x280>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d0f0      	beq.n	80043c4 <HAL_RCC_OscConfig+0xe8>
 80043e2:	e014      	b.n	800440e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043e4:	f7fd fc8a 	bl	8001cfc <HAL_GetTick>
 80043e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043ea:	e008      	b.n	80043fe <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043ec:	f7fd fc86 	bl	8001cfc <HAL_GetTick>
 80043f0:	4602      	mov	r2, r0
 80043f2:	693b      	ldr	r3, [r7, #16]
 80043f4:	1ad3      	subs	r3, r2, r3
 80043f6:	2b64      	cmp	r3, #100	@ 0x64
 80043f8:	d901      	bls.n	80043fe <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80043fa:	2303      	movs	r3, #3
 80043fc:	e215      	b.n	800482a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043fe:	4b57      	ldr	r3, [pc, #348]	@ (800455c <HAL_RCC_OscConfig+0x280>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004406:	2b00      	cmp	r3, #0
 8004408:	d1f0      	bne.n	80043ec <HAL_RCC_OscConfig+0x110>
 800440a:	e000      	b.n	800440e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800440c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f003 0302 	and.w	r3, r3, #2
 8004416:	2b00      	cmp	r3, #0
 8004418:	d069      	beq.n	80044ee <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800441a:	4b50      	ldr	r3, [pc, #320]	@ (800455c <HAL_RCC_OscConfig+0x280>)
 800441c:	689b      	ldr	r3, [r3, #8]
 800441e:	f003 030c 	and.w	r3, r3, #12
 8004422:	2b00      	cmp	r3, #0
 8004424:	d00b      	beq.n	800443e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004426:	4b4d      	ldr	r3, [pc, #308]	@ (800455c <HAL_RCC_OscConfig+0x280>)
 8004428:	689b      	ldr	r3, [r3, #8]
 800442a:	f003 030c 	and.w	r3, r3, #12
 800442e:	2b08      	cmp	r3, #8
 8004430:	d11c      	bne.n	800446c <HAL_RCC_OscConfig+0x190>
 8004432:	4b4a      	ldr	r3, [pc, #296]	@ (800455c <HAL_RCC_OscConfig+0x280>)
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800443a:	2b00      	cmp	r3, #0
 800443c:	d116      	bne.n	800446c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800443e:	4b47      	ldr	r3, [pc, #284]	@ (800455c <HAL_RCC_OscConfig+0x280>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f003 0302 	and.w	r3, r3, #2
 8004446:	2b00      	cmp	r3, #0
 8004448:	d005      	beq.n	8004456 <HAL_RCC_OscConfig+0x17a>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	68db      	ldr	r3, [r3, #12]
 800444e:	2b01      	cmp	r3, #1
 8004450:	d001      	beq.n	8004456 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004452:	2301      	movs	r3, #1
 8004454:	e1e9      	b.n	800482a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004456:	4b41      	ldr	r3, [pc, #260]	@ (800455c <HAL_RCC_OscConfig+0x280>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	691b      	ldr	r3, [r3, #16]
 8004462:	00db      	lsls	r3, r3, #3
 8004464:	493d      	ldr	r1, [pc, #244]	@ (800455c <HAL_RCC_OscConfig+0x280>)
 8004466:	4313      	orrs	r3, r2
 8004468:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800446a:	e040      	b.n	80044ee <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	68db      	ldr	r3, [r3, #12]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d023      	beq.n	80044bc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004474:	4b39      	ldr	r3, [pc, #228]	@ (800455c <HAL_RCC_OscConfig+0x280>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a38      	ldr	r2, [pc, #224]	@ (800455c <HAL_RCC_OscConfig+0x280>)
 800447a:	f043 0301 	orr.w	r3, r3, #1
 800447e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004480:	f7fd fc3c 	bl	8001cfc <HAL_GetTick>
 8004484:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004486:	e008      	b.n	800449a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004488:	f7fd fc38 	bl	8001cfc <HAL_GetTick>
 800448c:	4602      	mov	r2, r0
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	1ad3      	subs	r3, r2, r3
 8004492:	2b02      	cmp	r3, #2
 8004494:	d901      	bls.n	800449a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004496:	2303      	movs	r3, #3
 8004498:	e1c7      	b.n	800482a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800449a:	4b30      	ldr	r3, [pc, #192]	@ (800455c <HAL_RCC_OscConfig+0x280>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f003 0302 	and.w	r3, r3, #2
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d0f0      	beq.n	8004488 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044a6:	4b2d      	ldr	r3, [pc, #180]	@ (800455c <HAL_RCC_OscConfig+0x280>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	691b      	ldr	r3, [r3, #16]
 80044b2:	00db      	lsls	r3, r3, #3
 80044b4:	4929      	ldr	r1, [pc, #164]	@ (800455c <HAL_RCC_OscConfig+0x280>)
 80044b6:	4313      	orrs	r3, r2
 80044b8:	600b      	str	r3, [r1, #0]
 80044ba:	e018      	b.n	80044ee <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80044bc:	4b27      	ldr	r3, [pc, #156]	@ (800455c <HAL_RCC_OscConfig+0x280>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a26      	ldr	r2, [pc, #152]	@ (800455c <HAL_RCC_OscConfig+0x280>)
 80044c2:	f023 0301 	bic.w	r3, r3, #1
 80044c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044c8:	f7fd fc18 	bl	8001cfc <HAL_GetTick>
 80044cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044ce:	e008      	b.n	80044e2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044d0:	f7fd fc14 	bl	8001cfc <HAL_GetTick>
 80044d4:	4602      	mov	r2, r0
 80044d6:	693b      	ldr	r3, [r7, #16]
 80044d8:	1ad3      	subs	r3, r2, r3
 80044da:	2b02      	cmp	r3, #2
 80044dc:	d901      	bls.n	80044e2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80044de:	2303      	movs	r3, #3
 80044e0:	e1a3      	b.n	800482a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044e2:	4b1e      	ldr	r3, [pc, #120]	@ (800455c <HAL_RCC_OscConfig+0x280>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f003 0302 	and.w	r3, r3, #2
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d1f0      	bne.n	80044d0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f003 0308 	and.w	r3, r3, #8
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d038      	beq.n	800456c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	695b      	ldr	r3, [r3, #20]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d019      	beq.n	8004536 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004502:	4b16      	ldr	r3, [pc, #88]	@ (800455c <HAL_RCC_OscConfig+0x280>)
 8004504:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004506:	4a15      	ldr	r2, [pc, #84]	@ (800455c <HAL_RCC_OscConfig+0x280>)
 8004508:	f043 0301 	orr.w	r3, r3, #1
 800450c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800450e:	f7fd fbf5 	bl	8001cfc <HAL_GetTick>
 8004512:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004514:	e008      	b.n	8004528 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004516:	f7fd fbf1 	bl	8001cfc <HAL_GetTick>
 800451a:	4602      	mov	r2, r0
 800451c:	693b      	ldr	r3, [r7, #16]
 800451e:	1ad3      	subs	r3, r2, r3
 8004520:	2b02      	cmp	r3, #2
 8004522:	d901      	bls.n	8004528 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004524:	2303      	movs	r3, #3
 8004526:	e180      	b.n	800482a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004528:	4b0c      	ldr	r3, [pc, #48]	@ (800455c <HAL_RCC_OscConfig+0x280>)
 800452a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800452c:	f003 0302 	and.w	r3, r3, #2
 8004530:	2b00      	cmp	r3, #0
 8004532:	d0f0      	beq.n	8004516 <HAL_RCC_OscConfig+0x23a>
 8004534:	e01a      	b.n	800456c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004536:	4b09      	ldr	r3, [pc, #36]	@ (800455c <HAL_RCC_OscConfig+0x280>)
 8004538:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800453a:	4a08      	ldr	r2, [pc, #32]	@ (800455c <HAL_RCC_OscConfig+0x280>)
 800453c:	f023 0301 	bic.w	r3, r3, #1
 8004540:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004542:	f7fd fbdb 	bl	8001cfc <HAL_GetTick>
 8004546:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004548:	e00a      	b.n	8004560 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800454a:	f7fd fbd7 	bl	8001cfc <HAL_GetTick>
 800454e:	4602      	mov	r2, r0
 8004550:	693b      	ldr	r3, [r7, #16]
 8004552:	1ad3      	subs	r3, r2, r3
 8004554:	2b02      	cmp	r3, #2
 8004556:	d903      	bls.n	8004560 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004558:	2303      	movs	r3, #3
 800455a:	e166      	b.n	800482a <HAL_RCC_OscConfig+0x54e>
 800455c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004560:	4b92      	ldr	r3, [pc, #584]	@ (80047ac <HAL_RCC_OscConfig+0x4d0>)
 8004562:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004564:	f003 0302 	and.w	r3, r3, #2
 8004568:	2b00      	cmp	r3, #0
 800456a:	d1ee      	bne.n	800454a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f003 0304 	and.w	r3, r3, #4
 8004574:	2b00      	cmp	r3, #0
 8004576:	f000 80a4 	beq.w	80046c2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800457a:	4b8c      	ldr	r3, [pc, #560]	@ (80047ac <HAL_RCC_OscConfig+0x4d0>)
 800457c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800457e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004582:	2b00      	cmp	r3, #0
 8004584:	d10d      	bne.n	80045a2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004586:	4b89      	ldr	r3, [pc, #548]	@ (80047ac <HAL_RCC_OscConfig+0x4d0>)
 8004588:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800458a:	4a88      	ldr	r2, [pc, #544]	@ (80047ac <HAL_RCC_OscConfig+0x4d0>)
 800458c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004590:	6413      	str	r3, [r2, #64]	@ 0x40
 8004592:	4b86      	ldr	r3, [pc, #536]	@ (80047ac <HAL_RCC_OscConfig+0x4d0>)
 8004594:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004596:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800459a:	60bb      	str	r3, [r7, #8]
 800459c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800459e:	2301      	movs	r3, #1
 80045a0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80045a2:	4b83      	ldr	r3, [pc, #524]	@ (80047b0 <HAL_RCC_OscConfig+0x4d4>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d118      	bne.n	80045e0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80045ae:	4b80      	ldr	r3, [pc, #512]	@ (80047b0 <HAL_RCC_OscConfig+0x4d4>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4a7f      	ldr	r2, [pc, #508]	@ (80047b0 <HAL_RCC_OscConfig+0x4d4>)
 80045b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80045b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045ba:	f7fd fb9f 	bl	8001cfc <HAL_GetTick>
 80045be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80045c0:	e008      	b.n	80045d4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045c2:	f7fd fb9b 	bl	8001cfc <HAL_GetTick>
 80045c6:	4602      	mov	r2, r0
 80045c8:	693b      	ldr	r3, [r7, #16]
 80045ca:	1ad3      	subs	r3, r2, r3
 80045cc:	2b64      	cmp	r3, #100	@ 0x64
 80045ce:	d901      	bls.n	80045d4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80045d0:	2303      	movs	r3, #3
 80045d2:	e12a      	b.n	800482a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80045d4:	4b76      	ldr	r3, [pc, #472]	@ (80047b0 <HAL_RCC_OscConfig+0x4d4>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d0f0      	beq.n	80045c2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	689b      	ldr	r3, [r3, #8]
 80045e4:	2b01      	cmp	r3, #1
 80045e6:	d106      	bne.n	80045f6 <HAL_RCC_OscConfig+0x31a>
 80045e8:	4b70      	ldr	r3, [pc, #448]	@ (80047ac <HAL_RCC_OscConfig+0x4d0>)
 80045ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045ec:	4a6f      	ldr	r2, [pc, #444]	@ (80047ac <HAL_RCC_OscConfig+0x4d0>)
 80045ee:	f043 0301 	orr.w	r3, r3, #1
 80045f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80045f4:	e02d      	b.n	8004652 <HAL_RCC_OscConfig+0x376>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	689b      	ldr	r3, [r3, #8]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d10c      	bne.n	8004618 <HAL_RCC_OscConfig+0x33c>
 80045fe:	4b6b      	ldr	r3, [pc, #428]	@ (80047ac <HAL_RCC_OscConfig+0x4d0>)
 8004600:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004602:	4a6a      	ldr	r2, [pc, #424]	@ (80047ac <HAL_RCC_OscConfig+0x4d0>)
 8004604:	f023 0301 	bic.w	r3, r3, #1
 8004608:	6713      	str	r3, [r2, #112]	@ 0x70
 800460a:	4b68      	ldr	r3, [pc, #416]	@ (80047ac <HAL_RCC_OscConfig+0x4d0>)
 800460c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800460e:	4a67      	ldr	r2, [pc, #412]	@ (80047ac <HAL_RCC_OscConfig+0x4d0>)
 8004610:	f023 0304 	bic.w	r3, r3, #4
 8004614:	6713      	str	r3, [r2, #112]	@ 0x70
 8004616:	e01c      	b.n	8004652 <HAL_RCC_OscConfig+0x376>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	689b      	ldr	r3, [r3, #8]
 800461c:	2b05      	cmp	r3, #5
 800461e:	d10c      	bne.n	800463a <HAL_RCC_OscConfig+0x35e>
 8004620:	4b62      	ldr	r3, [pc, #392]	@ (80047ac <HAL_RCC_OscConfig+0x4d0>)
 8004622:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004624:	4a61      	ldr	r2, [pc, #388]	@ (80047ac <HAL_RCC_OscConfig+0x4d0>)
 8004626:	f043 0304 	orr.w	r3, r3, #4
 800462a:	6713      	str	r3, [r2, #112]	@ 0x70
 800462c:	4b5f      	ldr	r3, [pc, #380]	@ (80047ac <HAL_RCC_OscConfig+0x4d0>)
 800462e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004630:	4a5e      	ldr	r2, [pc, #376]	@ (80047ac <HAL_RCC_OscConfig+0x4d0>)
 8004632:	f043 0301 	orr.w	r3, r3, #1
 8004636:	6713      	str	r3, [r2, #112]	@ 0x70
 8004638:	e00b      	b.n	8004652 <HAL_RCC_OscConfig+0x376>
 800463a:	4b5c      	ldr	r3, [pc, #368]	@ (80047ac <HAL_RCC_OscConfig+0x4d0>)
 800463c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800463e:	4a5b      	ldr	r2, [pc, #364]	@ (80047ac <HAL_RCC_OscConfig+0x4d0>)
 8004640:	f023 0301 	bic.w	r3, r3, #1
 8004644:	6713      	str	r3, [r2, #112]	@ 0x70
 8004646:	4b59      	ldr	r3, [pc, #356]	@ (80047ac <HAL_RCC_OscConfig+0x4d0>)
 8004648:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800464a:	4a58      	ldr	r2, [pc, #352]	@ (80047ac <HAL_RCC_OscConfig+0x4d0>)
 800464c:	f023 0304 	bic.w	r3, r3, #4
 8004650:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	689b      	ldr	r3, [r3, #8]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d015      	beq.n	8004686 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800465a:	f7fd fb4f 	bl	8001cfc <HAL_GetTick>
 800465e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004660:	e00a      	b.n	8004678 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004662:	f7fd fb4b 	bl	8001cfc <HAL_GetTick>
 8004666:	4602      	mov	r2, r0
 8004668:	693b      	ldr	r3, [r7, #16]
 800466a:	1ad3      	subs	r3, r2, r3
 800466c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004670:	4293      	cmp	r3, r2
 8004672:	d901      	bls.n	8004678 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004674:	2303      	movs	r3, #3
 8004676:	e0d8      	b.n	800482a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004678:	4b4c      	ldr	r3, [pc, #304]	@ (80047ac <HAL_RCC_OscConfig+0x4d0>)
 800467a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800467c:	f003 0302 	and.w	r3, r3, #2
 8004680:	2b00      	cmp	r3, #0
 8004682:	d0ee      	beq.n	8004662 <HAL_RCC_OscConfig+0x386>
 8004684:	e014      	b.n	80046b0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004686:	f7fd fb39 	bl	8001cfc <HAL_GetTick>
 800468a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800468c:	e00a      	b.n	80046a4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800468e:	f7fd fb35 	bl	8001cfc <HAL_GetTick>
 8004692:	4602      	mov	r2, r0
 8004694:	693b      	ldr	r3, [r7, #16]
 8004696:	1ad3      	subs	r3, r2, r3
 8004698:	f241 3288 	movw	r2, #5000	@ 0x1388
 800469c:	4293      	cmp	r3, r2
 800469e:	d901      	bls.n	80046a4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80046a0:	2303      	movs	r3, #3
 80046a2:	e0c2      	b.n	800482a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046a4:	4b41      	ldr	r3, [pc, #260]	@ (80047ac <HAL_RCC_OscConfig+0x4d0>)
 80046a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046a8:	f003 0302 	and.w	r3, r3, #2
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d1ee      	bne.n	800468e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80046b0:	7dfb      	ldrb	r3, [r7, #23]
 80046b2:	2b01      	cmp	r3, #1
 80046b4:	d105      	bne.n	80046c2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046b6:	4b3d      	ldr	r3, [pc, #244]	@ (80047ac <HAL_RCC_OscConfig+0x4d0>)
 80046b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046ba:	4a3c      	ldr	r2, [pc, #240]	@ (80047ac <HAL_RCC_OscConfig+0x4d0>)
 80046bc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80046c0:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	699b      	ldr	r3, [r3, #24]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	f000 80ae 	beq.w	8004828 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80046cc:	4b37      	ldr	r3, [pc, #220]	@ (80047ac <HAL_RCC_OscConfig+0x4d0>)
 80046ce:	689b      	ldr	r3, [r3, #8]
 80046d0:	f003 030c 	and.w	r3, r3, #12
 80046d4:	2b08      	cmp	r3, #8
 80046d6:	d06d      	beq.n	80047b4 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	699b      	ldr	r3, [r3, #24]
 80046dc:	2b02      	cmp	r3, #2
 80046de:	d14b      	bne.n	8004778 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046e0:	4b32      	ldr	r3, [pc, #200]	@ (80047ac <HAL_RCC_OscConfig+0x4d0>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a31      	ldr	r2, [pc, #196]	@ (80047ac <HAL_RCC_OscConfig+0x4d0>)
 80046e6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80046ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046ec:	f7fd fb06 	bl	8001cfc <HAL_GetTick>
 80046f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046f2:	e008      	b.n	8004706 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046f4:	f7fd fb02 	bl	8001cfc <HAL_GetTick>
 80046f8:	4602      	mov	r2, r0
 80046fa:	693b      	ldr	r3, [r7, #16]
 80046fc:	1ad3      	subs	r3, r2, r3
 80046fe:	2b02      	cmp	r3, #2
 8004700:	d901      	bls.n	8004706 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004702:	2303      	movs	r3, #3
 8004704:	e091      	b.n	800482a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004706:	4b29      	ldr	r3, [pc, #164]	@ (80047ac <HAL_RCC_OscConfig+0x4d0>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800470e:	2b00      	cmp	r3, #0
 8004710:	d1f0      	bne.n	80046f4 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	69da      	ldr	r2, [r3, #28]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6a1b      	ldr	r3, [r3, #32]
 800471a:	431a      	orrs	r2, r3
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004720:	019b      	lsls	r3, r3, #6
 8004722:	431a      	orrs	r2, r3
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004728:	085b      	lsrs	r3, r3, #1
 800472a:	3b01      	subs	r3, #1
 800472c:	041b      	lsls	r3, r3, #16
 800472e:	431a      	orrs	r2, r3
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004734:	061b      	lsls	r3, r3, #24
 8004736:	431a      	orrs	r2, r3
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800473c:	071b      	lsls	r3, r3, #28
 800473e:	491b      	ldr	r1, [pc, #108]	@ (80047ac <HAL_RCC_OscConfig+0x4d0>)
 8004740:	4313      	orrs	r3, r2
 8004742:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004744:	4b19      	ldr	r3, [pc, #100]	@ (80047ac <HAL_RCC_OscConfig+0x4d0>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a18      	ldr	r2, [pc, #96]	@ (80047ac <HAL_RCC_OscConfig+0x4d0>)
 800474a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800474e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004750:	f7fd fad4 	bl	8001cfc <HAL_GetTick>
 8004754:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004756:	e008      	b.n	800476a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004758:	f7fd fad0 	bl	8001cfc <HAL_GetTick>
 800475c:	4602      	mov	r2, r0
 800475e:	693b      	ldr	r3, [r7, #16]
 8004760:	1ad3      	subs	r3, r2, r3
 8004762:	2b02      	cmp	r3, #2
 8004764:	d901      	bls.n	800476a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8004766:	2303      	movs	r3, #3
 8004768:	e05f      	b.n	800482a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800476a:	4b10      	ldr	r3, [pc, #64]	@ (80047ac <HAL_RCC_OscConfig+0x4d0>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004772:	2b00      	cmp	r3, #0
 8004774:	d0f0      	beq.n	8004758 <HAL_RCC_OscConfig+0x47c>
 8004776:	e057      	b.n	8004828 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004778:	4b0c      	ldr	r3, [pc, #48]	@ (80047ac <HAL_RCC_OscConfig+0x4d0>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a0b      	ldr	r2, [pc, #44]	@ (80047ac <HAL_RCC_OscConfig+0x4d0>)
 800477e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004782:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004784:	f7fd faba 	bl	8001cfc <HAL_GetTick>
 8004788:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800478a:	e008      	b.n	800479e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800478c:	f7fd fab6 	bl	8001cfc <HAL_GetTick>
 8004790:	4602      	mov	r2, r0
 8004792:	693b      	ldr	r3, [r7, #16]
 8004794:	1ad3      	subs	r3, r2, r3
 8004796:	2b02      	cmp	r3, #2
 8004798:	d901      	bls.n	800479e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800479a:	2303      	movs	r3, #3
 800479c:	e045      	b.n	800482a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800479e:	4b03      	ldr	r3, [pc, #12]	@ (80047ac <HAL_RCC_OscConfig+0x4d0>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d1f0      	bne.n	800478c <HAL_RCC_OscConfig+0x4b0>
 80047aa:	e03d      	b.n	8004828 <HAL_RCC_OscConfig+0x54c>
 80047ac:	40023800 	.word	0x40023800
 80047b0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80047b4:	4b1f      	ldr	r3, [pc, #124]	@ (8004834 <HAL_RCC_OscConfig+0x558>)
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	699b      	ldr	r3, [r3, #24]
 80047be:	2b01      	cmp	r3, #1
 80047c0:	d030      	beq.n	8004824 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047cc:	429a      	cmp	r2, r3
 80047ce:	d129      	bne.n	8004824 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047da:	429a      	cmp	r2, r3
 80047dc:	d122      	bne.n	8004824 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80047de:	68fa      	ldr	r2, [r7, #12]
 80047e0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80047e4:	4013      	ands	r3, r2
 80047e6:	687a      	ldr	r2, [r7, #4]
 80047e8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80047ea:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d119      	bne.n	8004824 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047fa:	085b      	lsrs	r3, r3, #1
 80047fc:	3b01      	subs	r3, #1
 80047fe:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004800:	429a      	cmp	r2, r3
 8004802:	d10f      	bne.n	8004824 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800480e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004810:	429a      	cmp	r2, r3
 8004812:	d107      	bne.n	8004824 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800481e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004820:	429a      	cmp	r2, r3
 8004822:	d001      	beq.n	8004828 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8004824:	2301      	movs	r3, #1
 8004826:	e000      	b.n	800482a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8004828:	2300      	movs	r3, #0
}
 800482a:	4618      	mov	r0, r3
 800482c:	3718      	adds	r7, #24
 800482e:	46bd      	mov	sp, r7
 8004830:	bd80      	pop	{r7, pc}
 8004832:	bf00      	nop
 8004834:	40023800 	.word	0x40023800

08004838 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b084      	sub	sp, #16
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
 8004840:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004842:	2300      	movs	r3, #0
 8004844:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d101      	bne.n	8004850 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800484c:	2301      	movs	r3, #1
 800484e:	e0d0      	b.n	80049f2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004850:	4b6a      	ldr	r3, [pc, #424]	@ (80049fc <HAL_RCC_ClockConfig+0x1c4>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f003 030f 	and.w	r3, r3, #15
 8004858:	683a      	ldr	r2, [r7, #0]
 800485a:	429a      	cmp	r2, r3
 800485c:	d910      	bls.n	8004880 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800485e:	4b67      	ldr	r3, [pc, #412]	@ (80049fc <HAL_RCC_ClockConfig+0x1c4>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f023 020f 	bic.w	r2, r3, #15
 8004866:	4965      	ldr	r1, [pc, #404]	@ (80049fc <HAL_RCC_ClockConfig+0x1c4>)
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	4313      	orrs	r3, r2
 800486c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800486e:	4b63      	ldr	r3, [pc, #396]	@ (80049fc <HAL_RCC_ClockConfig+0x1c4>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f003 030f 	and.w	r3, r3, #15
 8004876:	683a      	ldr	r2, [r7, #0]
 8004878:	429a      	cmp	r2, r3
 800487a:	d001      	beq.n	8004880 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800487c:	2301      	movs	r3, #1
 800487e:	e0b8      	b.n	80049f2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f003 0302 	and.w	r3, r3, #2
 8004888:	2b00      	cmp	r3, #0
 800488a:	d020      	beq.n	80048ce <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f003 0304 	and.w	r3, r3, #4
 8004894:	2b00      	cmp	r3, #0
 8004896:	d005      	beq.n	80048a4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004898:	4b59      	ldr	r3, [pc, #356]	@ (8004a00 <HAL_RCC_ClockConfig+0x1c8>)
 800489a:	689b      	ldr	r3, [r3, #8]
 800489c:	4a58      	ldr	r2, [pc, #352]	@ (8004a00 <HAL_RCC_ClockConfig+0x1c8>)
 800489e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80048a2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f003 0308 	and.w	r3, r3, #8
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d005      	beq.n	80048bc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80048b0:	4b53      	ldr	r3, [pc, #332]	@ (8004a00 <HAL_RCC_ClockConfig+0x1c8>)
 80048b2:	689b      	ldr	r3, [r3, #8]
 80048b4:	4a52      	ldr	r2, [pc, #328]	@ (8004a00 <HAL_RCC_ClockConfig+0x1c8>)
 80048b6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80048ba:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048bc:	4b50      	ldr	r3, [pc, #320]	@ (8004a00 <HAL_RCC_ClockConfig+0x1c8>)
 80048be:	689b      	ldr	r3, [r3, #8]
 80048c0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	689b      	ldr	r3, [r3, #8]
 80048c8:	494d      	ldr	r1, [pc, #308]	@ (8004a00 <HAL_RCC_ClockConfig+0x1c8>)
 80048ca:	4313      	orrs	r3, r2
 80048cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f003 0301 	and.w	r3, r3, #1
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d040      	beq.n	800495c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	2b01      	cmp	r3, #1
 80048e0:	d107      	bne.n	80048f2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048e2:	4b47      	ldr	r3, [pc, #284]	@ (8004a00 <HAL_RCC_ClockConfig+0x1c8>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d115      	bne.n	800491a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80048ee:	2301      	movs	r3, #1
 80048f0:	e07f      	b.n	80049f2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	2b02      	cmp	r3, #2
 80048f8:	d107      	bne.n	800490a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048fa:	4b41      	ldr	r3, [pc, #260]	@ (8004a00 <HAL_RCC_ClockConfig+0x1c8>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004902:	2b00      	cmp	r3, #0
 8004904:	d109      	bne.n	800491a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004906:	2301      	movs	r3, #1
 8004908:	e073      	b.n	80049f2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800490a:	4b3d      	ldr	r3, [pc, #244]	@ (8004a00 <HAL_RCC_ClockConfig+0x1c8>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f003 0302 	and.w	r3, r3, #2
 8004912:	2b00      	cmp	r3, #0
 8004914:	d101      	bne.n	800491a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004916:	2301      	movs	r3, #1
 8004918:	e06b      	b.n	80049f2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800491a:	4b39      	ldr	r3, [pc, #228]	@ (8004a00 <HAL_RCC_ClockConfig+0x1c8>)
 800491c:	689b      	ldr	r3, [r3, #8]
 800491e:	f023 0203 	bic.w	r2, r3, #3
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	685b      	ldr	r3, [r3, #4]
 8004926:	4936      	ldr	r1, [pc, #216]	@ (8004a00 <HAL_RCC_ClockConfig+0x1c8>)
 8004928:	4313      	orrs	r3, r2
 800492a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800492c:	f7fd f9e6 	bl	8001cfc <HAL_GetTick>
 8004930:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004932:	e00a      	b.n	800494a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004934:	f7fd f9e2 	bl	8001cfc <HAL_GetTick>
 8004938:	4602      	mov	r2, r0
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	1ad3      	subs	r3, r2, r3
 800493e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004942:	4293      	cmp	r3, r2
 8004944:	d901      	bls.n	800494a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004946:	2303      	movs	r3, #3
 8004948:	e053      	b.n	80049f2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800494a:	4b2d      	ldr	r3, [pc, #180]	@ (8004a00 <HAL_RCC_ClockConfig+0x1c8>)
 800494c:	689b      	ldr	r3, [r3, #8]
 800494e:	f003 020c 	and.w	r2, r3, #12
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	009b      	lsls	r3, r3, #2
 8004958:	429a      	cmp	r2, r3
 800495a:	d1eb      	bne.n	8004934 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800495c:	4b27      	ldr	r3, [pc, #156]	@ (80049fc <HAL_RCC_ClockConfig+0x1c4>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f003 030f 	and.w	r3, r3, #15
 8004964:	683a      	ldr	r2, [r7, #0]
 8004966:	429a      	cmp	r2, r3
 8004968:	d210      	bcs.n	800498c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800496a:	4b24      	ldr	r3, [pc, #144]	@ (80049fc <HAL_RCC_ClockConfig+0x1c4>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f023 020f 	bic.w	r2, r3, #15
 8004972:	4922      	ldr	r1, [pc, #136]	@ (80049fc <HAL_RCC_ClockConfig+0x1c4>)
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	4313      	orrs	r3, r2
 8004978:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800497a:	4b20      	ldr	r3, [pc, #128]	@ (80049fc <HAL_RCC_ClockConfig+0x1c4>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f003 030f 	and.w	r3, r3, #15
 8004982:	683a      	ldr	r2, [r7, #0]
 8004984:	429a      	cmp	r2, r3
 8004986:	d001      	beq.n	800498c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004988:	2301      	movs	r3, #1
 800498a:	e032      	b.n	80049f2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f003 0304 	and.w	r3, r3, #4
 8004994:	2b00      	cmp	r3, #0
 8004996:	d008      	beq.n	80049aa <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004998:	4b19      	ldr	r3, [pc, #100]	@ (8004a00 <HAL_RCC_ClockConfig+0x1c8>)
 800499a:	689b      	ldr	r3, [r3, #8]
 800499c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	68db      	ldr	r3, [r3, #12]
 80049a4:	4916      	ldr	r1, [pc, #88]	@ (8004a00 <HAL_RCC_ClockConfig+0x1c8>)
 80049a6:	4313      	orrs	r3, r2
 80049a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f003 0308 	and.w	r3, r3, #8
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d009      	beq.n	80049ca <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80049b6:	4b12      	ldr	r3, [pc, #72]	@ (8004a00 <HAL_RCC_ClockConfig+0x1c8>)
 80049b8:	689b      	ldr	r3, [r3, #8]
 80049ba:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	691b      	ldr	r3, [r3, #16]
 80049c2:	00db      	lsls	r3, r3, #3
 80049c4:	490e      	ldr	r1, [pc, #56]	@ (8004a00 <HAL_RCC_ClockConfig+0x1c8>)
 80049c6:	4313      	orrs	r3, r2
 80049c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80049ca:	f000 f821 	bl	8004a10 <HAL_RCC_GetSysClockFreq>
 80049ce:	4602      	mov	r2, r0
 80049d0:	4b0b      	ldr	r3, [pc, #44]	@ (8004a00 <HAL_RCC_ClockConfig+0x1c8>)
 80049d2:	689b      	ldr	r3, [r3, #8]
 80049d4:	091b      	lsrs	r3, r3, #4
 80049d6:	f003 030f 	and.w	r3, r3, #15
 80049da:	490a      	ldr	r1, [pc, #40]	@ (8004a04 <HAL_RCC_ClockConfig+0x1cc>)
 80049dc:	5ccb      	ldrb	r3, [r1, r3]
 80049de:	fa22 f303 	lsr.w	r3, r2, r3
 80049e2:	4a09      	ldr	r2, [pc, #36]	@ (8004a08 <HAL_RCC_ClockConfig+0x1d0>)
 80049e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80049e6:	4b09      	ldr	r3, [pc, #36]	@ (8004a0c <HAL_RCC_ClockConfig+0x1d4>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4618      	mov	r0, r3
 80049ec:	f7fd f942 	bl	8001c74 <HAL_InitTick>

  return HAL_OK;
 80049f0:	2300      	movs	r3, #0
}
 80049f2:	4618      	mov	r0, r3
 80049f4:	3710      	adds	r7, #16
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bd80      	pop	{r7, pc}
 80049fa:	bf00      	nop
 80049fc:	40023c00 	.word	0x40023c00
 8004a00:	40023800 	.word	0x40023800
 8004a04:	08015088 	.word	0x08015088
 8004a08:	20000040 	.word	0x20000040
 8004a0c:	20000044 	.word	0x20000044

08004a10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a14:	b094      	sub	sp, #80	@ 0x50
 8004a16:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004a18:	2300      	movs	r3, #0
 8004a1a:	647b      	str	r3, [r7, #68]	@ 0x44
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004a20:	2300      	movs	r3, #0
 8004a22:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8004a24:	2300      	movs	r3, #0
 8004a26:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004a28:	4b79      	ldr	r3, [pc, #484]	@ (8004c10 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a2a:	689b      	ldr	r3, [r3, #8]
 8004a2c:	f003 030c 	and.w	r3, r3, #12
 8004a30:	2b08      	cmp	r3, #8
 8004a32:	d00d      	beq.n	8004a50 <HAL_RCC_GetSysClockFreq+0x40>
 8004a34:	2b08      	cmp	r3, #8
 8004a36:	f200 80e1 	bhi.w	8004bfc <HAL_RCC_GetSysClockFreq+0x1ec>
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d002      	beq.n	8004a44 <HAL_RCC_GetSysClockFreq+0x34>
 8004a3e:	2b04      	cmp	r3, #4
 8004a40:	d003      	beq.n	8004a4a <HAL_RCC_GetSysClockFreq+0x3a>
 8004a42:	e0db      	b.n	8004bfc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004a44:	4b73      	ldr	r3, [pc, #460]	@ (8004c14 <HAL_RCC_GetSysClockFreq+0x204>)
 8004a46:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004a48:	e0db      	b.n	8004c02 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004a4a:	4b72      	ldr	r3, [pc, #456]	@ (8004c14 <HAL_RCC_GetSysClockFreq+0x204>)
 8004a4c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004a4e:	e0d8      	b.n	8004c02 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a50:	4b6f      	ldr	r3, [pc, #444]	@ (8004c10 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a52:	685b      	ldr	r3, [r3, #4]
 8004a54:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004a58:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004a5a:	4b6d      	ldr	r3, [pc, #436]	@ (8004c10 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a5c:	685b      	ldr	r3, [r3, #4]
 8004a5e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d063      	beq.n	8004b2e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a66:	4b6a      	ldr	r3, [pc, #424]	@ (8004c10 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	099b      	lsrs	r3, r3, #6
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004a70:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004a72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a78:	633b      	str	r3, [r7, #48]	@ 0x30
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a7e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004a82:	4622      	mov	r2, r4
 8004a84:	462b      	mov	r3, r5
 8004a86:	f04f 0000 	mov.w	r0, #0
 8004a8a:	f04f 0100 	mov.w	r1, #0
 8004a8e:	0159      	lsls	r1, r3, #5
 8004a90:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a94:	0150      	lsls	r0, r2, #5
 8004a96:	4602      	mov	r2, r0
 8004a98:	460b      	mov	r3, r1
 8004a9a:	4621      	mov	r1, r4
 8004a9c:	1a51      	subs	r1, r2, r1
 8004a9e:	6139      	str	r1, [r7, #16]
 8004aa0:	4629      	mov	r1, r5
 8004aa2:	eb63 0301 	sbc.w	r3, r3, r1
 8004aa6:	617b      	str	r3, [r7, #20]
 8004aa8:	f04f 0200 	mov.w	r2, #0
 8004aac:	f04f 0300 	mov.w	r3, #0
 8004ab0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004ab4:	4659      	mov	r1, fp
 8004ab6:	018b      	lsls	r3, r1, #6
 8004ab8:	4651      	mov	r1, sl
 8004aba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004abe:	4651      	mov	r1, sl
 8004ac0:	018a      	lsls	r2, r1, #6
 8004ac2:	4651      	mov	r1, sl
 8004ac4:	ebb2 0801 	subs.w	r8, r2, r1
 8004ac8:	4659      	mov	r1, fp
 8004aca:	eb63 0901 	sbc.w	r9, r3, r1
 8004ace:	f04f 0200 	mov.w	r2, #0
 8004ad2:	f04f 0300 	mov.w	r3, #0
 8004ad6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004ada:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004ade:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004ae2:	4690      	mov	r8, r2
 8004ae4:	4699      	mov	r9, r3
 8004ae6:	4623      	mov	r3, r4
 8004ae8:	eb18 0303 	adds.w	r3, r8, r3
 8004aec:	60bb      	str	r3, [r7, #8]
 8004aee:	462b      	mov	r3, r5
 8004af0:	eb49 0303 	adc.w	r3, r9, r3
 8004af4:	60fb      	str	r3, [r7, #12]
 8004af6:	f04f 0200 	mov.w	r2, #0
 8004afa:	f04f 0300 	mov.w	r3, #0
 8004afe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004b02:	4629      	mov	r1, r5
 8004b04:	028b      	lsls	r3, r1, #10
 8004b06:	4621      	mov	r1, r4
 8004b08:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004b0c:	4621      	mov	r1, r4
 8004b0e:	028a      	lsls	r2, r1, #10
 8004b10:	4610      	mov	r0, r2
 8004b12:	4619      	mov	r1, r3
 8004b14:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004b16:	2200      	movs	r2, #0
 8004b18:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004b1a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004b1c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004b20:	f7fb fbe6 	bl	80002f0 <__aeabi_uldivmod>
 8004b24:	4602      	mov	r2, r0
 8004b26:	460b      	mov	r3, r1
 8004b28:	4613      	mov	r3, r2
 8004b2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004b2c:	e058      	b.n	8004be0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b2e:	4b38      	ldr	r3, [pc, #224]	@ (8004c10 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	099b      	lsrs	r3, r3, #6
 8004b34:	2200      	movs	r2, #0
 8004b36:	4618      	mov	r0, r3
 8004b38:	4611      	mov	r1, r2
 8004b3a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004b3e:	623b      	str	r3, [r7, #32]
 8004b40:	2300      	movs	r3, #0
 8004b42:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b44:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004b48:	4642      	mov	r2, r8
 8004b4a:	464b      	mov	r3, r9
 8004b4c:	f04f 0000 	mov.w	r0, #0
 8004b50:	f04f 0100 	mov.w	r1, #0
 8004b54:	0159      	lsls	r1, r3, #5
 8004b56:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b5a:	0150      	lsls	r0, r2, #5
 8004b5c:	4602      	mov	r2, r0
 8004b5e:	460b      	mov	r3, r1
 8004b60:	4641      	mov	r1, r8
 8004b62:	ebb2 0a01 	subs.w	sl, r2, r1
 8004b66:	4649      	mov	r1, r9
 8004b68:	eb63 0b01 	sbc.w	fp, r3, r1
 8004b6c:	f04f 0200 	mov.w	r2, #0
 8004b70:	f04f 0300 	mov.w	r3, #0
 8004b74:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004b78:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004b7c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004b80:	ebb2 040a 	subs.w	r4, r2, sl
 8004b84:	eb63 050b 	sbc.w	r5, r3, fp
 8004b88:	f04f 0200 	mov.w	r2, #0
 8004b8c:	f04f 0300 	mov.w	r3, #0
 8004b90:	00eb      	lsls	r3, r5, #3
 8004b92:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004b96:	00e2      	lsls	r2, r4, #3
 8004b98:	4614      	mov	r4, r2
 8004b9a:	461d      	mov	r5, r3
 8004b9c:	4643      	mov	r3, r8
 8004b9e:	18e3      	adds	r3, r4, r3
 8004ba0:	603b      	str	r3, [r7, #0]
 8004ba2:	464b      	mov	r3, r9
 8004ba4:	eb45 0303 	adc.w	r3, r5, r3
 8004ba8:	607b      	str	r3, [r7, #4]
 8004baa:	f04f 0200 	mov.w	r2, #0
 8004bae:	f04f 0300 	mov.w	r3, #0
 8004bb2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004bb6:	4629      	mov	r1, r5
 8004bb8:	028b      	lsls	r3, r1, #10
 8004bba:	4621      	mov	r1, r4
 8004bbc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004bc0:	4621      	mov	r1, r4
 8004bc2:	028a      	lsls	r2, r1, #10
 8004bc4:	4610      	mov	r0, r2
 8004bc6:	4619      	mov	r1, r3
 8004bc8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004bca:	2200      	movs	r2, #0
 8004bcc:	61bb      	str	r3, [r7, #24]
 8004bce:	61fa      	str	r2, [r7, #28]
 8004bd0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004bd4:	f7fb fb8c 	bl	80002f0 <__aeabi_uldivmod>
 8004bd8:	4602      	mov	r2, r0
 8004bda:	460b      	mov	r3, r1
 8004bdc:	4613      	mov	r3, r2
 8004bde:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004be0:	4b0b      	ldr	r3, [pc, #44]	@ (8004c10 <HAL_RCC_GetSysClockFreq+0x200>)
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	0c1b      	lsrs	r3, r3, #16
 8004be6:	f003 0303 	and.w	r3, r3, #3
 8004bea:	3301      	adds	r3, #1
 8004bec:	005b      	lsls	r3, r3, #1
 8004bee:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004bf0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004bf2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004bf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bf8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004bfa:	e002      	b.n	8004c02 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004bfc:	4b05      	ldr	r3, [pc, #20]	@ (8004c14 <HAL_RCC_GetSysClockFreq+0x204>)
 8004bfe:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004c00:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c02:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004c04:	4618      	mov	r0, r3
 8004c06:	3750      	adds	r7, #80	@ 0x50
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c0e:	bf00      	nop
 8004c10:	40023800 	.word	0x40023800
 8004c14:	00f42400 	.word	0x00f42400

08004c18 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c1c:	4b03      	ldr	r3, [pc, #12]	@ (8004c2c <HAL_RCC_GetHCLKFreq+0x14>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
}
 8004c20:	4618      	mov	r0, r3
 8004c22:	46bd      	mov	sp, r7
 8004c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c28:	4770      	bx	lr
 8004c2a:	bf00      	nop
 8004c2c:	20000040 	.word	0x20000040

08004c30 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b084      	sub	sp, #16
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d101      	bne.n	8004c42 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004c3e:	2301      	movs	r3, #1
 8004c40:	e09d      	b.n	8004d7e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d108      	bne.n	8004c5c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004c52:	d009      	beq.n	8004c68 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2200      	movs	r2, #0
 8004c58:	61da      	str	r2, [r3, #28]
 8004c5a:	e005      	b.n	8004c68 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2200      	movs	r2, #0
 8004c66:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004c74:	b2db      	uxtb	r3, r3
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d106      	bne.n	8004c88 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004c82:	6878      	ldr	r0, [r7, #4]
 8004c84:	f7fc f8fe 	bl	8000e84 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2202      	movs	r2, #2
 8004c8c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	681a      	ldr	r2, [r3, #0]
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004c9e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	68db      	ldr	r3, [r3, #12]
 8004ca4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004ca8:	d902      	bls.n	8004cb0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004caa:	2300      	movs	r3, #0
 8004cac:	60fb      	str	r3, [r7, #12]
 8004cae:	e002      	b.n	8004cb6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004cb0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004cb4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	68db      	ldr	r3, [r3, #12]
 8004cba:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8004cbe:	d007      	beq.n	8004cd0 <HAL_SPI_Init+0xa0>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	68db      	ldr	r3, [r3, #12]
 8004cc4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004cc8:	d002      	beq.n	8004cd0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	685b      	ldr	r3, [r3, #4]
 8004cd4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	689b      	ldr	r3, [r3, #8]
 8004cdc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004ce0:	431a      	orrs	r2, r3
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	691b      	ldr	r3, [r3, #16]
 8004ce6:	f003 0302 	and.w	r3, r3, #2
 8004cea:	431a      	orrs	r2, r3
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	695b      	ldr	r3, [r3, #20]
 8004cf0:	f003 0301 	and.w	r3, r3, #1
 8004cf4:	431a      	orrs	r2, r3
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	699b      	ldr	r3, [r3, #24]
 8004cfa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004cfe:	431a      	orrs	r2, r3
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	69db      	ldr	r3, [r3, #28]
 8004d04:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004d08:	431a      	orrs	r2, r3
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6a1b      	ldr	r3, [r3, #32]
 8004d0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d12:	ea42 0103 	orr.w	r1, r2, r3
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d1a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	430a      	orrs	r2, r1
 8004d24:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	699b      	ldr	r3, [r3, #24]
 8004d2a:	0c1b      	lsrs	r3, r3, #16
 8004d2c:	f003 0204 	and.w	r2, r3, #4
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d34:	f003 0310 	and.w	r3, r3, #16
 8004d38:	431a      	orrs	r2, r3
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d3e:	f003 0308 	and.w	r3, r3, #8
 8004d42:	431a      	orrs	r2, r3
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	68db      	ldr	r3, [r3, #12]
 8004d48:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004d4c:	ea42 0103 	orr.w	r1, r2, r3
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	430a      	orrs	r2, r1
 8004d5c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	69da      	ldr	r2, [r3, #28]
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004d6c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2200      	movs	r2, #0
 8004d72:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2201      	movs	r2, #1
 8004d78:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8004d7c:	2300      	movs	r3, #0
}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	3710      	adds	r7, #16
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}

08004d86 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004d86:	b580      	push	{r7, lr}
 8004d88:	b082      	sub	sp, #8
 8004d8a:	af00      	add	r7, sp, #0
 8004d8c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d101      	bne.n	8004d98 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004d94:	2301      	movs	r3, #1
 8004d96:	e049      	b.n	8004e2c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d9e:	b2db      	uxtb	r3, r3
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d106      	bne.n	8004db2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2200      	movs	r2, #0
 8004da8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004dac:	6878      	ldr	r0, [r7, #4]
 8004dae:	f7fc f92f 	bl	8001010 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2202      	movs	r2, #2
 8004db6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681a      	ldr	r2, [r3, #0]
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	3304      	adds	r3, #4
 8004dc2:	4619      	mov	r1, r3
 8004dc4:	4610      	mov	r0, r2
 8004dc6:	f000 fab1 	bl	800532c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2201      	movs	r2, #1
 8004dce:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2201      	movs	r2, #1
 8004dd6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2201      	movs	r2, #1
 8004dde:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2201      	movs	r2, #1
 8004de6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2201      	movs	r2, #1
 8004dee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2201      	movs	r2, #1
 8004df6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2201      	movs	r2, #1
 8004dfe:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2201      	movs	r2, #1
 8004e06:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2201      	movs	r2, #1
 8004e0e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2201      	movs	r2, #1
 8004e16:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2201      	movs	r2, #1
 8004e1e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2201      	movs	r2, #1
 8004e26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004e2a:	2300      	movs	r3, #0
}
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	3708      	adds	r7, #8
 8004e30:	46bd      	mov	sp, r7
 8004e32:	bd80      	pop	{r7, pc}

08004e34 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004e34:	b480      	push	{r7}
 8004e36:	b085      	sub	sp, #20
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e42:	b2db      	uxtb	r3, r3
 8004e44:	2b01      	cmp	r3, #1
 8004e46:	d001      	beq.n	8004e4c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004e48:	2301      	movs	r3, #1
 8004e4a:	e054      	b.n	8004ef6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2202      	movs	r2, #2
 8004e50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	68da      	ldr	r2, [r3, #12]
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f042 0201 	orr.w	r2, r2, #1
 8004e62:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a26      	ldr	r2, [pc, #152]	@ (8004f04 <HAL_TIM_Base_Start_IT+0xd0>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d022      	beq.n	8004eb4 <HAL_TIM_Base_Start_IT+0x80>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e76:	d01d      	beq.n	8004eb4 <HAL_TIM_Base_Start_IT+0x80>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4a22      	ldr	r2, [pc, #136]	@ (8004f08 <HAL_TIM_Base_Start_IT+0xd4>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d018      	beq.n	8004eb4 <HAL_TIM_Base_Start_IT+0x80>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4a21      	ldr	r2, [pc, #132]	@ (8004f0c <HAL_TIM_Base_Start_IT+0xd8>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d013      	beq.n	8004eb4 <HAL_TIM_Base_Start_IT+0x80>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a1f      	ldr	r2, [pc, #124]	@ (8004f10 <HAL_TIM_Base_Start_IT+0xdc>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d00e      	beq.n	8004eb4 <HAL_TIM_Base_Start_IT+0x80>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4a1e      	ldr	r2, [pc, #120]	@ (8004f14 <HAL_TIM_Base_Start_IT+0xe0>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d009      	beq.n	8004eb4 <HAL_TIM_Base_Start_IT+0x80>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4a1c      	ldr	r2, [pc, #112]	@ (8004f18 <HAL_TIM_Base_Start_IT+0xe4>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d004      	beq.n	8004eb4 <HAL_TIM_Base_Start_IT+0x80>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	4a1b      	ldr	r2, [pc, #108]	@ (8004f1c <HAL_TIM_Base_Start_IT+0xe8>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d115      	bne.n	8004ee0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	689a      	ldr	r2, [r3, #8]
 8004eba:	4b19      	ldr	r3, [pc, #100]	@ (8004f20 <HAL_TIM_Base_Start_IT+0xec>)
 8004ebc:	4013      	ands	r3, r2
 8004ebe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	2b06      	cmp	r3, #6
 8004ec4:	d015      	beq.n	8004ef2 <HAL_TIM_Base_Start_IT+0xbe>
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ecc:	d011      	beq.n	8004ef2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	681a      	ldr	r2, [r3, #0]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f042 0201 	orr.w	r2, r2, #1
 8004edc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ede:	e008      	b.n	8004ef2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	681a      	ldr	r2, [r3, #0]
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f042 0201 	orr.w	r2, r2, #1
 8004eee:	601a      	str	r2, [r3, #0]
 8004ef0:	e000      	b.n	8004ef4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ef2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004ef4:	2300      	movs	r3, #0
}
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	3714      	adds	r7, #20
 8004efa:	46bd      	mov	sp, r7
 8004efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f00:	4770      	bx	lr
 8004f02:	bf00      	nop
 8004f04:	40010000 	.word	0x40010000
 8004f08:	40000400 	.word	0x40000400
 8004f0c:	40000800 	.word	0x40000800
 8004f10:	40000c00 	.word	0x40000c00
 8004f14:	40010400 	.word	0x40010400
 8004f18:	40014000 	.word	0x40014000
 8004f1c:	40001800 	.word	0x40001800
 8004f20:	00010007 	.word	0x00010007

08004f24 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b084      	sub	sp, #16
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	68db      	ldr	r3, [r3, #12]
 8004f32:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	691b      	ldr	r3, [r3, #16]
 8004f3a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	f003 0302 	and.w	r3, r3, #2
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d020      	beq.n	8004f88 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	f003 0302 	and.w	r3, r3, #2
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d01b      	beq.n	8004f88 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f06f 0202 	mvn.w	r2, #2
 8004f58:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2201      	movs	r2, #1
 8004f5e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	699b      	ldr	r3, [r3, #24]
 8004f66:	f003 0303 	and.w	r3, r3, #3
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d003      	beq.n	8004f76 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004f6e:	6878      	ldr	r0, [r7, #4]
 8004f70:	f000 f9be 	bl	80052f0 <HAL_TIM_IC_CaptureCallback>
 8004f74:	e005      	b.n	8004f82 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f76:	6878      	ldr	r0, [r7, #4]
 8004f78:	f000 f9b0 	bl	80052dc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f7c:	6878      	ldr	r0, [r7, #4]
 8004f7e:	f000 f9c1 	bl	8005304 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2200      	movs	r2, #0
 8004f86:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	f003 0304 	and.w	r3, r3, #4
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d020      	beq.n	8004fd4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	f003 0304 	and.w	r3, r3, #4
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d01b      	beq.n	8004fd4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f06f 0204 	mvn.w	r2, #4
 8004fa4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2202      	movs	r2, #2
 8004faa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	699b      	ldr	r3, [r3, #24]
 8004fb2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d003      	beq.n	8004fc2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004fba:	6878      	ldr	r0, [r7, #4]
 8004fbc:	f000 f998 	bl	80052f0 <HAL_TIM_IC_CaptureCallback>
 8004fc0:	e005      	b.n	8004fce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fc2:	6878      	ldr	r0, [r7, #4]
 8004fc4:	f000 f98a 	bl	80052dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fc8:	6878      	ldr	r0, [r7, #4]
 8004fca:	f000 f99b 	bl	8005304 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	f003 0308 	and.w	r3, r3, #8
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d020      	beq.n	8005020 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	f003 0308 	and.w	r3, r3, #8
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d01b      	beq.n	8005020 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f06f 0208 	mvn.w	r2, #8
 8004ff0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2204      	movs	r2, #4
 8004ff6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	69db      	ldr	r3, [r3, #28]
 8004ffe:	f003 0303 	and.w	r3, r3, #3
 8005002:	2b00      	cmp	r3, #0
 8005004:	d003      	beq.n	800500e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005006:	6878      	ldr	r0, [r7, #4]
 8005008:	f000 f972 	bl	80052f0 <HAL_TIM_IC_CaptureCallback>
 800500c:	e005      	b.n	800501a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800500e:	6878      	ldr	r0, [r7, #4]
 8005010:	f000 f964 	bl	80052dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005014:	6878      	ldr	r0, [r7, #4]
 8005016:	f000 f975 	bl	8005304 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2200      	movs	r2, #0
 800501e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	f003 0310 	and.w	r3, r3, #16
 8005026:	2b00      	cmp	r3, #0
 8005028:	d020      	beq.n	800506c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	f003 0310 	and.w	r3, r3, #16
 8005030:	2b00      	cmp	r3, #0
 8005032:	d01b      	beq.n	800506c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f06f 0210 	mvn.w	r2, #16
 800503c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2208      	movs	r2, #8
 8005042:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	69db      	ldr	r3, [r3, #28]
 800504a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800504e:	2b00      	cmp	r3, #0
 8005050:	d003      	beq.n	800505a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005052:	6878      	ldr	r0, [r7, #4]
 8005054:	f000 f94c 	bl	80052f0 <HAL_TIM_IC_CaptureCallback>
 8005058:	e005      	b.n	8005066 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800505a:	6878      	ldr	r0, [r7, #4]
 800505c:	f000 f93e 	bl	80052dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005060:	6878      	ldr	r0, [r7, #4]
 8005062:	f000 f94f 	bl	8005304 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2200      	movs	r2, #0
 800506a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	f003 0301 	and.w	r3, r3, #1
 8005072:	2b00      	cmp	r3, #0
 8005074:	d00c      	beq.n	8005090 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	f003 0301 	and.w	r3, r3, #1
 800507c:	2b00      	cmp	r3, #0
 800507e:	d007      	beq.n	8005090 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f06f 0201 	mvn.w	r2, #1
 8005088:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800508a:	6878      	ldr	r0, [r7, #4]
 800508c:	f000 f91c 	bl	80052c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005090:	68bb      	ldr	r3, [r7, #8]
 8005092:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005096:	2b00      	cmp	r3, #0
 8005098:	d104      	bne.n	80050a4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800509a:	68bb      	ldr	r3, [r7, #8]
 800509c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d00c      	beq.n	80050be <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d007      	beq.n	80050be <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80050b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80050b8:	6878      	ldr	r0, [r7, #4]
 80050ba:	f000 fb15 	bl	80056e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80050be:	68bb      	ldr	r3, [r7, #8]
 80050c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d00c      	beq.n	80050e2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d007      	beq.n	80050e2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80050da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80050dc:	6878      	ldr	r0, [r7, #4]
 80050de:	f000 fb0d 	bl	80056fc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80050e2:	68bb      	ldr	r3, [r7, #8]
 80050e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d00c      	beq.n	8005106 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d007      	beq.n	8005106 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80050fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005100:	6878      	ldr	r0, [r7, #4]
 8005102:	f000 f909 	bl	8005318 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005106:	68bb      	ldr	r3, [r7, #8]
 8005108:	f003 0320 	and.w	r3, r3, #32
 800510c:	2b00      	cmp	r3, #0
 800510e:	d00c      	beq.n	800512a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	f003 0320 	and.w	r3, r3, #32
 8005116:	2b00      	cmp	r3, #0
 8005118:	d007      	beq.n	800512a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f06f 0220 	mvn.w	r2, #32
 8005122:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005124:	6878      	ldr	r0, [r7, #4]
 8005126:	f000 fad5 	bl	80056d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800512a:	bf00      	nop
 800512c:	3710      	adds	r7, #16
 800512e:	46bd      	mov	sp, r7
 8005130:	bd80      	pop	{r7, pc}
	...

08005134 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b084      	sub	sp, #16
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
 800513c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800513e:	2300      	movs	r3, #0
 8005140:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005148:	2b01      	cmp	r3, #1
 800514a:	d101      	bne.n	8005150 <HAL_TIM_ConfigClockSource+0x1c>
 800514c:	2302      	movs	r3, #2
 800514e:	e0b4      	b.n	80052ba <HAL_TIM_ConfigClockSource+0x186>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2201      	movs	r2, #1
 8005154:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2202      	movs	r2, #2
 800515c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	689b      	ldr	r3, [r3, #8]
 8005166:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005168:	68ba      	ldr	r2, [r7, #8]
 800516a:	4b56      	ldr	r3, [pc, #344]	@ (80052c4 <HAL_TIM_ConfigClockSource+0x190>)
 800516c:	4013      	ands	r3, r2
 800516e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005170:	68bb      	ldr	r3, [r7, #8]
 8005172:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005176:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	68ba      	ldr	r2, [r7, #8]
 800517e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005188:	d03e      	beq.n	8005208 <HAL_TIM_ConfigClockSource+0xd4>
 800518a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800518e:	f200 8087 	bhi.w	80052a0 <HAL_TIM_ConfigClockSource+0x16c>
 8005192:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005196:	f000 8086 	beq.w	80052a6 <HAL_TIM_ConfigClockSource+0x172>
 800519a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800519e:	d87f      	bhi.n	80052a0 <HAL_TIM_ConfigClockSource+0x16c>
 80051a0:	2b70      	cmp	r3, #112	@ 0x70
 80051a2:	d01a      	beq.n	80051da <HAL_TIM_ConfigClockSource+0xa6>
 80051a4:	2b70      	cmp	r3, #112	@ 0x70
 80051a6:	d87b      	bhi.n	80052a0 <HAL_TIM_ConfigClockSource+0x16c>
 80051a8:	2b60      	cmp	r3, #96	@ 0x60
 80051aa:	d050      	beq.n	800524e <HAL_TIM_ConfigClockSource+0x11a>
 80051ac:	2b60      	cmp	r3, #96	@ 0x60
 80051ae:	d877      	bhi.n	80052a0 <HAL_TIM_ConfigClockSource+0x16c>
 80051b0:	2b50      	cmp	r3, #80	@ 0x50
 80051b2:	d03c      	beq.n	800522e <HAL_TIM_ConfigClockSource+0xfa>
 80051b4:	2b50      	cmp	r3, #80	@ 0x50
 80051b6:	d873      	bhi.n	80052a0 <HAL_TIM_ConfigClockSource+0x16c>
 80051b8:	2b40      	cmp	r3, #64	@ 0x40
 80051ba:	d058      	beq.n	800526e <HAL_TIM_ConfigClockSource+0x13a>
 80051bc:	2b40      	cmp	r3, #64	@ 0x40
 80051be:	d86f      	bhi.n	80052a0 <HAL_TIM_ConfigClockSource+0x16c>
 80051c0:	2b30      	cmp	r3, #48	@ 0x30
 80051c2:	d064      	beq.n	800528e <HAL_TIM_ConfigClockSource+0x15a>
 80051c4:	2b30      	cmp	r3, #48	@ 0x30
 80051c6:	d86b      	bhi.n	80052a0 <HAL_TIM_ConfigClockSource+0x16c>
 80051c8:	2b20      	cmp	r3, #32
 80051ca:	d060      	beq.n	800528e <HAL_TIM_ConfigClockSource+0x15a>
 80051cc:	2b20      	cmp	r3, #32
 80051ce:	d867      	bhi.n	80052a0 <HAL_TIM_ConfigClockSource+0x16c>
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d05c      	beq.n	800528e <HAL_TIM_ConfigClockSource+0x15a>
 80051d4:	2b10      	cmp	r3, #16
 80051d6:	d05a      	beq.n	800528e <HAL_TIM_ConfigClockSource+0x15a>
 80051d8:	e062      	b.n	80052a0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80051ea:	f000 f9c5 	bl	8005578 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	689b      	ldr	r3, [r3, #8]
 80051f4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80051f6:	68bb      	ldr	r3, [r7, #8]
 80051f8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80051fc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	68ba      	ldr	r2, [r7, #8]
 8005204:	609a      	str	r2, [r3, #8]
      break;
 8005206:	e04f      	b.n	80052a8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005218:	f000 f9ae 	bl	8005578 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	689a      	ldr	r2, [r3, #8]
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800522a:	609a      	str	r2, [r3, #8]
      break;
 800522c:	e03c      	b.n	80052a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800523a:	461a      	mov	r2, r3
 800523c:	f000 f922 	bl	8005484 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	2150      	movs	r1, #80	@ 0x50
 8005246:	4618      	mov	r0, r3
 8005248:	f000 f97b 	bl	8005542 <TIM_ITRx_SetConfig>
      break;
 800524c:	e02c      	b.n	80052a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800525a:	461a      	mov	r2, r3
 800525c:	f000 f941 	bl	80054e2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	2160      	movs	r1, #96	@ 0x60
 8005266:	4618      	mov	r0, r3
 8005268:	f000 f96b 	bl	8005542 <TIM_ITRx_SetConfig>
      break;
 800526c:	e01c      	b.n	80052a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800527a:	461a      	mov	r2, r3
 800527c:	f000 f902 	bl	8005484 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	2140      	movs	r1, #64	@ 0x40
 8005286:	4618      	mov	r0, r3
 8005288:	f000 f95b 	bl	8005542 <TIM_ITRx_SetConfig>
      break;
 800528c:	e00c      	b.n	80052a8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681a      	ldr	r2, [r3, #0]
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	4619      	mov	r1, r3
 8005298:	4610      	mov	r0, r2
 800529a:	f000 f952 	bl	8005542 <TIM_ITRx_SetConfig>
      break;
 800529e:	e003      	b.n	80052a8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80052a0:	2301      	movs	r3, #1
 80052a2:	73fb      	strb	r3, [r7, #15]
      break;
 80052a4:	e000      	b.n	80052a8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80052a6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2201      	movs	r2, #1
 80052ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2200      	movs	r2, #0
 80052b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80052b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80052ba:	4618      	mov	r0, r3
 80052bc:	3710      	adds	r7, #16
 80052be:	46bd      	mov	sp, r7
 80052c0:	bd80      	pop	{r7, pc}
 80052c2:	bf00      	nop
 80052c4:	fffeff88 	.word	0xfffeff88

080052c8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80052c8:	b480      	push	{r7}
 80052ca:	b083      	sub	sp, #12
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80052d0:	bf00      	nop
 80052d2:	370c      	adds	r7, #12
 80052d4:	46bd      	mov	sp, r7
 80052d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052da:	4770      	bx	lr

080052dc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80052dc:	b480      	push	{r7}
 80052de:	b083      	sub	sp, #12
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80052e4:	bf00      	nop
 80052e6:	370c      	adds	r7, #12
 80052e8:	46bd      	mov	sp, r7
 80052ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ee:	4770      	bx	lr

080052f0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80052f0:	b480      	push	{r7}
 80052f2:	b083      	sub	sp, #12
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80052f8:	bf00      	nop
 80052fa:	370c      	adds	r7, #12
 80052fc:	46bd      	mov	sp, r7
 80052fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005302:	4770      	bx	lr

08005304 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005304:	b480      	push	{r7}
 8005306:	b083      	sub	sp, #12
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800530c:	bf00      	nop
 800530e:	370c      	adds	r7, #12
 8005310:	46bd      	mov	sp, r7
 8005312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005316:	4770      	bx	lr

08005318 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005318:	b480      	push	{r7}
 800531a:	b083      	sub	sp, #12
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005320:	bf00      	nop
 8005322:	370c      	adds	r7, #12
 8005324:	46bd      	mov	sp, r7
 8005326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532a:	4770      	bx	lr

0800532c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800532c:	b480      	push	{r7}
 800532e:	b085      	sub	sp, #20
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
 8005334:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	4a46      	ldr	r2, [pc, #280]	@ (8005458 <TIM_Base_SetConfig+0x12c>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d013      	beq.n	800536c <TIM_Base_SetConfig+0x40>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800534a:	d00f      	beq.n	800536c <TIM_Base_SetConfig+0x40>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	4a43      	ldr	r2, [pc, #268]	@ (800545c <TIM_Base_SetConfig+0x130>)
 8005350:	4293      	cmp	r3, r2
 8005352:	d00b      	beq.n	800536c <TIM_Base_SetConfig+0x40>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	4a42      	ldr	r2, [pc, #264]	@ (8005460 <TIM_Base_SetConfig+0x134>)
 8005358:	4293      	cmp	r3, r2
 800535a:	d007      	beq.n	800536c <TIM_Base_SetConfig+0x40>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	4a41      	ldr	r2, [pc, #260]	@ (8005464 <TIM_Base_SetConfig+0x138>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d003      	beq.n	800536c <TIM_Base_SetConfig+0x40>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	4a40      	ldr	r2, [pc, #256]	@ (8005468 <TIM_Base_SetConfig+0x13c>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d108      	bne.n	800537e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005372:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	685b      	ldr	r3, [r3, #4]
 8005378:	68fa      	ldr	r2, [r7, #12]
 800537a:	4313      	orrs	r3, r2
 800537c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	4a35      	ldr	r2, [pc, #212]	@ (8005458 <TIM_Base_SetConfig+0x12c>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d02b      	beq.n	80053de <TIM_Base_SetConfig+0xb2>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800538c:	d027      	beq.n	80053de <TIM_Base_SetConfig+0xb2>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	4a32      	ldr	r2, [pc, #200]	@ (800545c <TIM_Base_SetConfig+0x130>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d023      	beq.n	80053de <TIM_Base_SetConfig+0xb2>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	4a31      	ldr	r2, [pc, #196]	@ (8005460 <TIM_Base_SetConfig+0x134>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d01f      	beq.n	80053de <TIM_Base_SetConfig+0xb2>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	4a30      	ldr	r2, [pc, #192]	@ (8005464 <TIM_Base_SetConfig+0x138>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d01b      	beq.n	80053de <TIM_Base_SetConfig+0xb2>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	4a2f      	ldr	r2, [pc, #188]	@ (8005468 <TIM_Base_SetConfig+0x13c>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d017      	beq.n	80053de <TIM_Base_SetConfig+0xb2>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	4a2e      	ldr	r2, [pc, #184]	@ (800546c <TIM_Base_SetConfig+0x140>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d013      	beq.n	80053de <TIM_Base_SetConfig+0xb2>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	4a2d      	ldr	r2, [pc, #180]	@ (8005470 <TIM_Base_SetConfig+0x144>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d00f      	beq.n	80053de <TIM_Base_SetConfig+0xb2>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	4a2c      	ldr	r2, [pc, #176]	@ (8005474 <TIM_Base_SetConfig+0x148>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d00b      	beq.n	80053de <TIM_Base_SetConfig+0xb2>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	4a2b      	ldr	r2, [pc, #172]	@ (8005478 <TIM_Base_SetConfig+0x14c>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d007      	beq.n	80053de <TIM_Base_SetConfig+0xb2>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	4a2a      	ldr	r2, [pc, #168]	@ (800547c <TIM_Base_SetConfig+0x150>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d003      	beq.n	80053de <TIM_Base_SetConfig+0xb2>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	4a29      	ldr	r2, [pc, #164]	@ (8005480 <TIM_Base_SetConfig+0x154>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d108      	bne.n	80053f0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80053e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	68db      	ldr	r3, [r3, #12]
 80053ea:	68fa      	ldr	r2, [r7, #12]
 80053ec:	4313      	orrs	r3, r2
 80053ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	695b      	ldr	r3, [r3, #20]
 80053fa:	4313      	orrs	r3, r2
 80053fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	68fa      	ldr	r2, [r7, #12]
 8005402:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	689a      	ldr	r2, [r3, #8]
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	681a      	ldr	r2, [r3, #0]
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	4a10      	ldr	r2, [pc, #64]	@ (8005458 <TIM_Base_SetConfig+0x12c>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d003      	beq.n	8005424 <TIM_Base_SetConfig+0xf8>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	4a12      	ldr	r2, [pc, #72]	@ (8005468 <TIM_Base_SetConfig+0x13c>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d103      	bne.n	800542c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	691a      	ldr	r2, [r3, #16]
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2201      	movs	r2, #1
 8005430:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	691b      	ldr	r3, [r3, #16]
 8005436:	f003 0301 	and.w	r3, r3, #1
 800543a:	2b01      	cmp	r3, #1
 800543c:	d105      	bne.n	800544a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	691b      	ldr	r3, [r3, #16]
 8005442:	f023 0201 	bic.w	r2, r3, #1
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	611a      	str	r2, [r3, #16]
  }
}
 800544a:	bf00      	nop
 800544c:	3714      	adds	r7, #20
 800544e:	46bd      	mov	sp, r7
 8005450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005454:	4770      	bx	lr
 8005456:	bf00      	nop
 8005458:	40010000 	.word	0x40010000
 800545c:	40000400 	.word	0x40000400
 8005460:	40000800 	.word	0x40000800
 8005464:	40000c00 	.word	0x40000c00
 8005468:	40010400 	.word	0x40010400
 800546c:	40014000 	.word	0x40014000
 8005470:	40014400 	.word	0x40014400
 8005474:	40014800 	.word	0x40014800
 8005478:	40001800 	.word	0x40001800
 800547c:	40001c00 	.word	0x40001c00
 8005480:	40002000 	.word	0x40002000

08005484 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005484:	b480      	push	{r7}
 8005486:	b087      	sub	sp, #28
 8005488:	af00      	add	r7, sp, #0
 800548a:	60f8      	str	r0, [r7, #12]
 800548c:	60b9      	str	r1, [r7, #8]
 800548e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	6a1b      	ldr	r3, [r3, #32]
 8005494:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	6a1b      	ldr	r3, [r3, #32]
 800549a:	f023 0201 	bic.w	r2, r3, #1
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	699b      	ldr	r3, [r3, #24]
 80054a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80054a8:	693b      	ldr	r3, [r7, #16]
 80054aa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80054ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	011b      	lsls	r3, r3, #4
 80054b4:	693a      	ldr	r2, [r7, #16]
 80054b6:	4313      	orrs	r3, r2
 80054b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80054ba:	697b      	ldr	r3, [r7, #20]
 80054bc:	f023 030a 	bic.w	r3, r3, #10
 80054c0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80054c2:	697a      	ldr	r2, [r7, #20]
 80054c4:	68bb      	ldr	r3, [r7, #8]
 80054c6:	4313      	orrs	r3, r2
 80054c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	693a      	ldr	r2, [r7, #16]
 80054ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	697a      	ldr	r2, [r7, #20]
 80054d4:	621a      	str	r2, [r3, #32]
}
 80054d6:	bf00      	nop
 80054d8:	371c      	adds	r7, #28
 80054da:	46bd      	mov	sp, r7
 80054dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e0:	4770      	bx	lr

080054e2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80054e2:	b480      	push	{r7}
 80054e4:	b087      	sub	sp, #28
 80054e6:	af00      	add	r7, sp, #0
 80054e8:	60f8      	str	r0, [r7, #12]
 80054ea:	60b9      	str	r1, [r7, #8]
 80054ec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	6a1b      	ldr	r3, [r3, #32]
 80054f2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	6a1b      	ldr	r3, [r3, #32]
 80054f8:	f023 0210 	bic.w	r2, r3, #16
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	699b      	ldr	r3, [r3, #24]
 8005504:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005506:	693b      	ldr	r3, [r7, #16]
 8005508:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800550c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	031b      	lsls	r3, r3, #12
 8005512:	693a      	ldr	r2, [r7, #16]
 8005514:	4313      	orrs	r3, r2
 8005516:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005518:	697b      	ldr	r3, [r7, #20]
 800551a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800551e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	011b      	lsls	r3, r3, #4
 8005524:	697a      	ldr	r2, [r7, #20]
 8005526:	4313      	orrs	r3, r2
 8005528:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	693a      	ldr	r2, [r7, #16]
 800552e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	697a      	ldr	r2, [r7, #20]
 8005534:	621a      	str	r2, [r3, #32]
}
 8005536:	bf00      	nop
 8005538:	371c      	adds	r7, #28
 800553a:	46bd      	mov	sp, r7
 800553c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005540:	4770      	bx	lr

08005542 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005542:	b480      	push	{r7}
 8005544:	b085      	sub	sp, #20
 8005546:	af00      	add	r7, sp, #0
 8005548:	6078      	str	r0, [r7, #4]
 800554a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	689b      	ldr	r3, [r3, #8]
 8005550:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005558:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800555a:	683a      	ldr	r2, [r7, #0]
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	4313      	orrs	r3, r2
 8005560:	f043 0307 	orr.w	r3, r3, #7
 8005564:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	68fa      	ldr	r2, [r7, #12]
 800556a:	609a      	str	r2, [r3, #8]
}
 800556c:	bf00      	nop
 800556e:	3714      	adds	r7, #20
 8005570:	46bd      	mov	sp, r7
 8005572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005576:	4770      	bx	lr

08005578 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005578:	b480      	push	{r7}
 800557a:	b087      	sub	sp, #28
 800557c:	af00      	add	r7, sp, #0
 800557e:	60f8      	str	r0, [r7, #12]
 8005580:	60b9      	str	r1, [r7, #8]
 8005582:	607a      	str	r2, [r7, #4]
 8005584:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	689b      	ldr	r3, [r3, #8]
 800558a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800558c:	697b      	ldr	r3, [r7, #20]
 800558e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005592:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	021a      	lsls	r2, r3, #8
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	431a      	orrs	r2, r3
 800559c:	68bb      	ldr	r3, [r7, #8]
 800559e:	4313      	orrs	r3, r2
 80055a0:	697a      	ldr	r2, [r7, #20]
 80055a2:	4313      	orrs	r3, r2
 80055a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	697a      	ldr	r2, [r7, #20]
 80055aa:	609a      	str	r2, [r3, #8]
}
 80055ac:	bf00      	nop
 80055ae:	371c      	adds	r7, #28
 80055b0:	46bd      	mov	sp, r7
 80055b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b6:	4770      	bx	lr

080055b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80055b8:	b480      	push	{r7}
 80055ba:	b085      	sub	sp, #20
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
 80055c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80055c8:	2b01      	cmp	r3, #1
 80055ca:	d101      	bne.n	80055d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80055cc:	2302      	movs	r3, #2
 80055ce:	e06d      	b.n	80056ac <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2201      	movs	r2, #1
 80055d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2202      	movs	r2, #2
 80055dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	685b      	ldr	r3, [r3, #4]
 80055e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	689b      	ldr	r3, [r3, #8]
 80055ee:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4a30      	ldr	r2, [pc, #192]	@ (80056b8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d004      	beq.n	8005604 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4a2f      	ldr	r2, [pc, #188]	@ (80056bc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d108      	bne.n	8005616 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800560a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	685b      	ldr	r3, [r3, #4]
 8005610:	68fa      	ldr	r2, [r7, #12]
 8005612:	4313      	orrs	r3, r2
 8005614:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800561c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	68fa      	ldr	r2, [r7, #12]
 8005624:	4313      	orrs	r3, r2
 8005626:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	68fa      	ldr	r2, [r7, #12]
 800562e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	4a20      	ldr	r2, [pc, #128]	@ (80056b8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d022      	beq.n	8005680 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005642:	d01d      	beq.n	8005680 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4a1d      	ldr	r2, [pc, #116]	@ (80056c0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d018      	beq.n	8005680 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4a1c      	ldr	r2, [pc, #112]	@ (80056c4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d013      	beq.n	8005680 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	4a1a      	ldr	r2, [pc, #104]	@ (80056c8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d00e      	beq.n	8005680 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	4a15      	ldr	r2, [pc, #84]	@ (80056bc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d009      	beq.n	8005680 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	4a16      	ldr	r2, [pc, #88]	@ (80056cc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d004      	beq.n	8005680 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4a15      	ldr	r2, [pc, #84]	@ (80056d0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d10c      	bne.n	800569a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005680:	68bb      	ldr	r3, [r7, #8]
 8005682:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005686:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	689b      	ldr	r3, [r3, #8]
 800568c:	68ba      	ldr	r2, [r7, #8]
 800568e:	4313      	orrs	r3, r2
 8005690:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	68ba      	ldr	r2, [r7, #8]
 8005698:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2201      	movs	r2, #1
 800569e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2200      	movs	r2, #0
 80056a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80056aa:	2300      	movs	r3, #0
}
 80056ac:	4618      	mov	r0, r3
 80056ae:	3714      	adds	r7, #20
 80056b0:	46bd      	mov	sp, r7
 80056b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b6:	4770      	bx	lr
 80056b8:	40010000 	.word	0x40010000
 80056bc:	40010400 	.word	0x40010400
 80056c0:	40000400 	.word	0x40000400
 80056c4:	40000800 	.word	0x40000800
 80056c8:	40000c00 	.word	0x40000c00
 80056cc:	40014000 	.word	0x40014000
 80056d0:	40001800 	.word	0x40001800

080056d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80056d4:	b480      	push	{r7}
 80056d6:	b083      	sub	sp, #12
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80056dc:	bf00      	nop
 80056de:	370c      	adds	r7, #12
 80056e0:	46bd      	mov	sp, r7
 80056e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e6:	4770      	bx	lr

080056e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80056e8:	b480      	push	{r7}
 80056ea:	b083      	sub	sp, #12
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80056f0:	bf00      	nop
 80056f2:	370c      	adds	r7, #12
 80056f4:	46bd      	mov	sp, r7
 80056f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fa:	4770      	bx	lr

080056fc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80056fc:	b480      	push	{r7}
 80056fe:	b083      	sub	sp, #12
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005704:	bf00      	nop
 8005706:	370c      	adds	r7, #12
 8005708:	46bd      	mov	sp, r7
 800570a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570e:	4770      	bx	lr

08005710 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b084      	sub	sp, #16
 8005714:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8005716:	4b8d      	ldr	r3, [pc, #564]	@ (800594c <MX_LWIP_Init+0x23c>)
 8005718:	22c0      	movs	r2, #192	@ 0xc0
 800571a:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 800571c:	4b8b      	ldr	r3, [pc, #556]	@ (800594c <MX_LWIP_Init+0x23c>)
 800571e:	22a8      	movs	r2, #168	@ 0xa8
 8005720:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 8005722:	4b8a      	ldr	r3, [pc, #552]	@ (800594c <MX_LWIP_Init+0x23c>)
 8005724:	2201      	movs	r2, #1
 8005726:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 2;
 8005728:	4b88      	ldr	r3, [pc, #544]	@ (800594c <MX_LWIP_Init+0x23c>)
 800572a:	2202      	movs	r2, #2
 800572c:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800572e:	4b88      	ldr	r3, [pc, #544]	@ (8005950 <MX_LWIP_Init+0x240>)
 8005730:	22ff      	movs	r2, #255	@ 0xff
 8005732:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8005734:	4b86      	ldr	r3, [pc, #536]	@ (8005950 <MX_LWIP_Init+0x240>)
 8005736:	22ff      	movs	r2, #255	@ 0xff
 8005738:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800573a:	4b85      	ldr	r3, [pc, #532]	@ (8005950 <MX_LWIP_Init+0x240>)
 800573c:	22ff      	movs	r2, #255	@ 0xff
 800573e:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8005740:	4b83      	ldr	r3, [pc, #524]	@ (8005950 <MX_LWIP_Init+0x240>)
 8005742:	2200      	movs	r2, #0
 8005744:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8005746:	4b83      	ldr	r3, [pc, #524]	@ (8005954 <MX_LWIP_Init+0x244>)
 8005748:	22c0      	movs	r2, #192	@ 0xc0
 800574a:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 800574c:	4b81      	ldr	r3, [pc, #516]	@ (8005954 <MX_LWIP_Init+0x244>)
 800574e:	22a8      	movs	r2, #168	@ 0xa8
 8005750:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 8005752:	4b80      	ldr	r3, [pc, #512]	@ (8005954 <MX_LWIP_Init+0x244>)
 8005754:	2201      	movs	r2, #1
 8005756:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8005758:	4b7e      	ldr	r3, [pc, #504]	@ (8005954 <MX_LWIP_Init+0x244>)
 800575a:	2201      	movs	r2, #1
 800575c:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 800575e:	f000 fd45 	bl	80061ec <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8005762:	4b7a      	ldr	r3, [pc, #488]	@ (800594c <MX_LWIP_Init+0x23c>)
 8005764:	781b      	ldrb	r3, [r3, #0]
 8005766:	061a      	lsls	r2, r3, #24
 8005768:	4b78      	ldr	r3, [pc, #480]	@ (800594c <MX_LWIP_Init+0x23c>)
 800576a:	785b      	ldrb	r3, [r3, #1]
 800576c:	041b      	lsls	r3, r3, #16
 800576e:	431a      	orrs	r2, r3
 8005770:	4b76      	ldr	r3, [pc, #472]	@ (800594c <MX_LWIP_Init+0x23c>)
 8005772:	789b      	ldrb	r3, [r3, #2]
 8005774:	021b      	lsls	r3, r3, #8
 8005776:	4313      	orrs	r3, r2
 8005778:	4a74      	ldr	r2, [pc, #464]	@ (800594c <MX_LWIP_Init+0x23c>)
 800577a:	78d2      	ldrb	r2, [r2, #3]
 800577c:	4313      	orrs	r3, r2
 800577e:	061a      	lsls	r2, r3, #24
 8005780:	4b72      	ldr	r3, [pc, #456]	@ (800594c <MX_LWIP_Init+0x23c>)
 8005782:	781b      	ldrb	r3, [r3, #0]
 8005784:	0619      	lsls	r1, r3, #24
 8005786:	4b71      	ldr	r3, [pc, #452]	@ (800594c <MX_LWIP_Init+0x23c>)
 8005788:	785b      	ldrb	r3, [r3, #1]
 800578a:	041b      	lsls	r3, r3, #16
 800578c:	4319      	orrs	r1, r3
 800578e:	4b6f      	ldr	r3, [pc, #444]	@ (800594c <MX_LWIP_Init+0x23c>)
 8005790:	789b      	ldrb	r3, [r3, #2]
 8005792:	021b      	lsls	r3, r3, #8
 8005794:	430b      	orrs	r3, r1
 8005796:	496d      	ldr	r1, [pc, #436]	@ (800594c <MX_LWIP_Init+0x23c>)
 8005798:	78c9      	ldrb	r1, [r1, #3]
 800579a:	430b      	orrs	r3, r1
 800579c:	021b      	lsls	r3, r3, #8
 800579e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80057a2:	431a      	orrs	r2, r3
 80057a4:	4b69      	ldr	r3, [pc, #420]	@ (800594c <MX_LWIP_Init+0x23c>)
 80057a6:	781b      	ldrb	r3, [r3, #0]
 80057a8:	0619      	lsls	r1, r3, #24
 80057aa:	4b68      	ldr	r3, [pc, #416]	@ (800594c <MX_LWIP_Init+0x23c>)
 80057ac:	785b      	ldrb	r3, [r3, #1]
 80057ae:	041b      	lsls	r3, r3, #16
 80057b0:	4319      	orrs	r1, r3
 80057b2:	4b66      	ldr	r3, [pc, #408]	@ (800594c <MX_LWIP_Init+0x23c>)
 80057b4:	789b      	ldrb	r3, [r3, #2]
 80057b6:	021b      	lsls	r3, r3, #8
 80057b8:	430b      	orrs	r3, r1
 80057ba:	4964      	ldr	r1, [pc, #400]	@ (800594c <MX_LWIP_Init+0x23c>)
 80057bc:	78c9      	ldrb	r1, [r1, #3]
 80057be:	430b      	orrs	r3, r1
 80057c0:	0a1b      	lsrs	r3, r3, #8
 80057c2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80057c6:	431a      	orrs	r2, r3
 80057c8:	4b60      	ldr	r3, [pc, #384]	@ (800594c <MX_LWIP_Init+0x23c>)
 80057ca:	781b      	ldrb	r3, [r3, #0]
 80057cc:	0619      	lsls	r1, r3, #24
 80057ce:	4b5f      	ldr	r3, [pc, #380]	@ (800594c <MX_LWIP_Init+0x23c>)
 80057d0:	785b      	ldrb	r3, [r3, #1]
 80057d2:	041b      	lsls	r3, r3, #16
 80057d4:	4319      	orrs	r1, r3
 80057d6:	4b5d      	ldr	r3, [pc, #372]	@ (800594c <MX_LWIP_Init+0x23c>)
 80057d8:	789b      	ldrb	r3, [r3, #2]
 80057da:	021b      	lsls	r3, r3, #8
 80057dc:	430b      	orrs	r3, r1
 80057de:	495b      	ldr	r1, [pc, #364]	@ (800594c <MX_LWIP_Init+0x23c>)
 80057e0:	78c9      	ldrb	r1, [r1, #3]
 80057e2:	430b      	orrs	r3, r1
 80057e4:	0e1b      	lsrs	r3, r3, #24
 80057e6:	4313      	orrs	r3, r2
 80057e8:	4a5b      	ldr	r2, [pc, #364]	@ (8005958 <MX_LWIP_Init+0x248>)
 80057ea:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 80057ec:	4b58      	ldr	r3, [pc, #352]	@ (8005950 <MX_LWIP_Init+0x240>)
 80057ee:	781b      	ldrb	r3, [r3, #0]
 80057f0:	061a      	lsls	r2, r3, #24
 80057f2:	4b57      	ldr	r3, [pc, #348]	@ (8005950 <MX_LWIP_Init+0x240>)
 80057f4:	785b      	ldrb	r3, [r3, #1]
 80057f6:	041b      	lsls	r3, r3, #16
 80057f8:	431a      	orrs	r2, r3
 80057fa:	4b55      	ldr	r3, [pc, #340]	@ (8005950 <MX_LWIP_Init+0x240>)
 80057fc:	789b      	ldrb	r3, [r3, #2]
 80057fe:	021b      	lsls	r3, r3, #8
 8005800:	4313      	orrs	r3, r2
 8005802:	4a53      	ldr	r2, [pc, #332]	@ (8005950 <MX_LWIP_Init+0x240>)
 8005804:	78d2      	ldrb	r2, [r2, #3]
 8005806:	4313      	orrs	r3, r2
 8005808:	061a      	lsls	r2, r3, #24
 800580a:	4b51      	ldr	r3, [pc, #324]	@ (8005950 <MX_LWIP_Init+0x240>)
 800580c:	781b      	ldrb	r3, [r3, #0]
 800580e:	0619      	lsls	r1, r3, #24
 8005810:	4b4f      	ldr	r3, [pc, #316]	@ (8005950 <MX_LWIP_Init+0x240>)
 8005812:	785b      	ldrb	r3, [r3, #1]
 8005814:	041b      	lsls	r3, r3, #16
 8005816:	4319      	orrs	r1, r3
 8005818:	4b4d      	ldr	r3, [pc, #308]	@ (8005950 <MX_LWIP_Init+0x240>)
 800581a:	789b      	ldrb	r3, [r3, #2]
 800581c:	021b      	lsls	r3, r3, #8
 800581e:	430b      	orrs	r3, r1
 8005820:	494b      	ldr	r1, [pc, #300]	@ (8005950 <MX_LWIP_Init+0x240>)
 8005822:	78c9      	ldrb	r1, [r1, #3]
 8005824:	430b      	orrs	r3, r1
 8005826:	021b      	lsls	r3, r3, #8
 8005828:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800582c:	431a      	orrs	r2, r3
 800582e:	4b48      	ldr	r3, [pc, #288]	@ (8005950 <MX_LWIP_Init+0x240>)
 8005830:	781b      	ldrb	r3, [r3, #0]
 8005832:	0619      	lsls	r1, r3, #24
 8005834:	4b46      	ldr	r3, [pc, #280]	@ (8005950 <MX_LWIP_Init+0x240>)
 8005836:	785b      	ldrb	r3, [r3, #1]
 8005838:	041b      	lsls	r3, r3, #16
 800583a:	4319      	orrs	r1, r3
 800583c:	4b44      	ldr	r3, [pc, #272]	@ (8005950 <MX_LWIP_Init+0x240>)
 800583e:	789b      	ldrb	r3, [r3, #2]
 8005840:	021b      	lsls	r3, r3, #8
 8005842:	430b      	orrs	r3, r1
 8005844:	4942      	ldr	r1, [pc, #264]	@ (8005950 <MX_LWIP_Init+0x240>)
 8005846:	78c9      	ldrb	r1, [r1, #3]
 8005848:	430b      	orrs	r3, r1
 800584a:	0a1b      	lsrs	r3, r3, #8
 800584c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8005850:	431a      	orrs	r2, r3
 8005852:	4b3f      	ldr	r3, [pc, #252]	@ (8005950 <MX_LWIP_Init+0x240>)
 8005854:	781b      	ldrb	r3, [r3, #0]
 8005856:	0619      	lsls	r1, r3, #24
 8005858:	4b3d      	ldr	r3, [pc, #244]	@ (8005950 <MX_LWIP_Init+0x240>)
 800585a:	785b      	ldrb	r3, [r3, #1]
 800585c:	041b      	lsls	r3, r3, #16
 800585e:	4319      	orrs	r1, r3
 8005860:	4b3b      	ldr	r3, [pc, #236]	@ (8005950 <MX_LWIP_Init+0x240>)
 8005862:	789b      	ldrb	r3, [r3, #2]
 8005864:	021b      	lsls	r3, r3, #8
 8005866:	430b      	orrs	r3, r1
 8005868:	4939      	ldr	r1, [pc, #228]	@ (8005950 <MX_LWIP_Init+0x240>)
 800586a:	78c9      	ldrb	r1, [r1, #3]
 800586c:	430b      	orrs	r3, r1
 800586e:	0e1b      	lsrs	r3, r3, #24
 8005870:	4313      	orrs	r3, r2
 8005872:	4a3a      	ldr	r2, [pc, #232]	@ (800595c <MX_LWIP_Init+0x24c>)
 8005874:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8005876:	4b37      	ldr	r3, [pc, #220]	@ (8005954 <MX_LWIP_Init+0x244>)
 8005878:	781b      	ldrb	r3, [r3, #0]
 800587a:	061a      	lsls	r2, r3, #24
 800587c:	4b35      	ldr	r3, [pc, #212]	@ (8005954 <MX_LWIP_Init+0x244>)
 800587e:	785b      	ldrb	r3, [r3, #1]
 8005880:	041b      	lsls	r3, r3, #16
 8005882:	431a      	orrs	r2, r3
 8005884:	4b33      	ldr	r3, [pc, #204]	@ (8005954 <MX_LWIP_Init+0x244>)
 8005886:	789b      	ldrb	r3, [r3, #2]
 8005888:	021b      	lsls	r3, r3, #8
 800588a:	4313      	orrs	r3, r2
 800588c:	4a31      	ldr	r2, [pc, #196]	@ (8005954 <MX_LWIP_Init+0x244>)
 800588e:	78d2      	ldrb	r2, [r2, #3]
 8005890:	4313      	orrs	r3, r2
 8005892:	061a      	lsls	r2, r3, #24
 8005894:	4b2f      	ldr	r3, [pc, #188]	@ (8005954 <MX_LWIP_Init+0x244>)
 8005896:	781b      	ldrb	r3, [r3, #0]
 8005898:	0619      	lsls	r1, r3, #24
 800589a:	4b2e      	ldr	r3, [pc, #184]	@ (8005954 <MX_LWIP_Init+0x244>)
 800589c:	785b      	ldrb	r3, [r3, #1]
 800589e:	041b      	lsls	r3, r3, #16
 80058a0:	4319      	orrs	r1, r3
 80058a2:	4b2c      	ldr	r3, [pc, #176]	@ (8005954 <MX_LWIP_Init+0x244>)
 80058a4:	789b      	ldrb	r3, [r3, #2]
 80058a6:	021b      	lsls	r3, r3, #8
 80058a8:	430b      	orrs	r3, r1
 80058aa:	492a      	ldr	r1, [pc, #168]	@ (8005954 <MX_LWIP_Init+0x244>)
 80058ac:	78c9      	ldrb	r1, [r1, #3]
 80058ae:	430b      	orrs	r3, r1
 80058b0:	021b      	lsls	r3, r3, #8
 80058b2:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80058b6:	431a      	orrs	r2, r3
 80058b8:	4b26      	ldr	r3, [pc, #152]	@ (8005954 <MX_LWIP_Init+0x244>)
 80058ba:	781b      	ldrb	r3, [r3, #0]
 80058bc:	0619      	lsls	r1, r3, #24
 80058be:	4b25      	ldr	r3, [pc, #148]	@ (8005954 <MX_LWIP_Init+0x244>)
 80058c0:	785b      	ldrb	r3, [r3, #1]
 80058c2:	041b      	lsls	r3, r3, #16
 80058c4:	4319      	orrs	r1, r3
 80058c6:	4b23      	ldr	r3, [pc, #140]	@ (8005954 <MX_LWIP_Init+0x244>)
 80058c8:	789b      	ldrb	r3, [r3, #2]
 80058ca:	021b      	lsls	r3, r3, #8
 80058cc:	430b      	orrs	r3, r1
 80058ce:	4921      	ldr	r1, [pc, #132]	@ (8005954 <MX_LWIP_Init+0x244>)
 80058d0:	78c9      	ldrb	r1, [r1, #3]
 80058d2:	430b      	orrs	r3, r1
 80058d4:	0a1b      	lsrs	r3, r3, #8
 80058d6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80058da:	431a      	orrs	r2, r3
 80058dc:	4b1d      	ldr	r3, [pc, #116]	@ (8005954 <MX_LWIP_Init+0x244>)
 80058de:	781b      	ldrb	r3, [r3, #0]
 80058e0:	0619      	lsls	r1, r3, #24
 80058e2:	4b1c      	ldr	r3, [pc, #112]	@ (8005954 <MX_LWIP_Init+0x244>)
 80058e4:	785b      	ldrb	r3, [r3, #1]
 80058e6:	041b      	lsls	r3, r3, #16
 80058e8:	4319      	orrs	r1, r3
 80058ea:	4b1a      	ldr	r3, [pc, #104]	@ (8005954 <MX_LWIP_Init+0x244>)
 80058ec:	789b      	ldrb	r3, [r3, #2]
 80058ee:	021b      	lsls	r3, r3, #8
 80058f0:	430b      	orrs	r3, r1
 80058f2:	4918      	ldr	r1, [pc, #96]	@ (8005954 <MX_LWIP_Init+0x244>)
 80058f4:	78c9      	ldrb	r1, [r1, #3]
 80058f6:	430b      	orrs	r3, r1
 80058f8:	0e1b      	lsrs	r3, r3, #24
 80058fa:	4313      	orrs	r3, r2
 80058fc:	4a18      	ldr	r2, [pc, #96]	@ (8005960 <MX_LWIP_Init+0x250>)
 80058fe:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8005900:	4b18      	ldr	r3, [pc, #96]	@ (8005964 <MX_LWIP_Init+0x254>)
 8005902:	9302      	str	r3, [sp, #8]
 8005904:	4b18      	ldr	r3, [pc, #96]	@ (8005968 <MX_LWIP_Init+0x258>)
 8005906:	9301      	str	r3, [sp, #4]
 8005908:	2300      	movs	r3, #0
 800590a:	9300      	str	r3, [sp, #0]
 800590c:	4b14      	ldr	r3, [pc, #80]	@ (8005960 <MX_LWIP_Init+0x250>)
 800590e:	4a13      	ldr	r2, [pc, #76]	@ (800595c <MX_LWIP_Init+0x24c>)
 8005910:	4911      	ldr	r1, [pc, #68]	@ (8005958 <MX_LWIP_Init+0x248>)
 8005912:	4816      	ldr	r0, [pc, #88]	@ (800596c <MX_LWIP_Init+0x25c>)
 8005914:	f001 f956 	bl	8006bc4 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8005918:	4814      	ldr	r0, [pc, #80]	@ (800596c <MX_LWIP_Init+0x25c>)
 800591a:	f001 fb05 	bl	8006f28 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800591e:	4b13      	ldr	r3, [pc, #76]	@ (800596c <MX_LWIP_Init+0x25c>)
 8005920:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005924:	089b      	lsrs	r3, r3, #2
 8005926:	f003 0301 	and.w	r3, r3, #1
 800592a:	b2db      	uxtb	r3, r3
 800592c:	2b00      	cmp	r3, #0
 800592e:	d003      	beq.n	8005938 <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8005930:	480e      	ldr	r0, [pc, #56]	@ (800596c <MX_LWIP_Init+0x25c>)
 8005932:	f001 fb09 	bl	8006f48 <netif_set_up>
 8005936:	e002      	b.n	800593e <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8005938:	480c      	ldr	r0, [pc, #48]	@ (800596c <MX_LWIP_Init+0x25c>)
 800593a:	f001 fb71 	bl	8007020 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 800593e:	490c      	ldr	r1, [pc, #48]	@ (8005970 <MX_LWIP_Init+0x260>)
 8005940:	480a      	ldr	r0, [pc, #40]	@ (800596c <MX_LWIP_Init+0x25c>)
 8005942:	f001 fc03 	bl	800714c <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8005946:	bf00      	nop
 8005948:	46bd      	mov	sp, r7
 800594a:	bd80      	pop	{r7, pc}
 800594c:	20000618 	.word	0x20000618
 8005950:	2000061c 	.word	0x2000061c
 8005954:	20000620 	.word	0x20000620
 8005958:	2000060c 	.word	0x2000060c
 800595c:	20000610 	.word	0x20000610
 8005960:	20000614 	.word	0x20000614
 8005964:	08010fd5 	.word	0x08010fd5
 8005968:	08005cd9 	.word	0x08005cd9
 800596c:	200005d8 	.word	0x200005d8
 8005970:	080059c5 	.word	0x080059c5

08005974 <Ethernet_Link_Periodic_Handle>:
  * @brief  Ethernet Link periodic check
  * @param  netif
  * @retval None
  */
static void Ethernet_Link_Periodic_Handle(struct netif *netif)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b082      	sub	sp, #8
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN 4_4_1 */
/* USER CODE END 4_4_1 */

  /* Ethernet Link every 100ms */
  if (HAL_GetTick() - EthernetLinkTimer >= 100)
 800597c:	f7fc f9be 	bl	8001cfc <HAL_GetTick>
 8005980:	4602      	mov	r2, r0
 8005982:	4b08      	ldr	r3, [pc, #32]	@ (80059a4 <Ethernet_Link_Periodic_Handle+0x30>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	1ad3      	subs	r3, r2, r3
 8005988:	2b63      	cmp	r3, #99	@ 0x63
 800598a:	d907      	bls.n	800599c <Ethernet_Link_Periodic_Handle+0x28>
  {
    EthernetLinkTimer = HAL_GetTick();
 800598c:	f7fc f9b6 	bl	8001cfc <HAL_GetTick>
 8005990:	4603      	mov	r3, r0
 8005992:	4a04      	ldr	r2, [pc, #16]	@ (80059a4 <Ethernet_Link_Periodic_Handle+0x30>)
 8005994:	6013      	str	r3, [r2, #0]
    ethernet_link_check_state(netif);
 8005996:	6878      	ldr	r0, [r7, #4]
 8005998:	f000 fafc 	bl	8005f94 <ethernet_link_check_state>
  }
/* USER CODE BEGIN 4_4 */
/* USER CODE END 4_4 */
}
 800599c:	bf00      	nop
 800599e:	3708      	adds	r7, #8
 80059a0:	46bd      	mov	sp, r7
 80059a2:	bd80      	pop	{r7, pc}
 80059a4:	200005d4 	.word	0x200005d4

080059a8 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 80059ac:	4804      	ldr	r0, [pc, #16]	@ (80059c0 <MX_LWIP_Process+0x18>)
 80059ae:	f000 f973 	bl	8005c98 <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 80059b2:	f008 fbd3 	bl	800e15c <sys_check_timeouts>

  Ethernet_Link_Periodic_Handle(&gnetif);
 80059b6:	4802      	ldr	r0, [pc, #8]	@ (80059c0 <MX_LWIP_Process+0x18>)
 80059b8:	f7ff ffdc 	bl	8005974 <Ethernet_Link_Periodic_Handle>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 80059bc:	bf00      	nop
 80059be:	bd80      	pop	{r7, pc}
 80059c0:	200005d8 	.word	0x200005d8

080059c4 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 80059c4:	b480      	push	{r7}
 80059c6:	b083      	sub	sp, #12
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 80059cc:	bf00      	nop
 80059ce:	370c      	adds	r7, #12
 80059d0:	46bd      	mov	sp, r7
 80059d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d6:	4770      	bx	lr

080059d8 <SCB_InvalidateDCache_by_Addr>:
{
 80059d8:	b480      	push	{r7}
 80059da:	b087      	sub	sp, #28
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
 80059e0:	6039      	str	r1, [r7, #0]
     int32_t op_size = dsize;
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 80059ea:	2320      	movs	r3, #32
 80059ec:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80059ee:	f3bf 8f4f 	dsb	sy
}
 80059f2:	bf00      	nop
    while (op_size > 0) {
 80059f4:	e00b      	b.n	8005a0e <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 80059f6:	4a0d      	ldr	r2, [pc, #52]	@ (8005a2c <SCB_InvalidateDCache_by_Addr+0x54>)
 80059f8:	693b      	ldr	r3, [r7, #16]
 80059fa:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
      op_addr += (uint32_t)linesize;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	693a      	ldr	r2, [r7, #16]
 8005a02:	4413      	add	r3, r2
 8005a04:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 8005a06:	697a      	ldr	r2, [r7, #20]
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	1ad3      	subs	r3, r2, r3
 8005a0c:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 8005a0e:	697b      	ldr	r3, [r7, #20]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	dcf0      	bgt.n	80059f6 <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 8005a14:	f3bf 8f4f 	dsb	sy
}
 8005a18:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005a1a:	f3bf 8f6f 	isb	sy
}
 8005a1e:	bf00      	nop
}
 8005a20:	bf00      	nop
 8005a22:	371c      	adds	r7, #28
 8005a24:	46bd      	mov	sp, r7
 8005a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2a:	4770      	bx	lr
 8005a2c:	e000ed00 	.word	0xe000ed00

08005a30 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b084      	sub	sp, #16
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8005a38:	2300      	movs	r3, #0
 8005a3a:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8005a3c:	4b40      	ldr	r3, [pc, #256]	@ (8005b40 <low_level_init+0x110>)
 8005a3e:	4a41      	ldr	r2, [pc, #260]	@ (8005b44 <low_level_init+0x114>)
 8005a40:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8005a42:	2300      	movs	r3, #0
 8005a44:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8005a46:	2380      	movs	r3, #128	@ 0x80
 8005a48:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8005a4a:	23e1      	movs	r3, #225	@ 0xe1
 8005a4c:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8005a4e:	2300      	movs	r3, #0
 8005a50:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8005a52:	2300      	movs	r3, #0
 8005a54:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8005a56:	2300      	movs	r3, #0
 8005a58:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8005a5a:	4a39      	ldr	r2, [pc, #228]	@ (8005b40 <low_level_init+0x110>)
 8005a5c:	f107 0308 	add.w	r3, r7, #8
 8005a60:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8005a62:	4b37      	ldr	r3, [pc, #220]	@ (8005b40 <low_level_init+0x110>)
 8005a64:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8005a68:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8005a6a:	4b35      	ldr	r3, [pc, #212]	@ (8005b40 <low_level_init+0x110>)
 8005a6c:	4a36      	ldr	r2, [pc, #216]	@ (8005b48 <low_level_init+0x118>)
 8005a6e:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8005a70:	4b33      	ldr	r3, [pc, #204]	@ (8005b40 <low_level_init+0x110>)
 8005a72:	4a36      	ldr	r2, [pc, #216]	@ (8005b4c <low_level_init+0x11c>)
 8005a74:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8005a76:	4b32      	ldr	r3, [pc, #200]	@ (8005b40 <low_level_init+0x110>)
 8005a78:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8005a7c:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8005a7e:	4830      	ldr	r0, [pc, #192]	@ (8005b40 <low_level_init+0x110>)
 8005a80:	f7fc ffe6 	bl	8002a50 <HAL_ETH_Init>
 8005a84:	4603      	mov	r3, r0
 8005a86:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8005a88:	2238      	movs	r2, #56	@ 0x38
 8005a8a:	2100      	movs	r1, #0
 8005a8c:	4830      	ldr	r0, [pc, #192]	@ (8005b50 <low_level_init+0x120>)
 8005a8e:	f00b fd4a 	bl	8011526 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8005a92:	4b2f      	ldr	r3, [pc, #188]	@ (8005b50 <low_level_init+0x120>)
 8005a94:	2221      	movs	r2, #33	@ 0x21
 8005a96:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8005a98:	4b2d      	ldr	r3, [pc, #180]	@ (8005b50 <low_level_init+0x120>)
 8005a9a:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8005a9e:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8005aa0:	4b2b      	ldr	r3, [pc, #172]	@ (8005b50 <low_level_init+0x120>)
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8005aa6:	482b      	ldr	r0, [pc, #172]	@ (8005b54 <low_level_init+0x124>)
 8005aa8:	f000 ff54 	bl	8006954 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2206      	movs	r2, #6
 8005ab0:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8005ab4:	4b22      	ldr	r3, [pc, #136]	@ (8005b40 <low_level_init+0x110>)
 8005ab6:	685b      	ldr	r3, [r3, #4]
 8005ab8:	781a      	ldrb	r2, [r3, #0]
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8005ac0:	4b1f      	ldr	r3, [pc, #124]	@ (8005b40 <low_level_init+0x110>)
 8005ac2:	685b      	ldr	r3, [r3, #4]
 8005ac4:	785a      	ldrb	r2, [r3, #1]
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8005acc:	4b1c      	ldr	r3, [pc, #112]	@ (8005b40 <low_level_init+0x110>)
 8005ace:	685b      	ldr	r3, [r3, #4]
 8005ad0:	789a      	ldrb	r2, [r3, #2]
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8005ad8:	4b19      	ldr	r3, [pc, #100]	@ (8005b40 <low_level_init+0x110>)
 8005ada:	685b      	ldr	r3, [r3, #4]
 8005adc:	78da      	ldrb	r2, [r3, #3]
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8005ae4:	4b16      	ldr	r3, [pc, #88]	@ (8005b40 <low_level_init+0x110>)
 8005ae6:	685b      	ldr	r3, [r3, #4]
 8005ae8:	791a      	ldrb	r2, [r3, #4]
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8005af0:	4b13      	ldr	r3, [pc, #76]	@ (8005b40 <low_level_init+0x110>)
 8005af2:	685b      	ldr	r3, [r3, #4]
 8005af4:	795a      	ldrb	r2, [r3, #5]
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8005b02:	849a      	strh	r2, [r3, #36]	@ 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005b0a:	f043 030a 	orr.w	r3, r3, #10
 8005b0e:	b2da      	uxtb	r2, r3
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8005b16:	4910      	ldr	r1, [pc, #64]	@ (8005b58 <low_level_init+0x128>)
 8005b18:	4810      	ldr	r0, [pc, #64]	@ (8005b5c <low_level_init+0x12c>)
 8005b1a:	f7fb ff88 	bl	8001a2e <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 8005b1e:	480f      	ldr	r0, [pc, #60]	@ (8005b5c <low_level_init+0x12c>)
 8005b20:	f7fb ffb7 	bl	8001a92 <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 8005b24:	7bfb      	ldrb	r3, [r7, #15]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d103      	bne.n	8005b32 <low_level_init+0x102>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 8005b2a:	6878      	ldr	r0, [r7, #4]
 8005b2c:	f000 fa32 	bl	8005f94 <ethernet_link_check_state>

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */

}
 8005b30:	e001      	b.n	8005b36 <low_level_init+0x106>
    Error_Handler();
 8005b32:	f7fb f95d 	bl	8000df0 <Error_Handler>
}
 8005b36:	bf00      	nop
 8005b38:	3710      	adds	r7, #16
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	bd80      	pop	{r7, pc}
 8005b3e:	bf00      	nop
 8005b40:	20004fb0 	.word	0x20004fb0
 8005b44:	40028000 	.word	0x40028000
 8005b48:	20000168 	.word	0x20000168
 8005b4c:	200000c8 	.word	0x200000c8
 8005b50:	20005060 	.word	0x20005060
 8005b54:	080150a0 	.word	0x080150a0
 8005b58:	2000004c 	.word	0x2000004c
 8005b5c:	20005098 	.word	0x20005098

08005b60 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b092      	sub	sp, #72	@ 0x48
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
 8005b68:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 8005b6e:	2300      	movs	r3, #0
 8005b70:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 8005b72:	2300      	movs	r3, #0
 8005b74:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8005b78:	f107 030c 	add.w	r3, r7, #12
 8005b7c:	2230      	movs	r2, #48	@ 0x30
 8005b7e:	2100      	movs	r1, #0
 8005b80:	4618      	mov	r0, r3
 8005b82:	f00b fcd0 	bl	8011526 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8005b86:	f107 030c 	add.w	r3, r7, #12
 8005b8a:	2230      	movs	r2, #48	@ 0x30
 8005b8c:	2100      	movs	r1, #0
 8005b8e:	4618      	mov	r0, r3
 8005b90:	f00b fcc9 	bl	8011526 <memset>

  for(q = p; q != NULL; q = q->next)
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	643b      	str	r3, [r7, #64]	@ 0x40
 8005b98:	e045      	b.n	8005c26 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8005b9a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005b9c:	2b03      	cmp	r3, #3
 8005b9e:	d902      	bls.n	8005ba6 <low_level_output+0x46>
      return ERR_IF;
 8005ba0:	f06f 030b 	mvn.w	r3, #11
 8005ba4:	e055      	b.n	8005c52 <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 8005ba6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005ba8:	6859      	ldr	r1, [r3, #4]
 8005baa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005bac:	4613      	mov	r3, r2
 8005bae:	005b      	lsls	r3, r3, #1
 8005bb0:	4413      	add	r3, r2
 8005bb2:	009b      	lsls	r3, r3, #2
 8005bb4:	3348      	adds	r3, #72	@ 0x48
 8005bb6:	443b      	add	r3, r7
 8005bb8:	3b3c      	subs	r3, #60	@ 0x3c
 8005bba:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8005bbc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005bbe:	895b      	ldrh	r3, [r3, #10]
 8005bc0:	4619      	mov	r1, r3
 8005bc2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005bc4:	4613      	mov	r3, r2
 8005bc6:	005b      	lsls	r3, r3, #1
 8005bc8:	4413      	add	r3, r2
 8005bca:	009b      	lsls	r3, r3, #2
 8005bcc:	3348      	adds	r3, #72	@ 0x48
 8005bce:	443b      	add	r3, r7
 8005bd0:	3b38      	subs	r3, #56	@ 0x38
 8005bd2:	6019      	str	r1, [r3, #0]

    if(i>0)
 8005bd4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d011      	beq.n	8005bfe <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8005bda:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005bdc:	1e5a      	subs	r2, r3, #1
 8005bde:	f107 000c 	add.w	r0, r7, #12
 8005be2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005be4:	460b      	mov	r3, r1
 8005be6:	005b      	lsls	r3, r3, #1
 8005be8:	440b      	add	r3, r1
 8005bea:	009b      	lsls	r3, r3, #2
 8005bec:	18c1      	adds	r1, r0, r3
 8005bee:	4613      	mov	r3, r2
 8005bf0:	005b      	lsls	r3, r3, #1
 8005bf2:	4413      	add	r3, r2
 8005bf4:	009b      	lsls	r3, r3, #2
 8005bf6:	3348      	adds	r3, #72	@ 0x48
 8005bf8:	443b      	add	r3, r7
 8005bfa:	3b34      	subs	r3, #52	@ 0x34
 8005bfc:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8005bfe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d109      	bne.n	8005c1a <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8005c06:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005c08:	4613      	mov	r3, r2
 8005c0a:	005b      	lsls	r3, r3, #1
 8005c0c:	4413      	add	r3, r2
 8005c0e:	009b      	lsls	r3, r3, #2
 8005c10:	3348      	adds	r3, #72	@ 0x48
 8005c12:	443b      	add	r3, r7
 8005c14:	3b34      	subs	r3, #52	@ 0x34
 8005c16:	2200      	movs	r2, #0
 8005c18:	601a      	str	r2, [r3, #0]
    }

    i++;
 8005c1a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005c1c:	3301      	adds	r3, #1
 8005c1e:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 8005c20:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	643b      	str	r3, [r7, #64]	@ 0x40
 8005c26:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d1b6      	bne.n	8005b9a <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	891b      	ldrh	r3, [r3, #8]
 8005c30:	461a      	mov	r2, r3
 8005c32:	4b0a      	ldr	r3, [pc, #40]	@ (8005c5c <low_level_output+0xfc>)
 8005c34:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8005c36:	4a09      	ldr	r2, [pc, #36]	@ (8005c5c <low_level_output+0xfc>)
 8005c38:	f107 030c 	add.w	r3, r7, #12
 8005c3c:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8005c3e:	4a07      	ldr	r2, [pc, #28]	@ (8005c5c <low_level_output+0xfc>)
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	6353      	str	r3, [r2, #52]	@ 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 8005c44:	2214      	movs	r2, #20
 8005c46:	4905      	ldr	r1, [pc, #20]	@ (8005c5c <low_level_output+0xfc>)
 8005c48:	4805      	ldr	r0, [pc, #20]	@ (8005c60 <low_level_output+0x100>)
 8005c4a:	f7fd f853 	bl	8002cf4 <HAL_ETH_Transmit>

  return errval;
 8005c4e:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 8005c52:	4618      	mov	r0, r3
 8005c54:	3748      	adds	r7, #72	@ 0x48
 8005c56:	46bd      	mov	sp, r7
 8005c58:	bd80      	pop	{r7, pc}
 8005c5a:	bf00      	nop
 8005c5c:	20005060 	.word	0x20005060
 8005c60:	20004fb0 	.word	0x20004fb0

08005c64 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b084      	sub	sp, #16
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8005c70:	4b07      	ldr	r3, [pc, #28]	@ (8005c90 <low_level_input+0x2c>)
 8005c72:	781b      	ldrb	r3, [r3, #0]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d105      	bne.n	8005c84 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8005c78:	f107 030c 	add.w	r3, r7, #12
 8005c7c:	4619      	mov	r1, r3
 8005c7e:	4805      	ldr	r0, [pc, #20]	@ (8005c94 <low_level_input+0x30>)
 8005c80:	f7fd f8cc 	bl	8002e1c <HAL_ETH_ReadData>
  }

  return p;
 8005c84:	68fb      	ldr	r3, [r7, #12]
}
 8005c86:	4618      	mov	r0, r3
 8005c88:	3710      	adds	r7, #16
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	bd80      	pop	{r7, pc}
 8005c8e:	bf00      	nop
 8005c90:	20004fac 	.word	0x20004fac
 8005c94:	20004fb0 	.word	0x20004fb0

08005c98 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b084      	sub	sp, #16
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 8005ca4:	6878      	ldr	r0, [r7, #4]
 8005ca6:	f7ff ffdd 	bl	8005c64 <low_level_input>
 8005caa:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d00a      	beq.n	8005cc8 <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	691b      	ldr	r3, [r3, #16]
 8005cb6:	6879      	ldr	r1, [r7, #4]
 8005cb8:	68f8      	ldr	r0, [r7, #12]
 8005cba:	4798      	blx	r3
 8005cbc:	4603      	mov	r3, r0
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d002      	beq.n	8005cc8 <ethernetif_input+0x30>
      {
        pbuf_free(p);
 8005cc2:	68f8      	ldr	r0, [r7, #12]
 8005cc4:	f001 fdc2 	bl	800784c <pbuf_free>
      }
    }
  } while(p!=NULL);
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d1ea      	bne.n	8005ca4 <ethernetif_input+0xc>
}
 8005cce:	bf00      	nop
 8005cd0:	bf00      	nop
 8005cd2:	3710      	adds	r7, #16
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	bd80      	pop	{r7, pc}

08005cd8 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b082      	sub	sp, #8
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d106      	bne.n	8005cf4 <ethernetif_init+0x1c>
 8005ce6:	4b0e      	ldr	r3, [pc, #56]	@ (8005d20 <ethernetif_init+0x48>)
 8005ce8:	f240 127b 	movw	r2, #379	@ 0x17b
 8005cec:	490d      	ldr	r1, [pc, #52]	@ (8005d24 <ethernetif_init+0x4c>)
 8005cee:	480e      	ldr	r0, [pc, #56]	@ (8005d28 <ethernetif_init+0x50>)
 8005cf0:	f00b fb46 	bl	8011380 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2273      	movs	r2, #115	@ 0x73
 8005cf8:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = IFNAME1;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2274      	movs	r2, #116	@ 0x74
 8005d00:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	4a09      	ldr	r2, [pc, #36]	@ (8005d2c <ethernetif_init+0x54>)
 8005d08:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	4a08      	ldr	r2, [pc, #32]	@ (8005d30 <ethernetif_init+0x58>)
 8005d0e:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8005d10:	6878      	ldr	r0, [r7, #4]
 8005d12:	f7ff fe8d 	bl	8005a30 <low_level_init>

  return ERR_OK;
 8005d16:	2300      	movs	r3, #0
}
 8005d18:	4618      	mov	r0, r3
 8005d1a:	3708      	adds	r7, #8
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	bd80      	pop	{r7, pc}
 8005d20:	080126a8 	.word	0x080126a8
 8005d24:	080126c4 	.word	0x080126c4
 8005d28:	080126d4 	.word	0x080126d4
 8005d2c:	0800f48d 	.word	0x0800f48d
 8005d30:	08005b61 	.word	0x08005b61

08005d34 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b084      	sub	sp, #16
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8005d40:	68f9      	ldr	r1, [r7, #12]
 8005d42:	4807      	ldr	r0, [pc, #28]	@ (8005d60 <pbuf_free_custom+0x2c>)
 8005d44:	f000 fee8 	bl	8006b18 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8005d48:	4b06      	ldr	r3, [pc, #24]	@ (8005d64 <pbuf_free_custom+0x30>)
 8005d4a:	781b      	ldrb	r3, [r3, #0]
 8005d4c:	2b01      	cmp	r3, #1
 8005d4e:	d102      	bne.n	8005d56 <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8005d50:	4b04      	ldr	r3, [pc, #16]	@ (8005d64 <pbuf_free_custom+0x30>)
 8005d52:	2200      	movs	r2, #0
 8005d54:	701a      	strb	r2, [r3, #0]
  }
}
 8005d56:	bf00      	nop
 8005d58:	3710      	adds	r7, #16
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	bd80      	pop	{r7, pc}
 8005d5e:	bf00      	nop
 8005d60:	080150a0 	.word	0x080150a0
 8005d64:	20004fac 	.word	0x20004fac

08005d68 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8005d6c:	f7fb ffc6 	bl	8001cfc <HAL_GetTick>
 8005d70:	4603      	mov	r3, r0
}
 8005d72:	4618      	mov	r0, r3
 8005d74:	bd80      	pop	{r7, pc}
	...

08005d78 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b08e      	sub	sp, #56	@ 0x38
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005d80:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005d84:	2200      	movs	r2, #0
 8005d86:	601a      	str	r2, [r3, #0]
 8005d88:	605a      	str	r2, [r3, #4]
 8005d8a:	609a      	str	r2, [r3, #8]
 8005d8c:	60da      	str	r2, [r3, #12]
 8005d8e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	4a52      	ldr	r2, [pc, #328]	@ (8005ee0 <HAL_ETH_MspInit+0x168>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	f040 809e 	bne.w	8005ed8 <HAL_ETH_MspInit+0x160>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8005d9c:	4b51      	ldr	r3, [pc, #324]	@ (8005ee4 <HAL_ETH_MspInit+0x16c>)
 8005d9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005da0:	4a50      	ldr	r2, [pc, #320]	@ (8005ee4 <HAL_ETH_MspInit+0x16c>)
 8005da2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005da6:	6313      	str	r3, [r2, #48]	@ 0x30
 8005da8:	4b4e      	ldr	r3, [pc, #312]	@ (8005ee4 <HAL_ETH_MspInit+0x16c>)
 8005daa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005dac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005db0:	623b      	str	r3, [r7, #32]
 8005db2:	6a3b      	ldr	r3, [r7, #32]
 8005db4:	4b4b      	ldr	r3, [pc, #300]	@ (8005ee4 <HAL_ETH_MspInit+0x16c>)
 8005db6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005db8:	4a4a      	ldr	r2, [pc, #296]	@ (8005ee4 <HAL_ETH_MspInit+0x16c>)
 8005dba:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005dbe:	6313      	str	r3, [r2, #48]	@ 0x30
 8005dc0:	4b48      	ldr	r3, [pc, #288]	@ (8005ee4 <HAL_ETH_MspInit+0x16c>)
 8005dc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005dc4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005dc8:	61fb      	str	r3, [r7, #28]
 8005dca:	69fb      	ldr	r3, [r7, #28]
 8005dcc:	4b45      	ldr	r3, [pc, #276]	@ (8005ee4 <HAL_ETH_MspInit+0x16c>)
 8005dce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005dd0:	4a44      	ldr	r2, [pc, #272]	@ (8005ee4 <HAL_ETH_MspInit+0x16c>)
 8005dd2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005dd6:	6313      	str	r3, [r2, #48]	@ 0x30
 8005dd8:	4b42      	ldr	r3, [pc, #264]	@ (8005ee4 <HAL_ETH_MspInit+0x16c>)
 8005dda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ddc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005de0:	61bb      	str	r3, [r7, #24]
 8005de2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005de4:	4b3f      	ldr	r3, [pc, #252]	@ (8005ee4 <HAL_ETH_MspInit+0x16c>)
 8005de6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005de8:	4a3e      	ldr	r2, [pc, #248]	@ (8005ee4 <HAL_ETH_MspInit+0x16c>)
 8005dea:	f043 0304 	orr.w	r3, r3, #4
 8005dee:	6313      	str	r3, [r2, #48]	@ 0x30
 8005df0:	4b3c      	ldr	r3, [pc, #240]	@ (8005ee4 <HAL_ETH_MspInit+0x16c>)
 8005df2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005df4:	f003 0304 	and.w	r3, r3, #4
 8005df8:	617b      	str	r3, [r7, #20]
 8005dfa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005dfc:	4b39      	ldr	r3, [pc, #228]	@ (8005ee4 <HAL_ETH_MspInit+0x16c>)
 8005dfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e00:	4a38      	ldr	r2, [pc, #224]	@ (8005ee4 <HAL_ETH_MspInit+0x16c>)
 8005e02:	f043 0301 	orr.w	r3, r3, #1
 8005e06:	6313      	str	r3, [r2, #48]	@ 0x30
 8005e08:	4b36      	ldr	r3, [pc, #216]	@ (8005ee4 <HAL_ETH_MspInit+0x16c>)
 8005e0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e0c:	f003 0301 	and.w	r3, r3, #1
 8005e10:	613b      	str	r3, [r7, #16]
 8005e12:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005e14:	4b33      	ldr	r3, [pc, #204]	@ (8005ee4 <HAL_ETH_MspInit+0x16c>)
 8005e16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e18:	4a32      	ldr	r2, [pc, #200]	@ (8005ee4 <HAL_ETH_MspInit+0x16c>)
 8005e1a:	f043 0302 	orr.w	r3, r3, #2
 8005e1e:	6313      	str	r3, [r2, #48]	@ 0x30
 8005e20:	4b30      	ldr	r3, [pc, #192]	@ (8005ee4 <HAL_ETH_MspInit+0x16c>)
 8005e22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e24:	f003 0302 	and.w	r3, r3, #2
 8005e28:	60fb      	str	r3, [r7, #12]
 8005e2a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8005e2c:	4b2d      	ldr	r3, [pc, #180]	@ (8005ee4 <HAL_ETH_MspInit+0x16c>)
 8005e2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e30:	4a2c      	ldr	r2, [pc, #176]	@ (8005ee4 <HAL_ETH_MspInit+0x16c>)
 8005e32:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005e36:	6313      	str	r3, [r2, #48]	@ 0x30
 8005e38:	4b2a      	ldr	r3, [pc, #168]	@ (8005ee4 <HAL_ETH_MspInit+0x16c>)
 8005e3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e40:	60bb      	str	r3, [r7, #8]
 8005e42:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8005e44:	2332      	movs	r3, #50	@ 0x32
 8005e46:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e48:	2302      	movs	r3, #2
 8005e4a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005e50:	2303      	movs	r3, #3
 8005e52:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005e54:	230b      	movs	r3, #11
 8005e56:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005e58:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005e5c:	4619      	mov	r1, r3
 8005e5e:	4822      	ldr	r0, [pc, #136]	@ (8005ee8 <HAL_ETH_MspInit+0x170>)
 8005e60:	f7fe f80c 	bl	8003e7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8005e64:	2386      	movs	r3, #134	@ 0x86
 8005e66:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e68:	2302      	movs	r3, #2
 8005e6a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005e70:	2303      	movs	r3, #3
 8005e72:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005e74:	230b      	movs	r3, #11
 8005e76:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005e78:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005e7c:	4619      	mov	r1, r3
 8005e7e:	481b      	ldr	r0, [pc, #108]	@ (8005eec <HAL_ETH_MspInit+0x174>)
 8005e80:	f7fd fffc 	bl	8003e7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8005e84:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005e88:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e8a:	2302      	movs	r3, #2
 8005e8c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e8e:	2300      	movs	r3, #0
 8005e90:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005e92:	2303      	movs	r3, #3
 8005e94:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005e96:	230b      	movs	r3, #11
 8005e98:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8005e9a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005e9e:	4619      	mov	r1, r3
 8005ea0:	4813      	ldr	r0, [pc, #76]	@ (8005ef0 <HAL_ETH_MspInit+0x178>)
 8005ea2:	f7fd ffeb 	bl	8003e7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8005ea6:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8005eaa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005eac:	2302      	movs	r3, #2
 8005eae:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005eb4:	2303      	movs	r3, #3
 8005eb6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005eb8:	230b      	movs	r3, #11
 8005eba:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005ebc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005ec0:	4619      	mov	r1, r3
 8005ec2:	480c      	ldr	r0, [pc, #48]	@ (8005ef4 <HAL_ETH_MspInit+0x17c>)
 8005ec4:	f7fd ffda 	bl	8003e7c <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 0, 0);
 8005ec8:	2200      	movs	r2, #0
 8005eca:	2100      	movs	r1, #0
 8005ecc:	203d      	movs	r0, #61	@ 0x3d
 8005ece:	f7fc f820 	bl	8001f12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8005ed2:	203d      	movs	r0, #61	@ 0x3d
 8005ed4:	f7fc f839 	bl	8001f4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8005ed8:	bf00      	nop
 8005eda:	3738      	adds	r7, #56	@ 0x38
 8005edc:	46bd      	mov	sp, r7
 8005ede:	bd80      	pop	{r7, pc}
 8005ee0:	40028000 	.word	0x40028000
 8005ee4:	40023800 	.word	0x40023800
 8005ee8:	40020800 	.word	0x40020800
 8005eec:	40020000 	.word	0x40020000
 8005ef0:	40020400 	.word	0x40020400
 8005ef4:	40021800 	.word	0x40021800

08005ef8 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8005efc:	4802      	ldr	r0, [pc, #8]	@ (8005f08 <ETH_PHY_IO_Init+0x10>)
 8005efe:	f7fd fb5b 	bl	80035b8 <HAL_ETH_SetMDIOClockRange>

  return 0;
 8005f02:	2300      	movs	r3, #0
}
 8005f04:	4618      	mov	r0, r3
 8005f06:	bd80      	pop	{r7, pc}
 8005f08:	20004fb0 	.word	0x20004fb0

08005f0c <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8005f0c:	b480      	push	{r7}
 8005f0e:	af00      	add	r7, sp, #0
  return 0;
 8005f10:	2300      	movs	r3, #0
}
 8005f12:	4618      	mov	r0, r3
 8005f14:	46bd      	mov	sp, r7
 8005f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1a:	4770      	bx	lr

08005f1c <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b084      	sub	sp, #16
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	60f8      	str	r0, [r7, #12]
 8005f24:	60b9      	str	r1, [r7, #8]
 8005f26:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	68ba      	ldr	r2, [r7, #8]
 8005f2c:	68f9      	ldr	r1, [r7, #12]
 8005f2e:	4807      	ldr	r0, [pc, #28]	@ (8005f4c <ETH_PHY_IO_ReadReg+0x30>)
 8005f30:	f7fd f99c 	bl	800326c <HAL_ETH_ReadPHYRegister>
 8005f34:	4603      	mov	r3, r0
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d002      	beq.n	8005f40 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8005f3a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005f3e:	e000      	b.n	8005f42 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8005f40:	2300      	movs	r3, #0
}
 8005f42:	4618      	mov	r0, r3
 8005f44:	3710      	adds	r7, #16
 8005f46:	46bd      	mov	sp, r7
 8005f48:	bd80      	pop	{r7, pc}
 8005f4a:	bf00      	nop
 8005f4c:	20004fb0 	.word	0x20004fb0

08005f50 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b084      	sub	sp, #16
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	60f8      	str	r0, [r7, #12]
 8005f58:	60b9      	str	r1, [r7, #8]
 8005f5a:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	68ba      	ldr	r2, [r7, #8]
 8005f60:	68f9      	ldr	r1, [r7, #12]
 8005f62:	4807      	ldr	r0, [pc, #28]	@ (8005f80 <ETH_PHY_IO_WriteReg+0x30>)
 8005f64:	f7fd f9cd 	bl	8003302 <HAL_ETH_WritePHYRegister>
 8005f68:	4603      	mov	r3, r0
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d002      	beq.n	8005f74 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8005f6e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005f72:	e000      	b.n	8005f76 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8005f74:	2300      	movs	r3, #0
}
 8005f76:	4618      	mov	r0, r3
 8005f78:	3710      	adds	r7, #16
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	bd80      	pop	{r7, pc}
 8005f7e:	bf00      	nop
 8005f80:	20004fb0 	.word	0x20004fb0

08005f84 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8005f88:	f7fb feb8 	bl	8001cfc <HAL_GetTick>
 8005f8c:	4603      	mov	r3, r0
}
 8005f8e:	4618      	mov	r0, r3
 8005f90:	bd80      	pop	{r7, pc}
	...

08005f94 <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b0a0      	sub	sp, #128	@ 0x80
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8005f9c:	f107 030c 	add.w	r3, r7, #12
 8005fa0:	2264      	movs	r2, #100	@ 0x64
 8005fa2:	2100      	movs	r1, #0
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	f00b fabe 	bl	8011526 <memset>
  int32_t PHYLinkState = 0;
 8005faa:	2300      	movs	r3, #0
 8005fac:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8005fae:	2300      	movs	r3, #0
 8005fb0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	677b      	str	r3, [r7, #116]	@ 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8005fba:	483a      	ldr	r0, [pc, #232]	@ (80060a4 <ethernet_link_check_state+0x110>)
 8005fbc:	f7fb fdb6 	bl	8001b2c <LAN8742_GetLinkState>
 8005fc0:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005fc8:	089b      	lsrs	r3, r3, #2
 8005fca:	f003 0301 	and.w	r3, r3, #1
 8005fce:	b2db      	uxtb	r3, r3
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d00c      	beq.n	8005fee <ethernet_link_check_state+0x5a>
 8005fd4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005fd6:	2b01      	cmp	r3, #1
 8005fd8:	dc09      	bgt.n	8005fee <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 8005fda:	4833      	ldr	r0, [pc, #204]	@ (80060a8 <ethernet_link_check_state+0x114>)
 8005fdc:	f7fc fe31 	bl	8002c42 <HAL_ETH_Stop>
    netif_set_down(netif);
 8005fe0:	6878      	ldr	r0, [r7, #4]
 8005fe2:	f001 f81d 	bl	8007020 <netif_set_down>
    netif_set_link_down(netif);
 8005fe6:	6878      	ldr	r0, [r7, #4]
 8005fe8:	f001 f880 	bl	80070ec <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 8005fec:	e055      	b.n	800609a <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005ff4:	f003 0304 	and.w	r3, r3, #4
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d14e      	bne.n	800609a <ethernet_link_check_state+0x106>
 8005ffc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005ffe:	2b01      	cmp	r3, #1
 8006000:	dd4b      	ble.n	800609a <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 8006002:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006004:	3b02      	subs	r3, #2
 8006006:	2b03      	cmp	r3, #3
 8006008:	d82a      	bhi.n	8006060 <ethernet_link_check_state+0xcc>
 800600a:	a201      	add	r2, pc, #4	@ (adr r2, 8006010 <ethernet_link_check_state+0x7c>)
 800600c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006010:	08006021 	.word	0x08006021
 8006014:	08006033 	.word	0x08006033
 8006018:	08006043 	.word	0x08006043
 800601c:	08006053 	.word	0x08006053
      duplex = ETH_FULLDUPLEX_MODE;
 8006020:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8006024:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 8006026:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800602a:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800602c:	2301      	movs	r3, #1
 800602e:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8006030:	e017      	b.n	8006062 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8006032:	2300      	movs	r3, #0
 8006034:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 8006036:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800603a:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800603c:	2301      	movs	r3, #1
 800603e:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8006040:	e00f      	b.n	8006062 <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 8006042:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8006046:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 8006048:	2300      	movs	r3, #0
 800604a:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800604c:	2301      	movs	r3, #1
 800604e:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8006050:	e007      	b.n	8006062 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8006052:	2300      	movs	r3, #0
 8006054:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 8006056:	2300      	movs	r3, #0
 8006058:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800605a:	2301      	movs	r3, #1
 800605c:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800605e:	e000      	b.n	8006062 <ethernet_link_check_state+0xce>
      break;
 8006060:	bf00      	nop
    if(linkchanged)
 8006062:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006064:	2b00      	cmp	r3, #0
 8006066:	d018      	beq.n	800609a <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8006068:	f107 030c 	add.w	r3, r7, #12
 800606c:	4619      	mov	r1, r3
 800606e:	480e      	ldr	r0, [pc, #56]	@ (80060a8 <ethernet_link_check_state+0x114>)
 8006070:	f7fd f990 	bl	8003394 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8006074:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006076:	627b      	str	r3, [r7, #36]	@ 0x24
      MACConf.Speed = speed;
 8006078:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800607a:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 800607c:	f107 030c 	add.w	r3, r7, #12
 8006080:	4619      	mov	r1, r3
 8006082:	4809      	ldr	r0, [pc, #36]	@ (80060a8 <ethernet_link_check_state+0x114>)
 8006084:	f7fd fa7d 	bl	8003582 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 8006088:	4807      	ldr	r0, [pc, #28]	@ (80060a8 <ethernet_link_check_state+0x114>)
 800608a:	f7fc fd7b 	bl	8002b84 <HAL_ETH_Start>
      netif_set_up(netif);
 800608e:	6878      	ldr	r0, [r7, #4]
 8006090:	f000 ff5a 	bl	8006f48 <netif_set_up>
      netif_set_link_up(netif);
 8006094:	6878      	ldr	r0, [r7, #4]
 8006096:	f000 fff5 	bl	8007084 <netif_set_link_up>
}
 800609a:	bf00      	nop
 800609c:	3780      	adds	r7, #128	@ 0x80
 800609e:	46bd      	mov	sp, r7
 80060a0:	bd80      	pop	{r7, pc}
 80060a2:	bf00      	nop
 80060a4:	20005098 	.word	0x20005098
 80060a8:	20004fb0 	.word	0x20004fb0

080060ac <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b086      	sub	sp, #24
 80060b0:	af02      	add	r7, sp, #8
 80060b2:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 80060b4:	4812      	ldr	r0, [pc, #72]	@ (8006100 <HAL_ETH_RxAllocateCallback+0x54>)
 80060b6:	f000 fcc1 	bl	8006a3c <memp_malloc_pool>
 80060ba:	60f8      	str	r0, [r7, #12]
  if (p)
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d014      	beq.n	80060ec <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	f103 0220 	add.w	r2, r3, #32
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	4a0d      	ldr	r2, [pc, #52]	@ (8006104 <HAL_ETH_RxAllocateCallback+0x58>)
 80060d0:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 80060da:	9201      	str	r2, [sp, #4]
 80060dc:	9300      	str	r3, [sp, #0]
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	2241      	movs	r2, #65	@ 0x41
 80060e2:	2100      	movs	r1, #0
 80060e4:	2000      	movs	r0, #0
 80060e6:	f001 f9f7 	bl	80074d8 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 80060ea:	e005      	b.n	80060f8 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 80060ec:	4b06      	ldr	r3, [pc, #24]	@ (8006108 <HAL_ETH_RxAllocateCallback+0x5c>)
 80060ee:	2201      	movs	r2, #1
 80060f0:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2200      	movs	r2, #0
 80060f6:	601a      	str	r2, [r3, #0]
}
 80060f8:	bf00      	nop
 80060fa:	3710      	adds	r7, #16
 80060fc:	46bd      	mov	sp, r7
 80060fe:	bd80      	pop	{r7, pc}
 8006100:	080150a0 	.word	0x080150a0
 8006104:	08005d35 	.word	0x08005d35
 8006108:	20004fac 	.word	0x20004fac

0800610c <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 800610c:	b580      	push	{r7, lr}
 800610e:	b088      	sub	sp, #32
 8006110:	af00      	add	r7, sp, #0
 8006112:	60f8      	str	r0, [r7, #12]
 8006114:	60b9      	str	r1, [r7, #8]
 8006116:	607a      	str	r2, [r7, #4]
 8006118:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 800611e:	68bb      	ldr	r3, [r7, #8]
 8006120:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8006122:	2300      	movs	r3, #0
 8006124:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	3b20      	subs	r3, #32
 800612a:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 800612c:	69fb      	ldr	r3, [r7, #28]
 800612e:	2200      	movs	r2, #0
 8006130:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8006132:	69fb      	ldr	r3, [r7, #28]
 8006134:	2200      	movs	r2, #0
 8006136:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8006138:	69fb      	ldr	r3, [r7, #28]
 800613a:	887a      	ldrh	r2, [r7, #2]
 800613c:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 800613e:	69bb      	ldr	r3, [r7, #24]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d103      	bne.n	800614e <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8006146:	69bb      	ldr	r3, [r7, #24]
 8006148:	69fa      	ldr	r2, [r7, #28]
 800614a:	601a      	str	r2, [r3, #0]
 800614c:	e003      	b.n	8006156 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 800614e:	697b      	ldr	r3, [r7, #20]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	69fa      	ldr	r2, [r7, #28]
 8006154:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8006156:	697b      	ldr	r3, [r7, #20]
 8006158:	69fa      	ldr	r2, [r7, #28]
 800615a:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 800615c:	69bb      	ldr	r3, [r7, #24]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	61fb      	str	r3, [r7, #28]
 8006162:	e009      	b.n	8006178 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8006164:	69fb      	ldr	r3, [r7, #28]
 8006166:	891a      	ldrh	r2, [r3, #8]
 8006168:	887b      	ldrh	r3, [r7, #2]
 800616a:	4413      	add	r3, r2
 800616c:	b29a      	uxth	r2, r3
 800616e:	69fb      	ldr	r3, [r7, #28]
 8006170:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8006172:	69fb      	ldr	r3, [r7, #28]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	61fb      	str	r3, [r7, #28]
 8006178:	69fb      	ldr	r3, [r7, #28]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d1f2      	bne.n	8006164 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 800617e:	887b      	ldrh	r3, [r7, #2]
 8006180:	4619      	mov	r1, r3
 8006182:	6878      	ldr	r0, [r7, #4]
 8006184:	f7ff fc28 	bl	80059d8 <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 8006188:	bf00      	nop
 800618a:	3720      	adds	r7, #32
 800618c:	46bd      	mov	sp, r7
 800618e:	bd80      	pop	{r7, pc}

08006190 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8006190:	b480      	push	{r7}
 8006192:	b083      	sub	sp, #12
 8006194:	af00      	add	r7, sp, #0
 8006196:	4603      	mov	r3, r0
 8006198:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800619a:	88fb      	ldrh	r3, [r7, #6]
 800619c:	021b      	lsls	r3, r3, #8
 800619e:	b21a      	sxth	r2, r3
 80061a0:	88fb      	ldrh	r3, [r7, #6]
 80061a2:	0a1b      	lsrs	r3, r3, #8
 80061a4:	b29b      	uxth	r3, r3
 80061a6:	b21b      	sxth	r3, r3
 80061a8:	4313      	orrs	r3, r2
 80061aa:	b21b      	sxth	r3, r3
 80061ac:	b29b      	uxth	r3, r3
}
 80061ae:	4618      	mov	r0, r3
 80061b0:	370c      	adds	r7, #12
 80061b2:	46bd      	mov	sp, r7
 80061b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b8:	4770      	bx	lr

080061ba <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 80061ba:	b480      	push	{r7}
 80061bc:	b083      	sub	sp, #12
 80061be:	af00      	add	r7, sp, #0
 80061c0:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	061a      	lsls	r2, r3, #24
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	021b      	lsls	r3, r3, #8
 80061ca:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80061ce:	431a      	orrs	r2, r3
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	0a1b      	lsrs	r3, r3, #8
 80061d4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80061d8:	431a      	orrs	r2, r3
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	0e1b      	lsrs	r3, r3, #24
 80061de:	4313      	orrs	r3, r2
}
 80061e0:	4618      	mov	r0, r3
 80061e2:	370c      	adds	r7, #12
 80061e4:	46bd      	mov	sp, r7
 80061e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ea:	4770      	bx	lr

080061ec <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b082      	sub	sp, #8
 80061f0:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 80061f2:	2300      	movs	r3, #0
 80061f4:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 80061f6:	f000 f8d5 	bl	80063a4 <mem_init>
  memp_init();
 80061fa:	f000 fbdb 	bl	80069b4 <memp_init>
  pbuf_init();
  netif_init();
 80061fe:	f000 fcd9 	bl	8006bb4 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8006202:	f007 ffed 	bl	800e1e0 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8006206:	f001 fe51 	bl	8007eac <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800620a:	f007 ff5f 	bl	800e0cc <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800620e:	bf00      	nop
 8006210:	3708      	adds	r7, #8
 8006212:	46bd      	mov	sp, r7
 8006214:	bd80      	pop	{r7, pc}
	...

08006218 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8006218:	b480      	push	{r7}
 800621a:	b083      	sub	sp, #12
 800621c:	af00      	add	r7, sp, #0
 800621e:	4603      	mov	r3, r0
 8006220:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8006222:	4b05      	ldr	r3, [pc, #20]	@ (8006238 <ptr_to_mem+0x20>)
 8006224:	681a      	ldr	r2, [r3, #0]
 8006226:	88fb      	ldrh	r3, [r7, #6]
 8006228:	4413      	add	r3, r2
}
 800622a:	4618      	mov	r0, r3
 800622c:	370c      	adds	r7, #12
 800622e:	46bd      	mov	sp, r7
 8006230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006234:	4770      	bx	lr
 8006236:	bf00      	nop
 8006238:	200078e4 	.word	0x200078e4

0800623c <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800623c:	b480      	push	{r7}
 800623e:	b083      	sub	sp, #12
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8006244:	4b05      	ldr	r3, [pc, #20]	@ (800625c <mem_to_ptr+0x20>)
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	687a      	ldr	r2, [r7, #4]
 800624a:	1ad3      	subs	r3, r2, r3
 800624c:	b29b      	uxth	r3, r3
}
 800624e:	4618      	mov	r0, r3
 8006250:	370c      	adds	r7, #12
 8006252:	46bd      	mov	sp, r7
 8006254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006258:	4770      	bx	lr
 800625a:	bf00      	nop
 800625c:	200078e4 	.word	0x200078e4

08006260 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8006260:	b590      	push	{r4, r7, lr}
 8006262:	b085      	sub	sp, #20
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8006268:	4b45      	ldr	r3, [pc, #276]	@ (8006380 <plug_holes+0x120>)
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	687a      	ldr	r2, [r7, #4]
 800626e:	429a      	cmp	r2, r3
 8006270:	d206      	bcs.n	8006280 <plug_holes+0x20>
 8006272:	4b44      	ldr	r3, [pc, #272]	@ (8006384 <plug_holes+0x124>)
 8006274:	f240 12df 	movw	r2, #479	@ 0x1df
 8006278:	4943      	ldr	r1, [pc, #268]	@ (8006388 <plug_holes+0x128>)
 800627a:	4844      	ldr	r0, [pc, #272]	@ (800638c <plug_holes+0x12c>)
 800627c:	f00b f880 	bl	8011380 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8006280:	4b43      	ldr	r3, [pc, #268]	@ (8006390 <plug_holes+0x130>)
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	687a      	ldr	r2, [r7, #4]
 8006286:	429a      	cmp	r2, r3
 8006288:	d306      	bcc.n	8006298 <plug_holes+0x38>
 800628a:	4b3e      	ldr	r3, [pc, #248]	@ (8006384 <plug_holes+0x124>)
 800628c:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8006290:	4940      	ldr	r1, [pc, #256]	@ (8006394 <plug_holes+0x134>)
 8006292:	483e      	ldr	r0, [pc, #248]	@ (800638c <plug_holes+0x12c>)
 8006294:	f00b f874 	bl	8011380 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	791b      	ldrb	r3, [r3, #4]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d006      	beq.n	80062ae <plug_holes+0x4e>
 80062a0:	4b38      	ldr	r3, [pc, #224]	@ (8006384 <plug_holes+0x124>)
 80062a2:	f240 12e1 	movw	r2, #481	@ 0x1e1
 80062a6:	493c      	ldr	r1, [pc, #240]	@ (8006398 <plug_holes+0x138>)
 80062a8:	4838      	ldr	r0, [pc, #224]	@ (800638c <plug_holes+0x12c>)
 80062aa:	f00b f869 	bl	8011380 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	881b      	ldrh	r3, [r3, #0]
 80062b2:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 80062b6:	d906      	bls.n	80062c6 <plug_holes+0x66>
 80062b8:	4b32      	ldr	r3, [pc, #200]	@ (8006384 <plug_holes+0x124>)
 80062ba:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 80062be:	4937      	ldr	r1, [pc, #220]	@ (800639c <plug_holes+0x13c>)
 80062c0:	4832      	ldr	r0, [pc, #200]	@ (800638c <plug_holes+0x12c>)
 80062c2:	f00b f85d 	bl	8011380 <iprintf>

  nmem = ptr_to_mem(mem->next);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	881b      	ldrh	r3, [r3, #0]
 80062ca:	4618      	mov	r0, r3
 80062cc:	f7ff ffa4 	bl	8006218 <ptr_to_mem>
 80062d0:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 80062d2:	687a      	ldr	r2, [r7, #4]
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	429a      	cmp	r2, r3
 80062d8:	d024      	beq.n	8006324 <plug_holes+0xc4>
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	791b      	ldrb	r3, [r3, #4]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d120      	bne.n	8006324 <plug_holes+0xc4>
 80062e2:	4b2b      	ldr	r3, [pc, #172]	@ (8006390 <plug_holes+0x130>)
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	68fa      	ldr	r2, [r7, #12]
 80062e8:	429a      	cmp	r2, r3
 80062ea:	d01b      	beq.n	8006324 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 80062ec:	4b2c      	ldr	r3, [pc, #176]	@ (80063a0 <plug_holes+0x140>)
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	68fa      	ldr	r2, [r7, #12]
 80062f2:	429a      	cmp	r2, r3
 80062f4:	d102      	bne.n	80062fc <plug_holes+0x9c>
      lfree = mem;
 80062f6:	4a2a      	ldr	r2, [pc, #168]	@ (80063a0 <plug_holes+0x140>)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	881a      	ldrh	r2, [r3, #0]
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	881b      	ldrh	r3, [r3, #0]
 8006308:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800630c:	d00a      	beq.n	8006324 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	881b      	ldrh	r3, [r3, #0]
 8006312:	4618      	mov	r0, r3
 8006314:	f7ff ff80 	bl	8006218 <ptr_to_mem>
 8006318:	4604      	mov	r4, r0
 800631a:	6878      	ldr	r0, [r7, #4]
 800631c:	f7ff ff8e 	bl	800623c <mem_to_ptr>
 8006320:	4603      	mov	r3, r0
 8006322:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	885b      	ldrh	r3, [r3, #2]
 8006328:	4618      	mov	r0, r3
 800632a:	f7ff ff75 	bl	8006218 <ptr_to_mem>
 800632e:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8006330:	68ba      	ldr	r2, [r7, #8]
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	429a      	cmp	r2, r3
 8006336:	d01f      	beq.n	8006378 <plug_holes+0x118>
 8006338:	68bb      	ldr	r3, [r7, #8]
 800633a:	791b      	ldrb	r3, [r3, #4]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d11b      	bne.n	8006378 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8006340:	4b17      	ldr	r3, [pc, #92]	@ (80063a0 <plug_holes+0x140>)
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	687a      	ldr	r2, [r7, #4]
 8006346:	429a      	cmp	r2, r3
 8006348:	d102      	bne.n	8006350 <plug_holes+0xf0>
      lfree = pmem;
 800634a:	4a15      	ldr	r2, [pc, #84]	@ (80063a0 <plug_holes+0x140>)
 800634c:	68bb      	ldr	r3, [r7, #8]
 800634e:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	881a      	ldrh	r2, [r3, #0]
 8006354:	68bb      	ldr	r3, [r7, #8]
 8006356:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	881b      	ldrh	r3, [r3, #0]
 800635c:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8006360:	d00a      	beq.n	8006378 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	881b      	ldrh	r3, [r3, #0]
 8006366:	4618      	mov	r0, r3
 8006368:	f7ff ff56 	bl	8006218 <ptr_to_mem>
 800636c:	4604      	mov	r4, r0
 800636e:	68b8      	ldr	r0, [r7, #8]
 8006370:	f7ff ff64 	bl	800623c <mem_to_ptr>
 8006374:	4603      	mov	r3, r0
 8006376:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8006378:	bf00      	nop
 800637a:	3714      	adds	r7, #20
 800637c:	46bd      	mov	sp, r7
 800637e:	bd90      	pop	{r4, r7, pc}
 8006380:	200078e4 	.word	0x200078e4
 8006384:	080126fc 	.word	0x080126fc
 8006388:	0801272c 	.word	0x0801272c
 800638c:	08012744 	.word	0x08012744
 8006390:	200078e8 	.word	0x200078e8
 8006394:	0801276c 	.word	0x0801276c
 8006398:	08012788 	.word	0x08012788
 800639c:	080127a4 	.word	0x080127a4
 80063a0:	200078ec 	.word	0x200078ec

080063a4 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b082      	sub	sp, #8
 80063a8:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 80063aa:	4b18      	ldr	r3, [pc, #96]	@ (800640c <mem_init+0x68>)
 80063ac:	3303      	adds	r3, #3
 80063ae:	f023 0303 	bic.w	r3, r3, #3
 80063b2:	461a      	mov	r2, r3
 80063b4:	4b16      	ldr	r3, [pc, #88]	@ (8006410 <mem_init+0x6c>)
 80063b6:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 80063b8:	4b15      	ldr	r3, [pc, #84]	@ (8006410 <mem_init+0x6c>)
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 80063c4:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2200      	movs	r2, #0
 80063ca:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2200      	movs	r2, #0
 80063d0:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 80063d2:	f44f 5020 	mov.w	r0, #10240	@ 0x2800
 80063d6:	f7ff ff1f 	bl	8006218 <ptr_to_mem>
 80063da:	4603      	mov	r3, r0
 80063dc:	4a0d      	ldr	r2, [pc, #52]	@ (8006414 <mem_init+0x70>)
 80063de:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 80063e0:	4b0c      	ldr	r3, [pc, #48]	@ (8006414 <mem_init+0x70>)
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	2201      	movs	r2, #1
 80063e6:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 80063e8:	4b0a      	ldr	r3, [pc, #40]	@ (8006414 <mem_init+0x70>)
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 80063f0:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 80063f2:	4b08      	ldr	r3, [pc, #32]	@ (8006414 <mem_init+0x70>)
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 80063fa:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 80063fc:	4b04      	ldr	r3, [pc, #16]	@ (8006410 <mem_init+0x6c>)
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	4a05      	ldr	r2, [pc, #20]	@ (8006418 <mem_init+0x74>)
 8006402:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8006404:	bf00      	nop
 8006406:	3708      	adds	r7, #8
 8006408:	46bd      	mov	sp, r7
 800640a:	bd80      	pop	{r7, pc}
 800640c:	200050d0 	.word	0x200050d0
 8006410:	200078e4 	.word	0x200078e4
 8006414:	200078e8 	.word	0x200078e8
 8006418:	200078ec 	.word	0x200078ec

0800641c <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800641c:	b580      	push	{r7, lr}
 800641e:	b086      	sub	sp, #24
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8006424:	6878      	ldr	r0, [r7, #4]
 8006426:	f7ff ff09 	bl	800623c <mem_to_ptr>
 800642a:	4603      	mov	r3, r0
 800642c:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	881b      	ldrh	r3, [r3, #0]
 8006432:	4618      	mov	r0, r3
 8006434:	f7ff fef0 	bl	8006218 <ptr_to_mem>
 8006438:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	885b      	ldrh	r3, [r3, #2]
 800643e:	4618      	mov	r0, r3
 8006440:	f7ff feea 	bl	8006218 <ptr_to_mem>
 8006444:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	881b      	ldrh	r3, [r3, #0]
 800644a:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800644e:	d818      	bhi.n	8006482 <mem_link_valid+0x66>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	885b      	ldrh	r3, [r3, #2]
 8006454:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8006458:	d813      	bhi.n	8006482 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800645e:	8afa      	ldrh	r2, [r7, #22]
 8006460:	429a      	cmp	r2, r3
 8006462:	d004      	beq.n	800646e <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	881b      	ldrh	r3, [r3, #0]
 8006468:	8afa      	ldrh	r2, [r7, #22]
 800646a:	429a      	cmp	r2, r3
 800646c:	d109      	bne.n	8006482 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800646e:	4b08      	ldr	r3, [pc, #32]	@ (8006490 <mem_link_valid+0x74>)
 8006470:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8006472:	693a      	ldr	r2, [r7, #16]
 8006474:	429a      	cmp	r2, r3
 8006476:	d006      	beq.n	8006486 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8006478:	693b      	ldr	r3, [r7, #16]
 800647a:	885b      	ldrh	r3, [r3, #2]
 800647c:	8afa      	ldrh	r2, [r7, #22]
 800647e:	429a      	cmp	r2, r3
 8006480:	d001      	beq.n	8006486 <mem_link_valid+0x6a>
    return 0;
 8006482:	2300      	movs	r3, #0
 8006484:	e000      	b.n	8006488 <mem_link_valid+0x6c>
  }
  return 1;
 8006486:	2301      	movs	r3, #1
}
 8006488:	4618      	mov	r0, r3
 800648a:	3718      	adds	r7, #24
 800648c:	46bd      	mov	sp, r7
 800648e:	bd80      	pop	{r7, pc}
 8006490:	200078e8 	.word	0x200078e8

08006494 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b084      	sub	sp, #16
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d04c      	beq.n	800653c <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	f003 0303 	and.w	r3, r3, #3
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d007      	beq.n	80064bc <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 80064ac:	4b25      	ldr	r3, [pc, #148]	@ (8006544 <mem_free+0xb0>)
 80064ae:	f240 2273 	movw	r2, #627	@ 0x273
 80064b2:	4925      	ldr	r1, [pc, #148]	@ (8006548 <mem_free+0xb4>)
 80064b4:	4825      	ldr	r0, [pc, #148]	@ (800654c <mem_free+0xb8>)
 80064b6:	f00a ff63 	bl	8011380 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80064ba:	e040      	b.n	800653e <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	3b08      	subs	r3, #8
 80064c0:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 80064c2:	4b23      	ldr	r3, [pc, #140]	@ (8006550 <mem_free+0xbc>)
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	68fa      	ldr	r2, [r7, #12]
 80064c8:	429a      	cmp	r2, r3
 80064ca:	d306      	bcc.n	80064da <mem_free+0x46>
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	f103 020c 	add.w	r2, r3, #12
 80064d2:	4b20      	ldr	r3, [pc, #128]	@ (8006554 <mem_free+0xc0>)
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	429a      	cmp	r2, r3
 80064d8:	d907      	bls.n	80064ea <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 80064da:	4b1a      	ldr	r3, [pc, #104]	@ (8006544 <mem_free+0xb0>)
 80064dc:	f240 227f 	movw	r2, #639	@ 0x27f
 80064e0:	491d      	ldr	r1, [pc, #116]	@ (8006558 <mem_free+0xc4>)
 80064e2:	481a      	ldr	r0, [pc, #104]	@ (800654c <mem_free+0xb8>)
 80064e4:	f00a ff4c 	bl	8011380 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80064e8:	e029      	b.n	800653e <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	791b      	ldrb	r3, [r3, #4]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d107      	bne.n	8006502 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 80064f2:	4b14      	ldr	r3, [pc, #80]	@ (8006544 <mem_free+0xb0>)
 80064f4:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 80064f8:	4918      	ldr	r1, [pc, #96]	@ (800655c <mem_free+0xc8>)
 80064fa:	4814      	ldr	r0, [pc, #80]	@ (800654c <mem_free+0xb8>)
 80064fc:	f00a ff40 	bl	8011380 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8006500:	e01d      	b.n	800653e <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 8006502:	68f8      	ldr	r0, [r7, #12]
 8006504:	f7ff ff8a 	bl	800641c <mem_link_valid>
 8006508:	4603      	mov	r3, r0
 800650a:	2b00      	cmp	r3, #0
 800650c:	d107      	bne.n	800651e <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800650e:	4b0d      	ldr	r3, [pc, #52]	@ (8006544 <mem_free+0xb0>)
 8006510:	f240 2295 	movw	r2, #661	@ 0x295
 8006514:	4912      	ldr	r1, [pc, #72]	@ (8006560 <mem_free+0xcc>)
 8006516:	480d      	ldr	r0, [pc, #52]	@ (800654c <mem_free+0xb8>)
 8006518:	f00a ff32 	bl	8011380 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800651c:	e00f      	b.n	800653e <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	2200      	movs	r2, #0
 8006522:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8006524:	4b0f      	ldr	r3, [pc, #60]	@ (8006564 <mem_free+0xd0>)
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	68fa      	ldr	r2, [r7, #12]
 800652a:	429a      	cmp	r2, r3
 800652c:	d202      	bcs.n	8006534 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800652e:	4a0d      	ldr	r2, [pc, #52]	@ (8006564 <mem_free+0xd0>)
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8006534:	68f8      	ldr	r0, [r7, #12]
 8006536:	f7ff fe93 	bl	8006260 <plug_holes>
 800653a:	e000      	b.n	800653e <mem_free+0xaa>
    return;
 800653c:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 800653e:	3710      	adds	r7, #16
 8006540:	46bd      	mov	sp, r7
 8006542:	bd80      	pop	{r7, pc}
 8006544:	080126fc 	.word	0x080126fc
 8006548:	080127d0 	.word	0x080127d0
 800654c:	08012744 	.word	0x08012744
 8006550:	200078e4 	.word	0x200078e4
 8006554:	200078e8 	.word	0x200078e8
 8006558:	080127f4 	.word	0x080127f4
 800655c:	08012810 	.word	0x08012810
 8006560:	08012838 	.word	0x08012838
 8006564:	200078ec 	.word	0x200078ec

08006568 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b088      	sub	sp, #32
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
 8006570:	460b      	mov	r3, r1
 8006572:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8006574:	887b      	ldrh	r3, [r7, #2]
 8006576:	3303      	adds	r3, #3
 8006578:	b29b      	uxth	r3, r3
 800657a:	f023 0303 	bic.w	r3, r3, #3
 800657e:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8006580:	8bfb      	ldrh	r3, [r7, #30]
 8006582:	2b0b      	cmp	r3, #11
 8006584:	d801      	bhi.n	800658a <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8006586:	230c      	movs	r3, #12
 8006588:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800658a:	8bfb      	ldrh	r3, [r7, #30]
 800658c:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8006590:	d803      	bhi.n	800659a <mem_trim+0x32>
 8006592:	8bfa      	ldrh	r2, [r7, #30]
 8006594:	887b      	ldrh	r3, [r7, #2]
 8006596:	429a      	cmp	r2, r3
 8006598:	d201      	bcs.n	800659e <mem_trim+0x36>
    return NULL;
 800659a:	2300      	movs	r3, #0
 800659c:	e0cc      	b.n	8006738 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800659e:	4b68      	ldr	r3, [pc, #416]	@ (8006740 <mem_trim+0x1d8>)
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	687a      	ldr	r2, [r7, #4]
 80065a4:	429a      	cmp	r2, r3
 80065a6:	d304      	bcc.n	80065b2 <mem_trim+0x4a>
 80065a8:	4b66      	ldr	r3, [pc, #408]	@ (8006744 <mem_trim+0x1dc>)
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	687a      	ldr	r2, [r7, #4]
 80065ae:	429a      	cmp	r2, r3
 80065b0:	d306      	bcc.n	80065c0 <mem_trim+0x58>
 80065b2:	4b65      	ldr	r3, [pc, #404]	@ (8006748 <mem_trim+0x1e0>)
 80065b4:	f240 22d1 	movw	r2, #721	@ 0x2d1
 80065b8:	4964      	ldr	r1, [pc, #400]	@ (800674c <mem_trim+0x1e4>)
 80065ba:	4865      	ldr	r0, [pc, #404]	@ (8006750 <mem_trim+0x1e8>)
 80065bc:	f00a fee0 	bl	8011380 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 80065c0:	4b5f      	ldr	r3, [pc, #380]	@ (8006740 <mem_trim+0x1d8>)
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	687a      	ldr	r2, [r7, #4]
 80065c6:	429a      	cmp	r2, r3
 80065c8:	d304      	bcc.n	80065d4 <mem_trim+0x6c>
 80065ca:	4b5e      	ldr	r3, [pc, #376]	@ (8006744 <mem_trim+0x1dc>)
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	687a      	ldr	r2, [r7, #4]
 80065d0:	429a      	cmp	r2, r3
 80065d2:	d301      	bcc.n	80065d8 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	e0af      	b.n	8006738 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	3b08      	subs	r3, #8
 80065dc:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 80065de:	69b8      	ldr	r0, [r7, #24]
 80065e0:	f7ff fe2c 	bl	800623c <mem_to_ptr>
 80065e4:	4603      	mov	r3, r0
 80065e6:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 80065e8:	69bb      	ldr	r3, [r7, #24]
 80065ea:	881a      	ldrh	r2, [r3, #0]
 80065ec:	8afb      	ldrh	r3, [r7, #22]
 80065ee:	1ad3      	subs	r3, r2, r3
 80065f0:	b29b      	uxth	r3, r3
 80065f2:	3b08      	subs	r3, #8
 80065f4:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 80065f6:	8bfa      	ldrh	r2, [r7, #30]
 80065f8:	8abb      	ldrh	r3, [r7, #20]
 80065fa:	429a      	cmp	r2, r3
 80065fc:	d906      	bls.n	800660c <mem_trim+0xa4>
 80065fe:	4b52      	ldr	r3, [pc, #328]	@ (8006748 <mem_trim+0x1e0>)
 8006600:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 8006604:	4953      	ldr	r1, [pc, #332]	@ (8006754 <mem_trim+0x1ec>)
 8006606:	4852      	ldr	r0, [pc, #328]	@ (8006750 <mem_trim+0x1e8>)
 8006608:	f00a feba 	bl	8011380 <iprintf>
  if (newsize > size) {
 800660c:	8bfa      	ldrh	r2, [r7, #30]
 800660e:	8abb      	ldrh	r3, [r7, #20]
 8006610:	429a      	cmp	r2, r3
 8006612:	d901      	bls.n	8006618 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 8006614:	2300      	movs	r3, #0
 8006616:	e08f      	b.n	8006738 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8006618:	8bfa      	ldrh	r2, [r7, #30]
 800661a:	8abb      	ldrh	r3, [r7, #20]
 800661c:	429a      	cmp	r2, r3
 800661e:	d101      	bne.n	8006624 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	e089      	b.n	8006738 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8006624:	69bb      	ldr	r3, [r7, #24]
 8006626:	881b      	ldrh	r3, [r3, #0]
 8006628:	4618      	mov	r0, r3
 800662a:	f7ff fdf5 	bl	8006218 <ptr_to_mem>
 800662e:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8006630:	693b      	ldr	r3, [r7, #16]
 8006632:	791b      	ldrb	r3, [r3, #4]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d13f      	bne.n	80066b8 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8006638:	69bb      	ldr	r3, [r7, #24]
 800663a:	881b      	ldrh	r3, [r3, #0]
 800663c:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8006640:	d106      	bne.n	8006650 <mem_trim+0xe8>
 8006642:	4b41      	ldr	r3, [pc, #260]	@ (8006748 <mem_trim+0x1e0>)
 8006644:	f240 22f5 	movw	r2, #757	@ 0x2f5
 8006648:	4943      	ldr	r1, [pc, #268]	@ (8006758 <mem_trim+0x1f0>)
 800664a:	4841      	ldr	r0, [pc, #260]	@ (8006750 <mem_trim+0x1e8>)
 800664c:	f00a fe98 	bl	8011380 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8006650:	693b      	ldr	r3, [r7, #16]
 8006652:	881b      	ldrh	r3, [r3, #0]
 8006654:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8006656:	8afa      	ldrh	r2, [r7, #22]
 8006658:	8bfb      	ldrh	r3, [r7, #30]
 800665a:	4413      	add	r3, r2
 800665c:	b29b      	uxth	r3, r3
 800665e:	3308      	adds	r3, #8
 8006660:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8006662:	4b3e      	ldr	r3, [pc, #248]	@ (800675c <mem_trim+0x1f4>)
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	693a      	ldr	r2, [r7, #16]
 8006668:	429a      	cmp	r2, r3
 800666a:	d106      	bne.n	800667a <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 800666c:	89fb      	ldrh	r3, [r7, #14]
 800666e:	4618      	mov	r0, r3
 8006670:	f7ff fdd2 	bl	8006218 <ptr_to_mem>
 8006674:	4603      	mov	r3, r0
 8006676:	4a39      	ldr	r2, [pc, #228]	@ (800675c <mem_trim+0x1f4>)
 8006678:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800667a:	89fb      	ldrh	r3, [r7, #14]
 800667c:	4618      	mov	r0, r3
 800667e:	f7ff fdcb 	bl	8006218 <ptr_to_mem>
 8006682:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8006684:	693b      	ldr	r3, [r7, #16]
 8006686:	2200      	movs	r2, #0
 8006688:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800668a:	693b      	ldr	r3, [r7, #16]
 800668c:	89ba      	ldrh	r2, [r7, #12]
 800668e:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8006690:	693b      	ldr	r3, [r7, #16]
 8006692:	8afa      	ldrh	r2, [r7, #22]
 8006694:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8006696:	69bb      	ldr	r3, [r7, #24]
 8006698:	89fa      	ldrh	r2, [r7, #14]
 800669a:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800669c:	693b      	ldr	r3, [r7, #16]
 800669e:	881b      	ldrh	r3, [r3, #0]
 80066a0:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 80066a4:	d047      	beq.n	8006736 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80066a6:	693b      	ldr	r3, [r7, #16]
 80066a8:	881b      	ldrh	r3, [r3, #0]
 80066aa:	4618      	mov	r0, r3
 80066ac:	f7ff fdb4 	bl	8006218 <ptr_to_mem>
 80066b0:	4602      	mov	r2, r0
 80066b2:	89fb      	ldrh	r3, [r7, #14]
 80066b4:	8053      	strh	r3, [r2, #2]
 80066b6:	e03e      	b.n	8006736 <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 80066b8:	8bfb      	ldrh	r3, [r7, #30]
 80066ba:	f103 0214 	add.w	r2, r3, #20
 80066be:	8abb      	ldrh	r3, [r7, #20]
 80066c0:	429a      	cmp	r2, r3
 80066c2:	d838      	bhi.n	8006736 <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80066c4:	8afa      	ldrh	r2, [r7, #22]
 80066c6:	8bfb      	ldrh	r3, [r7, #30]
 80066c8:	4413      	add	r3, r2
 80066ca:	b29b      	uxth	r3, r3
 80066cc:	3308      	adds	r3, #8
 80066ce:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80066d0:	69bb      	ldr	r3, [r7, #24]
 80066d2:	881b      	ldrh	r3, [r3, #0]
 80066d4:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 80066d8:	d106      	bne.n	80066e8 <mem_trim+0x180>
 80066da:	4b1b      	ldr	r3, [pc, #108]	@ (8006748 <mem_trim+0x1e0>)
 80066dc:	f240 3216 	movw	r2, #790	@ 0x316
 80066e0:	491d      	ldr	r1, [pc, #116]	@ (8006758 <mem_trim+0x1f0>)
 80066e2:	481b      	ldr	r0, [pc, #108]	@ (8006750 <mem_trim+0x1e8>)
 80066e4:	f00a fe4c 	bl	8011380 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 80066e8:	89fb      	ldrh	r3, [r7, #14]
 80066ea:	4618      	mov	r0, r3
 80066ec:	f7ff fd94 	bl	8006218 <ptr_to_mem>
 80066f0:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 80066f2:	4b1a      	ldr	r3, [pc, #104]	@ (800675c <mem_trim+0x1f4>)
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	693a      	ldr	r2, [r7, #16]
 80066f8:	429a      	cmp	r2, r3
 80066fa:	d202      	bcs.n	8006702 <mem_trim+0x19a>
      lfree = mem2;
 80066fc:	4a17      	ldr	r2, [pc, #92]	@ (800675c <mem_trim+0x1f4>)
 80066fe:	693b      	ldr	r3, [r7, #16]
 8006700:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8006702:	693b      	ldr	r3, [r7, #16]
 8006704:	2200      	movs	r2, #0
 8006706:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8006708:	69bb      	ldr	r3, [r7, #24]
 800670a:	881a      	ldrh	r2, [r3, #0]
 800670c:	693b      	ldr	r3, [r7, #16]
 800670e:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8006710:	693b      	ldr	r3, [r7, #16]
 8006712:	8afa      	ldrh	r2, [r7, #22]
 8006714:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8006716:	69bb      	ldr	r3, [r7, #24]
 8006718:	89fa      	ldrh	r2, [r7, #14]
 800671a:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800671c:	693b      	ldr	r3, [r7, #16]
 800671e:	881b      	ldrh	r3, [r3, #0]
 8006720:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8006724:	d007      	beq.n	8006736 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8006726:	693b      	ldr	r3, [r7, #16]
 8006728:	881b      	ldrh	r3, [r3, #0]
 800672a:	4618      	mov	r0, r3
 800672c:	f7ff fd74 	bl	8006218 <ptr_to_mem>
 8006730:	4602      	mov	r2, r0
 8006732:	89fb      	ldrh	r3, [r7, #14]
 8006734:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8006736:	687b      	ldr	r3, [r7, #4]
}
 8006738:	4618      	mov	r0, r3
 800673a:	3720      	adds	r7, #32
 800673c:	46bd      	mov	sp, r7
 800673e:	bd80      	pop	{r7, pc}
 8006740:	200078e4 	.word	0x200078e4
 8006744:	200078e8 	.word	0x200078e8
 8006748:	080126fc 	.word	0x080126fc
 800674c:	0801286c 	.word	0x0801286c
 8006750:	08012744 	.word	0x08012744
 8006754:	08012884 	.word	0x08012884
 8006758:	080128a4 	.word	0x080128a4
 800675c:	200078ec 	.word	0x200078ec

08006760 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8006760:	b580      	push	{r7, lr}
 8006762:	b088      	sub	sp, #32
 8006764:	af00      	add	r7, sp, #0
 8006766:	4603      	mov	r3, r0
 8006768:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800676a:	88fb      	ldrh	r3, [r7, #6]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d101      	bne.n	8006774 <mem_malloc+0x14>
    return NULL;
 8006770:	2300      	movs	r3, #0
 8006772:	e0d9      	b.n	8006928 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8006774:	88fb      	ldrh	r3, [r7, #6]
 8006776:	3303      	adds	r3, #3
 8006778:	b29b      	uxth	r3, r3
 800677a:	f023 0303 	bic.w	r3, r3, #3
 800677e:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8006780:	8bbb      	ldrh	r3, [r7, #28]
 8006782:	2b0b      	cmp	r3, #11
 8006784:	d801      	bhi.n	800678a <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8006786:	230c      	movs	r3, #12
 8006788:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800678a:	8bbb      	ldrh	r3, [r7, #28]
 800678c:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8006790:	d803      	bhi.n	800679a <mem_malloc+0x3a>
 8006792:	8bba      	ldrh	r2, [r7, #28]
 8006794:	88fb      	ldrh	r3, [r7, #6]
 8006796:	429a      	cmp	r2, r3
 8006798:	d201      	bcs.n	800679e <mem_malloc+0x3e>
    return NULL;
 800679a:	2300      	movs	r3, #0
 800679c:	e0c4      	b.n	8006928 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800679e:	4b64      	ldr	r3, [pc, #400]	@ (8006930 <mem_malloc+0x1d0>)
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	4618      	mov	r0, r3
 80067a4:	f7ff fd4a 	bl	800623c <mem_to_ptr>
 80067a8:	4603      	mov	r3, r0
 80067aa:	83fb      	strh	r3, [r7, #30]
 80067ac:	e0b4      	b.n	8006918 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 80067ae:	8bfb      	ldrh	r3, [r7, #30]
 80067b0:	4618      	mov	r0, r3
 80067b2:	f7ff fd31 	bl	8006218 <ptr_to_mem>
 80067b6:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 80067b8:	697b      	ldr	r3, [r7, #20]
 80067ba:	791b      	ldrb	r3, [r3, #4]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	f040 80a4 	bne.w	800690a <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 80067c2:	697b      	ldr	r3, [r7, #20]
 80067c4:	881b      	ldrh	r3, [r3, #0]
 80067c6:	461a      	mov	r2, r3
 80067c8:	8bfb      	ldrh	r3, [r7, #30]
 80067ca:	1ad3      	subs	r3, r2, r3
 80067cc:	f1a3 0208 	sub.w	r2, r3, #8
 80067d0:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 80067d2:	429a      	cmp	r2, r3
 80067d4:	f0c0 8099 	bcc.w	800690a <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 80067d8:	697b      	ldr	r3, [r7, #20]
 80067da:	881b      	ldrh	r3, [r3, #0]
 80067dc:	461a      	mov	r2, r3
 80067de:	8bfb      	ldrh	r3, [r7, #30]
 80067e0:	1ad3      	subs	r3, r2, r3
 80067e2:	f1a3 0208 	sub.w	r2, r3, #8
 80067e6:	8bbb      	ldrh	r3, [r7, #28]
 80067e8:	3314      	adds	r3, #20
 80067ea:	429a      	cmp	r2, r3
 80067ec:	d333      	bcc.n	8006856 <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 80067ee:	8bfa      	ldrh	r2, [r7, #30]
 80067f0:	8bbb      	ldrh	r3, [r7, #28]
 80067f2:	4413      	add	r3, r2
 80067f4:	b29b      	uxth	r3, r3
 80067f6:	3308      	adds	r3, #8
 80067f8:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 80067fa:	8a7b      	ldrh	r3, [r7, #18]
 80067fc:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8006800:	d106      	bne.n	8006810 <mem_malloc+0xb0>
 8006802:	4b4c      	ldr	r3, [pc, #304]	@ (8006934 <mem_malloc+0x1d4>)
 8006804:	f240 3287 	movw	r2, #903	@ 0x387
 8006808:	494b      	ldr	r1, [pc, #300]	@ (8006938 <mem_malloc+0x1d8>)
 800680a:	484c      	ldr	r0, [pc, #304]	@ (800693c <mem_malloc+0x1dc>)
 800680c:	f00a fdb8 	bl	8011380 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8006810:	8a7b      	ldrh	r3, [r7, #18]
 8006812:	4618      	mov	r0, r3
 8006814:	f7ff fd00 	bl	8006218 <ptr_to_mem>
 8006818:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	2200      	movs	r2, #0
 800681e:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8006820:	697b      	ldr	r3, [r7, #20]
 8006822:	881a      	ldrh	r2, [r3, #0]
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	8bfa      	ldrh	r2, [r7, #30]
 800682c:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800682e:	697b      	ldr	r3, [r7, #20]
 8006830:	8a7a      	ldrh	r2, [r7, #18]
 8006832:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8006834:	697b      	ldr	r3, [r7, #20]
 8006836:	2201      	movs	r2, #1
 8006838:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	881b      	ldrh	r3, [r3, #0]
 800683e:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8006842:	d00b      	beq.n	800685c <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	881b      	ldrh	r3, [r3, #0]
 8006848:	4618      	mov	r0, r3
 800684a:	f7ff fce5 	bl	8006218 <ptr_to_mem>
 800684e:	4602      	mov	r2, r0
 8006850:	8a7b      	ldrh	r3, [r7, #18]
 8006852:	8053      	strh	r3, [r2, #2]
 8006854:	e002      	b.n	800685c <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8006856:	697b      	ldr	r3, [r7, #20]
 8006858:	2201      	movs	r2, #1
 800685a:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800685c:	4b34      	ldr	r3, [pc, #208]	@ (8006930 <mem_malloc+0x1d0>)
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	697a      	ldr	r2, [r7, #20]
 8006862:	429a      	cmp	r2, r3
 8006864:	d127      	bne.n	80068b6 <mem_malloc+0x156>
          struct mem *cur = lfree;
 8006866:	4b32      	ldr	r3, [pc, #200]	@ (8006930 <mem_malloc+0x1d0>)
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800686c:	e005      	b.n	800687a <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800686e:	69bb      	ldr	r3, [r7, #24]
 8006870:	881b      	ldrh	r3, [r3, #0]
 8006872:	4618      	mov	r0, r3
 8006874:	f7ff fcd0 	bl	8006218 <ptr_to_mem>
 8006878:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800687a:	69bb      	ldr	r3, [r7, #24]
 800687c:	791b      	ldrb	r3, [r3, #4]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d004      	beq.n	800688c <mem_malloc+0x12c>
 8006882:	4b2f      	ldr	r3, [pc, #188]	@ (8006940 <mem_malloc+0x1e0>)
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	69ba      	ldr	r2, [r7, #24]
 8006888:	429a      	cmp	r2, r3
 800688a:	d1f0      	bne.n	800686e <mem_malloc+0x10e>
          }
          lfree = cur;
 800688c:	4a28      	ldr	r2, [pc, #160]	@ (8006930 <mem_malloc+0x1d0>)
 800688e:	69bb      	ldr	r3, [r7, #24]
 8006890:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8006892:	4b27      	ldr	r3, [pc, #156]	@ (8006930 <mem_malloc+0x1d0>)
 8006894:	681a      	ldr	r2, [r3, #0]
 8006896:	4b2a      	ldr	r3, [pc, #168]	@ (8006940 <mem_malloc+0x1e0>)
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	429a      	cmp	r2, r3
 800689c:	d00b      	beq.n	80068b6 <mem_malloc+0x156>
 800689e:	4b24      	ldr	r3, [pc, #144]	@ (8006930 <mem_malloc+0x1d0>)
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	791b      	ldrb	r3, [r3, #4]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d006      	beq.n	80068b6 <mem_malloc+0x156>
 80068a8:	4b22      	ldr	r3, [pc, #136]	@ (8006934 <mem_malloc+0x1d4>)
 80068aa:	f240 32b5 	movw	r2, #949	@ 0x3b5
 80068ae:	4925      	ldr	r1, [pc, #148]	@ (8006944 <mem_malloc+0x1e4>)
 80068b0:	4822      	ldr	r0, [pc, #136]	@ (800693c <mem_malloc+0x1dc>)
 80068b2:	f00a fd65 	bl	8011380 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 80068b6:	8bba      	ldrh	r2, [r7, #28]
 80068b8:	697b      	ldr	r3, [r7, #20]
 80068ba:	4413      	add	r3, r2
 80068bc:	3308      	adds	r3, #8
 80068be:	4a20      	ldr	r2, [pc, #128]	@ (8006940 <mem_malloc+0x1e0>)
 80068c0:	6812      	ldr	r2, [r2, #0]
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d906      	bls.n	80068d4 <mem_malloc+0x174>
 80068c6:	4b1b      	ldr	r3, [pc, #108]	@ (8006934 <mem_malloc+0x1d4>)
 80068c8:	f240 32b9 	movw	r2, #953	@ 0x3b9
 80068cc:	491e      	ldr	r1, [pc, #120]	@ (8006948 <mem_malloc+0x1e8>)
 80068ce:	481b      	ldr	r0, [pc, #108]	@ (800693c <mem_malloc+0x1dc>)
 80068d0:	f00a fd56 	bl	8011380 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 80068d4:	697b      	ldr	r3, [r7, #20]
 80068d6:	f003 0303 	and.w	r3, r3, #3
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d006      	beq.n	80068ec <mem_malloc+0x18c>
 80068de:	4b15      	ldr	r3, [pc, #84]	@ (8006934 <mem_malloc+0x1d4>)
 80068e0:	f240 32bb 	movw	r2, #955	@ 0x3bb
 80068e4:	4919      	ldr	r1, [pc, #100]	@ (800694c <mem_malloc+0x1ec>)
 80068e6:	4815      	ldr	r0, [pc, #84]	@ (800693c <mem_malloc+0x1dc>)
 80068e8:	f00a fd4a 	bl	8011380 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 80068ec:	697b      	ldr	r3, [r7, #20]
 80068ee:	f003 0303 	and.w	r3, r3, #3
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d006      	beq.n	8006904 <mem_malloc+0x1a4>
 80068f6:	4b0f      	ldr	r3, [pc, #60]	@ (8006934 <mem_malloc+0x1d4>)
 80068f8:	f240 32bd 	movw	r2, #957	@ 0x3bd
 80068fc:	4914      	ldr	r1, [pc, #80]	@ (8006950 <mem_malloc+0x1f0>)
 80068fe:	480f      	ldr	r0, [pc, #60]	@ (800693c <mem_malloc+0x1dc>)
 8006900:	f00a fd3e 	bl	8011380 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8006904:	697b      	ldr	r3, [r7, #20]
 8006906:	3308      	adds	r3, #8
 8006908:	e00e      	b.n	8006928 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 800690a:	8bfb      	ldrh	r3, [r7, #30]
 800690c:	4618      	mov	r0, r3
 800690e:	f7ff fc83 	bl	8006218 <ptr_to_mem>
 8006912:	4603      	mov	r3, r0
 8006914:	881b      	ldrh	r3, [r3, #0]
 8006916:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8006918:	8bfa      	ldrh	r2, [r7, #30]
 800691a:	8bbb      	ldrh	r3, [r7, #28]
 800691c:	f5c3 5320 	rsb	r3, r3, #10240	@ 0x2800
 8006920:	429a      	cmp	r2, r3
 8006922:	f4ff af44 	bcc.w	80067ae <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8006926:	2300      	movs	r3, #0
}
 8006928:	4618      	mov	r0, r3
 800692a:	3720      	adds	r7, #32
 800692c:	46bd      	mov	sp, r7
 800692e:	bd80      	pop	{r7, pc}
 8006930:	200078ec 	.word	0x200078ec
 8006934:	080126fc 	.word	0x080126fc
 8006938:	080128a4 	.word	0x080128a4
 800693c:	08012744 	.word	0x08012744
 8006940:	200078e8 	.word	0x200078e8
 8006944:	080128b8 	.word	0x080128b8
 8006948:	080128d4 	.word	0x080128d4
 800694c:	08012904 	.word	0x08012904
 8006950:	08012934 	.word	0x08012934

08006954 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8006954:	b480      	push	{r7}
 8006956:	b085      	sub	sp, #20
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	689b      	ldr	r3, [r3, #8]
 8006960:	2200      	movs	r2, #0
 8006962:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	685b      	ldr	r3, [r3, #4]
 8006968:	3303      	adds	r3, #3
 800696a:	f023 0303 	bic.w	r3, r3, #3
 800696e:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8006970:	2300      	movs	r3, #0
 8006972:	60fb      	str	r3, [r7, #12]
 8006974:	e011      	b.n	800699a <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	689b      	ldr	r3, [r3, #8]
 800697a:	681a      	ldr	r2, [r3, #0]
 800697c:	68bb      	ldr	r3, [r7, #8]
 800697e:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	689b      	ldr	r3, [r3, #8]
 8006984:	68ba      	ldr	r2, [r7, #8]
 8006986:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	881b      	ldrh	r3, [r3, #0]
 800698c:	461a      	mov	r2, r3
 800698e:	68bb      	ldr	r3, [r7, #8]
 8006990:	4413      	add	r3, r2
 8006992:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	3301      	adds	r3, #1
 8006998:	60fb      	str	r3, [r7, #12]
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	885b      	ldrh	r3, [r3, #2]
 800699e:	461a      	mov	r2, r3
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	4293      	cmp	r3, r2
 80069a4:	dbe7      	blt.n	8006976 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 80069a6:	bf00      	nop
 80069a8:	bf00      	nop
 80069aa:	3714      	adds	r7, #20
 80069ac:	46bd      	mov	sp, r7
 80069ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b2:	4770      	bx	lr

080069b4 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b082      	sub	sp, #8
 80069b8:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80069ba:	2300      	movs	r3, #0
 80069bc:	80fb      	strh	r3, [r7, #6]
 80069be:	e009      	b.n	80069d4 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 80069c0:	88fb      	ldrh	r3, [r7, #6]
 80069c2:	4a08      	ldr	r2, [pc, #32]	@ (80069e4 <memp_init+0x30>)
 80069c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80069c8:	4618      	mov	r0, r3
 80069ca:	f7ff ffc3 	bl	8006954 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80069ce:	88fb      	ldrh	r3, [r7, #6]
 80069d0:	3301      	adds	r3, #1
 80069d2:	80fb      	strh	r3, [r7, #6]
 80069d4:	88fb      	ldrh	r3, [r7, #6]
 80069d6:	2b08      	cmp	r3, #8
 80069d8:	d9f2      	bls.n	80069c0 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 80069da:	bf00      	nop
 80069dc:	bf00      	nop
 80069de:	3708      	adds	r7, #8
 80069e0:	46bd      	mov	sp, r7
 80069e2:	bd80      	pop	{r7, pc}
 80069e4:	08015118 	.word	0x08015118

080069e8 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b084      	sub	sp, #16
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	689b      	ldr	r3, [r3, #8]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d012      	beq.n	8006a24 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	689b      	ldr	r3, [r3, #8]
 8006a02:	68fa      	ldr	r2, [r7, #12]
 8006a04:	6812      	ldr	r2, [r2, #0]
 8006a06:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	f003 0303 	and.w	r3, r3, #3
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d006      	beq.n	8006a20 <do_memp_malloc_pool+0x38>
 8006a12:	4b07      	ldr	r3, [pc, #28]	@ (8006a30 <do_memp_malloc_pool+0x48>)
 8006a14:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8006a18:	4906      	ldr	r1, [pc, #24]	@ (8006a34 <do_memp_malloc_pool+0x4c>)
 8006a1a:	4807      	ldr	r0, [pc, #28]	@ (8006a38 <do_memp_malloc_pool+0x50>)
 8006a1c:	f00a fcb0 	bl	8011380 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	e000      	b.n	8006a26 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8006a24:	2300      	movs	r3, #0
}
 8006a26:	4618      	mov	r0, r3
 8006a28:	3710      	adds	r7, #16
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	bd80      	pop	{r7, pc}
 8006a2e:	bf00      	nop
 8006a30:	08012958 	.word	0x08012958
 8006a34:	08012988 	.word	0x08012988
 8006a38:	080129ac 	.word	0x080129ac

08006a3c <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b082      	sub	sp, #8
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d106      	bne.n	8006a58 <memp_malloc_pool+0x1c>
 8006a4a:	4b0a      	ldr	r3, [pc, #40]	@ (8006a74 <memp_malloc_pool+0x38>)
 8006a4c:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 8006a50:	4909      	ldr	r1, [pc, #36]	@ (8006a78 <memp_malloc_pool+0x3c>)
 8006a52:	480a      	ldr	r0, [pc, #40]	@ (8006a7c <memp_malloc_pool+0x40>)
 8006a54:	f00a fc94 	bl	8011380 <iprintf>
  if (desc == NULL) {
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d101      	bne.n	8006a62 <memp_malloc_pool+0x26>
    return NULL;
 8006a5e:	2300      	movs	r3, #0
 8006a60:	e003      	b.n	8006a6a <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8006a62:	6878      	ldr	r0, [r7, #4]
 8006a64:	f7ff ffc0 	bl	80069e8 <do_memp_malloc_pool>
 8006a68:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	3708      	adds	r7, #8
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	bd80      	pop	{r7, pc}
 8006a72:	bf00      	nop
 8006a74:	08012958 	.word	0x08012958
 8006a78:	080129d4 	.word	0x080129d4
 8006a7c:	080129ac 	.word	0x080129ac

08006a80 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b084      	sub	sp, #16
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	4603      	mov	r3, r0
 8006a88:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8006a8a:	79fb      	ldrb	r3, [r7, #7]
 8006a8c:	2b08      	cmp	r3, #8
 8006a8e:	d908      	bls.n	8006aa2 <memp_malloc+0x22>
 8006a90:	4b0a      	ldr	r3, [pc, #40]	@ (8006abc <memp_malloc+0x3c>)
 8006a92:	f240 1257 	movw	r2, #343	@ 0x157
 8006a96:	490a      	ldr	r1, [pc, #40]	@ (8006ac0 <memp_malloc+0x40>)
 8006a98:	480a      	ldr	r0, [pc, #40]	@ (8006ac4 <memp_malloc+0x44>)
 8006a9a:	f00a fc71 	bl	8011380 <iprintf>
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	e008      	b.n	8006ab4 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8006aa2:	79fb      	ldrb	r3, [r7, #7]
 8006aa4:	4a08      	ldr	r2, [pc, #32]	@ (8006ac8 <memp_malloc+0x48>)
 8006aa6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006aaa:	4618      	mov	r0, r3
 8006aac:	f7ff ff9c 	bl	80069e8 <do_memp_malloc_pool>
 8006ab0:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8006ab2:	68fb      	ldr	r3, [r7, #12]
}
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	3710      	adds	r7, #16
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	bd80      	pop	{r7, pc}
 8006abc:	08012958 	.word	0x08012958
 8006ac0:	080129e8 	.word	0x080129e8
 8006ac4:	080129ac 	.word	0x080129ac
 8006ac8:	08015118 	.word	0x08015118

08006acc <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b084      	sub	sp, #16
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
 8006ad4:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	f003 0303 	and.w	r3, r3, #3
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d006      	beq.n	8006aee <do_memp_free_pool+0x22>
 8006ae0:	4b0a      	ldr	r3, [pc, #40]	@ (8006b0c <do_memp_free_pool+0x40>)
 8006ae2:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 8006ae6:	490a      	ldr	r1, [pc, #40]	@ (8006b10 <do_memp_free_pool+0x44>)
 8006ae8:	480a      	ldr	r0, [pc, #40]	@ (8006b14 <do_memp_free_pool+0x48>)
 8006aea:	f00a fc49 	bl	8011380 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	689b      	ldr	r3, [r3, #8]
 8006af6:	681a      	ldr	r2, [r3, #0]
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	689b      	ldr	r3, [r3, #8]
 8006b00:	68fa      	ldr	r2, [r7, #12]
 8006b02:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8006b04:	bf00      	nop
 8006b06:	3710      	adds	r7, #16
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	bd80      	pop	{r7, pc}
 8006b0c:	08012958 	.word	0x08012958
 8006b10:	08012a08 	.word	0x08012a08
 8006b14:	080129ac 	.word	0x080129ac

08006b18 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b082      	sub	sp, #8
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
 8006b20:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d106      	bne.n	8006b36 <memp_free_pool+0x1e>
 8006b28:	4b0a      	ldr	r3, [pc, #40]	@ (8006b54 <memp_free_pool+0x3c>)
 8006b2a:	f240 1295 	movw	r2, #405	@ 0x195
 8006b2e:	490a      	ldr	r1, [pc, #40]	@ (8006b58 <memp_free_pool+0x40>)
 8006b30:	480a      	ldr	r0, [pc, #40]	@ (8006b5c <memp_free_pool+0x44>)
 8006b32:	f00a fc25 	bl	8011380 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d007      	beq.n	8006b4c <memp_free_pool+0x34>
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d004      	beq.n	8006b4c <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 8006b42:	6839      	ldr	r1, [r7, #0]
 8006b44:	6878      	ldr	r0, [r7, #4]
 8006b46:	f7ff ffc1 	bl	8006acc <do_memp_free_pool>
 8006b4a:	e000      	b.n	8006b4e <memp_free_pool+0x36>
    return;
 8006b4c:	bf00      	nop
}
 8006b4e:	3708      	adds	r7, #8
 8006b50:	46bd      	mov	sp, r7
 8006b52:	bd80      	pop	{r7, pc}
 8006b54:	08012958 	.word	0x08012958
 8006b58:	080129d4 	.word	0x080129d4
 8006b5c:	080129ac 	.word	0x080129ac

08006b60 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b082      	sub	sp, #8
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	4603      	mov	r3, r0
 8006b68:	6039      	str	r1, [r7, #0]
 8006b6a:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8006b6c:	79fb      	ldrb	r3, [r7, #7]
 8006b6e:	2b08      	cmp	r3, #8
 8006b70:	d907      	bls.n	8006b82 <memp_free+0x22>
 8006b72:	4b0c      	ldr	r3, [pc, #48]	@ (8006ba4 <memp_free+0x44>)
 8006b74:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 8006b78:	490b      	ldr	r1, [pc, #44]	@ (8006ba8 <memp_free+0x48>)
 8006b7a:	480c      	ldr	r0, [pc, #48]	@ (8006bac <memp_free+0x4c>)
 8006b7c:	f00a fc00 	bl	8011380 <iprintf>
 8006b80:	e00c      	b.n	8006b9c <memp_free+0x3c>

  if (mem == NULL) {
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d008      	beq.n	8006b9a <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8006b88:	79fb      	ldrb	r3, [r7, #7]
 8006b8a:	4a09      	ldr	r2, [pc, #36]	@ (8006bb0 <memp_free+0x50>)
 8006b8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b90:	6839      	ldr	r1, [r7, #0]
 8006b92:	4618      	mov	r0, r3
 8006b94:	f7ff ff9a 	bl	8006acc <do_memp_free_pool>
 8006b98:	e000      	b.n	8006b9c <memp_free+0x3c>
    return;
 8006b9a:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8006b9c:	3708      	adds	r7, #8
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	bd80      	pop	{r7, pc}
 8006ba2:	bf00      	nop
 8006ba4:	08012958 	.word	0x08012958
 8006ba8:	08012a28 	.word	0x08012a28
 8006bac:	080129ac 	.word	0x080129ac
 8006bb0:	08015118 	.word	0x08015118

08006bb4 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8006bb4:	b480      	push	{r7}
 8006bb6:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8006bb8:	bf00      	nop
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc0:	4770      	bx	lr
	...

08006bc4 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	b086      	sub	sp, #24
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	60f8      	str	r0, [r7, #12]
 8006bcc:	60b9      	str	r1, [r7, #8]
 8006bce:	607a      	str	r2, [r7, #4]
 8006bd0:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d108      	bne.n	8006bea <netif_add+0x26>
 8006bd8:	4b57      	ldr	r3, [pc, #348]	@ (8006d38 <netif_add+0x174>)
 8006bda:	f240 1227 	movw	r2, #295	@ 0x127
 8006bde:	4957      	ldr	r1, [pc, #348]	@ (8006d3c <netif_add+0x178>)
 8006be0:	4857      	ldr	r0, [pc, #348]	@ (8006d40 <netif_add+0x17c>)
 8006be2:	f00a fbcd 	bl	8011380 <iprintf>
 8006be6:	2300      	movs	r3, #0
 8006be8:	e0a2      	b.n	8006d30 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8006bea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d108      	bne.n	8006c02 <netif_add+0x3e>
 8006bf0:	4b51      	ldr	r3, [pc, #324]	@ (8006d38 <netif_add+0x174>)
 8006bf2:	f44f 7294 	mov.w	r2, #296	@ 0x128
 8006bf6:	4953      	ldr	r1, [pc, #332]	@ (8006d44 <netif_add+0x180>)
 8006bf8:	4851      	ldr	r0, [pc, #324]	@ (8006d40 <netif_add+0x17c>)
 8006bfa:	f00a fbc1 	bl	8011380 <iprintf>
 8006bfe:	2300      	movs	r3, #0
 8006c00:	e096      	b.n	8006d30 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8006c02:	68bb      	ldr	r3, [r7, #8]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d101      	bne.n	8006c0c <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8006c08:	4b4f      	ldr	r3, [pc, #316]	@ (8006d48 <netif_add+0x184>)
 8006c0a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d101      	bne.n	8006c16 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8006c12:	4b4d      	ldr	r3, [pc, #308]	@ (8006d48 <netif_add+0x184>)
 8006c14:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d101      	bne.n	8006c20 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8006c1c:	4b4a      	ldr	r3, [pc, #296]	@ (8006d48 <netif_add+0x184>)
 8006c1e:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	2200      	movs	r2, #0
 8006c24:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	2200      	movs	r2, #0
 8006c2a:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	2200      	movs	r2, #0
 8006c30:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	4a45      	ldr	r2, [pc, #276]	@ (8006d4c <netif_add+0x188>)
 8006c36:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	2200      	movs	r2, #0
 8006c42:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	2200      	movs	r2, #0
 8006c4a:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	6a3a      	ldr	r2, [r7, #32]
 8006c50:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8006c52:	4b3f      	ldr	r3, [pc, #252]	@ (8006d50 <netif_add+0x18c>)
 8006c54:	781a      	ldrb	r2, [r3, #0]
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006c60:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	687a      	ldr	r2, [r7, #4]
 8006c66:	68b9      	ldr	r1, [r7, #8]
 8006c68:	68f8      	ldr	r0, [r7, #12]
 8006c6a:	f000 f913 	bl	8006e94 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8006c6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c70:	68f8      	ldr	r0, [r7, #12]
 8006c72:	4798      	blx	r3
 8006c74:	4603      	mov	r3, r0
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d001      	beq.n	8006c7e <netif_add+0xba>
    return NULL;
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	e058      	b.n	8006d30 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006c84:	2bff      	cmp	r3, #255	@ 0xff
 8006c86:	d103      	bne.n	8006c90 <netif_add+0xcc>
        netif->num = 0;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 8006c90:	2300      	movs	r3, #0
 8006c92:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8006c94:	4b2f      	ldr	r3, [pc, #188]	@ (8006d54 <netif_add+0x190>)
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	617b      	str	r3, [r7, #20]
 8006c9a:	e02b      	b.n	8006cf4 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8006c9c:	697a      	ldr	r2, [r7, #20]
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	429a      	cmp	r2, r3
 8006ca2:	d106      	bne.n	8006cb2 <netif_add+0xee>
 8006ca4:	4b24      	ldr	r3, [pc, #144]	@ (8006d38 <netif_add+0x174>)
 8006ca6:	f240 128b 	movw	r2, #395	@ 0x18b
 8006caa:	492b      	ldr	r1, [pc, #172]	@ (8006d58 <netif_add+0x194>)
 8006cac:	4824      	ldr	r0, [pc, #144]	@ (8006d40 <netif_add+0x17c>)
 8006cae:	f00a fb67 	bl	8011380 <iprintf>
        num_netifs++;
 8006cb2:	693b      	ldr	r3, [r7, #16]
 8006cb4:	3301      	adds	r3, #1
 8006cb6:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8006cb8:	693b      	ldr	r3, [r7, #16]
 8006cba:	2bff      	cmp	r3, #255	@ 0xff
 8006cbc:	dd06      	ble.n	8006ccc <netif_add+0x108>
 8006cbe:	4b1e      	ldr	r3, [pc, #120]	@ (8006d38 <netif_add+0x174>)
 8006cc0:	f240 128d 	movw	r2, #397	@ 0x18d
 8006cc4:	4925      	ldr	r1, [pc, #148]	@ (8006d5c <netif_add+0x198>)
 8006cc6:	481e      	ldr	r0, [pc, #120]	@ (8006d40 <netif_add+0x17c>)
 8006cc8:	f00a fb5a 	bl	8011380 <iprintf>
        if (netif2->num == netif->num) {
 8006ccc:	697b      	ldr	r3, [r7, #20]
 8006cce:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006cd8:	429a      	cmp	r2, r3
 8006cda:	d108      	bne.n	8006cee <netif_add+0x12a>
          netif->num++;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006ce2:	3301      	adds	r3, #1
 8006ce4:	b2da      	uxtb	r2, r3
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 8006cec:	e005      	b.n	8006cfa <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8006cee:	697b      	ldr	r3, [r7, #20]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	617b      	str	r3, [r7, #20]
 8006cf4:	697b      	ldr	r3, [r7, #20]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d1d0      	bne.n	8006c9c <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8006cfa:	697b      	ldr	r3, [r7, #20]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d1be      	bne.n	8006c7e <netif_add+0xba>
  }
  if (netif->num == 254) {
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006d06:	2bfe      	cmp	r3, #254	@ 0xfe
 8006d08:	d103      	bne.n	8006d12 <netif_add+0x14e>
    netif_num = 0;
 8006d0a:	4b11      	ldr	r3, [pc, #68]	@ (8006d50 <netif_add+0x18c>)
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	701a      	strb	r2, [r3, #0]
 8006d10:	e006      	b.n	8006d20 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006d18:	3301      	adds	r3, #1
 8006d1a:	b2da      	uxtb	r2, r3
 8006d1c:	4b0c      	ldr	r3, [pc, #48]	@ (8006d50 <netif_add+0x18c>)
 8006d1e:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8006d20:	4b0c      	ldr	r3, [pc, #48]	@ (8006d54 <netif_add+0x190>)
 8006d22:	681a      	ldr	r2, [r3, #0]
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8006d28:	4a0a      	ldr	r2, [pc, #40]	@ (8006d54 <netif_add+0x190>)
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8006d2e:	68fb      	ldr	r3, [r7, #12]
}
 8006d30:	4618      	mov	r0, r3
 8006d32:	3718      	adds	r7, #24
 8006d34:	46bd      	mov	sp, r7
 8006d36:	bd80      	pop	{r7, pc}
 8006d38:	08012a44 	.word	0x08012a44
 8006d3c:	08012ad8 	.word	0x08012ad8
 8006d40:	08012a94 	.word	0x08012a94
 8006d44:	08012af4 	.word	0x08012af4
 8006d48:	0801517c 	.word	0x0801517c
 8006d4c:	0800716f 	.word	0x0800716f
 8006d50:	2000a7e4 	.word	0x2000a7e4
 8006d54:	2000a7dc 	.word	0x2000a7dc
 8006d58:	08012b18 	.word	0x08012b18
 8006d5c:	08012b2c 	.word	0x08012b2c

08006d60 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b082      	sub	sp, #8
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
 8006d68:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8006d6a:	6839      	ldr	r1, [r7, #0]
 8006d6c:	6878      	ldr	r0, [r7, #4]
 8006d6e:	f002 fe87 	bl	8009a80 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8006d72:	6839      	ldr	r1, [r7, #0]
 8006d74:	6878      	ldr	r0, [r7, #4]
 8006d76:	f007 ff0d 	bl	800eb94 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8006d7a:	bf00      	nop
 8006d7c:	3708      	adds	r7, #8
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	bd80      	pop	{r7, pc}
	...

08006d84 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8006d84:	b580      	push	{r7, lr}
 8006d86:	b086      	sub	sp, #24
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	60f8      	str	r0, [r7, #12]
 8006d8c:	60b9      	str	r1, [r7, #8]
 8006d8e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8006d90:	68bb      	ldr	r3, [r7, #8]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d106      	bne.n	8006da4 <netif_do_set_ipaddr+0x20>
 8006d96:	4b1d      	ldr	r3, [pc, #116]	@ (8006e0c <netif_do_set_ipaddr+0x88>)
 8006d98:	f240 12cb 	movw	r2, #459	@ 0x1cb
 8006d9c:	491c      	ldr	r1, [pc, #112]	@ (8006e10 <netif_do_set_ipaddr+0x8c>)
 8006d9e:	481d      	ldr	r0, [pc, #116]	@ (8006e14 <netif_do_set_ipaddr+0x90>)
 8006da0:	f00a faee 	bl	8011380 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d106      	bne.n	8006db8 <netif_do_set_ipaddr+0x34>
 8006daa:	4b18      	ldr	r3, [pc, #96]	@ (8006e0c <netif_do_set_ipaddr+0x88>)
 8006dac:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 8006db0:	4917      	ldr	r1, [pc, #92]	@ (8006e10 <netif_do_set_ipaddr+0x8c>)
 8006db2:	4818      	ldr	r0, [pc, #96]	@ (8006e14 <netif_do_set_ipaddr+0x90>)
 8006db4:	f00a fae4 	bl	8011380 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8006db8:	68bb      	ldr	r3, [r7, #8]
 8006dba:	681a      	ldr	r2, [r3, #0]
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	3304      	adds	r3, #4
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	429a      	cmp	r2, r3
 8006dc4:	d01c      	beq.n	8006e00 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8006dc6:	68bb      	ldr	r3, [r7, #8]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	3304      	adds	r3, #4
 8006dd0:	681a      	ldr	r2, [r3, #0]
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8006dd6:	f107 0314 	add.w	r3, r7, #20
 8006dda:	4619      	mov	r1, r3
 8006ddc:	6878      	ldr	r0, [r7, #4]
 8006dde:	f7ff ffbf 	bl	8006d60 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8006de2:	68bb      	ldr	r3, [r7, #8]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d002      	beq.n	8006dee <netif_do_set_ipaddr+0x6a>
 8006de8:	68bb      	ldr	r3, [r7, #8]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	e000      	b.n	8006df0 <netif_do_set_ipaddr+0x6c>
 8006dee:	2300      	movs	r3, #0
 8006df0:	68fa      	ldr	r2, [r7, #12]
 8006df2:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8006df4:	2101      	movs	r1, #1
 8006df6:	68f8      	ldr	r0, [r7, #12]
 8006df8:	f000 f8d2 	bl	8006fa0 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8006dfc:	2301      	movs	r3, #1
 8006dfe:	e000      	b.n	8006e02 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8006e00:	2300      	movs	r3, #0
}
 8006e02:	4618      	mov	r0, r3
 8006e04:	3718      	adds	r7, #24
 8006e06:	46bd      	mov	sp, r7
 8006e08:	bd80      	pop	{r7, pc}
 8006e0a:	bf00      	nop
 8006e0c:	08012a44 	.word	0x08012a44
 8006e10:	08012b5c 	.word	0x08012b5c
 8006e14:	08012a94 	.word	0x08012a94

08006e18 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8006e18:	b480      	push	{r7}
 8006e1a:	b085      	sub	sp, #20
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	60f8      	str	r0, [r7, #12]
 8006e20:	60b9      	str	r1, [r7, #8]
 8006e22:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8006e24:	68bb      	ldr	r3, [r7, #8]
 8006e26:	681a      	ldr	r2, [r3, #0]
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	3308      	adds	r3, #8
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	429a      	cmp	r2, r3
 8006e30:	d00a      	beq.n	8006e48 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8006e32:	68bb      	ldr	r3, [r7, #8]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d002      	beq.n	8006e3e <netif_do_set_netmask+0x26>
 8006e38:	68bb      	ldr	r3, [r7, #8]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	e000      	b.n	8006e40 <netif_do_set_netmask+0x28>
 8006e3e:	2300      	movs	r3, #0
 8006e40:	68fa      	ldr	r2, [r7, #12]
 8006e42:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8006e44:	2301      	movs	r3, #1
 8006e46:	e000      	b.n	8006e4a <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8006e48:	2300      	movs	r3, #0
}
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	3714      	adds	r7, #20
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e54:	4770      	bx	lr

08006e56 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8006e56:	b480      	push	{r7}
 8006e58:	b085      	sub	sp, #20
 8006e5a:	af00      	add	r7, sp, #0
 8006e5c:	60f8      	str	r0, [r7, #12]
 8006e5e:	60b9      	str	r1, [r7, #8]
 8006e60:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8006e62:	68bb      	ldr	r3, [r7, #8]
 8006e64:	681a      	ldr	r2, [r3, #0]
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	330c      	adds	r3, #12
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	429a      	cmp	r2, r3
 8006e6e:	d00a      	beq.n	8006e86 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8006e70:	68bb      	ldr	r3, [r7, #8]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d002      	beq.n	8006e7c <netif_do_set_gw+0x26>
 8006e76:	68bb      	ldr	r3, [r7, #8]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	e000      	b.n	8006e7e <netif_do_set_gw+0x28>
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	68fa      	ldr	r2, [r7, #12]
 8006e80:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8006e82:	2301      	movs	r3, #1
 8006e84:	e000      	b.n	8006e88 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8006e86:	2300      	movs	r3, #0
}
 8006e88:	4618      	mov	r0, r3
 8006e8a:	3714      	adds	r7, #20
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e92:	4770      	bx	lr

08006e94 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8006e94:	b580      	push	{r7, lr}
 8006e96:	b088      	sub	sp, #32
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	60f8      	str	r0, [r7, #12]
 8006e9c:	60b9      	str	r1, [r7, #8]
 8006e9e:	607a      	str	r2, [r7, #4]
 8006ea0:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8006eaa:	68bb      	ldr	r3, [r7, #8]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d101      	bne.n	8006eb4 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8006eb0:	4b1c      	ldr	r3, [pc, #112]	@ (8006f24 <netif_set_addr+0x90>)
 8006eb2:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d101      	bne.n	8006ebe <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8006eba:	4b1a      	ldr	r3, [pc, #104]	@ (8006f24 <netif_set_addr+0x90>)
 8006ebc:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d101      	bne.n	8006ec8 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8006ec4:	4b17      	ldr	r3, [pc, #92]	@ (8006f24 <netif_set_addr+0x90>)
 8006ec6:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8006ec8:	68bb      	ldr	r3, [r7, #8]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d003      	beq.n	8006ed6 <netif_set_addr+0x42>
 8006ece:	68bb      	ldr	r3, [r7, #8]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d101      	bne.n	8006eda <netif_set_addr+0x46>
 8006ed6:	2301      	movs	r3, #1
 8006ed8:	e000      	b.n	8006edc <netif_set_addr+0x48>
 8006eda:	2300      	movs	r3, #0
 8006edc:	617b      	str	r3, [r7, #20]
  if (remove) {
 8006ede:	697b      	ldr	r3, [r7, #20]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d006      	beq.n	8006ef2 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8006ee4:	f107 0310 	add.w	r3, r7, #16
 8006ee8:	461a      	mov	r2, r3
 8006eea:	68b9      	ldr	r1, [r7, #8]
 8006eec:	68f8      	ldr	r0, [r7, #12]
 8006eee:	f7ff ff49 	bl	8006d84 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8006ef2:	69fa      	ldr	r2, [r7, #28]
 8006ef4:	6879      	ldr	r1, [r7, #4]
 8006ef6:	68f8      	ldr	r0, [r7, #12]
 8006ef8:	f7ff ff8e 	bl	8006e18 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8006efc:	69ba      	ldr	r2, [r7, #24]
 8006efe:	6839      	ldr	r1, [r7, #0]
 8006f00:	68f8      	ldr	r0, [r7, #12]
 8006f02:	f7ff ffa8 	bl	8006e56 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8006f06:	697b      	ldr	r3, [r7, #20]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d106      	bne.n	8006f1a <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8006f0c:	f107 0310 	add.w	r3, r7, #16
 8006f10:	461a      	mov	r2, r3
 8006f12:	68b9      	ldr	r1, [r7, #8]
 8006f14:	68f8      	ldr	r0, [r7, #12]
 8006f16:	f7ff ff35 	bl	8006d84 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8006f1a:	bf00      	nop
 8006f1c:	3720      	adds	r7, #32
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	bd80      	pop	{r7, pc}
 8006f22:	bf00      	nop
 8006f24:	0801517c 	.word	0x0801517c

08006f28 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8006f28:	b480      	push	{r7}
 8006f2a:	b083      	sub	sp, #12
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8006f30:	4a04      	ldr	r2, [pc, #16]	@ (8006f44 <netif_set_default+0x1c>)
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8006f36:	bf00      	nop
 8006f38:	370c      	adds	r7, #12
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f40:	4770      	bx	lr
 8006f42:	bf00      	nop
 8006f44:	2000a7e0 	.word	0x2000a7e0

08006f48 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b082      	sub	sp, #8
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d107      	bne.n	8006f66 <netif_set_up+0x1e>
 8006f56:	4b0f      	ldr	r3, [pc, #60]	@ (8006f94 <netif_set_up+0x4c>)
 8006f58:	f44f 7254 	mov.w	r2, #848	@ 0x350
 8006f5c:	490e      	ldr	r1, [pc, #56]	@ (8006f98 <netif_set_up+0x50>)
 8006f5e:	480f      	ldr	r0, [pc, #60]	@ (8006f9c <netif_set_up+0x54>)
 8006f60:	f00a fa0e 	bl	8011380 <iprintf>
 8006f64:	e013      	b.n	8006f8e <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8006f6c:	f003 0301 	and.w	r3, r3, #1
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d10c      	bne.n	8006f8e <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8006f7a:	f043 0301 	orr.w	r3, r3, #1
 8006f7e:	b2da      	uxtb	r2, r3
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8006f86:	2103      	movs	r1, #3
 8006f88:	6878      	ldr	r0, [r7, #4]
 8006f8a:	f000 f809 	bl	8006fa0 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8006f8e:	3708      	adds	r7, #8
 8006f90:	46bd      	mov	sp, r7
 8006f92:	bd80      	pop	{r7, pc}
 8006f94:	08012a44 	.word	0x08012a44
 8006f98:	08012bcc 	.word	0x08012bcc
 8006f9c:	08012a94 	.word	0x08012a94

08006fa0 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	b082      	sub	sp, #8
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
 8006fa8:	460b      	mov	r3, r1
 8006faa:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d106      	bne.n	8006fc0 <netif_issue_reports+0x20>
 8006fb2:	4b18      	ldr	r3, [pc, #96]	@ (8007014 <netif_issue_reports+0x74>)
 8006fb4:	f240 326d 	movw	r2, #877	@ 0x36d
 8006fb8:	4917      	ldr	r1, [pc, #92]	@ (8007018 <netif_issue_reports+0x78>)
 8006fba:	4818      	ldr	r0, [pc, #96]	@ (800701c <netif_issue_reports+0x7c>)
 8006fbc:	f00a f9e0 	bl	8011380 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8006fc6:	f003 0304 	and.w	r3, r3, #4
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d01e      	beq.n	800700c <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8006fd4:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d017      	beq.n	800700c <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8006fdc:	78fb      	ldrb	r3, [r7, #3]
 8006fde:	f003 0301 	and.w	r3, r3, #1
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d013      	beq.n	800700e <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	3304      	adds	r3, #4
 8006fea:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d00e      	beq.n	800700e <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8006ff6:	f003 0308 	and.w	r3, r3, #8
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d007      	beq.n	800700e <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	3304      	adds	r3, #4
 8007002:	4619      	mov	r1, r3
 8007004:	6878      	ldr	r0, [r7, #4]
 8007006:	f008 fd2f 	bl	800fa68 <etharp_request>
 800700a:	e000      	b.n	800700e <netif_issue_reports+0x6e>
    return;
 800700c:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800700e:	3708      	adds	r7, #8
 8007010:	46bd      	mov	sp, r7
 8007012:	bd80      	pop	{r7, pc}
 8007014:	08012a44 	.word	0x08012a44
 8007018:	08012be8 	.word	0x08012be8
 800701c:	08012a94 	.word	0x08012a94

08007020 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8007020:	b580      	push	{r7, lr}
 8007022:	b082      	sub	sp, #8
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2b00      	cmp	r3, #0
 800702c:	d107      	bne.n	800703e <netif_set_down+0x1e>
 800702e:	4b12      	ldr	r3, [pc, #72]	@ (8007078 <netif_set_down+0x58>)
 8007030:	f240 329b 	movw	r2, #923	@ 0x39b
 8007034:	4911      	ldr	r1, [pc, #68]	@ (800707c <netif_set_down+0x5c>)
 8007036:	4812      	ldr	r0, [pc, #72]	@ (8007080 <netif_set_down+0x60>)
 8007038:	f00a f9a2 	bl	8011380 <iprintf>
 800703c:	e019      	b.n	8007072 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8007044:	f003 0301 	and.w	r3, r3, #1
 8007048:	2b00      	cmp	r3, #0
 800704a:	d012      	beq.n	8007072 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8007052:	f023 0301 	bic.w	r3, r3, #1
 8007056:	b2da      	uxtb	r2, r3
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8007064:	f003 0308 	and.w	r3, r3, #8
 8007068:	2b00      	cmp	r3, #0
 800706a:	d002      	beq.n	8007072 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800706c:	6878      	ldr	r0, [r7, #4]
 800706e:	f008 f8b9 	bl	800f1e4 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8007072:	3708      	adds	r7, #8
 8007074:	46bd      	mov	sp, r7
 8007076:	bd80      	pop	{r7, pc}
 8007078:	08012a44 	.word	0x08012a44
 800707c:	08012c0c 	.word	0x08012c0c
 8007080:	08012a94 	.word	0x08012a94

08007084 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8007084:	b580      	push	{r7, lr}
 8007086:	b082      	sub	sp, #8
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d107      	bne.n	80070a2 <netif_set_link_up+0x1e>
 8007092:	4b13      	ldr	r3, [pc, #76]	@ (80070e0 <netif_set_link_up+0x5c>)
 8007094:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 8007098:	4912      	ldr	r1, [pc, #72]	@ (80070e4 <netif_set_link_up+0x60>)
 800709a:	4813      	ldr	r0, [pc, #76]	@ (80070e8 <netif_set_link_up+0x64>)
 800709c:	f00a f970 	bl	8011380 <iprintf>
 80070a0:	e01b      	b.n	80070da <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80070a8:	f003 0304 	and.w	r3, r3, #4
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d114      	bne.n	80070da <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80070b6:	f043 0304 	orr.w	r3, r3, #4
 80070ba:	b2da      	uxtb	r2, r3
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80070c2:	2103      	movs	r1, #3
 80070c4:	6878      	ldr	r0, [r7, #4]
 80070c6:	f7ff ff6b 	bl	8006fa0 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	69db      	ldr	r3, [r3, #28]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d003      	beq.n	80070da <netif_set_link_up+0x56>
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	69db      	ldr	r3, [r3, #28]
 80070d6:	6878      	ldr	r0, [r7, #4]
 80070d8:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 80070da:	3708      	adds	r7, #8
 80070dc:	46bd      	mov	sp, r7
 80070de:	bd80      	pop	{r7, pc}
 80070e0:	08012a44 	.word	0x08012a44
 80070e4:	08012c2c 	.word	0x08012c2c
 80070e8:	08012a94 	.word	0x08012a94

080070ec <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 80070ec:	b580      	push	{r7, lr}
 80070ee:	b082      	sub	sp, #8
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d107      	bne.n	800710a <netif_set_link_down+0x1e>
 80070fa:	4b11      	ldr	r3, [pc, #68]	@ (8007140 <netif_set_link_down+0x54>)
 80070fc:	f240 4206 	movw	r2, #1030	@ 0x406
 8007100:	4910      	ldr	r1, [pc, #64]	@ (8007144 <netif_set_link_down+0x58>)
 8007102:	4811      	ldr	r0, [pc, #68]	@ (8007148 <netif_set_link_down+0x5c>)
 8007104:	f00a f93c 	bl	8011380 <iprintf>
 8007108:	e017      	b.n	800713a <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8007110:	f003 0304 	and.w	r3, r3, #4
 8007114:	2b00      	cmp	r3, #0
 8007116:	d010      	beq.n	800713a <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800711e:	f023 0304 	bic.w	r3, r3, #4
 8007122:	b2da      	uxtb	r2, r3
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	69db      	ldr	r3, [r3, #28]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d003      	beq.n	800713a <netif_set_link_down+0x4e>
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	69db      	ldr	r3, [r3, #28]
 8007136:	6878      	ldr	r0, [r7, #4]
 8007138:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800713a:	3708      	adds	r7, #8
 800713c:	46bd      	mov	sp, r7
 800713e:	bd80      	pop	{r7, pc}
 8007140:	08012a44 	.word	0x08012a44
 8007144:	08012c50 	.word	0x08012c50
 8007148:	08012a94 	.word	0x08012a94

0800714c <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800714c:	b480      	push	{r7}
 800714e:	b083      	sub	sp, #12
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
 8007154:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	2b00      	cmp	r3, #0
 800715a:	d002      	beq.n	8007162 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	683a      	ldr	r2, [r7, #0]
 8007160:	61da      	str	r2, [r3, #28]
  }
}
 8007162:	bf00      	nop
 8007164:	370c      	adds	r7, #12
 8007166:	46bd      	mov	sp, r7
 8007168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716c:	4770      	bx	lr

0800716e <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800716e:	b480      	push	{r7}
 8007170:	b085      	sub	sp, #20
 8007172:	af00      	add	r7, sp, #0
 8007174:	60f8      	str	r0, [r7, #12]
 8007176:	60b9      	str	r1, [r7, #8]
 8007178:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800717a:	f06f 030b 	mvn.w	r3, #11
}
 800717e:	4618      	mov	r0, r3
 8007180:	3714      	adds	r7, #20
 8007182:	46bd      	mov	sp, r7
 8007184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007188:	4770      	bx	lr
	...

0800718c <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800718c:	b480      	push	{r7}
 800718e:	b085      	sub	sp, #20
 8007190:	af00      	add	r7, sp, #0
 8007192:	4603      	mov	r3, r0
 8007194:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8007196:	79fb      	ldrb	r3, [r7, #7]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d013      	beq.n	80071c4 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800719c:	4b0d      	ldr	r3, [pc, #52]	@ (80071d4 <netif_get_by_index+0x48>)
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	60fb      	str	r3, [r7, #12]
 80071a2:	e00c      	b.n	80071be <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80071aa:	3301      	adds	r3, #1
 80071ac:	b2db      	uxtb	r3, r3
 80071ae:	79fa      	ldrb	r2, [r7, #7]
 80071b0:	429a      	cmp	r2, r3
 80071b2:	d101      	bne.n	80071b8 <netif_get_by_index+0x2c>
        return netif; /* found! */
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	e006      	b.n	80071c6 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	60fb      	str	r3, [r7, #12]
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d1ef      	bne.n	80071a4 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 80071c4:	2300      	movs	r3, #0
}
 80071c6:	4618      	mov	r0, r3
 80071c8:	3714      	adds	r7, #20
 80071ca:	46bd      	mov	sp, r7
 80071cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d0:	4770      	bx	lr
 80071d2:	bf00      	nop
 80071d4:	2000a7dc 	.word	0x2000a7dc

080071d8 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b082      	sub	sp, #8
 80071dc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 80071de:	4b0c      	ldr	r3, [pc, #48]	@ (8007210 <pbuf_free_ooseq+0x38>)
 80071e0:	2200      	movs	r2, #0
 80071e2:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80071e4:	4b0b      	ldr	r3, [pc, #44]	@ (8007214 <pbuf_free_ooseq+0x3c>)
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	607b      	str	r3, [r7, #4]
 80071ea:	e00a      	b.n	8007202 <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d003      	beq.n	80071fc <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 80071f4:	6878      	ldr	r0, [r7, #4]
 80071f6:	f002 fc81 	bl	8009afc <tcp_free_ooseq>
      return;
 80071fa:	e005      	b.n	8007208 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	68db      	ldr	r3, [r3, #12]
 8007200:	607b      	str	r3, [r7, #4]
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d1f1      	bne.n	80071ec <pbuf_free_ooseq+0x14>
    }
  }
}
 8007208:	3708      	adds	r7, #8
 800720a:	46bd      	mov	sp, r7
 800720c:	bd80      	pop	{r7, pc}
 800720e:	bf00      	nop
 8007210:	2000a7e5 	.word	0x2000a7e5
 8007214:	2000a7f4 	.word	0x2000a7f4

08007218 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8007218:	b480      	push	{r7}
 800721a:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 800721c:	4b03      	ldr	r3, [pc, #12]	@ (800722c <pbuf_pool_is_empty+0x14>)
 800721e:	2201      	movs	r2, #1
 8007220:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8007222:	bf00      	nop
 8007224:	46bd      	mov	sp, r7
 8007226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722a:	4770      	bx	lr
 800722c:	2000a7e5 	.word	0x2000a7e5

08007230 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8007230:	b480      	push	{r7}
 8007232:	b085      	sub	sp, #20
 8007234:	af00      	add	r7, sp, #0
 8007236:	60f8      	str	r0, [r7, #12]
 8007238:	60b9      	str	r1, [r7, #8]
 800723a:	4611      	mov	r1, r2
 800723c:	461a      	mov	r2, r3
 800723e:	460b      	mov	r3, r1
 8007240:	80fb      	strh	r3, [r7, #6]
 8007242:	4613      	mov	r3, r2
 8007244:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	2200      	movs	r2, #0
 800724a:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	68ba      	ldr	r2, [r7, #8]
 8007250:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	88fa      	ldrh	r2, [r7, #6]
 8007256:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	88ba      	ldrh	r2, [r7, #4]
 800725c:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800725e:	8b3b      	ldrh	r3, [r7, #24]
 8007260:	b2da      	uxtb	r2, r3
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	7f3a      	ldrb	r2, [r7, #28]
 800726a:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	2201      	movs	r2, #1
 8007270:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	2200      	movs	r2, #0
 8007276:	73da      	strb	r2, [r3, #15]
}
 8007278:	bf00      	nop
 800727a:	3714      	adds	r7, #20
 800727c:	46bd      	mov	sp, r7
 800727e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007282:	4770      	bx	lr

08007284 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8007284:	b580      	push	{r7, lr}
 8007286:	b08c      	sub	sp, #48	@ 0x30
 8007288:	af02      	add	r7, sp, #8
 800728a:	4603      	mov	r3, r0
 800728c:	71fb      	strb	r3, [r7, #7]
 800728e:	460b      	mov	r3, r1
 8007290:	80bb      	strh	r3, [r7, #4]
 8007292:	4613      	mov	r3, r2
 8007294:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8007296:	79fb      	ldrb	r3, [r7, #7]
 8007298:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800729a:	887b      	ldrh	r3, [r7, #2]
 800729c:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 80072a0:	d07f      	beq.n	80073a2 <pbuf_alloc+0x11e>
 80072a2:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 80072a6:	f300 80c8 	bgt.w	800743a <pbuf_alloc+0x1b6>
 80072aa:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 80072ae:	d010      	beq.n	80072d2 <pbuf_alloc+0x4e>
 80072b0:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 80072b4:	f300 80c1 	bgt.w	800743a <pbuf_alloc+0x1b6>
 80072b8:	2b01      	cmp	r3, #1
 80072ba:	d002      	beq.n	80072c2 <pbuf_alloc+0x3e>
 80072bc:	2b41      	cmp	r3, #65	@ 0x41
 80072be:	f040 80bc 	bne.w	800743a <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 80072c2:	887a      	ldrh	r2, [r7, #2]
 80072c4:	88bb      	ldrh	r3, [r7, #4]
 80072c6:	4619      	mov	r1, r3
 80072c8:	2000      	movs	r0, #0
 80072ca:	f000 f8d1 	bl	8007470 <pbuf_alloc_reference>
 80072ce:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 80072d0:	e0bd      	b.n	800744e <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 80072d2:	2300      	movs	r3, #0
 80072d4:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 80072d6:	2300      	movs	r3, #0
 80072d8:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 80072da:	88bb      	ldrh	r3, [r7, #4]
 80072dc:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 80072de:	2008      	movs	r0, #8
 80072e0:	f7ff fbce 	bl	8006a80 <memp_malloc>
 80072e4:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 80072e6:	693b      	ldr	r3, [r7, #16]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d109      	bne.n	8007300 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 80072ec:	f7ff ff94 	bl	8007218 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 80072f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d002      	beq.n	80072fc <pbuf_alloc+0x78>
            pbuf_free(p);
 80072f6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80072f8:	f000 faa8 	bl	800784c <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 80072fc:	2300      	movs	r3, #0
 80072fe:	e0a7      	b.n	8007450 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8007300:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007302:	3303      	adds	r3, #3
 8007304:	b29b      	uxth	r3, r3
 8007306:	f023 0303 	bic.w	r3, r3, #3
 800730a:	b29b      	uxth	r3, r3
 800730c:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 8007310:	b29b      	uxth	r3, r3
 8007312:	8b7a      	ldrh	r2, [r7, #26]
 8007314:	4293      	cmp	r3, r2
 8007316:	bf28      	it	cs
 8007318:	4613      	movcs	r3, r2
 800731a:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800731c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800731e:	3310      	adds	r3, #16
 8007320:	693a      	ldr	r2, [r7, #16]
 8007322:	4413      	add	r3, r2
 8007324:	3303      	adds	r3, #3
 8007326:	f023 0303 	bic.w	r3, r3, #3
 800732a:	4618      	mov	r0, r3
 800732c:	89f9      	ldrh	r1, [r7, #14]
 800732e:	8b7a      	ldrh	r2, [r7, #26]
 8007330:	2300      	movs	r3, #0
 8007332:	9301      	str	r3, [sp, #4]
 8007334:	887b      	ldrh	r3, [r7, #2]
 8007336:	9300      	str	r3, [sp, #0]
 8007338:	460b      	mov	r3, r1
 800733a:	4601      	mov	r1, r0
 800733c:	6938      	ldr	r0, [r7, #16]
 800733e:	f7ff ff77 	bl	8007230 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8007342:	693b      	ldr	r3, [r7, #16]
 8007344:	685b      	ldr	r3, [r3, #4]
 8007346:	f003 0303 	and.w	r3, r3, #3
 800734a:	2b00      	cmp	r3, #0
 800734c:	d006      	beq.n	800735c <pbuf_alloc+0xd8>
 800734e:	4b42      	ldr	r3, [pc, #264]	@ (8007458 <pbuf_alloc+0x1d4>)
 8007350:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007354:	4941      	ldr	r1, [pc, #260]	@ (800745c <pbuf_alloc+0x1d8>)
 8007356:	4842      	ldr	r0, [pc, #264]	@ (8007460 <pbuf_alloc+0x1dc>)
 8007358:	f00a f812 	bl	8011380 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800735c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800735e:	3303      	adds	r3, #3
 8007360:	f023 0303 	bic.w	r3, r3, #3
 8007364:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 8007368:	d106      	bne.n	8007378 <pbuf_alloc+0xf4>
 800736a:	4b3b      	ldr	r3, [pc, #236]	@ (8007458 <pbuf_alloc+0x1d4>)
 800736c:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8007370:	493c      	ldr	r1, [pc, #240]	@ (8007464 <pbuf_alloc+0x1e0>)
 8007372:	483b      	ldr	r0, [pc, #236]	@ (8007460 <pbuf_alloc+0x1dc>)
 8007374:	f00a f804 	bl	8011380 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8007378:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800737a:	2b00      	cmp	r3, #0
 800737c:	d102      	bne.n	8007384 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800737e:	693b      	ldr	r3, [r7, #16]
 8007380:	627b      	str	r3, [r7, #36]	@ 0x24
 8007382:	e002      	b.n	800738a <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8007384:	69fb      	ldr	r3, [r7, #28]
 8007386:	693a      	ldr	r2, [r7, #16]
 8007388:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800738a:	693b      	ldr	r3, [r7, #16]
 800738c:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800738e:	8b7a      	ldrh	r2, [r7, #26]
 8007390:	89fb      	ldrh	r3, [r7, #14]
 8007392:	1ad3      	subs	r3, r2, r3
 8007394:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8007396:	2300      	movs	r3, #0
 8007398:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 800739a:	8b7b      	ldrh	r3, [r7, #26]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d19e      	bne.n	80072de <pbuf_alloc+0x5a>
      break;
 80073a0:	e055      	b.n	800744e <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 80073a2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80073a4:	3303      	adds	r3, #3
 80073a6:	b29b      	uxth	r3, r3
 80073a8:	f023 0303 	bic.w	r3, r3, #3
 80073ac:	b29a      	uxth	r2, r3
 80073ae:	88bb      	ldrh	r3, [r7, #4]
 80073b0:	3303      	adds	r3, #3
 80073b2:	b29b      	uxth	r3, r3
 80073b4:	f023 0303 	bic.w	r3, r3, #3
 80073b8:	b29b      	uxth	r3, r3
 80073ba:	4413      	add	r3, r2
 80073bc:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 80073be:	8b3b      	ldrh	r3, [r7, #24]
 80073c0:	3310      	adds	r3, #16
 80073c2:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80073c4:	8b3a      	ldrh	r2, [r7, #24]
 80073c6:	88bb      	ldrh	r3, [r7, #4]
 80073c8:	3303      	adds	r3, #3
 80073ca:	f023 0303 	bic.w	r3, r3, #3
 80073ce:	429a      	cmp	r2, r3
 80073d0:	d306      	bcc.n	80073e0 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 80073d2:	8afa      	ldrh	r2, [r7, #22]
 80073d4:	88bb      	ldrh	r3, [r7, #4]
 80073d6:	3303      	adds	r3, #3
 80073d8:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80073dc:	429a      	cmp	r2, r3
 80073de:	d201      	bcs.n	80073e4 <pbuf_alloc+0x160>
        return NULL;
 80073e0:	2300      	movs	r3, #0
 80073e2:	e035      	b.n	8007450 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 80073e4:	8afb      	ldrh	r3, [r7, #22]
 80073e6:	4618      	mov	r0, r3
 80073e8:	f7ff f9ba 	bl	8006760 <mem_malloc>
 80073ec:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 80073ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d101      	bne.n	80073f8 <pbuf_alloc+0x174>
        return NULL;
 80073f4:	2300      	movs	r3, #0
 80073f6:	e02b      	b.n	8007450 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 80073f8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80073fa:	3310      	adds	r3, #16
 80073fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80073fe:	4413      	add	r3, r2
 8007400:	3303      	adds	r3, #3
 8007402:	f023 0303 	bic.w	r3, r3, #3
 8007406:	4618      	mov	r0, r3
 8007408:	88b9      	ldrh	r1, [r7, #4]
 800740a:	88ba      	ldrh	r2, [r7, #4]
 800740c:	2300      	movs	r3, #0
 800740e:	9301      	str	r3, [sp, #4]
 8007410:	887b      	ldrh	r3, [r7, #2]
 8007412:	9300      	str	r3, [sp, #0]
 8007414:	460b      	mov	r3, r1
 8007416:	4601      	mov	r1, r0
 8007418:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800741a:	f7ff ff09 	bl	8007230 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800741e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007420:	685b      	ldr	r3, [r3, #4]
 8007422:	f003 0303 	and.w	r3, r3, #3
 8007426:	2b00      	cmp	r3, #0
 8007428:	d010      	beq.n	800744c <pbuf_alloc+0x1c8>
 800742a:	4b0b      	ldr	r3, [pc, #44]	@ (8007458 <pbuf_alloc+0x1d4>)
 800742c:	f44f 7291 	mov.w	r2, #290	@ 0x122
 8007430:	490d      	ldr	r1, [pc, #52]	@ (8007468 <pbuf_alloc+0x1e4>)
 8007432:	480b      	ldr	r0, [pc, #44]	@ (8007460 <pbuf_alloc+0x1dc>)
 8007434:	f009 ffa4 	bl	8011380 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8007438:	e008      	b.n	800744c <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800743a:	4b07      	ldr	r3, [pc, #28]	@ (8007458 <pbuf_alloc+0x1d4>)
 800743c:	f240 1227 	movw	r2, #295	@ 0x127
 8007440:	490a      	ldr	r1, [pc, #40]	@ (800746c <pbuf_alloc+0x1e8>)
 8007442:	4807      	ldr	r0, [pc, #28]	@ (8007460 <pbuf_alloc+0x1dc>)
 8007444:	f009 ff9c 	bl	8011380 <iprintf>
      return NULL;
 8007448:	2300      	movs	r3, #0
 800744a:	e001      	b.n	8007450 <pbuf_alloc+0x1cc>
      break;
 800744c:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800744e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007450:	4618      	mov	r0, r3
 8007452:	3728      	adds	r7, #40	@ 0x28
 8007454:	46bd      	mov	sp, r7
 8007456:	bd80      	pop	{r7, pc}
 8007458:	08012c74 	.word	0x08012c74
 800745c:	08012ca4 	.word	0x08012ca4
 8007460:	08012cd4 	.word	0x08012cd4
 8007464:	08012cfc 	.word	0x08012cfc
 8007468:	08012d30 	.word	0x08012d30
 800746c:	08012d5c 	.word	0x08012d5c

08007470 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8007470:	b580      	push	{r7, lr}
 8007472:	b086      	sub	sp, #24
 8007474:	af02      	add	r7, sp, #8
 8007476:	6078      	str	r0, [r7, #4]
 8007478:	460b      	mov	r3, r1
 800747a:	807b      	strh	r3, [r7, #2]
 800747c:	4613      	mov	r3, r2
 800747e:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8007480:	883b      	ldrh	r3, [r7, #0]
 8007482:	2b41      	cmp	r3, #65	@ 0x41
 8007484:	d009      	beq.n	800749a <pbuf_alloc_reference+0x2a>
 8007486:	883b      	ldrh	r3, [r7, #0]
 8007488:	2b01      	cmp	r3, #1
 800748a:	d006      	beq.n	800749a <pbuf_alloc_reference+0x2a>
 800748c:	4b0f      	ldr	r3, [pc, #60]	@ (80074cc <pbuf_alloc_reference+0x5c>)
 800748e:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 8007492:	490f      	ldr	r1, [pc, #60]	@ (80074d0 <pbuf_alloc_reference+0x60>)
 8007494:	480f      	ldr	r0, [pc, #60]	@ (80074d4 <pbuf_alloc_reference+0x64>)
 8007496:	f009 ff73 	bl	8011380 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800749a:	2007      	movs	r0, #7
 800749c:	f7ff faf0 	bl	8006a80 <memp_malloc>
 80074a0:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d101      	bne.n	80074ac <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 80074a8:	2300      	movs	r3, #0
 80074aa:	e00b      	b.n	80074c4 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 80074ac:	8879      	ldrh	r1, [r7, #2]
 80074ae:	887a      	ldrh	r2, [r7, #2]
 80074b0:	2300      	movs	r3, #0
 80074b2:	9301      	str	r3, [sp, #4]
 80074b4:	883b      	ldrh	r3, [r7, #0]
 80074b6:	9300      	str	r3, [sp, #0]
 80074b8:	460b      	mov	r3, r1
 80074ba:	6879      	ldr	r1, [r7, #4]
 80074bc:	68f8      	ldr	r0, [r7, #12]
 80074be:	f7ff feb7 	bl	8007230 <pbuf_init_alloced_pbuf>
  return p;
 80074c2:	68fb      	ldr	r3, [r7, #12]
}
 80074c4:	4618      	mov	r0, r3
 80074c6:	3710      	adds	r7, #16
 80074c8:	46bd      	mov	sp, r7
 80074ca:	bd80      	pop	{r7, pc}
 80074cc:	08012c74 	.word	0x08012c74
 80074d0:	08012d78 	.word	0x08012d78
 80074d4:	08012cd4 	.word	0x08012cd4

080074d8 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 80074d8:	b580      	push	{r7, lr}
 80074da:	b088      	sub	sp, #32
 80074dc:	af02      	add	r7, sp, #8
 80074de:	607b      	str	r3, [r7, #4]
 80074e0:	4603      	mov	r3, r0
 80074e2:	73fb      	strb	r3, [r7, #15]
 80074e4:	460b      	mov	r3, r1
 80074e6:	81bb      	strh	r3, [r7, #12]
 80074e8:	4613      	mov	r3, r2
 80074ea:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 80074ec:	7bfb      	ldrb	r3, [r7, #15]
 80074ee:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 80074f0:	8a7b      	ldrh	r3, [r7, #18]
 80074f2:	3303      	adds	r3, #3
 80074f4:	f023 0203 	bic.w	r2, r3, #3
 80074f8:	89bb      	ldrh	r3, [r7, #12]
 80074fa:	441a      	add	r2, r3
 80074fc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80074fe:	429a      	cmp	r2, r3
 8007500:	d901      	bls.n	8007506 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8007502:	2300      	movs	r3, #0
 8007504:	e018      	b.n	8007538 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8007506:	6a3b      	ldr	r3, [r7, #32]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d007      	beq.n	800751c <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800750c:	8a7b      	ldrh	r3, [r7, #18]
 800750e:	3303      	adds	r3, #3
 8007510:	f023 0303 	bic.w	r3, r3, #3
 8007514:	6a3a      	ldr	r2, [r7, #32]
 8007516:	4413      	add	r3, r2
 8007518:	617b      	str	r3, [r7, #20]
 800751a:	e001      	b.n	8007520 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800751c:	2300      	movs	r3, #0
 800751e:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8007520:	6878      	ldr	r0, [r7, #4]
 8007522:	89b9      	ldrh	r1, [r7, #12]
 8007524:	89ba      	ldrh	r2, [r7, #12]
 8007526:	2302      	movs	r3, #2
 8007528:	9301      	str	r3, [sp, #4]
 800752a:	897b      	ldrh	r3, [r7, #10]
 800752c:	9300      	str	r3, [sp, #0]
 800752e:	460b      	mov	r3, r1
 8007530:	6979      	ldr	r1, [r7, #20]
 8007532:	f7ff fe7d 	bl	8007230 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8007536:	687b      	ldr	r3, [r7, #4]
}
 8007538:	4618      	mov	r0, r3
 800753a:	3718      	adds	r7, #24
 800753c:	46bd      	mov	sp, r7
 800753e:	bd80      	pop	{r7, pc}

08007540 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8007540:	b580      	push	{r7, lr}
 8007542:	b084      	sub	sp, #16
 8007544:	af00      	add	r7, sp, #0
 8007546:	6078      	str	r0, [r7, #4]
 8007548:	460b      	mov	r3, r1
 800754a:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d106      	bne.n	8007560 <pbuf_realloc+0x20>
 8007552:	4b3a      	ldr	r3, [pc, #232]	@ (800763c <pbuf_realloc+0xfc>)
 8007554:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 8007558:	4939      	ldr	r1, [pc, #228]	@ (8007640 <pbuf_realloc+0x100>)
 800755a:	483a      	ldr	r0, [pc, #232]	@ (8007644 <pbuf_realloc+0x104>)
 800755c:	f009 ff10 	bl	8011380 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	891b      	ldrh	r3, [r3, #8]
 8007564:	887a      	ldrh	r2, [r7, #2]
 8007566:	429a      	cmp	r2, r3
 8007568:	d263      	bcs.n	8007632 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	891a      	ldrh	r2, [r3, #8]
 800756e:	887b      	ldrh	r3, [r7, #2]
 8007570:	1ad3      	subs	r3, r2, r3
 8007572:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8007574:	887b      	ldrh	r3, [r7, #2]
 8007576:	817b      	strh	r3, [r7, #10]
  q = p;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800757c:	e018      	b.n	80075b0 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	895b      	ldrh	r3, [r3, #10]
 8007582:	897a      	ldrh	r2, [r7, #10]
 8007584:	1ad3      	subs	r3, r2, r3
 8007586:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	891a      	ldrh	r2, [r3, #8]
 800758c:	893b      	ldrh	r3, [r7, #8]
 800758e:	1ad3      	subs	r3, r2, r3
 8007590:	b29a      	uxth	r2, r3
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d106      	bne.n	80075b0 <pbuf_realloc+0x70>
 80075a2:	4b26      	ldr	r3, [pc, #152]	@ (800763c <pbuf_realloc+0xfc>)
 80075a4:	f240 12af 	movw	r2, #431	@ 0x1af
 80075a8:	4927      	ldr	r1, [pc, #156]	@ (8007648 <pbuf_realloc+0x108>)
 80075aa:	4826      	ldr	r0, [pc, #152]	@ (8007644 <pbuf_realloc+0x104>)
 80075ac:	f009 fee8 	bl	8011380 <iprintf>
  while (rem_len > q->len) {
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	895b      	ldrh	r3, [r3, #10]
 80075b4:	897a      	ldrh	r2, [r7, #10]
 80075b6:	429a      	cmp	r2, r3
 80075b8:	d8e1      	bhi.n	800757e <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	7b1b      	ldrb	r3, [r3, #12]
 80075be:	f003 030f 	and.w	r3, r3, #15
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d121      	bne.n	800760a <pbuf_realloc+0xca>
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	895b      	ldrh	r3, [r3, #10]
 80075ca:	897a      	ldrh	r2, [r7, #10]
 80075cc:	429a      	cmp	r2, r3
 80075ce:	d01c      	beq.n	800760a <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	7b5b      	ldrb	r3, [r3, #13]
 80075d4:	f003 0302 	and.w	r3, r3, #2
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d116      	bne.n	800760a <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	685a      	ldr	r2, [r3, #4]
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	1ad3      	subs	r3, r2, r3
 80075e4:	b29a      	uxth	r2, r3
 80075e6:	897b      	ldrh	r3, [r7, #10]
 80075e8:	4413      	add	r3, r2
 80075ea:	b29b      	uxth	r3, r3
 80075ec:	4619      	mov	r1, r3
 80075ee:	68f8      	ldr	r0, [r7, #12]
 80075f0:	f7fe ffba 	bl	8006568 <mem_trim>
 80075f4:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d106      	bne.n	800760a <pbuf_realloc+0xca>
 80075fc:	4b0f      	ldr	r3, [pc, #60]	@ (800763c <pbuf_realloc+0xfc>)
 80075fe:	f240 12bd 	movw	r2, #445	@ 0x1bd
 8007602:	4912      	ldr	r1, [pc, #72]	@ (800764c <pbuf_realloc+0x10c>)
 8007604:	480f      	ldr	r0, [pc, #60]	@ (8007644 <pbuf_realloc+0x104>)
 8007606:	f009 febb 	bl	8011380 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	897a      	ldrh	r2, [r7, #10]
 800760e:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	895a      	ldrh	r2, [r3, #10]
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	2b00      	cmp	r3, #0
 800761e:	d004      	beq.n	800762a <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	4618      	mov	r0, r3
 8007626:	f000 f911 	bl	800784c <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	2200      	movs	r2, #0
 800762e:	601a      	str	r2, [r3, #0]
 8007630:	e000      	b.n	8007634 <pbuf_realloc+0xf4>
    return;
 8007632:	bf00      	nop

}
 8007634:	3710      	adds	r7, #16
 8007636:	46bd      	mov	sp, r7
 8007638:	bd80      	pop	{r7, pc}
 800763a:	bf00      	nop
 800763c:	08012c74 	.word	0x08012c74
 8007640:	08012d8c 	.word	0x08012d8c
 8007644:	08012cd4 	.word	0x08012cd4
 8007648:	08012da4 	.word	0x08012da4
 800764c:	08012dbc 	.word	0x08012dbc

08007650 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8007650:	b580      	push	{r7, lr}
 8007652:	b086      	sub	sp, #24
 8007654:	af00      	add	r7, sp, #0
 8007656:	60f8      	str	r0, [r7, #12]
 8007658:	60b9      	str	r1, [r7, #8]
 800765a:	4613      	mov	r3, r2
 800765c:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d106      	bne.n	8007672 <pbuf_add_header_impl+0x22>
 8007664:	4b2b      	ldr	r3, [pc, #172]	@ (8007714 <pbuf_add_header_impl+0xc4>)
 8007666:	f240 12df 	movw	r2, #479	@ 0x1df
 800766a:	492b      	ldr	r1, [pc, #172]	@ (8007718 <pbuf_add_header_impl+0xc8>)
 800766c:	482b      	ldr	r0, [pc, #172]	@ (800771c <pbuf_add_header_impl+0xcc>)
 800766e:	f009 fe87 	bl	8011380 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d003      	beq.n	8007680 <pbuf_add_header_impl+0x30>
 8007678:	68bb      	ldr	r3, [r7, #8]
 800767a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800767e:	d301      	bcc.n	8007684 <pbuf_add_header_impl+0x34>
    return 1;
 8007680:	2301      	movs	r3, #1
 8007682:	e043      	b.n	800770c <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8007684:	68bb      	ldr	r3, [r7, #8]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d101      	bne.n	800768e <pbuf_add_header_impl+0x3e>
    return 0;
 800768a:	2300      	movs	r3, #0
 800768c:	e03e      	b.n	800770c <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800768e:	68bb      	ldr	r3, [r7, #8]
 8007690:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	891a      	ldrh	r2, [r3, #8]
 8007696:	8a7b      	ldrh	r3, [r7, #18]
 8007698:	4413      	add	r3, r2
 800769a:	b29b      	uxth	r3, r3
 800769c:	8a7a      	ldrh	r2, [r7, #18]
 800769e:	429a      	cmp	r2, r3
 80076a0:	d901      	bls.n	80076a6 <pbuf_add_header_impl+0x56>
    return 1;
 80076a2:	2301      	movs	r3, #1
 80076a4:	e032      	b.n	800770c <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	7b1b      	ldrb	r3, [r3, #12]
 80076aa:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 80076ac:	8a3b      	ldrh	r3, [r7, #16]
 80076ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d00c      	beq.n	80076d0 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	685a      	ldr	r2, [r3, #4]
 80076ba:	68bb      	ldr	r3, [r7, #8]
 80076bc:	425b      	negs	r3, r3
 80076be:	4413      	add	r3, r2
 80076c0:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	3310      	adds	r3, #16
 80076c6:	697a      	ldr	r2, [r7, #20]
 80076c8:	429a      	cmp	r2, r3
 80076ca:	d20d      	bcs.n	80076e8 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 80076cc:	2301      	movs	r3, #1
 80076ce:	e01d      	b.n	800770c <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 80076d0:	79fb      	ldrb	r3, [r7, #7]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d006      	beq.n	80076e4 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	685a      	ldr	r2, [r3, #4]
 80076da:	68bb      	ldr	r3, [r7, #8]
 80076dc:	425b      	negs	r3, r3
 80076de:	4413      	add	r3, r2
 80076e0:	617b      	str	r3, [r7, #20]
 80076e2:	e001      	b.n	80076e8 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 80076e4:	2301      	movs	r3, #1
 80076e6:	e011      	b.n	800770c <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	697a      	ldr	r2, [r7, #20]
 80076ec:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	895a      	ldrh	r2, [r3, #10]
 80076f2:	8a7b      	ldrh	r3, [r7, #18]
 80076f4:	4413      	add	r3, r2
 80076f6:	b29a      	uxth	r2, r3
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	891a      	ldrh	r2, [r3, #8]
 8007700:	8a7b      	ldrh	r3, [r7, #18]
 8007702:	4413      	add	r3, r2
 8007704:	b29a      	uxth	r2, r3
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	811a      	strh	r2, [r3, #8]


  return 0;
 800770a:	2300      	movs	r3, #0
}
 800770c:	4618      	mov	r0, r3
 800770e:	3718      	adds	r7, #24
 8007710:	46bd      	mov	sp, r7
 8007712:	bd80      	pop	{r7, pc}
 8007714:	08012c74 	.word	0x08012c74
 8007718:	08012dd8 	.word	0x08012dd8
 800771c:	08012cd4 	.word	0x08012cd4

08007720 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8007720:	b580      	push	{r7, lr}
 8007722:	b082      	sub	sp, #8
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
 8007728:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800772a:	2200      	movs	r2, #0
 800772c:	6839      	ldr	r1, [r7, #0]
 800772e:	6878      	ldr	r0, [r7, #4]
 8007730:	f7ff ff8e 	bl	8007650 <pbuf_add_header_impl>
 8007734:	4603      	mov	r3, r0
}
 8007736:	4618      	mov	r0, r3
 8007738:	3708      	adds	r7, #8
 800773a:	46bd      	mov	sp, r7
 800773c:	bd80      	pop	{r7, pc}
	...

08007740 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8007740:	b580      	push	{r7, lr}
 8007742:	b084      	sub	sp, #16
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
 8007748:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	2b00      	cmp	r3, #0
 800774e:	d106      	bne.n	800775e <pbuf_remove_header+0x1e>
 8007750:	4b20      	ldr	r3, [pc, #128]	@ (80077d4 <pbuf_remove_header+0x94>)
 8007752:	f240 224b 	movw	r2, #587	@ 0x24b
 8007756:	4920      	ldr	r1, [pc, #128]	@ (80077d8 <pbuf_remove_header+0x98>)
 8007758:	4820      	ldr	r0, [pc, #128]	@ (80077dc <pbuf_remove_header+0x9c>)
 800775a:	f009 fe11 	bl	8011380 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d003      	beq.n	800776c <pbuf_remove_header+0x2c>
 8007764:	683b      	ldr	r3, [r7, #0]
 8007766:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800776a:	d301      	bcc.n	8007770 <pbuf_remove_header+0x30>
    return 1;
 800776c:	2301      	movs	r3, #1
 800776e:	e02c      	b.n	80077ca <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8007770:	683b      	ldr	r3, [r7, #0]
 8007772:	2b00      	cmp	r3, #0
 8007774:	d101      	bne.n	800777a <pbuf_remove_header+0x3a>
    return 0;
 8007776:	2300      	movs	r3, #0
 8007778:	e027      	b.n	80077ca <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800777a:	683b      	ldr	r3, [r7, #0]
 800777c:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	895b      	ldrh	r3, [r3, #10]
 8007782:	89fa      	ldrh	r2, [r7, #14]
 8007784:	429a      	cmp	r2, r3
 8007786:	d908      	bls.n	800779a <pbuf_remove_header+0x5a>
 8007788:	4b12      	ldr	r3, [pc, #72]	@ (80077d4 <pbuf_remove_header+0x94>)
 800778a:	f240 2255 	movw	r2, #597	@ 0x255
 800778e:	4914      	ldr	r1, [pc, #80]	@ (80077e0 <pbuf_remove_header+0xa0>)
 8007790:	4812      	ldr	r0, [pc, #72]	@ (80077dc <pbuf_remove_header+0x9c>)
 8007792:	f009 fdf5 	bl	8011380 <iprintf>
 8007796:	2301      	movs	r3, #1
 8007798:	e017      	b.n	80077ca <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	685b      	ldr	r3, [r3, #4]
 800779e:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	685a      	ldr	r2, [r3, #4]
 80077a4:	683b      	ldr	r3, [r7, #0]
 80077a6:	441a      	add	r2, r3
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	895a      	ldrh	r2, [r3, #10]
 80077b0:	89fb      	ldrh	r3, [r7, #14]
 80077b2:	1ad3      	subs	r3, r2, r3
 80077b4:	b29a      	uxth	r2, r3
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	891a      	ldrh	r2, [r3, #8]
 80077be:	89fb      	ldrh	r3, [r7, #14]
 80077c0:	1ad3      	subs	r3, r2, r3
 80077c2:	b29a      	uxth	r2, r3
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 80077c8:	2300      	movs	r3, #0
}
 80077ca:	4618      	mov	r0, r3
 80077cc:	3710      	adds	r7, #16
 80077ce:	46bd      	mov	sp, r7
 80077d0:	bd80      	pop	{r7, pc}
 80077d2:	bf00      	nop
 80077d4:	08012c74 	.word	0x08012c74
 80077d8:	08012dd8 	.word	0x08012dd8
 80077dc:	08012cd4 	.word	0x08012cd4
 80077e0:	08012de4 	.word	0x08012de4

080077e4 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 80077e4:	b580      	push	{r7, lr}
 80077e6:	b082      	sub	sp, #8
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
 80077ec:	460b      	mov	r3, r1
 80077ee:	807b      	strh	r3, [r7, #2]
 80077f0:	4613      	mov	r3, r2
 80077f2:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 80077f4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	da08      	bge.n	800780e <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 80077fc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007800:	425b      	negs	r3, r3
 8007802:	4619      	mov	r1, r3
 8007804:	6878      	ldr	r0, [r7, #4]
 8007806:	f7ff ff9b 	bl	8007740 <pbuf_remove_header>
 800780a:	4603      	mov	r3, r0
 800780c:	e007      	b.n	800781e <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800780e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007812:	787a      	ldrb	r2, [r7, #1]
 8007814:	4619      	mov	r1, r3
 8007816:	6878      	ldr	r0, [r7, #4]
 8007818:	f7ff ff1a 	bl	8007650 <pbuf_add_header_impl>
 800781c:	4603      	mov	r3, r0
  }
}
 800781e:	4618      	mov	r0, r3
 8007820:	3708      	adds	r7, #8
 8007822:	46bd      	mov	sp, r7
 8007824:	bd80      	pop	{r7, pc}

08007826 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8007826:	b580      	push	{r7, lr}
 8007828:	b082      	sub	sp, #8
 800782a:	af00      	add	r7, sp, #0
 800782c:	6078      	str	r0, [r7, #4]
 800782e:	460b      	mov	r3, r1
 8007830:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8007832:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007836:	2201      	movs	r2, #1
 8007838:	4619      	mov	r1, r3
 800783a:	6878      	ldr	r0, [r7, #4]
 800783c:	f7ff ffd2 	bl	80077e4 <pbuf_header_impl>
 8007840:	4603      	mov	r3, r0
}
 8007842:	4618      	mov	r0, r3
 8007844:	3708      	adds	r7, #8
 8007846:	46bd      	mov	sp, r7
 8007848:	bd80      	pop	{r7, pc}
	...

0800784c <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800784c:	b580      	push	{r7, lr}
 800784e:	b086      	sub	sp, #24
 8007850:	af00      	add	r7, sp, #0
 8007852:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	2b00      	cmp	r3, #0
 8007858:	d10b      	bne.n	8007872 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d106      	bne.n	800786e <pbuf_free+0x22>
 8007860:	4b38      	ldr	r3, [pc, #224]	@ (8007944 <pbuf_free+0xf8>)
 8007862:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 8007866:	4938      	ldr	r1, [pc, #224]	@ (8007948 <pbuf_free+0xfc>)
 8007868:	4838      	ldr	r0, [pc, #224]	@ (800794c <pbuf_free+0x100>)
 800786a:	f009 fd89 	bl	8011380 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800786e:	2300      	movs	r3, #0
 8007870:	e063      	b.n	800793a <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8007872:	2300      	movs	r3, #0
 8007874:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8007876:	e05c      	b.n	8007932 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	7b9b      	ldrb	r3, [r3, #14]
 800787c:	2b00      	cmp	r3, #0
 800787e:	d106      	bne.n	800788e <pbuf_free+0x42>
 8007880:	4b30      	ldr	r3, [pc, #192]	@ (8007944 <pbuf_free+0xf8>)
 8007882:	f240 22f1 	movw	r2, #753	@ 0x2f1
 8007886:	4932      	ldr	r1, [pc, #200]	@ (8007950 <pbuf_free+0x104>)
 8007888:	4830      	ldr	r0, [pc, #192]	@ (800794c <pbuf_free+0x100>)
 800788a:	f009 fd79 	bl	8011380 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	7b9b      	ldrb	r3, [r3, #14]
 8007892:	3b01      	subs	r3, #1
 8007894:	b2da      	uxtb	r2, r3
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	739a      	strb	r2, [r3, #14]
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	7b9b      	ldrb	r3, [r3, #14]
 800789e:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 80078a0:	7dbb      	ldrb	r3, [r7, #22]
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d143      	bne.n	800792e <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	7b1b      	ldrb	r3, [r3, #12]
 80078b0:	f003 030f 	and.w	r3, r3, #15
 80078b4:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	7b5b      	ldrb	r3, [r3, #13]
 80078ba:	f003 0302 	and.w	r3, r3, #2
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d011      	beq.n	80078e6 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 80078c6:	68bb      	ldr	r3, [r7, #8]
 80078c8:	691b      	ldr	r3, [r3, #16]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d106      	bne.n	80078dc <pbuf_free+0x90>
 80078ce:	4b1d      	ldr	r3, [pc, #116]	@ (8007944 <pbuf_free+0xf8>)
 80078d0:	f240 22ff 	movw	r2, #767	@ 0x2ff
 80078d4:	491f      	ldr	r1, [pc, #124]	@ (8007954 <pbuf_free+0x108>)
 80078d6:	481d      	ldr	r0, [pc, #116]	@ (800794c <pbuf_free+0x100>)
 80078d8:	f009 fd52 	bl	8011380 <iprintf>
        pc->custom_free_function(p);
 80078dc:	68bb      	ldr	r3, [r7, #8]
 80078de:	691b      	ldr	r3, [r3, #16]
 80078e0:	6878      	ldr	r0, [r7, #4]
 80078e2:	4798      	blx	r3
 80078e4:	e01d      	b.n	8007922 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 80078e6:	7bfb      	ldrb	r3, [r7, #15]
 80078e8:	2b02      	cmp	r3, #2
 80078ea:	d104      	bne.n	80078f6 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 80078ec:	6879      	ldr	r1, [r7, #4]
 80078ee:	2008      	movs	r0, #8
 80078f0:	f7ff f936 	bl	8006b60 <memp_free>
 80078f4:	e015      	b.n	8007922 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 80078f6:	7bfb      	ldrb	r3, [r7, #15]
 80078f8:	2b01      	cmp	r3, #1
 80078fa:	d104      	bne.n	8007906 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 80078fc:	6879      	ldr	r1, [r7, #4]
 80078fe:	2007      	movs	r0, #7
 8007900:	f7ff f92e 	bl	8006b60 <memp_free>
 8007904:	e00d      	b.n	8007922 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8007906:	7bfb      	ldrb	r3, [r7, #15]
 8007908:	2b00      	cmp	r3, #0
 800790a:	d103      	bne.n	8007914 <pbuf_free+0xc8>
          mem_free(p);
 800790c:	6878      	ldr	r0, [r7, #4]
 800790e:	f7fe fdc1 	bl	8006494 <mem_free>
 8007912:	e006      	b.n	8007922 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8007914:	4b0b      	ldr	r3, [pc, #44]	@ (8007944 <pbuf_free+0xf8>)
 8007916:	f240 320f 	movw	r2, #783	@ 0x30f
 800791a:	490f      	ldr	r1, [pc, #60]	@ (8007958 <pbuf_free+0x10c>)
 800791c:	480b      	ldr	r0, [pc, #44]	@ (800794c <pbuf_free+0x100>)
 800791e:	f009 fd2f 	bl	8011380 <iprintf>
        }
      }
      count++;
 8007922:	7dfb      	ldrb	r3, [r7, #23]
 8007924:	3301      	adds	r3, #1
 8007926:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8007928:	693b      	ldr	r3, [r7, #16]
 800792a:	607b      	str	r3, [r7, #4]
 800792c:	e001      	b.n	8007932 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800792e:	2300      	movs	r3, #0
 8007930:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	2b00      	cmp	r3, #0
 8007936:	d19f      	bne.n	8007878 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8007938:	7dfb      	ldrb	r3, [r7, #23]
}
 800793a:	4618      	mov	r0, r3
 800793c:	3718      	adds	r7, #24
 800793e:	46bd      	mov	sp, r7
 8007940:	bd80      	pop	{r7, pc}
 8007942:	bf00      	nop
 8007944:	08012c74 	.word	0x08012c74
 8007948:	08012dd8 	.word	0x08012dd8
 800794c:	08012cd4 	.word	0x08012cd4
 8007950:	08012e04 	.word	0x08012e04
 8007954:	08012e1c 	.word	0x08012e1c
 8007958:	08012e40 	.word	0x08012e40

0800795c <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800795c:	b480      	push	{r7}
 800795e:	b085      	sub	sp, #20
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8007964:	2300      	movs	r3, #0
 8007966:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8007968:	e005      	b.n	8007976 <pbuf_clen+0x1a>
    ++len;
 800796a:	89fb      	ldrh	r3, [r7, #14]
 800796c:	3301      	adds	r3, #1
 800796e:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	2b00      	cmp	r3, #0
 800797a:	d1f6      	bne.n	800796a <pbuf_clen+0xe>
  }
  return len;
 800797c:	89fb      	ldrh	r3, [r7, #14]
}
 800797e:	4618      	mov	r0, r3
 8007980:	3714      	adds	r7, #20
 8007982:	46bd      	mov	sp, r7
 8007984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007988:	4770      	bx	lr
	...

0800798c <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800798c:	b580      	push	{r7, lr}
 800798e:	b082      	sub	sp, #8
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d010      	beq.n	80079bc <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	7b9b      	ldrb	r3, [r3, #14]
 800799e:	3301      	adds	r3, #1
 80079a0:	b2da      	uxtb	r2, r3
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	7b9b      	ldrb	r3, [r3, #14]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d106      	bne.n	80079bc <pbuf_ref+0x30>
 80079ae:	4b05      	ldr	r3, [pc, #20]	@ (80079c4 <pbuf_ref+0x38>)
 80079b0:	f240 3242 	movw	r2, #834	@ 0x342
 80079b4:	4904      	ldr	r1, [pc, #16]	@ (80079c8 <pbuf_ref+0x3c>)
 80079b6:	4805      	ldr	r0, [pc, #20]	@ (80079cc <pbuf_ref+0x40>)
 80079b8:	f009 fce2 	bl	8011380 <iprintf>
  }
}
 80079bc:	bf00      	nop
 80079be:	3708      	adds	r7, #8
 80079c0:	46bd      	mov	sp, r7
 80079c2:	bd80      	pop	{r7, pc}
 80079c4:	08012c74 	.word	0x08012c74
 80079c8:	08012e54 	.word	0x08012e54
 80079cc:	08012cd4 	.word	0x08012cd4

080079d0 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b084      	sub	sp, #16
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]
 80079d8:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d002      	beq.n	80079e6 <pbuf_cat+0x16>
 80079e0:	683b      	ldr	r3, [r7, #0]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d107      	bne.n	80079f6 <pbuf_cat+0x26>
 80079e6:	4b20      	ldr	r3, [pc, #128]	@ (8007a68 <pbuf_cat+0x98>)
 80079e8:	f240 3259 	movw	r2, #857	@ 0x359
 80079ec:	491f      	ldr	r1, [pc, #124]	@ (8007a6c <pbuf_cat+0x9c>)
 80079ee:	4820      	ldr	r0, [pc, #128]	@ (8007a70 <pbuf_cat+0xa0>)
 80079f0:	f009 fcc6 	bl	8011380 <iprintf>
 80079f4:	e034      	b.n	8007a60 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	60fb      	str	r3, [r7, #12]
 80079fa:	e00a      	b.n	8007a12 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	891a      	ldrh	r2, [r3, #8]
 8007a00:	683b      	ldr	r3, [r7, #0]
 8007a02:	891b      	ldrh	r3, [r3, #8]
 8007a04:	4413      	add	r3, r2
 8007a06:	b29a      	uxth	r2, r3
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	60fb      	str	r3, [r7, #12]
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d1f0      	bne.n	80079fc <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	891a      	ldrh	r2, [r3, #8]
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	895b      	ldrh	r3, [r3, #10]
 8007a22:	429a      	cmp	r2, r3
 8007a24:	d006      	beq.n	8007a34 <pbuf_cat+0x64>
 8007a26:	4b10      	ldr	r3, [pc, #64]	@ (8007a68 <pbuf_cat+0x98>)
 8007a28:	f240 3262 	movw	r2, #866	@ 0x362
 8007a2c:	4911      	ldr	r1, [pc, #68]	@ (8007a74 <pbuf_cat+0xa4>)
 8007a2e:	4810      	ldr	r0, [pc, #64]	@ (8007a70 <pbuf_cat+0xa0>)
 8007a30:	f009 fca6 	bl	8011380 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d006      	beq.n	8007a4a <pbuf_cat+0x7a>
 8007a3c:	4b0a      	ldr	r3, [pc, #40]	@ (8007a68 <pbuf_cat+0x98>)
 8007a3e:	f240 3263 	movw	r2, #867	@ 0x363
 8007a42:	490d      	ldr	r1, [pc, #52]	@ (8007a78 <pbuf_cat+0xa8>)
 8007a44:	480a      	ldr	r0, [pc, #40]	@ (8007a70 <pbuf_cat+0xa0>)
 8007a46:	f009 fc9b 	bl	8011380 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	891a      	ldrh	r2, [r3, #8]
 8007a4e:	683b      	ldr	r3, [r7, #0]
 8007a50:	891b      	ldrh	r3, [r3, #8]
 8007a52:	4413      	add	r3, r2
 8007a54:	b29a      	uxth	r2, r3
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	683a      	ldr	r2, [r7, #0]
 8007a5e:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8007a60:	3710      	adds	r7, #16
 8007a62:	46bd      	mov	sp, r7
 8007a64:	bd80      	pop	{r7, pc}
 8007a66:	bf00      	nop
 8007a68:	08012c74 	.word	0x08012c74
 8007a6c:	08012e68 	.word	0x08012e68
 8007a70:	08012cd4 	.word	0x08012cd4
 8007a74:	08012ea0 	.word	0x08012ea0
 8007a78:	08012ed0 	.word	0x08012ed0

08007a7c <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b082      	sub	sp, #8
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
 8007a84:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 8007a86:	6839      	ldr	r1, [r7, #0]
 8007a88:	6878      	ldr	r0, [r7, #4]
 8007a8a:	f7ff ffa1 	bl	80079d0 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8007a8e:	6838      	ldr	r0, [r7, #0]
 8007a90:	f7ff ff7c 	bl	800798c <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8007a94:	bf00      	nop
 8007a96:	3708      	adds	r7, #8
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	bd80      	pop	{r7, pc}

08007a9c <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8007a9c:	b580      	push	{r7, lr}
 8007a9e:	b086      	sub	sp, #24
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]
 8007aa4:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	617b      	str	r3, [r7, #20]
 8007aaa:	2300      	movs	r3, #0
 8007aac:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d008      	beq.n	8007ac6 <pbuf_copy+0x2a>
 8007ab4:	683b      	ldr	r3, [r7, #0]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d005      	beq.n	8007ac6 <pbuf_copy+0x2a>
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	891a      	ldrh	r2, [r3, #8]
 8007abe:	683b      	ldr	r3, [r7, #0]
 8007ac0:	891b      	ldrh	r3, [r3, #8]
 8007ac2:	429a      	cmp	r2, r3
 8007ac4:	d209      	bcs.n	8007ada <pbuf_copy+0x3e>
 8007ac6:	4b57      	ldr	r3, [pc, #348]	@ (8007c24 <pbuf_copy+0x188>)
 8007ac8:	f240 32c9 	movw	r2, #969	@ 0x3c9
 8007acc:	4956      	ldr	r1, [pc, #344]	@ (8007c28 <pbuf_copy+0x18c>)
 8007ace:	4857      	ldr	r0, [pc, #348]	@ (8007c2c <pbuf_copy+0x190>)
 8007ad0:	f009 fc56 	bl	8011380 <iprintf>
 8007ad4:	f06f 030f 	mvn.w	r3, #15
 8007ad8:	e09f      	b.n	8007c1a <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	895b      	ldrh	r3, [r3, #10]
 8007ade:	461a      	mov	r2, r3
 8007ae0:	697b      	ldr	r3, [r7, #20]
 8007ae2:	1ad2      	subs	r2, r2, r3
 8007ae4:	683b      	ldr	r3, [r7, #0]
 8007ae6:	895b      	ldrh	r3, [r3, #10]
 8007ae8:	4619      	mov	r1, r3
 8007aea:	693b      	ldr	r3, [r7, #16]
 8007aec:	1acb      	subs	r3, r1, r3
 8007aee:	429a      	cmp	r2, r3
 8007af0:	d306      	bcc.n	8007b00 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8007af2:	683b      	ldr	r3, [r7, #0]
 8007af4:	895b      	ldrh	r3, [r3, #10]
 8007af6:	461a      	mov	r2, r3
 8007af8:	693b      	ldr	r3, [r7, #16]
 8007afa:	1ad3      	subs	r3, r2, r3
 8007afc:	60fb      	str	r3, [r7, #12]
 8007afe:	e005      	b.n	8007b0c <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	895b      	ldrh	r3, [r3, #10]
 8007b04:	461a      	mov	r2, r3
 8007b06:	697b      	ldr	r3, [r7, #20]
 8007b08:	1ad3      	subs	r3, r2, r3
 8007b0a:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	685a      	ldr	r2, [r3, #4]
 8007b10:	697b      	ldr	r3, [r7, #20]
 8007b12:	18d0      	adds	r0, r2, r3
 8007b14:	683b      	ldr	r3, [r7, #0]
 8007b16:	685a      	ldr	r2, [r3, #4]
 8007b18:	693b      	ldr	r3, [r7, #16]
 8007b1a:	4413      	add	r3, r2
 8007b1c:	68fa      	ldr	r2, [r7, #12]
 8007b1e:	4619      	mov	r1, r3
 8007b20:	f009 fd89 	bl	8011636 <memcpy>
    offset_to += len;
 8007b24:	697a      	ldr	r2, [r7, #20]
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	4413      	add	r3, r2
 8007b2a:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8007b2c:	693a      	ldr	r2, [r7, #16]
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	4413      	add	r3, r2
 8007b32:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	895b      	ldrh	r3, [r3, #10]
 8007b38:	461a      	mov	r2, r3
 8007b3a:	697b      	ldr	r3, [r7, #20]
 8007b3c:	4293      	cmp	r3, r2
 8007b3e:	d906      	bls.n	8007b4e <pbuf_copy+0xb2>
 8007b40:	4b38      	ldr	r3, [pc, #224]	@ (8007c24 <pbuf_copy+0x188>)
 8007b42:	f240 32d9 	movw	r2, #985	@ 0x3d9
 8007b46:	493a      	ldr	r1, [pc, #232]	@ (8007c30 <pbuf_copy+0x194>)
 8007b48:	4838      	ldr	r0, [pc, #224]	@ (8007c2c <pbuf_copy+0x190>)
 8007b4a:	f009 fc19 	bl	8011380 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8007b4e:	683b      	ldr	r3, [r7, #0]
 8007b50:	895b      	ldrh	r3, [r3, #10]
 8007b52:	461a      	mov	r2, r3
 8007b54:	693b      	ldr	r3, [r7, #16]
 8007b56:	4293      	cmp	r3, r2
 8007b58:	d906      	bls.n	8007b68 <pbuf_copy+0xcc>
 8007b5a:	4b32      	ldr	r3, [pc, #200]	@ (8007c24 <pbuf_copy+0x188>)
 8007b5c:	f240 32da 	movw	r2, #986	@ 0x3da
 8007b60:	4934      	ldr	r1, [pc, #208]	@ (8007c34 <pbuf_copy+0x198>)
 8007b62:	4832      	ldr	r0, [pc, #200]	@ (8007c2c <pbuf_copy+0x190>)
 8007b64:	f009 fc0c 	bl	8011380 <iprintf>
    if (offset_from >= p_from->len) {
 8007b68:	683b      	ldr	r3, [r7, #0]
 8007b6a:	895b      	ldrh	r3, [r3, #10]
 8007b6c:	461a      	mov	r2, r3
 8007b6e:	693b      	ldr	r3, [r7, #16]
 8007b70:	4293      	cmp	r3, r2
 8007b72:	d304      	bcc.n	8007b7e <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8007b74:	2300      	movs	r3, #0
 8007b76:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8007b78:	683b      	ldr	r3, [r7, #0]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	895b      	ldrh	r3, [r3, #10]
 8007b82:	461a      	mov	r2, r3
 8007b84:	697b      	ldr	r3, [r7, #20]
 8007b86:	4293      	cmp	r3, r2
 8007b88:	d114      	bne.n	8007bb4 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d10c      	bne.n	8007bb4 <pbuf_copy+0x118>
 8007b9a:	683b      	ldr	r3, [r7, #0]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d009      	beq.n	8007bb4 <pbuf_copy+0x118>
 8007ba0:	4b20      	ldr	r3, [pc, #128]	@ (8007c24 <pbuf_copy+0x188>)
 8007ba2:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 8007ba6:	4924      	ldr	r1, [pc, #144]	@ (8007c38 <pbuf_copy+0x19c>)
 8007ba8:	4820      	ldr	r0, [pc, #128]	@ (8007c2c <pbuf_copy+0x190>)
 8007baa:	f009 fbe9 	bl	8011380 <iprintf>
 8007bae:	f06f 030f 	mvn.w	r3, #15
 8007bb2:	e032      	b.n	8007c1a <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8007bb4:	683b      	ldr	r3, [r7, #0]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d013      	beq.n	8007be2 <pbuf_copy+0x146>
 8007bba:	683b      	ldr	r3, [r7, #0]
 8007bbc:	895a      	ldrh	r2, [r3, #10]
 8007bbe:	683b      	ldr	r3, [r7, #0]
 8007bc0:	891b      	ldrh	r3, [r3, #8]
 8007bc2:	429a      	cmp	r2, r3
 8007bc4:	d10d      	bne.n	8007be2 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8007bc6:	683b      	ldr	r3, [r7, #0]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d009      	beq.n	8007be2 <pbuf_copy+0x146>
 8007bce:	4b15      	ldr	r3, [pc, #84]	@ (8007c24 <pbuf_copy+0x188>)
 8007bd0:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 8007bd4:	4919      	ldr	r1, [pc, #100]	@ (8007c3c <pbuf_copy+0x1a0>)
 8007bd6:	4815      	ldr	r0, [pc, #84]	@ (8007c2c <pbuf_copy+0x190>)
 8007bd8:	f009 fbd2 	bl	8011380 <iprintf>
 8007bdc:	f06f 0305 	mvn.w	r3, #5
 8007be0:	e01b      	b.n	8007c1a <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d013      	beq.n	8007c10 <pbuf_copy+0x174>
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	895a      	ldrh	r2, [r3, #10]
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	891b      	ldrh	r3, [r3, #8]
 8007bf0:	429a      	cmp	r2, r3
 8007bf2:	d10d      	bne.n	8007c10 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d009      	beq.n	8007c10 <pbuf_copy+0x174>
 8007bfc:	4b09      	ldr	r3, [pc, #36]	@ (8007c24 <pbuf_copy+0x188>)
 8007bfe:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 8007c02:	490e      	ldr	r1, [pc, #56]	@ (8007c3c <pbuf_copy+0x1a0>)
 8007c04:	4809      	ldr	r0, [pc, #36]	@ (8007c2c <pbuf_copy+0x190>)
 8007c06:	f009 fbbb 	bl	8011380 <iprintf>
 8007c0a:	f06f 0305 	mvn.w	r3, #5
 8007c0e:	e004      	b.n	8007c1a <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8007c10:	683b      	ldr	r3, [r7, #0]
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	f47f af61 	bne.w	8007ada <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8007c18:	2300      	movs	r3, #0
}
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	3718      	adds	r7, #24
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	bd80      	pop	{r7, pc}
 8007c22:	bf00      	nop
 8007c24:	08012c74 	.word	0x08012c74
 8007c28:	08012f1c 	.word	0x08012f1c
 8007c2c:	08012cd4 	.word	0x08012cd4
 8007c30:	08012f4c 	.word	0x08012f4c
 8007c34:	08012f64 	.word	0x08012f64
 8007c38:	08012f80 	.word	0x08012f80
 8007c3c:	08012f90 	.word	0x08012f90

08007c40 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8007c40:	b580      	push	{r7, lr}
 8007c42:	b088      	sub	sp, #32
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	60f8      	str	r0, [r7, #12]
 8007c48:	60b9      	str	r1, [r7, #8]
 8007c4a:	4611      	mov	r1, r2
 8007c4c:	461a      	mov	r2, r3
 8007c4e:	460b      	mov	r3, r1
 8007c50:	80fb      	strh	r3, [r7, #6]
 8007c52:	4613      	mov	r3, r2
 8007c54:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8007c56:	2300      	movs	r3, #0
 8007c58:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d108      	bne.n	8007c76 <pbuf_copy_partial+0x36>
 8007c64:	4b2b      	ldr	r3, [pc, #172]	@ (8007d14 <pbuf_copy_partial+0xd4>)
 8007c66:	f240 420a 	movw	r2, #1034	@ 0x40a
 8007c6a:	492b      	ldr	r1, [pc, #172]	@ (8007d18 <pbuf_copy_partial+0xd8>)
 8007c6c:	482b      	ldr	r0, [pc, #172]	@ (8007d1c <pbuf_copy_partial+0xdc>)
 8007c6e:	f009 fb87 	bl	8011380 <iprintf>
 8007c72:	2300      	movs	r3, #0
 8007c74:	e04a      	b.n	8007d0c <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8007c76:	68bb      	ldr	r3, [r7, #8]
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d108      	bne.n	8007c8e <pbuf_copy_partial+0x4e>
 8007c7c:	4b25      	ldr	r3, [pc, #148]	@ (8007d14 <pbuf_copy_partial+0xd4>)
 8007c7e:	f240 420b 	movw	r2, #1035	@ 0x40b
 8007c82:	4927      	ldr	r1, [pc, #156]	@ (8007d20 <pbuf_copy_partial+0xe0>)
 8007c84:	4825      	ldr	r0, [pc, #148]	@ (8007d1c <pbuf_copy_partial+0xdc>)
 8007c86:	f009 fb7b 	bl	8011380 <iprintf>
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	e03e      	b.n	8007d0c <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	61fb      	str	r3, [r7, #28]
 8007c92:	e034      	b.n	8007cfe <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8007c94:	88bb      	ldrh	r3, [r7, #4]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d00a      	beq.n	8007cb0 <pbuf_copy_partial+0x70>
 8007c9a:	69fb      	ldr	r3, [r7, #28]
 8007c9c:	895b      	ldrh	r3, [r3, #10]
 8007c9e:	88ba      	ldrh	r2, [r7, #4]
 8007ca0:	429a      	cmp	r2, r3
 8007ca2:	d305      	bcc.n	8007cb0 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8007ca4:	69fb      	ldr	r3, [r7, #28]
 8007ca6:	895b      	ldrh	r3, [r3, #10]
 8007ca8:	88ba      	ldrh	r2, [r7, #4]
 8007caa:	1ad3      	subs	r3, r2, r3
 8007cac:	80bb      	strh	r3, [r7, #4]
 8007cae:	e023      	b.n	8007cf8 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8007cb0:	69fb      	ldr	r3, [r7, #28]
 8007cb2:	895a      	ldrh	r2, [r3, #10]
 8007cb4:	88bb      	ldrh	r3, [r7, #4]
 8007cb6:	1ad3      	subs	r3, r2, r3
 8007cb8:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8007cba:	8b3a      	ldrh	r2, [r7, #24]
 8007cbc:	88fb      	ldrh	r3, [r7, #6]
 8007cbe:	429a      	cmp	r2, r3
 8007cc0:	d901      	bls.n	8007cc6 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8007cc2:	88fb      	ldrh	r3, [r7, #6]
 8007cc4:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8007cc6:	8b7b      	ldrh	r3, [r7, #26]
 8007cc8:	68ba      	ldr	r2, [r7, #8]
 8007cca:	18d0      	adds	r0, r2, r3
 8007ccc:	69fb      	ldr	r3, [r7, #28]
 8007cce:	685a      	ldr	r2, [r3, #4]
 8007cd0:	88bb      	ldrh	r3, [r7, #4]
 8007cd2:	4413      	add	r3, r2
 8007cd4:	8b3a      	ldrh	r2, [r7, #24]
 8007cd6:	4619      	mov	r1, r3
 8007cd8:	f009 fcad 	bl	8011636 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8007cdc:	8afa      	ldrh	r2, [r7, #22]
 8007cde:	8b3b      	ldrh	r3, [r7, #24]
 8007ce0:	4413      	add	r3, r2
 8007ce2:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8007ce4:	8b7a      	ldrh	r2, [r7, #26]
 8007ce6:	8b3b      	ldrh	r3, [r7, #24]
 8007ce8:	4413      	add	r3, r2
 8007cea:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8007cec:	88fa      	ldrh	r2, [r7, #6]
 8007cee:	8b3b      	ldrh	r3, [r7, #24]
 8007cf0:	1ad3      	subs	r3, r2, r3
 8007cf2:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8007cf8:	69fb      	ldr	r3, [r7, #28]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	61fb      	str	r3, [r7, #28]
 8007cfe:	88fb      	ldrh	r3, [r7, #6]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d002      	beq.n	8007d0a <pbuf_copy_partial+0xca>
 8007d04:	69fb      	ldr	r3, [r7, #28]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d1c4      	bne.n	8007c94 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8007d0a:	8afb      	ldrh	r3, [r7, #22]
}
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	3720      	adds	r7, #32
 8007d10:	46bd      	mov	sp, r7
 8007d12:	bd80      	pop	{r7, pc}
 8007d14:	08012c74 	.word	0x08012c74
 8007d18:	08012fbc 	.word	0x08012fbc
 8007d1c:	08012cd4 	.word	0x08012cd4
 8007d20:	08012fdc 	.word	0x08012fdc

08007d24 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 8007d24:	b580      	push	{r7, lr}
 8007d26:	b088      	sub	sp, #32
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	60f8      	str	r0, [r7, #12]
 8007d2c:	60b9      	str	r1, [r7, #8]
 8007d2e:	4613      	mov	r3, r2
 8007d30:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
 8007d32:	88fb      	ldrh	r3, [r7, #6]
 8007d34:	617b      	str	r3, [r7, #20]
  size_t copied_total = 0;
 8007d36:	2300      	movs	r3, #0
 8007d38:	613b      	str	r3, [r7, #16]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d109      	bne.n	8007d54 <pbuf_take+0x30>
 8007d40:	4b3a      	ldr	r3, [pc, #232]	@ (8007e2c <pbuf_take+0x108>)
 8007d42:	f240 42b3 	movw	r2, #1203	@ 0x4b3
 8007d46:	493a      	ldr	r1, [pc, #232]	@ (8007e30 <pbuf_take+0x10c>)
 8007d48:	483a      	ldr	r0, [pc, #232]	@ (8007e34 <pbuf_take+0x110>)
 8007d4a:	f009 fb19 	bl	8011380 <iprintf>
 8007d4e:	f06f 030f 	mvn.w	r3, #15
 8007d52:	e067      	b.n	8007e24 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8007d54:	68bb      	ldr	r3, [r7, #8]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d109      	bne.n	8007d6e <pbuf_take+0x4a>
 8007d5a:	4b34      	ldr	r3, [pc, #208]	@ (8007e2c <pbuf_take+0x108>)
 8007d5c:	f240 42b4 	movw	r2, #1204	@ 0x4b4
 8007d60:	4935      	ldr	r1, [pc, #212]	@ (8007e38 <pbuf_take+0x114>)
 8007d62:	4834      	ldr	r0, [pc, #208]	@ (8007e34 <pbuf_take+0x110>)
 8007d64:	f009 fb0c 	bl	8011380 <iprintf>
 8007d68:	f06f 030f 	mvn.w	r3, #15
 8007d6c:	e05a      	b.n	8007e24 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	891b      	ldrh	r3, [r3, #8]
 8007d72:	88fa      	ldrh	r2, [r7, #6]
 8007d74:	429a      	cmp	r2, r3
 8007d76:	d909      	bls.n	8007d8c <pbuf_take+0x68>
 8007d78:	4b2c      	ldr	r3, [pc, #176]	@ (8007e2c <pbuf_take+0x108>)
 8007d7a:	f240 42b5 	movw	r2, #1205	@ 0x4b5
 8007d7e:	492f      	ldr	r1, [pc, #188]	@ (8007e3c <pbuf_take+0x118>)
 8007d80:	482c      	ldr	r0, [pc, #176]	@ (8007e34 <pbuf_take+0x110>)
 8007d82:	f009 fafd 	bl	8011380 <iprintf>
 8007d86:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007d8a:	e04b      	b.n	8007e24 <pbuf_take+0x100>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d007      	beq.n	8007da2 <pbuf_take+0x7e>
 8007d92:	68bb      	ldr	r3, [r7, #8]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d004      	beq.n	8007da2 <pbuf_take+0x7e>
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	891b      	ldrh	r3, [r3, #8]
 8007d9c:	88fa      	ldrh	r2, [r7, #6]
 8007d9e:	429a      	cmp	r2, r3
 8007da0:	d902      	bls.n	8007da8 <pbuf_take+0x84>
    return ERR_ARG;
 8007da2:	f06f 030f 	mvn.w	r3, #15
 8007da6:	e03d      	b.n	8007e24 <pbuf_take+0x100>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	61fb      	str	r3, [r7, #28]
 8007dac:	e028      	b.n	8007e00 <pbuf_take+0xdc>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 8007dae:	69fb      	ldr	r3, [r7, #28]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d106      	bne.n	8007dc2 <pbuf_take+0x9e>
 8007db4:	4b1d      	ldr	r3, [pc, #116]	@ (8007e2c <pbuf_take+0x108>)
 8007db6:	f240 42bd 	movw	r2, #1213	@ 0x4bd
 8007dba:	4921      	ldr	r1, [pc, #132]	@ (8007e40 <pbuf_take+0x11c>)
 8007dbc:	481d      	ldr	r0, [pc, #116]	@ (8007e34 <pbuf_take+0x110>)
 8007dbe:	f009 fadf 	bl	8011380 <iprintf>
    buf_copy_len = total_copy_len;
 8007dc2:	697b      	ldr	r3, [r7, #20]
 8007dc4:	61bb      	str	r3, [r7, #24]
    if (buf_copy_len > p->len) {
 8007dc6:	69fb      	ldr	r3, [r7, #28]
 8007dc8:	895b      	ldrh	r3, [r3, #10]
 8007dca:	461a      	mov	r2, r3
 8007dcc:	69bb      	ldr	r3, [r7, #24]
 8007dce:	4293      	cmp	r3, r2
 8007dd0:	d902      	bls.n	8007dd8 <pbuf_take+0xb4>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 8007dd2:	69fb      	ldr	r3, [r7, #28]
 8007dd4:	895b      	ldrh	r3, [r3, #10]
 8007dd6:	61bb      	str	r3, [r7, #24]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 8007dd8:	69fb      	ldr	r3, [r7, #28]
 8007dda:	6858      	ldr	r0, [r3, #4]
 8007ddc:	68ba      	ldr	r2, [r7, #8]
 8007dde:	693b      	ldr	r3, [r7, #16]
 8007de0:	4413      	add	r3, r2
 8007de2:	69ba      	ldr	r2, [r7, #24]
 8007de4:	4619      	mov	r1, r3
 8007de6:	f009 fc26 	bl	8011636 <memcpy>
    total_copy_len -= buf_copy_len;
 8007dea:	697a      	ldr	r2, [r7, #20]
 8007dec:	69bb      	ldr	r3, [r7, #24]
 8007dee:	1ad3      	subs	r3, r2, r3
 8007df0:	617b      	str	r3, [r7, #20]
    copied_total += buf_copy_len;
 8007df2:	693a      	ldr	r2, [r7, #16]
 8007df4:	69bb      	ldr	r3, [r7, #24]
 8007df6:	4413      	add	r3, r2
 8007df8:	613b      	str	r3, [r7, #16]
  for (p = buf; total_copy_len != 0; p = p->next) {
 8007dfa:	69fb      	ldr	r3, [r7, #28]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	61fb      	str	r3, [r7, #28]
 8007e00:	697b      	ldr	r3, [r7, #20]
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d1d3      	bne.n	8007dae <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 8007e06:	697b      	ldr	r3, [r7, #20]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d103      	bne.n	8007e14 <pbuf_take+0xf0>
 8007e0c:	88fb      	ldrh	r3, [r7, #6]
 8007e0e:	693a      	ldr	r2, [r7, #16]
 8007e10:	429a      	cmp	r2, r3
 8007e12:	d006      	beq.n	8007e22 <pbuf_take+0xfe>
 8007e14:	4b05      	ldr	r3, [pc, #20]	@ (8007e2c <pbuf_take+0x108>)
 8007e16:	f44f 6299 	mov.w	r2, #1224	@ 0x4c8
 8007e1a:	490a      	ldr	r1, [pc, #40]	@ (8007e44 <pbuf_take+0x120>)
 8007e1c:	4805      	ldr	r0, [pc, #20]	@ (8007e34 <pbuf_take+0x110>)
 8007e1e:	f009 faaf 	bl	8011380 <iprintf>
  return ERR_OK;
 8007e22:	2300      	movs	r3, #0
}
 8007e24:	4618      	mov	r0, r3
 8007e26:	3720      	adds	r7, #32
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	bd80      	pop	{r7, pc}
 8007e2c:	08012c74 	.word	0x08012c74
 8007e30:	0801304c 	.word	0x0801304c
 8007e34:	08012cd4 	.word	0x08012cd4
 8007e38:	08013064 	.word	0x08013064
 8007e3c:	08013080 	.word	0x08013080
 8007e40:	080130a0 	.word	0x080130a0
 8007e44:	080130b8 	.word	0x080130b8

08007e48 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	b084      	sub	sp, #16
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	4603      	mov	r3, r0
 8007e50:	603a      	str	r2, [r7, #0]
 8007e52:	71fb      	strb	r3, [r7, #7]
 8007e54:	460b      	mov	r3, r1
 8007e56:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	8919      	ldrh	r1, [r3, #8]
 8007e5c:	88ba      	ldrh	r2, [r7, #4]
 8007e5e:	79fb      	ldrb	r3, [r7, #7]
 8007e60:	4618      	mov	r0, r3
 8007e62:	f7ff fa0f 	bl	8007284 <pbuf_alloc>
 8007e66:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d101      	bne.n	8007e72 <pbuf_clone+0x2a>
    return NULL;
 8007e6e:	2300      	movs	r3, #0
 8007e70:	e011      	b.n	8007e96 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8007e72:	6839      	ldr	r1, [r7, #0]
 8007e74:	68f8      	ldr	r0, [r7, #12]
 8007e76:	f7ff fe11 	bl	8007a9c <pbuf_copy>
 8007e7a:	4603      	mov	r3, r0
 8007e7c:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8007e7e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d006      	beq.n	8007e94 <pbuf_clone+0x4c>
 8007e86:	4b06      	ldr	r3, [pc, #24]	@ (8007ea0 <pbuf_clone+0x58>)
 8007e88:	f240 5224 	movw	r2, #1316	@ 0x524
 8007e8c:	4905      	ldr	r1, [pc, #20]	@ (8007ea4 <pbuf_clone+0x5c>)
 8007e8e:	4806      	ldr	r0, [pc, #24]	@ (8007ea8 <pbuf_clone+0x60>)
 8007e90:	f009 fa76 	bl	8011380 <iprintf>
  return q;
 8007e94:	68fb      	ldr	r3, [r7, #12]
}
 8007e96:	4618      	mov	r0, r3
 8007e98:	3710      	adds	r7, #16
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	bd80      	pop	{r7, pc}
 8007e9e:	bf00      	nop
 8007ea0:	08012c74 	.word	0x08012c74
 8007ea4:	080130e8 	.word	0x080130e8
 8007ea8:	08012cd4 	.word	0x08012cd4

08007eac <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8007eac:	b580      	push	{r7, lr}
 8007eae:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8007eb0:	f009 f966 	bl	8011180 <rand>
 8007eb4:	4603      	mov	r3, r0
 8007eb6:	b29b      	uxth	r3, r3
 8007eb8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8007ebc:	b29b      	uxth	r3, r3
 8007ebe:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8007ec2:	b29a      	uxth	r2, r3
 8007ec4:	4b01      	ldr	r3, [pc, #4]	@ (8007ecc <tcp_init+0x20>)
 8007ec6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8007ec8:	bf00      	nop
 8007eca:	bd80      	pop	{r7, pc}
 8007ecc:	20000060 	.word	0x20000060

08007ed0 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8007ed0:	b580      	push	{r7, lr}
 8007ed2:	b082      	sub	sp, #8
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	7d1b      	ldrb	r3, [r3, #20]
 8007edc:	2b01      	cmp	r3, #1
 8007ede:	d105      	bne.n	8007eec <tcp_free+0x1c>
 8007ee0:	4b06      	ldr	r3, [pc, #24]	@ (8007efc <tcp_free+0x2c>)
 8007ee2:	22d4      	movs	r2, #212	@ 0xd4
 8007ee4:	4906      	ldr	r1, [pc, #24]	@ (8007f00 <tcp_free+0x30>)
 8007ee6:	4807      	ldr	r0, [pc, #28]	@ (8007f04 <tcp_free+0x34>)
 8007ee8:	f009 fa4a 	bl	8011380 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8007eec:	6879      	ldr	r1, [r7, #4]
 8007eee:	2001      	movs	r0, #1
 8007ef0:	f7fe fe36 	bl	8006b60 <memp_free>
}
 8007ef4:	bf00      	nop
 8007ef6:	3708      	adds	r7, #8
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	bd80      	pop	{r7, pc}
 8007efc:	08013174 	.word	0x08013174
 8007f00:	080131a4 	.word	0x080131a4
 8007f04:	080131b8 	.word	0x080131b8

08007f08 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	b082      	sub	sp, #8
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	7d1b      	ldrb	r3, [r3, #20]
 8007f14:	2b01      	cmp	r3, #1
 8007f16:	d105      	bne.n	8007f24 <tcp_free_listen+0x1c>
 8007f18:	4b06      	ldr	r3, [pc, #24]	@ (8007f34 <tcp_free_listen+0x2c>)
 8007f1a:	22df      	movs	r2, #223	@ 0xdf
 8007f1c:	4906      	ldr	r1, [pc, #24]	@ (8007f38 <tcp_free_listen+0x30>)
 8007f1e:	4807      	ldr	r0, [pc, #28]	@ (8007f3c <tcp_free_listen+0x34>)
 8007f20:	f009 fa2e 	bl	8011380 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8007f24:	6879      	ldr	r1, [r7, #4]
 8007f26:	2002      	movs	r0, #2
 8007f28:	f7fe fe1a 	bl	8006b60 <memp_free>
}
 8007f2c:	bf00      	nop
 8007f2e:	3708      	adds	r7, #8
 8007f30:	46bd      	mov	sp, r7
 8007f32:	bd80      	pop	{r7, pc}
 8007f34:	08013174 	.word	0x08013174
 8007f38:	080131e0 	.word	0x080131e0
 8007f3c:	080131b8 	.word	0x080131b8

08007f40 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8007f40:	b580      	push	{r7, lr}
 8007f42:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8007f44:	f001 f85e 	bl	8009004 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8007f48:	4b07      	ldr	r3, [pc, #28]	@ (8007f68 <tcp_tmr+0x28>)
 8007f4a:	781b      	ldrb	r3, [r3, #0]
 8007f4c:	3301      	adds	r3, #1
 8007f4e:	b2da      	uxtb	r2, r3
 8007f50:	4b05      	ldr	r3, [pc, #20]	@ (8007f68 <tcp_tmr+0x28>)
 8007f52:	701a      	strb	r2, [r3, #0]
 8007f54:	4b04      	ldr	r3, [pc, #16]	@ (8007f68 <tcp_tmr+0x28>)
 8007f56:	781b      	ldrb	r3, [r3, #0]
 8007f58:	f003 0301 	and.w	r3, r3, #1
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d001      	beq.n	8007f64 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8007f60:	f000 fd0e 	bl	8008980 <tcp_slowtmr>
  }
}
 8007f64:	bf00      	nop
 8007f66:	bd80      	pop	{r7, pc}
 8007f68:	2000a7fd 	.word	0x2000a7fd

08007f6c <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	b084      	sub	sp, #16
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	6078      	str	r0, [r7, #4]
 8007f74:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8007f76:	683b      	ldr	r3, [r7, #0]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d105      	bne.n	8007f88 <tcp_remove_listener+0x1c>
 8007f7c:	4b0d      	ldr	r3, [pc, #52]	@ (8007fb4 <tcp_remove_listener+0x48>)
 8007f7e:	22ff      	movs	r2, #255	@ 0xff
 8007f80:	490d      	ldr	r1, [pc, #52]	@ (8007fb8 <tcp_remove_listener+0x4c>)
 8007f82:	480e      	ldr	r0, [pc, #56]	@ (8007fbc <tcp_remove_listener+0x50>)
 8007f84:	f009 f9fc 	bl	8011380 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	60fb      	str	r3, [r7, #12]
 8007f8c:	e00a      	b.n	8007fa4 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007f92:	683a      	ldr	r2, [r7, #0]
 8007f94:	429a      	cmp	r2, r3
 8007f96:	d102      	bne.n	8007f9e <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	68db      	ldr	r3, [r3, #12]
 8007fa2:	60fb      	str	r3, [r7, #12]
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d1f1      	bne.n	8007f8e <tcp_remove_listener+0x22>
    }
  }
}
 8007faa:	bf00      	nop
 8007fac:	bf00      	nop
 8007fae:	3710      	adds	r7, #16
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	bd80      	pop	{r7, pc}
 8007fb4:	08013174 	.word	0x08013174
 8007fb8:	080131fc 	.word	0x080131fc
 8007fbc:	080131b8 	.word	0x080131b8

08007fc0 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b084      	sub	sp, #16
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d106      	bne.n	8007fdc <tcp_listen_closed+0x1c>
 8007fce:	4b14      	ldr	r3, [pc, #80]	@ (8008020 <tcp_listen_closed+0x60>)
 8007fd0:	f240 1211 	movw	r2, #273	@ 0x111
 8007fd4:	4913      	ldr	r1, [pc, #76]	@ (8008024 <tcp_listen_closed+0x64>)
 8007fd6:	4814      	ldr	r0, [pc, #80]	@ (8008028 <tcp_listen_closed+0x68>)
 8007fd8:	f009 f9d2 	bl	8011380 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	7d1b      	ldrb	r3, [r3, #20]
 8007fe0:	2b01      	cmp	r3, #1
 8007fe2:	d006      	beq.n	8007ff2 <tcp_listen_closed+0x32>
 8007fe4:	4b0e      	ldr	r3, [pc, #56]	@ (8008020 <tcp_listen_closed+0x60>)
 8007fe6:	f44f 7289 	mov.w	r2, #274	@ 0x112
 8007fea:	4910      	ldr	r1, [pc, #64]	@ (800802c <tcp_listen_closed+0x6c>)
 8007fec:	480e      	ldr	r0, [pc, #56]	@ (8008028 <tcp_listen_closed+0x68>)
 8007fee:	f009 f9c7 	bl	8011380 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8007ff2:	2301      	movs	r3, #1
 8007ff4:	60fb      	str	r3, [r7, #12]
 8007ff6:	e00b      	b.n	8008010 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8007ff8:	4a0d      	ldr	r2, [pc, #52]	@ (8008030 <tcp_listen_closed+0x70>)
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	6879      	ldr	r1, [r7, #4]
 8008004:	4618      	mov	r0, r3
 8008006:	f7ff ffb1 	bl	8007f6c <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	3301      	adds	r3, #1
 800800e:	60fb      	str	r3, [r7, #12]
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	2b03      	cmp	r3, #3
 8008014:	d9f0      	bls.n	8007ff8 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8008016:	bf00      	nop
 8008018:	bf00      	nop
 800801a:	3710      	adds	r7, #16
 800801c:	46bd      	mov	sp, r7
 800801e:	bd80      	pop	{r7, pc}
 8008020:	08013174 	.word	0x08013174
 8008024:	08013224 	.word	0x08013224
 8008028:	080131b8 	.word	0x080131b8
 800802c:	08013230 	.word	0x08013230
 8008030:	08015154 	.word	0x08015154

08008034 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8008034:	b5b0      	push	{r4, r5, r7, lr}
 8008036:	b088      	sub	sp, #32
 8008038:	af04      	add	r7, sp, #16
 800803a:	6078      	str	r0, [r7, #4]
 800803c:	460b      	mov	r3, r1
 800803e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	2b00      	cmp	r3, #0
 8008044:	d106      	bne.n	8008054 <tcp_close_shutdown+0x20>
 8008046:	4b63      	ldr	r3, [pc, #396]	@ (80081d4 <tcp_close_shutdown+0x1a0>)
 8008048:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 800804c:	4962      	ldr	r1, [pc, #392]	@ (80081d8 <tcp_close_shutdown+0x1a4>)
 800804e:	4863      	ldr	r0, [pc, #396]	@ (80081dc <tcp_close_shutdown+0x1a8>)
 8008050:	f009 f996 	bl	8011380 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8008054:	78fb      	ldrb	r3, [r7, #3]
 8008056:	2b00      	cmp	r3, #0
 8008058:	d066      	beq.n	8008128 <tcp_close_shutdown+0xf4>
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	7d1b      	ldrb	r3, [r3, #20]
 800805e:	2b04      	cmp	r3, #4
 8008060:	d003      	beq.n	800806a <tcp_close_shutdown+0x36>
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	7d1b      	ldrb	r3, [r3, #20]
 8008066:	2b07      	cmp	r3, #7
 8008068:	d15e      	bne.n	8008128 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800806e:	2b00      	cmp	r3, #0
 8008070:	d104      	bne.n	800807c <tcp_close_shutdown+0x48>
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008076:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800807a:	d055      	beq.n	8008128 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	8b5b      	ldrh	r3, [r3, #26]
 8008080:	f003 0310 	and.w	r3, r3, #16
 8008084:	2b00      	cmp	r3, #0
 8008086:	d106      	bne.n	8008096 <tcp_close_shutdown+0x62>
 8008088:	4b52      	ldr	r3, [pc, #328]	@ (80081d4 <tcp_close_shutdown+0x1a0>)
 800808a:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 800808e:	4954      	ldr	r1, [pc, #336]	@ (80081e0 <tcp_close_shutdown+0x1ac>)
 8008090:	4852      	ldr	r0, [pc, #328]	@ (80081dc <tcp_close_shutdown+0x1a8>)
 8008092:	f009 f975 	bl	8011380 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800809e:	687d      	ldr	r5, [r7, #4]
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	3304      	adds	r3, #4
 80080a4:	687a      	ldr	r2, [r7, #4]
 80080a6:	8ad2      	ldrh	r2, [r2, #22]
 80080a8:	6879      	ldr	r1, [r7, #4]
 80080aa:	8b09      	ldrh	r1, [r1, #24]
 80080ac:	9102      	str	r1, [sp, #8]
 80080ae:	9201      	str	r2, [sp, #4]
 80080b0:	9300      	str	r3, [sp, #0]
 80080b2:	462b      	mov	r3, r5
 80080b4:	4622      	mov	r2, r4
 80080b6:	4601      	mov	r1, r0
 80080b8:	6878      	ldr	r0, [r7, #4]
 80080ba:	f005 fd85 	bl	800dbc8 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 80080be:	6878      	ldr	r0, [r7, #4]
 80080c0:	f001 fb68 	bl	8009794 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 80080c4:	4b47      	ldr	r3, [pc, #284]	@ (80081e4 <tcp_close_shutdown+0x1b0>)
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	687a      	ldr	r2, [r7, #4]
 80080ca:	429a      	cmp	r2, r3
 80080cc:	d105      	bne.n	80080da <tcp_close_shutdown+0xa6>
 80080ce:	4b45      	ldr	r3, [pc, #276]	@ (80081e4 <tcp_close_shutdown+0x1b0>)
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	68db      	ldr	r3, [r3, #12]
 80080d4:	4a43      	ldr	r2, [pc, #268]	@ (80081e4 <tcp_close_shutdown+0x1b0>)
 80080d6:	6013      	str	r3, [r2, #0]
 80080d8:	e013      	b.n	8008102 <tcp_close_shutdown+0xce>
 80080da:	4b42      	ldr	r3, [pc, #264]	@ (80081e4 <tcp_close_shutdown+0x1b0>)
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	60fb      	str	r3, [r7, #12]
 80080e0:	e00c      	b.n	80080fc <tcp_close_shutdown+0xc8>
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	68db      	ldr	r3, [r3, #12]
 80080e6:	687a      	ldr	r2, [r7, #4]
 80080e8:	429a      	cmp	r2, r3
 80080ea:	d104      	bne.n	80080f6 <tcp_close_shutdown+0xc2>
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	68da      	ldr	r2, [r3, #12]
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	60da      	str	r2, [r3, #12]
 80080f4:	e005      	b.n	8008102 <tcp_close_shutdown+0xce>
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	68db      	ldr	r3, [r3, #12]
 80080fa:	60fb      	str	r3, [r7, #12]
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d1ef      	bne.n	80080e2 <tcp_close_shutdown+0xae>
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	2200      	movs	r2, #0
 8008106:	60da      	str	r2, [r3, #12]
 8008108:	4b37      	ldr	r3, [pc, #220]	@ (80081e8 <tcp_close_shutdown+0x1b4>)
 800810a:	2201      	movs	r2, #1
 800810c:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800810e:	4b37      	ldr	r3, [pc, #220]	@ (80081ec <tcp_close_shutdown+0x1b8>)
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	687a      	ldr	r2, [r7, #4]
 8008114:	429a      	cmp	r2, r3
 8008116:	d102      	bne.n	800811e <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8008118:	f003 fffc 	bl	800c114 <tcp_trigger_input_pcb_close>
 800811c:	e002      	b.n	8008124 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800811e:	6878      	ldr	r0, [r7, #4]
 8008120:	f7ff fed6 	bl	8007ed0 <tcp_free>
      }
      return ERR_OK;
 8008124:	2300      	movs	r3, #0
 8008126:	e050      	b.n	80081ca <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	7d1b      	ldrb	r3, [r3, #20]
 800812c:	2b02      	cmp	r3, #2
 800812e:	d03b      	beq.n	80081a8 <tcp_close_shutdown+0x174>
 8008130:	2b02      	cmp	r3, #2
 8008132:	dc44      	bgt.n	80081be <tcp_close_shutdown+0x18a>
 8008134:	2b00      	cmp	r3, #0
 8008136:	d002      	beq.n	800813e <tcp_close_shutdown+0x10a>
 8008138:	2b01      	cmp	r3, #1
 800813a:	d02a      	beq.n	8008192 <tcp_close_shutdown+0x15e>
 800813c:	e03f      	b.n	80081be <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	8adb      	ldrh	r3, [r3, #22]
 8008142:	2b00      	cmp	r3, #0
 8008144:	d021      	beq.n	800818a <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8008146:	4b2a      	ldr	r3, [pc, #168]	@ (80081f0 <tcp_close_shutdown+0x1bc>)
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	687a      	ldr	r2, [r7, #4]
 800814c:	429a      	cmp	r2, r3
 800814e:	d105      	bne.n	800815c <tcp_close_shutdown+0x128>
 8008150:	4b27      	ldr	r3, [pc, #156]	@ (80081f0 <tcp_close_shutdown+0x1bc>)
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	68db      	ldr	r3, [r3, #12]
 8008156:	4a26      	ldr	r2, [pc, #152]	@ (80081f0 <tcp_close_shutdown+0x1bc>)
 8008158:	6013      	str	r3, [r2, #0]
 800815a:	e013      	b.n	8008184 <tcp_close_shutdown+0x150>
 800815c:	4b24      	ldr	r3, [pc, #144]	@ (80081f0 <tcp_close_shutdown+0x1bc>)
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	60bb      	str	r3, [r7, #8]
 8008162:	e00c      	b.n	800817e <tcp_close_shutdown+0x14a>
 8008164:	68bb      	ldr	r3, [r7, #8]
 8008166:	68db      	ldr	r3, [r3, #12]
 8008168:	687a      	ldr	r2, [r7, #4]
 800816a:	429a      	cmp	r2, r3
 800816c:	d104      	bne.n	8008178 <tcp_close_shutdown+0x144>
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	68da      	ldr	r2, [r3, #12]
 8008172:	68bb      	ldr	r3, [r7, #8]
 8008174:	60da      	str	r2, [r3, #12]
 8008176:	e005      	b.n	8008184 <tcp_close_shutdown+0x150>
 8008178:	68bb      	ldr	r3, [r7, #8]
 800817a:	68db      	ldr	r3, [r3, #12]
 800817c:	60bb      	str	r3, [r7, #8]
 800817e:	68bb      	ldr	r3, [r7, #8]
 8008180:	2b00      	cmp	r3, #0
 8008182:	d1ef      	bne.n	8008164 <tcp_close_shutdown+0x130>
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	2200      	movs	r2, #0
 8008188:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800818a:	6878      	ldr	r0, [r7, #4]
 800818c:	f7ff fea0 	bl	8007ed0 <tcp_free>
      break;
 8008190:	e01a      	b.n	80081c8 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8008192:	6878      	ldr	r0, [r7, #4]
 8008194:	f7ff ff14 	bl	8007fc0 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8008198:	6879      	ldr	r1, [r7, #4]
 800819a:	4816      	ldr	r0, [pc, #88]	@ (80081f4 <tcp_close_shutdown+0x1c0>)
 800819c:	f001 fb4a 	bl	8009834 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 80081a0:	6878      	ldr	r0, [r7, #4]
 80081a2:	f7ff feb1 	bl	8007f08 <tcp_free_listen>
      break;
 80081a6:	e00f      	b.n	80081c8 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80081a8:	6879      	ldr	r1, [r7, #4]
 80081aa:	480e      	ldr	r0, [pc, #56]	@ (80081e4 <tcp_close_shutdown+0x1b0>)
 80081ac:	f001 fb42 	bl	8009834 <tcp_pcb_remove>
 80081b0:	4b0d      	ldr	r3, [pc, #52]	@ (80081e8 <tcp_close_shutdown+0x1b4>)
 80081b2:	2201      	movs	r2, #1
 80081b4:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 80081b6:	6878      	ldr	r0, [r7, #4]
 80081b8:	f7ff fe8a 	bl	8007ed0 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 80081bc:	e004      	b.n	80081c8 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 80081be:	6878      	ldr	r0, [r7, #4]
 80081c0:	f000 f81a 	bl	80081f8 <tcp_close_shutdown_fin>
 80081c4:	4603      	mov	r3, r0
 80081c6:	e000      	b.n	80081ca <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 80081c8:	2300      	movs	r3, #0
}
 80081ca:	4618      	mov	r0, r3
 80081cc:	3710      	adds	r7, #16
 80081ce:	46bd      	mov	sp, r7
 80081d0:	bdb0      	pop	{r4, r5, r7, pc}
 80081d2:	bf00      	nop
 80081d4:	08013174 	.word	0x08013174
 80081d8:	08013248 	.word	0x08013248
 80081dc:	080131b8 	.word	0x080131b8
 80081e0:	08013268 	.word	0x08013268
 80081e4:	2000a7f4 	.word	0x2000a7f4
 80081e8:	2000a7fc 	.word	0x2000a7fc
 80081ec:	2000a834 	.word	0x2000a834
 80081f0:	2000a7ec 	.word	0x2000a7ec
 80081f4:	2000a7f0 	.word	0x2000a7f0

080081f8 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 80081f8:	b580      	push	{r7, lr}
 80081fa:	b084      	sub	sp, #16
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	2b00      	cmp	r3, #0
 8008204:	d106      	bne.n	8008214 <tcp_close_shutdown_fin+0x1c>
 8008206:	4b2e      	ldr	r3, [pc, #184]	@ (80082c0 <tcp_close_shutdown_fin+0xc8>)
 8008208:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 800820c:	492d      	ldr	r1, [pc, #180]	@ (80082c4 <tcp_close_shutdown_fin+0xcc>)
 800820e:	482e      	ldr	r0, [pc, #184]	@ (80082c8 <tcp_close_shutdown_fin+0xd0>)
 8008210:	f009 f8b6 	bl	8011380 <iprintf>

  switch (pcb->state) {
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	7d1b      	ldrb	r3, [r3, #20]
 8008218:	2b07      	cmp	r3, #7
 800821a:	d020      	beq.n	800825e <tcp_close_shutdown_fin+0x66>
 800821c:	2b07      	cmp	r3, #7
 800821e:	dc2b      	bgt.n	8008278 <tcp_close_shutdown_fin+0x80>
 8008220:	2b03      	cmp	r3, #3
 8008222:	d002      	beq.n	800822a <tcp_close_shutdown_fin+0x32>
 8008224:	2b04      	cmp	r3, #4
 8008226:	d00d      	beq.n	8008244 <tcp_close_shutdown_fin+0x4c>
 8008228:	e026      	b.n	8008278 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800822a:	6878      	ldr	r0, [r7, #4]
 800822c:	f004 fdda 	bl	800cde4 <tcp_send_fin>
 8008230:	4603      	mov	r3, r0
 8008232:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8008234:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008238:	2b00      	cmp	r3, #0
 800823a:	d11f      	bne.n	800827c <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	2205      	movs	r2, #5
 8008240:	751a      	strb	r2, [r3, #20]
      }
      break;
 8008242:	e01b      	b.n	800827c <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8008244:	6878      	ldr	r0, [r7, #4]
 8008246:	f004 fdcd 	bl	800cde4 <tcp_send_fin>
 800824a:	4603      	mov	r3, r0
 800824c:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800824e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008252:	2b00      	cmp	r3, #0
 8008254:	d114      	bne.n	8008280 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	2205      	movs	r2, #5
 800825a:	751a      	strb	r2, [r3, #20]
      }
      break;
 800825c:	e010      	b.n	8008280 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800825e:	6878      	ldr	r0, [r7, #4]
 8008260:	f004 fdc0 	bl	800cde4 <tcp_send_fin>
 8008264:	4603      	mov	r3, r0
 8008266:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8008268:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800826c:	2b00      	cmp	r3, #0
 800826e:	d109      	bne.n	8008284 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	2209      	movs	r2, #9
 8008274:	751a      	strb	r2, [r3, #20]
      }
      break;
 8008276:	e005      	b.n	8008284 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8008278:	2300      	movs	r3, #0
 800827a:	e01c      	b.n	80082b6 <tcp_close_shutdown_fin+0xbe>
      break;
 800827c:	bf00      	nop
 800827e:	e002      	b.n	8008286 <tcp_close_shutdown_fin+0x8e>
      break;
 8008280:	bf00      	nop
 8008282:	e000      	b.n	8008286 <tcp_close_shutdown_fin+0x8e>
      break;
 8008284:	bf00      	nop
  }

  if (err == ERR_OK) {
 8008286:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800828a:	2b00      	cmp	r3, #0
 800828c:	d103      	bne.n	8008296 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800828e:	6878      	ldr	r0, [r7, #4]
 8008290:	f004 fee6 	bl	800d060 <tcp_output>
 8008294:	e00d      	b.n	80082b2 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8008296:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800829a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800829e:	d108      	bne.n	80082b2 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	8b5b      	ldrh	r3, [r3, #26]
 80082a4:	f043 0308 	orr.w	r3, r3, #8
 80082a8:	b29a      	uxth	r2, r3
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 80082ae:	2300      	movs	r3, #0
 80082b0:	e001      	b.n	80082b6 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 80082b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80082b6:	4618      	mov	r0, r3
 80082b8:	3710      	adds	r7, #16
 80082ba:	46bd      	mov	sp, r7
 80082bc:	bd80      	pop	{r7, pc}
 80082be:	bf00      	nop
 80082c0:	08013174 	.word	0x08013174
 80082c4:	08013224 	.word	0x08013224
 80082c8:	080131b8 	.word	0x080131b8

080082cc <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 80082cc:	b580      	push	{r7, lr}
 80082ce:	b082      	sub	sp, #8
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d109      	bne.n	80082ee <tcp_close+0x22>
 80082da:	4b0f      	ldr	r3, [pc, #60]	@ (8008318 <tcp_close+0x4c>)
 80082dc:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 80082e0:	490e      	ldr	r1, [pc, #56]	@ (800831c <tcp_close+0x50>)
 80082e2:	480f      	ldr	r0, [pc, #60]	@ (8008320 <tcp_close+0x54>)
 80082e4:	f009 f84c 	bl	8011380 <iprintf>
 80082e8:	f06f 030f 	mvn.w	r3, #15
 80082ec:	e00f      	b.n	800830e <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	7d1b      	ldrb	r3, [r3, #20]
 80082f2:	2b01      	cmp	r3, #1
 80082f4:	d006      	beq.n	8008304 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	8b5b      	ldrh	r3, [r3, #26]
 80082fa:	f043 0310 	orr.w	r3, r3, #16
 80082fe:	b29a      	uxth	r2, r3
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8008304:	2101      	movs	r1, #1
 8008306:	6878      	ldr	r0, [r7, #4]
 8008308:	f7ff fe94 	bl	8008034 <tcp_close_shutdown>
 800830c:	4603      	mov	r3, r0
}
 800830e:	4618      	mov	r0, r3
 8008310:	3708      	adds	r7, #8
 8008312:	46bd      	mov	sp, r7
 8008314:	bd80      	pop	{r7, pc}
 8008316:	bf00      	nop
 8008318:	08013174 	.word	0x08013174
 800831c:	08013284 	.word	0x08013284
 8008320:	080131b8 	.word	0x080131b8

08008324 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8008324:	b580      	push	{r7, lr}
 8008326:	b08e      	sub	sp, #56	@ 0x38
 8008328:	af04      	add	r7, sp, #16
 800832a:	6078      	str	r0, [r7, #4]
 800832c:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	2b00      	cmp	r3, #0
 8008332:	d107      	bne.n	8008344 <tcp_abandon+0x20>
 8008334:	4b52      	ldr	r3, [pc, #328]	@ (8008480 <tcp_abandon+0x15c>)
 8008336:	f240 223d 	movw	r2, #573	@ 0x23d
 800833a:	4952      	ldr	r1, [pc, #328]	@ (8008484 <tcp_abandon+0x160>)
 800833c:	4852      	ldr	r0, [pc, #328]	@ (8008488 <tcp_abandon+0x164>)
 800833e:	f009 f81f 	bl	8011380 <iprintf>
 8008342:	e099      	b.n	8008478 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	7d1b      	ldrb	r3, [r3, #20]
 8008348:	2b01      	cmp	r3, #1
 800834a:	d106      	bne.n	800835a <tcp_abandon+0x36>
 800834c:	4b4c      	ldr	r3, [pc, #304]	@ (8008480 <tcp_abandon+0x15c>)
 800834e:	f44f 7210 	mov.w	r2, #576	@ 0x240
 8008352:	494e      	ldr	r1, [pc, #312]	@ (800848c <tcp_abandon+0x168>)
 8008354:	484c      	ldr	r0, [pc, #304]	@ (8008488 <tcp_abandon+0x164>)
 8008356:	f009 f813 	bl	8011380 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	7d1b      	ldrb	r3, [r3, #20]
 800835e:	2b0a      	cmp	r3, #10
 8008360:	d107      	bne.n	8008372 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8008362:	6879      	ldr	r1, [r7, #4]
 8008364:	484a      	ldr	r0, [pc, #296]	@ (8008490 <tcp_abandon+0x16c>)
 8008366:	f001 fa65 	bl	8009834 <tcp_pcb_remove>
    tcp_free(pcb);
 800836a:	6878      	ldr	r0, [r7, #4]
 800836c:	f7ff fdb0 	bl	8007ed0 <tcp_free>
 8008370:	e082      	b.n	8008478 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8008372:	2300      	movs	r3, #0
 8008374:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 8008376:	2300      	movs	r3, #0
 8008378:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800837e:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008384:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800838c:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	691b      	ldr	r3, [r3, #16]
 8008392:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	7d1b      	ldrb	r3, [r3, #20]
 8008398:	2b00      	cmp	r3, #0
 800839a:	d126      	bne.n	80083ea <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	8adb      	ldrh	r3, [r3, #22]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d02e      	beq.n	8008402 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80083a4:	4b3b      	ldr	r3, [pc, #236]	@ (8008494 <tcp_abandon+0x170>)
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	687a      	ldr	r2, [r7, #4]
 80083aa:	429a      	cmp	r2, r3
 80083ac:	d105      	bne.n	80083ba <tcp_abandon+0x96>
 80083ae:	4b39      	ldr	r3, [pc, #228]	@ (8008494 <tcp_abandon+0x170>)
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	68db      	ldr	r3, [r3, #12]
 80083b4:	4a37      	ldr	r2, [pc, #220]	@ (8008494 <tcp_abandon+0x170>)
 80083b6:	6013      	str	r3, [r2, #0]
 80083b8:	e013      	b.n	80083e2 <tcp_abandon+0xbe>
 80083ba:	4b36      	ldr	r3, [pc, #216]	@ (8008494 <tcp_abandon+0x170>)
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	61fb      	str	r3, [r7, #28]
 80083c0:	e00c      	b.n	80083dc <tcp_abandon+0xb8>
 80083c2:	69fb      	ldr	r3, [r7, #28]
 80083c4:	68db      	ldr	r3, [r3, #12]
 80083c6:	687a      	ldr	r2, [r7, #4]
 80083c8:	429a      	cmp	r2, r3
 80083ca:	d104      	bne.n	80083d6 <tcp_abandon+0xb2>
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	68da      	ldr	r2, [r3, #12]
 80083d0:	69fb      	ldr	r3, [r7, #28]
 80083d2:	60da      	str	r2, [r3, #12]
 80083d4:	e005      	b.n	80083e2 <tcp_abandon+0xbe>
 80083d6:	69fb      	ldr	r3, [r7, #28]
 80083d8:	68db      	ldr	r3, [r3, #12]
 80083da:	61fb      	str	r3, [r7, #28]
 80083dc:	69fb      	ldr	r3, [r7, #28]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d1ef      	bne.n	80083c2 <tcp_abandon+0x9e>
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	2200      	movs	r2, #0
 80083e6:	60da      	str	r2, [r3, #12]
 80083e8:	e00b      	b.n	8008402 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 80083ea:	683b      	ldr	r3, [r7, #0]
 80083ec:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	8adb      	ldrh	r3, [r3, #22]
 80083f2:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80083f4:	6879      	ldr	r1, [r7, #4]
 80083f6:	4828      	ldr	r0, [pc, #160]	@ (8008498 <tcp_abandon+0x174>)
 80083f8:	f001 fa1c 	bl	8009834 <tcp_pcb_remove>
 80083fc:	4b27      	ldr	r3, [pc, #156]	@ (800849c <tcp_abandon+0x178>)
 80083fe:	2201      	movs	r2, #1
 8008400:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008406:	2b00      	cmp	r3, #0
 8008408:	d004      	beq.n	8008414 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800840e:	4618      	mov	r0, r3
 8008410:	f000 fed8 	bl	80091c4 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008418:	2b00      	cmp	r3, #0
 800841a:	d004      	beq.n	8008426 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008420:	4618      	mov	r0, r3
 8008422:	f000 fecf 	bl	80091c4 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800842a:	2b00      	cmp	r3, #0
 800842c:	d004      	beq.n	8008438 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008432:	4618      	mov	r0, r3
 8008434:	f000 fec6 	bl	80091c4 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8008438:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800843a:	2b00      	cmp	r3, #0
 800843c:	d00e      	beq.n	800845c <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800843e:	6879      	ldr	r1, [r7, #4]
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	3304      	adds	r3, #4
 8008444:	687a      	ldr	r2, [r7, #4]
 8008446:	8b12      	ldrh	r2, [r2, #24]
 8008448:	9202      	str	r2, [sp, #8]
 800844a:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800844c:	9201      	str	r2, [sp, #4]
 800844e:	9300      	str	r3, [sp, #0]
 8008450:	460b      	mov	r3, r1
 8008452:	697a      	ldr	r2, [r7, #20]
 8008454:	69b9      	ldr	r1, [r7, #24]
 8008456:	6878      	ldr	r0, [r7, #4]
 8008458:	f005 fbb6 	bl	800dbc8 <tcp_rst>
    }
    last_state = pcb->state;
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	7d1b      	ldrb	r3, [r3, #20]
 8008460:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8008462:	6878      	ldr	r0, [r7, #4]
 8008464:	f7ff fd34 	bl	8007ed0 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8008468:	693b      	ldr	r3, [r7, #16]
 800846a:	2b00      	cmp	r3, #0
 800846c:	d004      	beq.n	8008478 <tcp_abandon+0x154>
 800846e:	693b      	ldr	r3, [r7, #16]
 8008470:	f06f 010c 	mvn.w	r1, #12
 8008474:	68f8      	ldr	r0, [r7, #12]
 8008476:	4798      	blx	r3
  }
}
 8008478:	3728      	adds	r7, #40	@ 0x28
 800847a:	46bd      	mov	sp, r7
 800847c:	bd80      	pop	{r7, pc}
 800847e:	bf00      	nop
 8008480:	08013174 	.word	0x08013174
 8008484:	080132b8 	.word	0x080132b8
 8008488:	080131b8 	.word	0x080131b8
 800848c:	080132d4 	.word	0x080132d4
 8008490:	2000a7f8 	.word	0x2000a7f8
 8008494:	2000a7ec 	.word	0x2000a7ec
 8008498:	2000a7f4 	.word	0x2000a7f4
 800849c:	2000a7fc 	.word	0x2000a7fc

080084a0 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 80084a0:	b580      	push	{r7, lr}
 80084a2:	b082      	sub	sp, #8
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 80084a8:	2101      	movs	r1, #1
 80084aa:	6878      	ldr	r0, [r7, #4]
 80084ac:	f7ff ff3a 	bl	8008324 <tcp_abandon>
}
 80084b0:	bf00      	nop
 80084b2:	3708      	adds	r7, #8
 80084b4:	46bd      	mov	sp, r7
 80084b6:	bd80      	pop	{r7, pc}

080084b8 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80084b8:	b580      	push	{r7, lr}
 80084ba:	b088      	sub	sp, #32
 80084bc:	af00      	add	r7, sp, #0
 80084be:	60f8      	str	r0, [r7, #12]
 80084c0:	60b9      	str	r1, [r7, #8]
 80084c2:	4613      	mov	r3, r2
 80084c4:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 80084c6:	2304      	movs	r3, #4
 80084c8:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80084ca:	68bb      	ldr	r3, [r7, #8]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d101      	bne.n	80084d4 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 80084d0:	4b3e      	ldr	r3, [pc, #248]	@ (80085cc <tcp_bind+0x114>)
 80084d2:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d109      	bne.n	80084ee <tcp_bind+0x36>
 80084da:	4b3d      	ldr	r3, [pc, #244]	@ (80085d0 <tcp_bind+0x118>)
 80084dc:	f240 22a9 	movw	r2, #681	@ 0x2a9
 80084e0:	493c      	ldr	r1, [pc, #240]	@ (80085d4 <tcp_bind+0x11c>)
 80084e2:	483d      	ldr	r0, [pc, #244]	@ (80085d8 <tcp_bind+0x120>)
 80084e4:	f008 ff4c 	bl	8011380 <iprintf>
 80084e8:	f06f 030f 	mvn.w	r3, #15
 80084ec:	e06a      	b.n	80085c4 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	7d1b      	ldrb	r3, [r3, #20]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d009      	beq.n	800850a <tcp_bind+0x52>
 80084f6:	4b36      	ldr	r3, [pc, #216]	@ (80085d0 <tcp_bind+0x118>)
 80084f8:	f240 22ab 	movw	r2, #683	@ 0x2ab
 80084fc:	4937      	ldr	r1, [pc, #220]	@ (80085dc <tcp_bind+0x124>)
 80084fe:	4836      	ldr	r0, [pc, #216]	@ (80085d8 <tcp_bind+0x120>)
 8008500:	f008 ff3e 	bl	8011380 <iprintf>
 8008504:	f06f 0305 	mvn.w	r3, #5
 8008508:	e05c      	b.n	80085c4 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 800850a:	88fb      	ldrh	r3, [r7, #6]
 800850c:	2b00      	cmp	r3, #0
 800850e:	d109      	bne.n	8008524 <tcp_bind+0x6c>
    port = tcp_new_port();
 8008510:	f000 f9f0 	bl	80088f4 <tcp_new_port>
 8008514:	4603      	mov	r3, r0
 8008516:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8008518:	88fb      	ldrh	r3, [r7, #6]
 800851a:	2b00      	cmp	r3, #0
 800851c:	d135      	bne.n	800858a <tcp_bind+0xd2>
      return ERR_BUF;
 800851e:	f06f 0301 	mvn.w	r3, #1
 8008522:	e04f      	b.n	80085c4 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 8008524:	2300      	movs	r3, #0
 8008526:	61fb      	str	r3, [r7, #28]
 8008528:	e02b      	b.n	8008582 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800852a:	4a2d      	ldr	r2, [pc, #180]	@ (80085e0 <tcp_bind+0x128>)
 800852c:	69fb      	ldr	r3, [r7, #28]
 800852e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	61bb      	str	r3, [r7, #24]
 8008536:	e01e      	b.n	8008576 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 8008538:	69bb      	ldr	r3, [r7, #24]
 800853a:	8adb      	ldrh	r3, [r3, #22]
 800853c:	88fa      	ldrh	r2, [r7, #6]
 800853e:	429a      	cmp	r2, r3
 8008540:	d116      	bne.n	8008570 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 8008542:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8008544:	2b00      	cmp	r3, #0
 8008546:	d010      	beq.n	800856a <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 8008548:	69bb      	ldr	r3, [r7, #24]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	2b00      	cmp	r3, #0
 800854e:	d00c      	beq.n	800856a <tcp_bind+0xb2>
 8008550:	68bb      	ldr	r3, [r7, #8]
 8008552:	2b00      	cmp	r3, #0
 8008554:	d009      	beq.n	800856a <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 8008556:	68bb      	ldr	r3, [r7, #8]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	2b00      	cmp	r3, #0
 800855c:	d005      	beq.n	800856a <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800855e:	69bb      	ldr	r3, [r7, #24]
 8008560:	681a      	ldr	r2, [r3, #0]
 8008562:	68bb      	ldr	r3, [r7, #8]
 8008564:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8008566:	429a      	cmp	r2, r3
 8008568:	d102      	bne.n	8008570 <tcp_bind+0xb8>
              return ERR_USE;
 800856a:	f06f 0307 	mvn.w	r3, #7
 800856e:	e029      	b.n	80085c4 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8008570:	69bb      	ldr	r3, [r7, #24]
 8008572:	68db      	ldr	r3, [r3, #12]
 8008574:	61bb      	str	r3, [r7, #24]
 8008576:	69bb      	ldr	r3, [r7, #24]
 8008578:	2b00      	cmp	r3, #0
 800857a:	d1dd      	bne.n	8008538 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 800857c:	69fb      	ldr	r3, [r7, #28]
 800857e:	3301      	adds	r3, #1
 8008580:	61fb      	str	r3, [r7, #28]
 8008582:	69fa      	ldr	r2, [r7, #28]
 8008584:	697b      	ldr	r3, [r7, #20]
 8008586:	429a      	cmp	r2, r3
 8008588:	dbcf      	blt.n	800852a <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 800858a:	68bb      	ldr	r3, [r7, #8]
 800858c:	2b00      	cmp	r3, #0
 800858e:	d00c      	beq.n	80085aa <tcp_bind+0xf2>
 8008590:	68bb      	ldr	r3, [r7, #8]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	2b00      	cmp	r3, #0
 8008596:	d008      	beq.n	80085aa <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 8008598:	68bb      	ldr	r3, [r7, #8]
 800859a:	2b00      	cmp	r3, #0
 800859c:	d002      	beq.n	80085a4 <tcp_bind+0xec>
 800859e:	68bb      	ldr	r3, [r7, #8]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	e000      	b.n	80085a6 <tcp_bind+0xee>
 80085a4:	2300      	movs	r3, #0
 80085a6:	68fa      	ldr	r2, [r7, #12]
 80085a8:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	88fa      	ldrh	r2, [r7, #6]
 80085ae:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 80085b0:	4b0c      	ldr	r3, [pc, #48]	@ (80085e4 <tcp_bind+0x12c>)
 80085b2:	681a      	ldr	r2, [r3, #0]
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	60da      	str	r2, [r3, #12]
 80085b8:	4a0a      	ldr	r2, [pc, #40]	@ (80085e4 <tcp_bind+0x12c>)
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	6013      	str	r3, [r2, #0]
 80085be:	f005 fcc5 	bl	800df4c <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 80085c2:	2300      	movs	r3, #0
}
 80085c4:	4618      	mov	r0, r3
 80085c6:	3720      	adds	r7, #32
 80085c8:	46bd      	mov	sp, r7
 80085ca:	bd80      	pop	{r7, pc}
 80085cc:	0801517c 	.word	0x0801517c
 80085d0:	08013174 	.word	0x08013174
 80085d4:	08013308 	.word	0x08013308
 80085d8:	080131b8 	.word	0x080131b8
 80085dc:	08013320 	.word	0x08013320
 80085e0:	08015154 	.word	0x08015154
 80085e4:	2000a7ec 	.word	0x2000a7ec

080085e8 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	b084      	sub	sp, #16
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	60f8      	str	r0, [r7, #12]
 80085f0:	60b9      	str	r1, [r7, #8]
 80085f2:	4613      	mov	r3, r2
 80085f4:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 80085f6:	68bb      	ldr	r3, [r7, #8]
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d106      	bne.n	800860a <tcp_accept_null+0x22>
 80085fc:	4b07      	ldr	r3, [pc, #28]	@ (800861c <tcp_accept_null+0x34>)
 80085fe:	f240 320f 	movw	r2, #783	@ 0x30f
 8008602:	4907      	ldr	r1, [pc, #28]	@ (8008620 <tcp_accept_null+0x38>)
 8008604:	4807      	ldr	r0, [pc, #28]	@ (8008624 <tcp_accept_null+0x3c>)
 8008606:	f008 febb 	bl	8011380 <iprintf>

  tcp_abort(pcb);
 800860a:	68b8      	ldr	r0, [r7, #8]
 800860c:	f7ff ff48 	bl	80084a0 <tcp_abort>

  return ERR_ABRT;
 8008610:	f06f 030c 	mvn.w	r3, #12
}
 8008614:	4618      	mov	r0, r3
 8008616:	3710      	adds	r7, #16
 8008618:	46bd      	mov	sp, r7
 800861a:	bd80      	pop	{r7, pc}
 800861c:	08013174 	.word	0x08013174
 8008620:	08013348 	.word	0x08013348
 8008624:	080131b8 	.word	0x080131b8

08008628 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 8008628:	b580      	push	{r7, lr}
 800862a:	b082      	sub	sp, #8
 800862c:	af00      	add	r7, sp, #0
 800862e:	6078      	str	r0, [r7, #4]
 8008630:	460b      	mov	r3, r1
 8008632:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 8008634:	78fb      	ldrb	r3, [r7, #3]
 8008636:	2200      	movs	r2, #0
 8008638:	4619      	mov	r1, r3
 800863a:	6878      	ldr	r0, [r7, #4]
 800863c:	f000 f806 	bl	800864c <tcp_listen_with_backlog_and_err>
 8008640:	4603      	mov	r3, r0
}
 8008642:	4618      	mov	r0, r3
 8008644:	3708      	adds	r7, #8
 8008646:	46bd      	mov	sp, r7
 8008648:	bd80      	pop	{r7, pc}
	...

0800864c <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 800864c:	b580      	push	{r7, lr}
 800864e:	b088      	sub	sp, #32
 8008650:	af00      	add	r7, sp, #0
 8008652:	60f8      	str	r0, [r7, #12]
 8008654:	460b      	mov	r3, r1
 8008656:	607a      	str	r2, [r7, #4]
 8008658:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 800865a:	2300      	movs	r3, #0
 800865c:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	2b00      	cmp	r3, #0
 8008662:	d109      	bne.n	8008678 <tcp_listen_with_backlog_and_err+0x2c>
 8008664:	4b47      	ldr	r3, [pc, #284]	@ (8008784 <tcp_listen_with_backlog_and_err+0x138>)
 8008666:	f240 3259 	movw	r2, #857	@ 0x359
 800866a:	4947      	ldr	r1, [pc, #284]	@ (8008788 <tcp_listen_with_backlog_and_err+0x13c>)
 800866c:	4847      	ldr	r0, [pc, #284]	@ (800878c <tcp_listen_with_backlog_and_err+0x140>)
 800866e:	f008 fe87 	bl	8011380 <iprintf>
 8008672:	23f0      	movs	r3, #240	@ 0xf0
 8008674:	76fb      	strb	r3, [r7, #27]
 8008676:	e079      	b.n	800876c <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	7d1b      	ldrb	r3, [r3, #20]
 800867c:	2b00      	cmp	r3, #0
 800867e:	d009      	beq.n	8008694 <tcp_listen_with_backlog_and_err+0x48>
 8008680:	4b40      	ldr	r3, [pc, #256]	@ (8008784 <tcp_listen_with_backlog_and_err+0x138>)
 8008682:	f240 325a 	movw	r2, #858	@ 0x35a
 8008686:	4942      	ldr	r1, [pc, #264]	@ (8008790 <tcp_listen_with_backlog_and_err+0x144>)
 8008688:	4840      	ldr	r0, [pc, #256]	@ (800878c <tcp_listen_with_backlog_and_err+0x140>)
 800868a:	f008 fe79 	bl	8011380 <iprintf>
 800868e:	23f1      	movs	r3, #241	@ 0xf1
 8008690:	76fb      	strb	r3, [r7, #27]
 8008692:	e06b      	b.n	800876c <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	7d1b      	ldrb	r3, [r3, #20]
 8008698:	2b01      	cmp	r3, #1
 800869a:	d104      	bne.n	80086a6 <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 80086a0:	23f7      	movs	r3, #247	@ 0xf7
 80086a2:	76fb      	strb	r3, [r7, #27]
    goto done;
 80086a4:	e062      	b.n	800876c <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 80086a6:	2002      	movs	r0, #2
 80086a8:	f7fe f9ea 	bl	8006a80 <memp_malloc>
 80086ac:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 80086ae:	69fb      	ldr	r3, [r7, #28]
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d102      	bne.n	80086ba <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 80086b4:	23ff      	movs	r3, #255	@ 0xff
 80086b6:	76fb      	strb	r3, [r7, #27]
    goto done;
 80086b8:	e058      	b.n	800876c <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	691a      	ldr	r2, [r3, #16]
 80086be:	69fb      	ldr	r3, [r7, #28]
 80086c0:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	8ada      	ldrh	r2, [r3, #22]
 80086c6:	69fb      	ldr	r3, [r7, #28]
 80086c8:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 80086ca:	69fb      	ldr	r3, [r7, #28]
 80086cc:	2201      	movs	r2, #1
 80086ce:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	7d5a      	ldrb	r2, [r3, #21]
 80086d4:	69fb      	ldr	r3, [r7, #28]
 80086d6:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	7a5a      	ldrb	r2, [r3, #9]
 80086dc:	69fb      	ldr	r3, [r7, #28]
 80086de:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 80086e0:	69fb      	ldr	r3, [r7, #28]
 80086e2:	2200      	movs	r2, #0
 80086e4:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	7ada      	ldrb	r2, [r3, #11]
 80086ea:	69fb      	ldr	r3, [r7, #28]
 80086ec:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	7a9a      	ldrb	r2, [r3, #10]
 80086f2:	69fb      	ldr	r3, [r7, #28]
 80086f4:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	681a      	ldr	r2, [r3, #0]
 80086fa:	69fb      	ldr	r3, [r7, #28]
 80086fc:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	8adb      	ldrh	r3, [r3, #22]
 8008702:	2b00      	cmp	r3, #0
 8008704:	d021      	beq.n	800874a <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8008706:	4b23      	ldr	r3, [pc, #140]	@ (8008794 <tcp_listen_with_backlog_and_err+0x148>)
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	68fa      	ldr	r2, [r7, #12]
 800870c:	429a      	cmp	r2, r3
 800870e:	d105      	bne.n	800871c <tcp_listen_with_backlog_and_err+0xd0>
 8008710:	4b20      	ldr	r3, [pc, #128]	@ (8008794 <tcp_listen_with_backlog_and_err+0x148>)
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	68db      	ldr	r3, [r3, #12]
 8008716:	4a1f      	ldr	r2, [pc, #124]	@ (8008794 <tcp_listen_with_backlog_and_err+0x148>)
 8008718:	6013      	str	r3, [r2, #0]
 800871a:	e013      	b.n	8008744 <tcp_listen_with_backlog_and_err+0xf8>
 800871c:	4b1d      	ldr	r3, [pc, #116]	@ (8008794 <tcp_listen_with_backlog_and_err+0x148>)
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	617b      	str	r3, [r7, #20]
 8008722:	e00c      	b.n	800873e <tcp_listen_with_backlog_and_err+0xf2>
 8008724:	697b      	ldr	r3, [r7, #20]
 8008726:	68db      	ldr	r3, [r3, #12]
 8008728:	68fa      	ldr	r2, [r7, #12]
 800872a:	429a      	cmp	r2, r3
 800872c:	d104      	bne.n	8008738 <tcp_listen_with_backlog_and_err+0xec>
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	68da      	ldr	r2, [r3, #12]
 8008732:	697b      	ldr	r3, [r7, #20]
 8008734:	60da      	str	r2, [r3, #12]
 8008736:	e005      	b.n	8008744 <tcp_listen_with_backlog_and_err+0xf8>
 8008738:	697b      	ldr	r3, [r7, #20]
 800873a:	68db      	ldr	r3, [r3, #12]
 800873c:	617b      	str	r3, [r7, #20]
 800873e:	697b      	ldr	r3, [r7, #20]
 8008740:	2b00      	cmp	r3, #0
 8008742:	d1ef      	bne.n	8008724 <tcp_listen_with_backlog_and_err+0xd8>
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	2200      	movs	r2, #0
 8008748:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 800874a:	68f8      	ldr	r0, [r7, #12]
 800874c:	f7ff fbc0 	bl	8007ed0 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 8008750:	69fb      	ldr	r3, [r7, #28]
 8008752:	4a11      	ldr	r2, [pc, #68]	@ (8008798 <tcp_listen_with_backlog_and_err+0x14c>)
 8008754:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 8008756:	4b11      	ldr	r3, [pc, #68]	@ (800879c <tcp_listen_with_backlog_and_err+0x150>)
 8008758:	681a      	ldr	r2, [r3, #0]
 800875a:	69fb      	ldr	r3, [r7, #28]
 800875c:	60da      	str	r2, [r3, #12]
 800875e:	4a0f      	ldr	r2, [pc, #60]	@ (800879c <tcp_listen_with_backlog_and_err+0x150>)
 8008760:	69fb      	ldr	r3, [r7, #28]
 8008762:	6013      	str	r3, [r2, #0]
 8008764:	f005 fbf2 	bl	800df4c <tcp_timer_needed>
  res = ERR_OK;
 8008768:	2300      	movs	r3, #0
 800876a:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	2b00      	cmp	r3, #0
 8008770:	d002      	beq.n	8008778 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	7efa      	ldrb	r2, [r7, #27]
 8008776:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 8008778:	69fb      	ldr	r3, [r7, #28]
}
 800877a:	4618      	mov	r0, r3
 800877c:	3720      	adds	r7, #32
 800877e:	46bd      	mov	sp, r7
 8008780:	bd80      	pop	{r7, pc}
 8008782:	bf00      	nop
 8008784:	08013174 	.word	0x08013174
 8008788:	08013368 	.word	0x08013368
 800878c:	080131b8 	.word	0x080131b8
 8008790:	08013398 	.word	0x08013398
 8008794:	2000a7ec 	.word	0x2000a7ec
 8008798:	080085e9 	.word	0x080085e9
 800879c:	2000a7f0 	.word	0x2000a7f0

080087a0 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 80087a0:	b580      	push	{r7, lr}
 80087a2:	b084      	sub	sp, #16
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d106      	bne.n	80087bc <tcp_update_rcv_ann_wnd+0x1c>
 80087ae:	4b25      	ldr	r3, [pc, #148]	@ (8008844 <tcp_update_rcv_ann_wnd+0xa4>)
 80087b0:	f240 32a6 	movw	r2, #934	@ 0x3a6
 80087b4:	4924      	ldr	r1, [pc, #144]	@ (8008848 <tcp_update_rcv_ann_wnd+0xa8>)
 80087b6:	4825      	ldr	r0, [pc, #148]	@ (800884c <tcp_update_rcv_ann_wnd+0xac>)
 80087b8:	f008 fde2 	bl	8011380 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087c0:	687a      	ldr	r2, [r7, #4]
 80087c2:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 80087c4:	4413      	add	r3, r2
 80087c6:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087cc:	687a      	ldr	r2, [r7, #4]
 80087ce:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 80087d0:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 80087d4:	bf28      	it	cs
 80087d6:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 80087da:	b292      	uxth	r2, r2
 80087dc:	4413      	add	r3, r2
 80087de:	68fa      	ldr	r2, [r7, #12]
 80087e0:	1ad3      	subs	r3, r2, r3
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	db08      	blt.n	80087f8 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087f2:	68fa      	ldr	r2, [r7, #12]
 80087f4:	1ad3      	subs	r3, r2, r3
 80087f6:	e020      	b.n	800883a <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008800:	1ad3      	subs	r3, r2, r3
 8008802:	2b00      	cmp	r3, #0
 8008804:	dd03      	ble.n	800880e <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	2200      	movs	r2, #0
 800880a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800880c:	e014      	b.n	8008838 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008816:	1ad3      	subs	r3, r2, r3
 8008818:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800881a:	68bb      	ldr	r3, [r7, #8]
 800881c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008820:	d306      	bcc.n	8008830 <tcp_update_rcv_ann_wnd+0x90>
 8008822:	4b08      	ldr	r3, [pc, #32]	@ (8008844 <tcp_update_rcv_ann_wnd+0xa4>)
 8008824:	f240 32b6 	movw	r2, #950	@ 0x3b6
 8008828:	4909      	ldr	r1, [pc, #36]	@ (8008850 <tcp_update_rcv_ann_wnd+0xb0>)
 800882a:	4808      	ldr	r0, [pc, #32]	@ (800884c <tcp_update_rcv_ann_wnd+0xac>)
 800882c:	f008 fda8 	bl	8011380 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8008830:	68bb      	ldr	r3, [r7, #8]
 8008832:	b29a      	uxth	r2, r3
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 8008838:	2300      	movs	r3, #0
  }
}
 800883a:	4618      	mov	r0, r3
 800883c:	3710      	adds	r7, #16
 800883e:	46bd      	mov	sp, r7
 8008840:	bd80      	pop	{r7, pc}
 8008842:	bf00      	nop
 8008844:	08013174 	.word	0x08013174
 8008848:	080133d0 	.word	0x080133d0
 800884c:	080131b8 	.word	0x080131b8
 8008850:	080133f4 	.word	0x080133f4

08008854 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8008854:	b580      	push	{r7, lr}
 8008856:	b084      	sub	sp, #16
 8008858:	af00      	add	r7, sp, #0
 800885a:	6078      	str	r0, [r7, #4]
 800885c:	460b      	mov	r3, r1
 800885e:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	2b00      	cmp	r3, #0
 8008864:	d107      	bne.n	8008876 <tcp_recved+0x22>
 8008866:	4b1f      	ldr	r3, [pc, #124]	@ (80088e4 <tcp_recved+0x90>)
 8008868:	f240 32cf 	movw	r2, #975	@ 0x3cf
 800886c:	491e      	ldr	r1, [pc, #120]	@ (80088e8 <tcp_recved+0x94>)
 800886e:	481f      	ldr	r0, [pc, #124]	@ (80088ec <tcp_recved+0x98>)
 8008870:	f008 fd86 	bl	8011380 <iprintf>
 8008874:	e032      	b.n	80088dc <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	7d1b      	ldrb	r3, [r3, #20]
 800887a:	2b01      	cmp	r3, #1
 800887c:	d106      	bne.n	800888c <tcp_recved+0x38>
 800887e:	4b19      	ldr	r3, [pc, #100]	@ (80088e4 <tcp_recved+0x90>)
 8008880:	f240 32d2 	movw	r2, #978	@ 0x3d2
 8008884:	491a      	ldr	r1, [pc, #104]	@ (80088f0 <tcp_recved+0x9c>)
 8008886:	4819      	ldr	r0, [pc, #100]	@ (80088ec <tcp_recved+0x98>)
 8008888:	f008 fd7a 	bl	8011380 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8008890:	887b      	ldrh	r3, [r7, #2]
 8008892:	4413      	add	r3, r2
 8008894:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8008896:	89fb      	ldrh	r3, [r7, #14]
 8008898:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800889c:	d804      	bhi.n	80088a8 <tcp_recved+0x54>
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80088a2:	89fa      	ldrh	r2, [r7, #14]
 80088a4:	429a      	cmp	r2, r3
 80088a6:	d204      	bcs.n	80088b2 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 80088ae:	851a      	strh	r2, [r3, #40]	@ 0x28
 80088b0:	e002      	b.n	80088b8 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	89fa      	ldrh	r2, [r7, #14]
 80088b6:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 80088b8:	6878      	ldr	r0, [r7, #4]
 80088ba:	f7ff ff71 	bl	80087a0 <tcp_update_rcv_ann_wnd>
 80088be:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 80088c0:	68bb      	ldr	r3, [r7, #8]
 80088c2:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 80088c6:	d309      	bcc.n	80088dc <tcp_recved+0x88>
    tcp_ack_now(pcb);
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	8b5b      	ldrh	r3, [r3, #26]
 80088cc:	f043 0302 	orr.w	r3, r3, #2
 80088d0:	b29a      	uxth	r2, r3
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80088d6:	6878      	ldr	r0, [r7, #4]
 80088d8:	f004 fbc2 	bl	800d060 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 80088dc:	3710      	adds	r7, #16
 80088de:	46bd      	mov	sp, r7
 80088e0:	bd80      	pop	{r7, pc}
 80088e2:	bf00      	nop
 80088e4:	08013174 	.word	0x08013174
 80088e8:	08013410 	.word	0x08013410
 80088ec:	080131b8 	.word	0x080131b8
 80088f0:	08013428 	.word	0x08013428

080088f4 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 80088f4:	b480      	push	{r7}
 80088f6:	b083      	sub	sp, #12
 80088f8:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 80088fa:	2300      	movs	r3, #0
 80088fc:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 80088fe:	4b1e      	ldr	r3, [pc, #120]	@ (8008978 <tcp_new_port+0x84>)
 8008900:	881b      	ldrh	r3, [r3, #0]
 8008902:	3301      	adds	r3, #1
 8008904:	b29a      	uxth	r2, r3
 8008906:	4b1c      	ldr	r3, [pc, #112]	@ (8008978 <tcp_new_port+0x84>)
 8008908:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800890a:	4b1b      	ldr	r3, [pc, #108]	@ (8008978 <tcp_new_port+0x84>)
 800890c:	881b      	ldrh	r3, [r3, #0]
 800890e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008912:	4293      	cmp	r3, r2
 8008914:	d103      	bne.n	800891e <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8008916:	4b18      	ldr	r3, [pc, #96]	@ (8008978 <tcp_new_port+0x84>)
 8008918:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 800891c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800891e:	2300      	movs	r3, #0
 8008920:	71fb      	strb	r3, [r7, #7]
 8008922:	e01e      	b.n	8008962 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8008924:	79fb      	ldrb	r3, [r7, #7]
 8008926:	4a15      	ldr	r2, [pc, #84]	@ (800897c <tcp_new_port+0x88>)
 8008928:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	603b      	str	r3, [r7, #0]
 8008930:	e011      	b.n	8008956 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 8008932:	683b      	ldr	r3, [r7, #0]
 8008934:	8ada      	ldrh	r2, [r3, #22]
 8008936:	4b10      	ldr	r3, [pc, #64]	@ (8008978 <tcp_new_port+0x84>)
 8008938:	881b      	ldrh	r3, [r3, #0]
 800893a:	429a      	cmp	r2, r3
 800893c:	d108      	bne.n	8008950 <tcp_new_port+0x5c>
        n++;
 800893e:	88bb      	ldrh	r3, [r7, #4]
 8008940:	3301      	adds	r3, #1
 8008942:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8008944:	88bb      	ldrh	r3, [r7, #4]
 8008946:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800894a:	d3d8      	bcc.n	80088fe <tcp_new_port+0xa>
          return 0;
 800894c:	2300      	movs	r3, #0
 800894e:	e00d      	b.n	800896c <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8008950:	683b      	ldr	r3, [r7, #0]
 8008952:	68db      	ldr	r3, [r3, #12]
 8008954:	603b      	str	r3, [r7, #0]
 8008956:	683b      	ldr	r3, [r7, #0]
 8008958:	2b00      	cmp	r3, #0
 800895a:	d1ea      	bne.n	8008932 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800895c:	79fb      	ldrb	r3, [r7, #7]
 800895e:	3301      	adds	r3, #1
 8008960:	71fb      	strb	r3, [r7, #7]
 8008962:	79fb      	ldrb	r3, [r7, #7]
 8008964:	2b03      	cmp	r3, #3
 8008966:	d9dd      	bls.n	8008924 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8008968:	4b03      	ldr	r3, [pc, #12]	@ (8008978 <tcp_new_port+0x84>)
 800896a:	881b      	ldrh	r3, [r3, #0]
}
 800896c:	4618      	mov	r0, r3
 800896e:	370c      	adds	r7, #12
 8008970:	46bd      	mov	sp, r7
 8008972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008976:	4770      	bx	lr
 8008978:	20000060 	.word	0x20000060
 800897c:	08015154 	.word	0x08015154

08008980 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8008980:	b5b0      	push	{r4, r5, r7, lr}
 8008982:	b090      	sub	sp, #64	@ 0x40
 8008984:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8008986:	2300      	movs	r3, #0
 8008988:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 800898c:	4b95      	ldr	r3, [pc, #596]	@ (8008be4 <tcp_slowtmr+0x264>)
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	3301      	adds	r3, #1
 8008992:	4a94      	ldr	r2, [pc, #592]	@ (8008be4 <tcp_slowtmr+0x264>)
 8008994:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8008996:	4b94      	ldr	r3, [pc, #592]	@ (8008be8 <tcp_slowtmr+0x268>)
 8008998:	781b      	ldrb	r3, [r3, #0]
 800899a:	3301      	adds	r3, #1
 800899c:	b2da      	uxtb	r2, r3
 800899e:	4b92      	ldr	r3, [pc, #584]	@ (8008be8 <tcp_slowtmr+0x268>)
 80089a0:	701a      	strb	r2, [r3, #0]
 80089a2:	e000      	b.n	80089a6 <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 80089a4:	bf00      	nop
  prev = NULL;
 80089a6:	2300      	movs	r3, #0
 80089a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 80089aa:	4b90      	ldr	r3, [pc, #576]	@ (8008bec <tcp_slowtmr+0x26c>)
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 80089b0:	e29d      	b.n	8008eee <tcp_slowtmr+0x56e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 80089b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089b4:	7d1b      	ldrb	r3, [r3, #20]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d106      	bne.n	80089c8 <tcp_slowtmr+0x48>
 80089ba:	4b8d      	ldr	r3, [pc, #564]	@ (8008bf0 <tcp_slowtmr+0x270>)
 80089bc:	f240 42be 	movw	r2, #1214	@ 0x4be
 80089c0:	498c      	ldr	r1, [pc, #560]	@ (8008bf4 <tcp_slowtmr+0x274>)
 80089c2:	488d      	ldr	r0, [pc, #564]	@ (8008bf8 <tcp_slowtmr+0x278>)
 80089c4:	f008 fcdc 	bl	8011380 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 80089c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089ca:	7d1b      	ldrb	r3, [r3, #20]
 80089cc:	2b01      	cmp	r3, #1
 80089ce:	d106      	bne.n	80089de <tcp_slowtmr+0x5e>
 80089d0:	4b87      	ldr	r3, [pc, #540]	@ (8008bf0 <tcp_slowtmr+0x270>)
 80089d2:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 80089d6:	4989      	ldr	r1, [pc, #548]	@ (8008bfc <tcp_slowtmr+0x27c>)
 80089d8:	4887      	ldr	r0, [pc, #540]	@ (8008bf8 <tcp_slowtmr+0x278>)
 80089da:	f008 fcd1 	bl	8011380 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 80089de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089e0:	7d1b      	ldrb	r3, [r3, #20]
 80089e2:	2b0a      	cmp	r3, #10
 80089e4:	d106      	bne.n	80089f4 <tcp_slowtmr+0x74>
 80089e6:	4b82      	ldr	r3, [pc, #520]	@ (8008bf0 <tcp_slowtmr+0x270>)
 80089e8:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 80089ec:	4984      	ldr	r1, [pc, #528]	@ (8008c00 <tcp_slowtmr+0x280>)
 80089ee:	4882      	ldr	r0, [pc, #520]	@ (8008bf8 <tcp_slowtmr+0x278>)
 80089f0:	f008 fcc6 	bl	8011380 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 80089f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089f6:	7f9a      	ldrb	r2, [r3, #30]
 80089f8:	4b7b      	ldr	r3, [pc, #492]	@ (8008be8 <tcp_slowtmr+0x268>)
 80089fa:	781b      	ldrb	r3, [r3, #0]
 80089fc:	429a      	cmp	r2, r3
 80089fe:	d105      	bne.n	8008a0c <tcp_slowtmr+0x8c>
      prev = pcb;
 8008a00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a02:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8008a04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a06:	68db      	ldr	r3, [r3, #12]
 8008a08:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 8008a0a:	e270      	b.n	8008eee <tcp_slowtmr+0x56e>
    pcb->last_timer = tcp_timer_ctr;
 8008a0c:	4b76      	ldr	r3, [pc, #472]	@ (8008be8 <tcp_slowtmr+0x268>)
 8008a0e:	781a      	ldrb	r2, [r3, #0]
 8008a10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a12:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 8008a14:	2300      	movs	r3, #0
 8008a16:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 8008a1a:	2300      	movs	r3, #0
 8008a1c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8008a20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a22:	7d1b      	ldrb	r3, [r3, #20]
 8008a24:	2b02      	cmp	r3, #2
 8008a26:	d10a      	bne.n	8008a3e <tcp_slowtmr+0xbe>
 8008a28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a2a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008a2e:	2b05      	cmp	r3, #5
 8008a30:	d905      	bls.n	8008a3e <tcp_slowtmr+0xbe>
      ++pcb_remove;
 8008a32:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008a36:	3301      	adds	r3, #1
 8008a38:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8008a3c:	e11e      	b.n	8008c7c <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8008a3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a40:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008a44:	2b0b      	cmp	r3, #11
 8008a46:	d905      	bls.n	8008a54 <tcp_slowtmr+0xd4>
      ++pcb_remove;
 8008a48:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008a4c:	3301      	adds	r3, #1
 8008a4e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8008a52:	e113      	b.n	8008c7c <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 8008a54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a56:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d075      	beq.n	8008b4a <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8008a5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d006      	beq.n	8008a74 <tcp_slowtmr+0xf4>
 8008a66:	4b62      	ldr	r3, [pc, #392]	@ (8008bf0 <tcp_slowtmr+0x270>)
 8008a68:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 8008a6c:	4965      	ldr	r1, [pc, #404]	@ (8008c04 <tcp_slowtmr+0x284>)
 8008a6e:	4862      	ldr	r0, [pc, #392]	@ (8008bf8 <tcp_slowtmr+0x278>)
 8008a70:	f008 fc86 	bl	8011380 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8008a74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a76:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d106      	bne.n	8008a8a <tcp_slowtmr+0x10a>
 8008a7c:	4b5c      	ldr	r3, [pc, #368]	@ (8008bf0 <tcp_slowtmr+0x270>)
 8008a7e:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 8008a82:	4961      	ldr	r1, [pc, #388]	@ (8008c08 <tcp_slowtmr+0x288>)
 8008a84:	485c      	ldr	r0, [pc, #368]	@ (8008bf8 <tcp_slowtmr+0x278>)
 8008a86:	f008 fc7b 	bl	8011380 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8008a8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a8c:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8008a90:	2b0b      	cmp	r3, #11
 8008a92:	d905      	bls.n	8008aa0 <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 8008a94:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008a98:	3301      	adds	r3, #1
 8008a9a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8008a9e:	e0ed      	b.n	8008c7c <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8008aa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008aa2:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8008aa6:	3b01      	subs	r3, #1
 8008aa8:	4a58      	ldr	r2, [pc, #352]	@ (8008c0c <tcp_slowtmr+0x28c>)
 8008aaa:	5cd3      	ldrb	r3, [r2, r3]
 8008aac:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8008aae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ab0:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8008ab4:	7c7a      	ldrb	r2, [r7, #17]
 8008ab6:	429a      	cmp	r2, r3
 8008ab8:	d907      	bls.n	8008aca <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 8008aba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008abc:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8008ac0:	3301      	adds	r3, #1
 8008ac2:	b2da      	uxtb	r2, r3
 8008ac4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ac6:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 8008aca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008acc:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8008ad0:	7c7a      	ldrb	r2, [r7, #17]
 8008ad2:	429a      	cmp	r2, r3
 8008ad4:	f200 80d2 	bhi.w	8008c7c <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 8008ad8:	2301      	movs	r3, #1
 8008ada:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 8008adc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ade:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d108      	bne.n	8008af8 <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8008ae6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008ae8:	f005 f962 	bl	800ddb0 <tcp_zero_window_probe>
 8008aec:	4603      	mov	r3, r0
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d014      	beq.n	8008b1c <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 8008af2:	2300      	movs	r3, #0
 8008af4:	623b      	str	r3, [r7, #32]
 8008af6:	e011      	b.n	8008b1c <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8008af8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008afa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008afe:	4619      	mov	r1, r3
 8008b00:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008b02:	f004 f827 	bl	800cb54 <tcp_split_unsent_seg>
 8008b06:	4603      	mov	r3, r0
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d107      	bne.n	8008b1c <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 8008b0c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008b0e:	f004 faa7 	bl	800d060 <tcp_output>
 8008b12:	4603      	mov	r3, r0
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d101      	bne.n	8008b1c <tcp_slowtmr+0x19c>
                  next_slot = 0;
 8008b18:	2300      	movs	r3, #0
 8008b1a:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 8008b1c:	6a3b      	ldr	r3, [r7, #32]
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	f000 80ac 	beq.w	8008c7c <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 8008b24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b26:	2200      	movs	r2, #0
 8008b28:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8008b2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b2e:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8008b32:	2b06      	cmp	r3, #6
 8008b34:	f200 80a2 	bhi.w	8008c7c <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 8008b38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b3a:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8008b3e:	3301      	adds	r3, #1
 8008b40:	b2da      	uxtb	r2, r3
 8008b42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b44:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 8008b48:	e098      	b.n	8008c7c <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8008b4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b4c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	db0f      	blt.n	8008b74 <tcp_slowtmr+0x1f4>
 8008b54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b56:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8008b5a:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8008b5e:	4293      	cmp	r3, r2
 8008b60:	d008      	beq.n	8008b74 <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 8008b62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b64:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8008b68:	b29b      	uxth	r3, r3
 8008b6a:	3301      	adds	r3, #1
 8008b6c:	b29b      	uxth	r3, r3
 8008b6e:	b21a      	sxth	r2, r3
 8008b70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b72:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 8008b74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b76:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 8008b7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b7c:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 8008b80:	429a      	cmp	r2, r3
 8008b82:	db7b      	blt.n	8008c7c <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8008b84:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008b86:	f004 fd5f 	bl	800d648 <tcp_rexmit_rto_prepare>
 8008b8a:	4603      	mov	r3, r0
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d007      	beq.n	8008ba0 <tcp_slowtmr+0x220>
 8008b90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d171      	bne.n	8008c7c <tcp_slowtmr+0x2fc>
 8008b98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b9a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d06d      	beq.n	8008c7c <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 8008ba0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ba2:	7d1b      	ldrb	r3, [r3, #20]
 8008ba4:	2b02      	cmp	r3, #2
 8008ba6:	d03a      	beq.n	8008c1e <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8008ba8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008baa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008bae:	2b0c      	cmp	r3, #12
 8008bb0:	bf28      	it	cs
 8008bb2:	230c      	movcs	r3, #12
 8008bb4:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8008bb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bb8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8008bbc:	10db      	asrs	r3, r3, #3
 8008bbe:	b21b      	sxth	r3, r3
 8008bc0:	461a      	mov	r2, r3
 8008bc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bc4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8008bc8:	4413      	add	r3, r2
 8008bca:	7efa      	ldrb	r2, [r7, #27]
 8008bcc:	4910      	ldr	r1, [pc, #64]	@ (8008c10 <tcp_slowtmr+0x290>)
 8008bce:	5c8a      	ldrb	r2, [r1, r2]
 8008bd0:	4093      	lsls	r3, r2
 8008bd2:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8008bd4:	697b      	ldr	r3, [r7, #20]
 8008bd6:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 8008bda:	4293      	cmp	r3, r2
 8008bdc:	dc1a      	bgt.n	8008c14 <tcp_slowtmr+0x294>
 8008bde:	697b      	ldr	r3, [r7, #20]
 8008be0:	b21a      	sxth	r2, r3
 8008be2:	e019      	b.n	8008c18 <tcp_slowtmr+0x298>
 8008be4:	2000a7e8 	.word	0x2000a7e8
 8008be8:	2000a7fe 	.word	0x2000a7fe
 8008bec:	2000a7f4 	.word	0x2000a7f4
 8008bf0:	08013174 	.word	0x08013174
 8008bf4:	080134b8 	.word	0x080134b8
 8008bf8:	080131b8 	.word	0x080131b8
 8008bfc:	080134e4 	.word	0x080134e4
 8008c00:	08013510 	.word	0x08013510
 8008c04:	08013540 	.word	0x08013540
 8008c08:	08013574 	.word	0x08013574
 8008c0c:	0801514c 	.word	0x0801514c
 8008c10:	0801513c 	.word	0x0801513c
 8008c14:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8008c18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c1a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 8008c1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c20:	2200      	movs	r2, #0
 8008c22:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8008c24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c26:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8008c2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c2c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8008c30:	4293      	cmp	r3, r2
 8008c32:	bf28      	it	cs
 8008c34:	4613      	movcs	r3, r2
 8008c36:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8008c38:	8a7b      	ldrh	r3, [r7, #18]
 8008c3a:	085b      	lsrs	r3, r3, #1
 8008c3c:	b29a      	uxth	r2, r3
 8008c3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c40:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8008c44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c46:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8008c4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c4c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8008c4e:	005b      	lsls	r3, r3, #1
 8008c50:	b29b      	uxth	r3, r3
 8008c52:	429a      	cmp	r2, r3
 8008c54:	d206      	bcs.n	8008c64 <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8008c56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c58:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8008c5a:	005b      	lsls	r3, r3, #1
 8008c5c:	b29a      	uxth	r2, r3
 8008c5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c60:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 8008c64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c66:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 8008c68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c6a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 8008c6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c70:	2200      	movs	r2, #0
 8008c72:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 8008c76:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008c78:	f004 fd56 	bl	800d728 <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 8008c7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c7e:	7d1b      	ldrb	r3, [r3, #20]
 8008c80:	2b06      	cmp	r3, #6
 8008c82:	d111      	bne.n	8008ca8 <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 8008c84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c86:	8b5b      	ldrh	r3, [r3, #26]
 8008c88:	f003 0310 	and.w	r3, r3, #16
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d00b      	beq.n	8008ca8 <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008c90:	4b9c      	ldr	r3, [pc, #624]	@ (8008f04 <tcp_slowtmr+0x584>)
 8008c92:	681a      	ldr	r2, [r3, #0]
 8008c94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c96:	6a1b      	ldr	r3, [r3, #32]
 8008c98:	1ad3      	subs	r3, r2, r3
 8008c9a:	2b28      	cmp	r3, #40	@ 0x28
 8008c9c:	d904      	bls.n	8008ca8 <tcp_slowtmr+0x328>
          ++pcb_remove;
 8008c9e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008ca2:	3301      	adds	r3, #1
 8008ca4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8008ca8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008caa:	7a5b      	ldrb	r3, [r3, #9]
 8008cac:	f003 0308 	and.w	r3, r3, #8
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d04a      	beq.n	8008d4a <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 8008cb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cb6:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8008cb8:	2b04      	cmp	r3, #4
 8008cba:	d003      	beq.n	8008cc4 <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 8008cbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cbe:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8008cc0:	2b07      	cmp	r3, #7
 8008cc2:	d142      	bne.n	8008d4a <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008cc4:	4b8f      	ldr	r3, [pc, #572]	@ (8008f04 <tcp_slowtmr+0x584>)
 8008cc6:	681a      	ldr	r2, [r3, #0]
 8008cc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cca:	6a1b      	ldr	r3, [r3, #32]
 8008ccc:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8008cce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cd0:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 8008cd4:	4b8c      	ldr	r3, [pc, #560]	@ (8008f08 <tcp_slowtmr+0x588>)
 8008cd6:	440b      	add	r3, r1
 8008cd8:	498c      	ldr	r1, [pc, #560]	@ (8008f0c <tcp_slowtmr+0x58c>)
 8008cda:	fba1 1303 	umull	r1, r3, r1, r3
 8008cde:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008ce0:	429a      	cmp	r2, r3
 8008ce2:	d90a      	bls.n	8008cfa <tcp_slowtmr+0x37a>
        ++pcb_remove;
 8008ce4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008ce8:	3301      	adds	r3, #1
 8008cea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 8008cee:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008cf2:	3301      	adds	r3, #1
 8008cf4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8008cf8:	e027      	b.n	8008d4a <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008cfa:	4b82      	ldr	r3, [pc, #520]	@ (8008f04 <tcp_slowtmr+0x584>)
 8008cfc:	681a      	ldr	r2, [r3, #0]
 8008cfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d00:	6a1b      	ldr	r3, [r3, #32]
 8008d02:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8008d04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d06:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 8008d0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d0c:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8008d10:	4618      	mov	r0, r3
 8008d12:	4b7f      	ldr	r3, [pc, #508]	@ (8008f10 <tcp_slowtmr+0x590>)
 8008d14:	fb00 f303 	mul.w	r3, r0, r3
 8008d18:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8008d1a:	497c      	ldr	r1, [pc, #496]	@ (8008f0c <tcp_slowtmr+0x58c>)
 8008d1c:	fba1 1303 	umull	r1, r3, r1, r3
 8008d20:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008d22:	429a      	cmp	r2, r3
 8008d24:	d911      	bls.n	8008d4a <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 8008d26:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008d28:	f005 f802 	bl	800dd30 <tcp_keepalive>
 8008d2c:	4603      	mov	r3, r0
 8008d2e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 8008d32:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d107      	bne.n	8008d4a <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 8008d3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d3c:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8008d40:	3301      	adds	r3, #1
 8008d42:	b2da      	uxtb	r2, r3
 8008d44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d46:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 8008d4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d4c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d011      	beq.n	8008d76 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8008d52:	4b6c      	ldr	r3, [pc, #432]	@ (8008f04 <tcp_slowtmr+0x584>)
 8008d54:	681a      	ldr	r2, [r3, #0]
 8008d56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d58:	6a1b      	ldr	r3, [r3, #32]
 8008d5a:	1ad2      	subs	r2, r2, r3
 8008d5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d5e:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 8008d62:	4619      	mov	r1, r3
 8008d64:	460b      	mov	r3, r1
 8008d66:	005b      	lsls	r3, r3, #1
 8008d68:	440b      	add	r3, r1
 8008d6a:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8008d6c:	429a      	cmp	r2, r3
 8008d6e:	d302      	bcc.n	8008d76 <tcp_slowtmr+0x3f6>
      tcp_free_ooseq(pcb);
 8008d70:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008d72:	f000 fec3 	bl	8009afc <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 8008d76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d78:	7d1b      	ldrb	r3, [r3, #20]
 8008d7a:	2b03      	cmp	r3, #3
 8008d7c:	d10b      	bne.n	8008d96 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008d7e:	4b61      	ldr	r3, [pc, #388]	@ (8008f04 <tcp_slowtmr+0x584>)
 8008d80:	681a      	ldr	r2, [r3, #0]
 8008d82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d84:	6a1b      	ldr	r3, [r3, #32]
 8008d86:	1ad3      	subs	r3, r2, r3
 8008d88:	2b28      	cmp	r3, #40	@ 0x28
 8008d8a:	d904      	bls.n	8008d96 <tcp_slowtmr+0x416>
        ++pcb_remove;
 8008d8c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008d90:	3301      	adds	r3, #1
 8008d92:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 8008d96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d98:	7d1b      	ldrb	r3, [r3, #20]
 8008d9a:	2b09      	cmp	r3, #9
 8008d9c:	d10b      	bne.n	8008db6 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8008d9e:	4b59      	ldr	r3, [pc, #356]	@ (8008f04 <tcp_slowtmr+0x584>)
 8008da0:	681a      	ldr	r2, [r3, #0]
 8008da2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008da4:	6a1b      	ldr	r3, [r3, #32]
 8008da6:	1ad3      	subs	r3, r2, r3
 8008da8:	2bf0      	cmp	r3, #240	@ 0xf0
 8008daa:	d904      	bls.n	8008db6 <tcp_slowtmr+0x436>
        ++pcb_remove;
 8008dac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008db0:	3301      	adds	r3, #1
 8008db2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 8008db6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d060      	beq.n	8008e80 <tcp_slowtmr+0x500>
      tcp_err_fn err_fn = pcb->errf;
 8008dbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008dc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008dc4:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 8008dc6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008dc8:	f000 fce4 	bl	8009794 <tcp_pcb_purge>
      if (prev != NULL) {
 8008dcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d010      	beq.n	8008df4 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8008dd2:	4b50      	ldr	r3, [pc, #320]	@ (8008f14 <tcp_slowtmr+0x594>)
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008dd8:	429a      	cmp	r2, r3
 8008dda:	d106      	bne.n	8008dea <tcp_slowtmr+0x46a>
 8008ddc:	4b4e      	ldr	r3, [pc, #312]	@ (8008f18 <tcp_slowtmr+0x598>)
 8008dde:	f240 526d 	movw	r2, #1389	@ 0x56d
 8008de2:	494e      	ldr	r1, [pc, #312]	@ (8008f1c <tcp_slowtmr+0x59c>)
 8008de4:	484e      	ldr	r0, [pc, #312]	@ (8008f20 <tcp_slowtmr+0x5a0>)
 8008de6:	f008 facb 	bl	8011380 <iprintf>
        prev->next = pcb->next;
 8008dea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008dec:	68da      	ldr	r2, [r3, #12]
 8008dee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008df0:	60da      	str	r2, [r3, #12]
 8008df2:	e00f      	b.n	8008e14 <tcp_slowtmr+0x494>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8008df4:	4b47      	ldr	r3, [pc, #284]	@ (8008f14 <tcp_slowtmr+0x594>)
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008dfa:	429a      	cmp	r2, r3
 8008dfc:	d006      	beq.n	8008e0c <tcp_slowtmr+0x48c>
 8008dfe:	4b46      	ldr	r3, [pc, #280]	@ (8008f18 <tcp_slowtmr+0x598>)
 8008e00:	f240 5271 	movw	r2, #1393	@ 0x571
 8008e04:	4947      	ldr	r1, [pc, #284]	@ (8008f24 <tcp_slowtmr+0x5a4>)
 8008e06:	4846      	ldr	r0, [pc, #280]	@ (8008f20 <tcp_slowtmr+0x5a0>)
 8008e08:	f008 faba 	bl	8011380 <iprintf>
        tcp_active_pcbs = pcb->next;
 8008e0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e0e:	68db      	ldr	r3, [r3, #12]
 8008e10:	4a40      	ldr	r2, [pc, #256]	@ (8008f14 <tcp_slowtmr+0x594>)
 8008e12:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 8008e14:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d013      	beq.n	8008e44 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8008e1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e1e:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8008e20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e22:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8008e24:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 8008e26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e28:	3304      	adds	r3, #4
 8008e2a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008e2c:	8ad2      	ldrh	r2, [r2, #22]
 8008e2e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008e30:	8b09      	ldrh	r1, [r1, #24]
 8008e32:	9102      	str	r1, [sp, #8]
 8008e34:	9201      	str	r2, [sp, #4]
 8008e36:	9300      	str	r3, [sp, #0]
 8008e38:	462b      	mov	r3, r5
 8008e3a:	4622      	mov	r2, r4
 8008e3c:	4601      	mov	r1, r0
 8008e3e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008e40:	f004 fec2 	bl	800dbc8 <tcp_rst>
      err_arg = pcb->callback_arg;
 8008e44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e46:	691b      	ldr	r3, [r3, #16]
 8008e48:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8008e4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e4c:	7d1b      	ldrb	r3, [r3, #20]
 8008e4e:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8008e50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e52:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8008e54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e56:	68db      	ldr	r3, [r3, #12]
 8008e58:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 8008e5a:	6838      	ldr	r0, [r7, #0]
 8008e5c:	f7ff f838 	bl	8007ed0 <tcp_free>
      tcp_active_pcbs_changed = 0;
 8008e60:	4b31      	ldr	r3, [pc, #196]	@ (8008f28 <tcp_slowtmr+0x5a8>)
 8008e62:	2200      	movs	r2, #0
 8008e64:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d004      	beq.n	8008e76 <tcp_slowtmr+0x4f6>
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	f06f 010c 	mvn.w	r1, #12
 8008e72:	68b8      	ldr	r0, [r7, #8]
 8008e74:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8008e76:	4b2c      	ldr	r3, [pc, #176]	@ (8008f28 <tcp_slowtmr+0x5a8>)
 8008e78:	781b      	ldrb	r3, [r3, #0]
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d037      	beq.n	8008eee <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 8008e7e:	e592      	b.n	80089a6 <tcp_slowtmr+0x26>
      prev = pcb;
 8008e80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e82:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8008e84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e86:	68db      	ldr	r3, [r3, #12]
 8008e88:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 8008e8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e8c:	7f1b      	ldrb	r3, [r3, #28]
 8008e8e:	3301      	adds	r3, #1
 8008e90:	b2da      	uxtb	r2, r3
 8008e92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e94:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8008e96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e98:	7f1a      	ldrb	r2, [r3, #28]
 8008e9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e9c:	7f5b      	ldrb	r3, [r3, #29]
 8008e9e:	429a      	cmp	r2, r3
 8008ea0:	d325      	bcc.n	8008eee <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 8008ea2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ea4:	2200      	movs	r2, #0
 8008ea6:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 8008ea8:	4b1f      	ldr	r3, [pc, #124]	@ (8008f28 <tcp_slowtmr+0x5a8>)
 8008eaa:	2200      	movs	r2, #0
 8008eac:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8008eae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008eb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d00b      	beq.n	8008ed0 <tcp_slowtmr+0x550>
 8008eb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008eba:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008ebe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008ec0:	6912      	ldr	r2, [r2, #16]
 8008ec2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008ec4:	4610      	mov	r0, r2
 8008ec6:	4798      	blx	r3
 8008ec8:	4603      	mov	r3, r0
 8008eca:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8008ece:	e002      	b.n	8008ed6 <tcp_slowtmr+0x556>
 8008ed0:	2300      	movs	r3, #0
 8008ed2:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 8008ed6:	4b14      	ldr	r3, [pc, #80]	@ (8008f28 <tcp_slowtmr+0x5a8>)
 8008ed8:	781b      	ldrb	r3, [r3, #0]
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	f47f ad62 	bne.w	80089a4 <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8008ee0:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d102      	bne.n	8008eee <tcp_slowtmr+0x56e>
          tcp_output(prev);
 8008ee8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008eea:	f004 f8b9 	bl	800d060 <tcp_output>
  while (pcb != NULL) {
 8008eee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	f47f ad5e 	bne.w	80089b2 <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 8008efa:	4b0c      	ldr	r3, [pc, #48]	@ (8008f2c <tcp_slowtmr+0x5ac>)
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8008f00:	e069      	b.n	8008fd6 <tcp_slowtmr+0x656>
 8008f02:	bf00      	nop
 8008f04:	2000a7e8 	.word	0x2000a7e8
 8008f08:	000a4cb8 	.word	0x000a4cb8
 8008f0c:	10624dd3 	.word	0x10624dd3
 8008f10:	000124f8 	.word	0x000124f8
 8008f14:	2000a7f4 	.word	0x2000a7f4
 8008f18:	08013174 	.word	0x08013174
 8008f1c:	080135ac 	.word	0x080135ac
 8008f20:	080131b8 	.word	0x080131b8
 8008f24:	080135d8 	.word	0x080135d8
 8008f28:	2000a7fc 	.word	0x2000a7fc
 8008f2c:	2000a7f8 	.word	0x2000a7f8
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8008f30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f32:	7d1b      	ldrb	r3, [r3, #20]
 8008f34:	2b0a      	cmp	r3, #10
 8008f36:	d006      	beq.n	8008f46 <tcp_slowtmr+0x5c6>
 8008f38:	4b2b      	ldr	r3, [pc, #172]	@ (8008fe8 <tcp_slowtmr+0x668>)
 8008f3a:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 8008f3e:	492b      	ldr	r1, [pc, #172]	@ (8008fec <tcp_slowtmr+0x66c>)
 8008f40:	482b      	ldr	r0, [pc, #172]	@ (8008ff0 <tcp_slowtmr+0x670>)
 8008f42:	f008 fa1d 	bl	8011380 <iprintf>
    pcb_remove = 0;
 8008f46:	2300      	movs	r3, #0
 8008f48:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8008f4c:	4b29      	ldr	r3, [pc, #164]	@ (8008ff4 <tcp_slowtmr+0x674>)
 8008f4e:	681a      	ldr	r2, [r3, #0]
 8008f50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f52:	6a1b      	ldr	r3, [r3, #32]
 8008f54:	1ad3      	subs	r3, r2, r3
 8008f56:	2bf0      	cmp	r3, #240	@ 0xf0
 8008f58:	d904      	bls.n	8008f64 <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 8008f5a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008f5e:	3301      	adds	r3, #1
 8008f60:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8008f64:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d02f      	beq.n	8008fcc <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8008f6c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008f6e:	f000 fc11 	bl	8009794 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8008f72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d010      	beq.n	8008f9a <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8008f78:	4b1f      	ldr	r3, [pc, #124]	@ (8008ff8 <tcp_slowtmr+0x678>)
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008f7e:	429a      	cmp	r2, r3
 8008f80:	d106      	bne.n	8008f90 <tcp_slowtmr+0x610>
 8008f82:	4b19      	ldr	r3, [pc, #100]	@ (8008fe8 <tcp_slowtmr+0x668>)
 8008f84:	f240 52af 	movw	r2, #1455	@ 0x5af
 8008f88:	491c      	ldr	r1, [pc, #112]	@ (8008ffc <tcp_slowtmr+0x67c>)
 8008f8a:	4819      	ldr	r0, [pc, #100]	@ (8008ff0 <tcp_slowtmr+0x670>)
 8008f8c:	f008 f9f8 	bl	8011380 <iprintf>
        prev->next = pcb->next;
 8008f90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f92:	68da      	ldr	r2, [r3, #12]
 8008f94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f96:	60da      	str	r2, [r3, #12]
 8008f98:	e00f      	b.n	8008fba <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8008f9a:	4b17      	ldr	r3, [pc, #92]	@ (8008ff8 <tcp_slowtmr+0x678>)
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008fa0:	429a      	cmp	r2, r3
 8008fa2:	d006      	beq.n	8008fb2 <tcp_slowtmr+0x632>
 8008fa4:	4b10      	ldr	r3, [pc, #64]	@ (8008fe8 <tcp_slowtmr+0x668>)
 8008fa6:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 8008faa:	4915      	ldr	r1, [pc, #84]	@ (8009000 <tcp_slowtmr+0x680>)
 8008fac:	4810      	ldr	r0, [pc, #64]	@ (8008ff0 <tcp_slowtmr+0x670>)
 8008fae:	f008 f9e7 	bl	8011380 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8008fb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008fb4:	68db      	ldr	r3, [r3, #12]
 8008fb6:	4a10      	ldr	r2, [pc, #64]	@ (8008ff8 <tcp_slowtmr+0x678>)
 8008fb8:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8008fba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008fbc:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8008fbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008fc0:	68db      	ldr	r3, [r3, #12]
 8008fc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 8008fc4:	69f8      	ldr	r0, [r7, #28]
 8008fc6:	f7fe ff83 	bl	8007ed0 <tcp_free>
 8008fca:	e004      	b.n	8008fd6 <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 8008fcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008fce:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8008fd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008fd2:	68db      	ldr	r3, [r3, #12]
 8008fd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8008fd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d1a9      	bne.n	8008f30 <tcp_slowtmr+0x5b0>
    }
  }
}
 8008fdc:	bf00      	nop
 8008fde:	bf00      	nop
 8008fe0:	3730      	adds	r7, #48	@ 0x30
 8008fe2:	46bd      	mov	sp, r7
 8008fe4:	bdb0      	pop	{r4, r5, r7, pc}
 8008fe6:	bf00      	nop
 8008fe8:	08013174 	.word	0x08013174
 8008fec:	08013604 	.word	0x08013604
 8008ff0:	080131b8 	.word	0x080131b8
 8008ff4:	2000a7e8 	.word	0x2000a7e8
 8008ff8:	2000a7f8 	.word	0x2000a7f8
 8008ffc:	08013634 	.word	0x08013634
 8009000:	0801365c 	.word	0x0801365c

08009004 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8009004:	b580      	push	{r7, lr}
 8009006:	b082      	sub	sp, #8
 8009008:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800900a:	4b2d      	ldr	r3, [pc, #180]	@ (80090c0 <tcp_fasttmr+0xbc>)
 800900c:	781b      	ldrb	r3, [r3, #0]
 800900e:	3301      	adds	r3, #1
 8009010:	b2da      	uxtb	r2, r3
 8009012:	4b2b      	ldr	r3, [pc, #172]	@ (80090c0 <tcp_fasttmr+0xbc>)
 8009014:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8009016:	4b2b      	ldr	r3, [pc, #172]	@ (80090c4 <tcp_fasttmr+0xc0>)
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800901c:	e048      	b.n	80090b0 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	7f9a      	ldrb	r2, [r3, #30]
 8009022:	4b27      	ldr	r3, [pc, #156]	@ (80090c0 <tcp_fasttmr+0xbc>)
 8009024:	781b      	ldrb	r3, [r3, #0]
 8009026:	429a      	cmp	r2, r3
 8009028:	d03f      	beq.n	80090aa <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800902a:	4b25      	ldr	r3, [pc, #148]	@ (80090c0 <tcp_fasttmr+0xbc>)
 800902c:	781a      	ldrb	r2, [r3, #0]
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	8b5b      	ldrh	r3, [r3, #26]
 8009036:	f003 0301 	and.w	r3, r3, #1
 800903a:	2b00      	cmp	r3, #0
 800903c:	d010      	beq.n	8009060 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	8b5b      	ldrh	r3, [r3, #26]
 8009042:	f043 0302 	orr.w	r3, r3, #2
 8009046:	b29a      	uxth	r2, r3
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800904c:	6878      	ldr	r0, [r7, #4]
 800904e:	f004 f807 	bl	800d060 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	8b5b      	ldrh	r3, [r3, #26]
 8009056:	f023 0303 	bic.w	r3, r3, #3
 800905a:	b29a      	uxth	r2, r3
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	8b5b      	ldrh	r3, [r3, #26]
 8009064:	f003 0308 	and.w	r3, r3, #8
 8009068:	2b00      	cmp	r3, #0
 800906a:	d009      	beq.n	8009080 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	8b5b      	ldrh	r3, [r3, #26]
 8009070:	f023 0308 	bic.w	r3, r3, #8
 8009074:	b29a      	uxth	r2, r3
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800907a:	6878      	ldr	r0, [r7, #4]
 800907c:	f7ff f8bc 	bl	80081f8 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	68db      	ldr	r3, [r3, #12]
 8009084:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800908a:	2b00      	cmp	r3, #0
 800908c:	d00a      	beq.n	80090a4 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800908e:	4b0e      	ldr	r3, [pc, #56]	@ (80090c8 <tcp_fasttmr+0xc4>)
 8009090:	2200      	movs	r2, #0
 8009092:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8009094:	6878      	ldr	r0, [r7, #4]
 8009096:	f000 f819 	bl	80090cc <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800909a:	4b0b      	ldr	r3, [pc, #44]	@ (80090c8 <tcp_fasttmr+0xc4>)
 800909c:	781b      	ldrb	r3, [r3, #0]
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d000      	beq.n	80090a4 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 80090a2:	e7b8      	b.n	8009016 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 80090a4:	683b      	ldr	r3, [r7, #0]
 80090a6:	607b      	str	r3, [r7, #4]
 80090a8:	e002      	b.n	80090b0 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	68db      	ldr	r3, [r3, #12]
 80090ae:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d1b3      	bne.n	800901e <tcp_fasttmr+0x1a>
    }
  }
}
 80090b6:	bf00      	nop
 80090b8:	bf00      	nop
 80090ba:	3708      	adds	r7, #8
 80090bc:	46bd      	mov	sp, r7
 80090be:	bd80      	pop	{r7, pc}
 80090c0:	2000a7fe 	.word	0x2000a7fe
 80090c4:	2000a7f4 	.word	0x2000a7f4
 80090c8:	2000a7fc 	.word	0x2000a7fc

080090cc <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 80090cc:	b590      	push	{r4, r7, lr}
 80090ce:	b085      	sub	sp, #20
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d109      	bne.n	80090ee <tcp_process_refused_data+0x22>
 80090da:	4b37      	ldr	r3, [pc, #220]	@ (80091b8 <tcp_process_refused_data+0xec>)
 80090dc:	f240 6209 	movw	r2, #1545	@ 0x609
 80090e0:	4936      	ldr	r1, [pc, #216]	@ (80091bc <tcp_process_refused_data+0xf0>)
 80090e2:	4837      	ldr	r0, [pc, #220]	@ (80091c0 <tcp_process_refused_data+0xf4>)
 80090e4:	f008 f94c 	bl	8011380 <iprintf>
 80090e8:	f06f 030f 	mvn.w	r3, #15
 80090ec:	e060      	b.n	80091b0 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80090f2:	7b5b      	ldrb	r3, [r3, #13]
 80090f4:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80090fa:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	2200      	movs	r2, #0
 8009100:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009108:	2b00      	cmp	r3, #0
 800910a:	d00b      	beq.n	8009124 <tcp_process_refused_data+0x58>
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	6918      	ldr	r0, [r3, #16]
 8009116:	2300      	movs	r3, #0
 8009118:	68ba      	ldr	r2, [r7, #8]
 800911a:	6879      	ldr	r1, [r7, #4]
 800911c:	47a0      	blx	r4
 800911e:	4603      	mov	r3, r0
 8009120:	73fb      	strb	r3, [r7, #15]
 8009122:	e007      	b.n	8009134 <tcp_process_refused_data+0x68>
 8009124:	2300      	movs	r3, #0
 8009126:	68ba      	ldr	r2, [r7, #8]
 8009128:	6879      	ldr	r1, [r7, #4]
 800912a:	2000      	movs	r0, #0
 800912c:	f000 f8c2 	bl	80092b4 <tcp_recv_null>
 8009130:	4603      	mov	r3, r0
 8009132:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8009134:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009138:	2b00      	cmp	r3, #0
 800913a:	d12a      	bne.n	8009192 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800913c:	7bbb      	ldrb	r3, [r7, #14]
 800913e:	f003 0320 	and.w	r3, r3, #32
 8009142:	2b00      	cmp	r3, #0
 8009144:	d033      	beq.n	80091ae <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800914a:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800914e:	d005      	beq.n	800915c <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009154:	3301      	adds	r3, #1
 8009156:	b29a      	uxth	r2, r3
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009162:	2b00      	cmp	r3, #0
 8009164:	d00b      	beq.n	800917e <tcp_process_refused_data+0xb2>
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	6918      	ldr	r0, [r3, #16]
 8009170:	2300      	movs	r3, #0
 8009172:	2200      	movs	r2, #0
 8009174:	6879      	ldr	r1, [r7, #4]
 8009176:	47a0      	blx	r4
 8009178:	4603      	mov	r3, r0
 800917a:	73fb      	strb	r3, [r7, #15]
 800917c:	e001      	b.n	8009182 <tcp_process_refused_data+0xb6>
 800917e:	2300      	movs	r3, #0
 8009180:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8009182:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009186:	f113 0f0d 	cmn.w	r3, #13
 800918a:	d110      	bne.n	80091ae <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800918c:	f06f 030c 	mvn.w	r3, #12
 8009190:	e00e      	b.n	80091b0 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8009192:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009196:	f113 0f0d 	cmn.w	r3, #13
 800919a:	d102      	bne.n	80091a2 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800919c:	f06f 030c 	mvn.w	r3, #12
 80091a0:	e006      	b.n	80091b0 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	68ba      	ldr	r2, [r7, #8]
 80091a6:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 80091a8:	f06f 0304 	mvn.w	r3, #4
 80091ac:	e000      	b.n	80091b0 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 80091ae:	2300      	movs	r3, #0
}
 80091b0:	4618      	mov	r0, r3
 80091b2:	3714      	adds	r7, #20
 80091b4:	46bd      	mov	sp, r7
 80091b6:	bd90      	pop	{r4, r7, pc}
 80091b8:	08013174 	.word	0x08013174
 80091bc:	08013684 	.word	0x08013684
 80091c0:	080131b8 	.word	0x080131b8

080091c4 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 80091c4:	b580      	push	{r7, lr}
 80091c6:	b084      	sub	sp, #16
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 80091cc:	e007      	b.n	80091de <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 80091d4:	6878      	ldr	r0, [r7, #4]
 80091d6:	f000 f80a 	bl	80091ee <tcp_seg_free>
    seg = next;
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d1f4      	bne.n	80091ce <tcp_segs_free+0xa>
  }
}
 80091e4:	bf00      	nop
 80091e6:	bf00      	nop
 80091e8:	3710      	adds	r7, #16
 80091ea:	46bd      	mov	sp, r7
 80091ec:	bd80      	pop	{r7, pc}

080091ee <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 80091ee:	b580      	push	{r7, lr}
 80091f0:	b082      	sub	sp, #8
 80091f2:	af00      	add	r7, sp, #0
 80091f4:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d00c      	beq.n	8009216 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	685b      	ldr	r3, [r3, #4]
 8009200:	2b00      	cmp	r3, #0
 8009202:	d004      	beq.n	800920e <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	685b      	ldr	r3, [r3, #4]
 8009208:	4618      	mov	r0, r3
 800920a:	f7fe fb1f 	bl	800784c <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800920e:	6879      	ldr	r1, [r7, #4]
 8009210:	2003      	movs	r0, #3
 8009212:	f7fd fca5 	bl	8006b60 <memp_free>
  }
}
 8009216:	bf00      	nop
 8009218:	3708      	adds	r7, #8
 800921a:	46bd      	mov	sp, r7
 800921c:	bd80      	pop	{r7, pc}
	...

08009220 <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 8009220:	b580      	push	{r7, lr}
 8009222:	b082      	sub	sp, #8
 8009224:	af00      	add	r7, sp, #0
 8009226:	6078      	str	r0, [r7, #4]
 8009228:	460b      	mov	r3, r1
 800922a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	2b00      	cmp	r3, #0
 8009230:	d107      	bne.n	8009242 <tcp_setprio+0x22>
 8009232:	4b07      	ldr	r3, [pc, #28]	@ (8009250 <tcp_setprio+0x30>)
 8009234:	f44f 62ce 	mov.w	r2, #1648	@ 0x670
 8009238:	4906      	ldr	r1, [pc, #24]	@ (8009254 <tcp_setprio+0x34>)
 800923a:	4807      	ldr	r0, [pc, #28]	@ (8009258 <tcp_setprio+0x38>)
 800923c:	f008 f8a0 	bl	8011380 <iprintf>
 8009240:	e002      	b.n	8009248 <tcp_setprio+0x28>

  pcb->prio = prio;
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	78fa      	ldrb	r2, [r7, #3]
 8009246:	755a      	strb	r2, [r3, #21]
}
 8009248:	3708      	adds	r7, #8
 800924a:	46bd      	mov	sp, r7
 800924c:	bd80      	pop	{r7, pc}
 800924e:	bf00      	nop
 8009250:	08013174 	.word	0x08013174
 8009254:	080136ac 	.word	0x080136ac
 8009258:	080131b8 	.word	0x080131b8

0800925c <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800925c:	b580      	push	{r7, lr}
 800925e:	b084      	sub	sp, #16
 8009260:	af00      	add	r7, sp, #0
 8009262:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	2b00      	cmp	r3, #0
 8009268:	d106      	bne.n	8009278 <tcp_seg_copy+0x1c>
 800926a:	4b0f      	ldr	r3, [pc, #60]	@ (80092a8 <tcp_seg_copy+0x4c>)
 800926c:	f240 6282 	movw	r2, #1666	@ 0x682
 8009270:	490e      	ldr	r1, [pc, #56]	@ (80092ac <tcp_seg_copy+0x50>)
 8009272:	480f      	ldr	r0, [pc, #60]	@ (80092b0 <tcp_seg_copy+0x54>)
 8009274:	f008 f884 	bl	8011380 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8009278:	2003      	movs	r0, #3
 800927a:	f7fd fc01 	bl	8006a80 <memp_malloc>
 800927e:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	2b00      	cmp	r3, #0
 8009284:	d101      	bne.n	800928a <tcp_seg_copy+0x2e>
    return NULL;
 8009286:	2300      	movs	r3, #0
 8009288:	e00a      	b.n	80092a0 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800928a:	2210      	movs	r2, #16
 800928c:	6879      	ldr	r1, [r7, #4]
 800928e:	68f8      	ldr	r0, [r7, #12]
 8009290:	f008 f9d1 	bl	8011636 <memcpy>
  pbuf_ref(cseg->p);
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	685b      	ldr	r3, [r3, #4]
 8009298:	4618      	mov	r0, r3
 800929a:	f7fe fb77 	bl	800798c <pbuf_ref>
  return cseg;
 800929e:	68fb      	ldr	r3, [r7, #12]
}
 80092a0:	4618      	mov	r0, r3
 80092a2:	3710      	adds	r7, #16
 80092a4:	46bd      	mov	sp, r7
 80092a6:	bd80      	pop	{r7, pc}
 80092a8:	08013174 	.word	0x08013174
 80092ac:	080136c8 	.word	0x080136c8
 80092b0:	080131b8 	.word	0x080131b8

080092b4 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80092b4:	b580      	push	{r7, lr}
 80092b6:	b084      	sub	sp, #16
 80092b8:	af00      	add	r7, sp, #0
 80092ba:	60f8      	str	r0, [r7, #12]
 80092bc:	60b9      	str	r1, [r7, #8]
 80092be:	607a      	str	r2, [r7, #4]
 80092c0:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 80092c2:	68bb      	ldr	r3, [r7, #8]
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d109      	bne.n	80092dc <tcp_recv_null+0x28>
 80092c8:	4b12      	ldr	r3, [pc, #72]	@ (8009314 <tcp_recv_null+0x60>)
 80092ca:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 80092ce:	4912      	ldr	r1, [pc, #72]	@ (8009318 <tcp_recv_null+0x64>)
 80092d0:	4812      	ldr	r0, [pc, #72]	@ (800931c <tcp_recv_null+0x68>)
 80092d2:	f008 f855 	bl	8011380 <iprintf>
 80092d6:	f06f 030f 	mvn.w	r3, #15
 80092da:	e016      	b.n	800930a <tcp_recv_null+0x56>

  if (p != NULL) {
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d009      	beq.n	80092f6 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	891b      	ldrh	r3, [r3, #8]
 80092e6:	4619      	mov	r1, r3
 80092e8:	68b8      	ldr	r0, [r7, #8]
 80092ea:	f7ff fab3 	bl	8008854 <tcp_recved>
    pbuf_free(p);
 80092ee:	6878      	ldr	r0, [r7, #4]
 80092f0:	f7fe faac 	bl	800784c <pbuf_free>
 80092f4:	e008      	b.n	8009308 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 80092f6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d104      	bne.n	8009308 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 80092fe:	68b8      	ldr	r0, [r7, #8]
 8009300:	f7fe ffe4 	bl	80082cc <tcp_close>
 8009304:	4603      	mov	r3, r0
 8009306:	e000      	b.n	800930a <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8009308:	2300      	movs	r3, #0
}
 800930a:	4618      	mov	r0, r3
 800930c:	3710      	adds	r7, #16
 800930e:	46bd      	mov	sp, r7
 8009310:	bd80      	pop	{r7, pc}
 8009312:	bf00      	nop
 8009314:	08013174 	.word	0x08013174
 8009318:	080136e4 	.word	0x080136e4
 800931c:	080131b8 	.word	0x080131b8

08009320 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8009320:	b580      	push	{r7, lr}
 8009322:	b086      	sub	sp, #24
 8009324:	af00      	add	r7, sp, #0
 8009326:	4603      	mov	r3, r0
 8009328:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800932a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800932e:	2b00      	cmp	r3, #0
 8009330:	db01      	blt.n	8009336 <tcp_kill_prio+0x16>
 8009332:	79fb      	ldrb	r3, [r7, #7]
 8009334:	e000      	b.n	8009338 <tcp_kill_prio+0x18>
 8009336:	237f      	movs	r3, #127	@ 0x7f
 8009338:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800933a:	7afb      	ldrb	r3, [r7, #11]
 800933c:	2b00      	cmp	r3, #0
 800933e:	d034      	beq.n	80093aa <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8009340:	7afb      	ldrb	r3, [r7, #11]
 8009342:	3b01      	subs	r3, #1
 8009344:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8009346:	2300      	movs	r3, #0
 8009348:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800934a:	2300      	movs	r3, #0
 800934c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800934e:	4b19      	ldr	r3, [pc, #100]	@ (80093b4 <tcp_kill_prio+0x94>)
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	617b      	str	r3, [r7, #20]
 8009354:	e01f      	b.n	8009396 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8009356:	697b      	ldr	r3, [r7, #20]
 8009358:	7d5b      	ldrb	r3, [r3, #21]
 800935a:	7afa      	ldrb	r2, [r7, #11]
 800935c:	429a      	cmp	r2, r3
 800935e:	d80c      	bhi.n	800937a <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8009360:	697b      	ldr	r3, [r7, #20]
 8009362:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8009364:	7afa      	ldrb	r2, [r7, #11]
 8009366:	429a      	cmp	r2, r3
 8009368:	d112      	bne.n	8009390 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800936a:	4b13      	ldr	r3, [pc, #76]	@ (80093b8 <tcp_kill_prio+0x98>)
 800936c:	681a      	ldr	r2, [r3, #0]
 800936e:	697b      	ldr	r3, [r7, #20]
 8009370:	6a1b      	ldr	r3, [r3, #32]
 8009372:	1ad3      	subs	r3, r2, r3
 8009374:	68fa      	ldr	r2, [r7, #12]
 8009376:	429a      	cmp	r2, r3
 8009378:	d80a      	bhi.n	8009390 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800937a:	4b0f      	ldr	r3, [pc, #60]	@ (80093b8 <tcp_kill_prio+0x98>)
 800937c:	681a      	ldr	r2, [r3, #0]
 800937e:	697b      	ldr	r3, [r7, #20]
 8009380:	6a1b      	ldr	r3, [r3, #32]
 8009382:	1ad3      	subs	r3, r2, r3
 8009384:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8009386:	697b      	ldr	r3, [r7, #20]
 8009388:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800938a:	697b      	ldr	r3, [r7, #20]
 800938c:	7d5b      	ldrb	r3, [r3, #21]
 800938e:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009390:	697b      	ldr	r3, [r7, #20]
 8009392:	68db      	ldr	r3, [r3, #12]
 8009394:	617b      	str	r3, [r7, #20]
 8009396:	697b      	ldr	r3, [r7, #20]
 8009398:	2b00      	cmp	r3, #0
 800939a:	d1dc      	bne.n	8009356 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800939c:	693b      	ldr	r3, [r7, #16]
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d004      	beq.n	80093ac <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80093a2:	6938      	ldr	r0, [r7, #16]
 80093a4:	f7ff f87c 	bl	80084a0 <tcp_abort>
 80093a8:	e000      	b.n	80093ac <tcp_kill_prio+0x8c>
    return;
 80093aa:	bf00      	nop
  }
}
 80093ac:	3718      	adds	r7, #24
 80093ae:	46bd      	mov	sp, r7
 80093b0:	bd80      	pop	{r7, pc}
 80093b2:	bf00      	nop
 80093b4:	2000a7f4 	.word	0x2000a7f4
 80093b8:	2000a7e8 	.word	0x2000a7e8

080093bc <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 80093bc:	b580      	push	{r7, lr}
 80093be:	b086      	sub	sp, #24
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	4603      	mov	r3, r0
 80093c4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 80093c6:	79fb      	ldrb	r3, [r7, #7]
 80093c8:	2b08      	cmp	r3, #8
 80093ca:	d009      	beq.n	80093e0 <tcp_kill_state+0x24>
 80093cc:	79fb      	ldrb	r3, [r7, #7]
 80093ce:	2b09      	cmp	r3, #9
 80093d0:	d006      	beq.n	80093e0 <tcp_kill_state+0x24>
 80093d2:	4b1a      	ldr	r3, [pc, #104]	@ (800943c <tcp_kill_state+0x80>)
 80093d4:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 80093d8:	4919      	ldr	r1, [pc, #100]	@ (8009440 <tcp_kill_state+0x84>)
 80093da:	481a      	ldr	r0, [pc, #104]	@ (8009444 <tcp_kill_state+0x88>)
 80093dc:	f007 ffd0 	bl	8011380 <iprintf>

  inactivity = 0;
 80093e0:	2300      	movs	r3, #0
 80093e2:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80093e4:	2300      	movs	r3, #0
 80093e6:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80093e8:	4b17      	ldr	r3, [pc, #92]	@ (8009448 <tcp_kill_state+0x8c>)
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	617b      	str	r3, [r7, #20]
 80093ee:	e017      	b.n	8009420 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 80093f0:	697b      	ldr	r3, [r7, #20]
 80093f2:	7d1b      	ldrb	r3, [r3, #20]
 80093f4:	79fa      	ldrb	r2, [r7, #7]
 80093f6:	429a      	cmp	r2, r3
 80093f8:	d10f      	bne.n	800941a <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80093fa:	4b14      	ldr	r3, [pc, #80]	@ (800944c <tcp_kill_state+0x90>)
 80093fc:	681a      	ldr	r2, [r3, #0]
 80093fe:	697b      	ldr	r3, [r7, #20]
 8009400:	6a1b      	ldr	r3, [r3, #32]
 8009402:	1ad3      	subs	r3, r2, r3
 8009404:	68fa      	ldr	r2, [r7, #12]
 8009406:	429a      	cmp	r2, r3
 8009408:	d807      	bhi.n	800941a <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800940a:	4b10      	ldr	r3, [pc, #64]	@ (800944c <tcp_kill_state+0x90>)
 800940c:	681a      	ldr	r2, [r3, #0]
 800940e:	697b      	ldr	r3, [r7, #20]
 8009410:	6a1b      	ldr	r3, [r3, #32]
 8009412:	1ad3      	subs	r3, r2, r3
 8009414:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8009416:	697b      	ldr	r3, [r7, #20]
 8009418:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800941a:	697b      	ldr	r3, [r7, #20]
 800941c:	68db      	ldr	r3, [r3, #12]
 800941e:	617b      	str	r3, [r7, #20]
 8009420:	697b      	ldr	r3, [r7, #20]
 8009422:	2b00      	cmp	r3, #0
 8009424:	d1e4      	bne.n	80093f0 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8009426:	693b      	ldr	r3, [r7, #16]
 8009428:	2b00      	cmp	r3, #0
 800942a:	d003      	beq.n	8009434 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800942c:	2100      	movs	r1, #0
 800942e:	6938      	ldr	r0, [r7, #16]
 8009430:	f7fe ff78 	bl	8008324 <tcp_abandon>
  }
}
 8009434:	bf00      	nop
 8009436:	3718      	adds	r7, #24
 8009438:	46bd      	mov	sp, r7
 800943a:	bd80      	pop	{r7, pc}
 800943c:	08013174 	.word	0x08013174
 8009440:	08013700 	.word	0x08013700
 8009444:	080131b8 	.word	0x080131b8
 8009448:	2000a7f4 	.word	0x2000a7f4
 800944c:	2000a7e8 	.word	0x2000a7e8

08009450 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8009450:	b580      	push	{r7, lr}
 8009452:	b084      	sub	sp, #16
 8009454:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8009456:	2300      	movs	r3, #0
 8009458:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800945a:	2300      	movs	r3, #0
 800945c:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800945e:	4b12      	ldr	r3, [pc, #72]	@ (80094a8 <tcp_kill_timewait+0x58>)
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	60fb      	str	r3, [r7, #12]
 8009464:	e012      	b.n	800948c <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8009466:	4b11      	ldr	r3, [pc, #68]	@ (80094ac <tcp_kill_timewait+0x5c>)
 8009468:	681a      	ldr	r2, [r3, #0]
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	6a1b      	ldr	r3, [r3, #32]
 800946e:	1ad3      	subs	r3, r2, r3
 8009470:	687a      	ldr	r2, [r7, #4]
 8009472:	429a      	cmp	r2, r3
 8009474:	d807      	bhi.n	8009486 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8009476:	4b0d      	ldr	r3, [pc, #52]	@ (80094ac <tcp_kill_timewait+0x5c>)
 8009478:	681a      	ldr	r2, [r3, #0]
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	6a1b      	ldr	r3, [r3, #32]
 800947e:	1ad3      	subs	r3, r2, r3
 8009480:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	68db      	ldr	r3, [r3, #12]
 800948a:	60fb      	str	r3, [r7, #12]
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	2b00      	cmp	r3, #0
 8009490:	d1e9      	bne.n	8009466 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8009492:	68bb      	ldr	r3, [r7, #8]
 8009494:	2b00      	cmp	r3, #0
 8009496:	d002      	beq.n	800949e <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8009498:	68b8      	ldr	r0, [r7, #8]
 800949a:	f7ff f801 	bl	80084a0 <tcp_abort>
  }
}
 800949e:	bf00      	nop
 80094a0:	3710      	adds	r7, #16
 80094a2:	46bd      	mov	sp, r7
 80094a4:	bd80      	pop	{r7, pc}
 80094a6:	bf00      	nop
 80094a8:	2000a7f8 	.word	0x2000a7f8
 80094ac:	2000a7e8 	.word	0x2000a7e8

080094b0 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 80094b0:	b580      	push	{r7, lr}
 80094b2:	b082      	sub	sp, #8
 80094b4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 80094b6:	4b10      	ldr	r3, [pc, #64]	@ (80094f8 <tcp_handle_closepend+0x48>)
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80094bc:	e014      	b.n	80094e8 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	68db      	ldr	r3, [r3, #12]
 80094c2:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	8b5b      	ldrh	r3, [r3, #26]
 80094c8:	f003 0308 	and.w	r3, r3, #8
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d009      	beq.n	80094e4 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	8b5b      	ldrh	r3, [r3, #26]
 80094d4:	f023 0308 	bic.w	r3, r3, #8
 80094d8:	b29a      	uxth	r2, r3
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 80094de:	6878      	ldr	r0, [r7, #4]
 80094e0:	f7fe fe8a 	bl	80081f8 <tcp_close_shutdown_fin>
    }
    pcb = next;
 80094e4:	683b      	ldr	r3, [r7, #0]
 80094e6:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d1e7      	bne.n	80094be <tcp_handle_closepend+0xe>
  }
}
 80094ee:	bf00      	nop
 80094f0:	bf00      	nop
 80094f2:	3708      	adds	r7, #8
 80094f4:	46bd      	mov	sp, r7
 80094f6:	bd80      	pop	{r7, pc}
 80094f8:	2000a7f4 	.word	0x2000a7f4

080094fc <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 80094fc:	b580      	push	{r7, lr}
 80094fe:	b084      	sub	sp, #16
 8009500:	af00      	add	r7, sp, #0
 8009502:	4603      	mov	r3, r0
 8009504:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009506:	2001      	movs	r0, #1
 8009508:	f7fd faba 	bl	8006a80 <memp_malloc>
 800950c:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	2b00      	cmp	r3, #0
 8009512:	d126      	bne.n	8009562 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8009514:	f7ff ffcc 	bl	80094b0 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8009518:	f7ff ff9a 	bl	8009450 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800951c:	2001      	movs	r0, #1
 800951e:	f7fd faaf 	bl	8006a80 <memp_malloc>
 8009522:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	2b00      	cmp	r3, #0
 8009528:	d11b      	bne.n	8009562 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800952a:	2009      	movs	r0, #9
 800952c:	f7ff ff46 	bl	80093bc <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009530:	2001      	movs	r0, #1
 8009532:	f7fd faa5 	bl	8006a80 <memp_malloc>
 8009536:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	2b00      	cmp	r3, #0
 800953c:	d111      	bne.n	8009562 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800953e:	2008      	movs	r0, #8
 8009540:	f7ff ff3c 	bl	80093bc <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009544:	2001      	movs	r0, #1
 8009546:	f7fd fa9b 	bl	8006a80 <memp_malloc>
 800954a:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	2b00      	cmp	r3, #0
 8009550:	d107      	bne.n	8009562 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8009552:	79fb      	ldrb	r3, [r7, #7]
 8009554:	4618      	mov	r0, r3
 8009556:	f7ff fee3 	bl	8009320 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800955a:	2001      	movs	r0, #1
 800955c:	f7fd fa90 	bl	8006a80 <memp_malloc>
 8009560:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	2b00      	cmp	r3, #0
 8009566:	d03f      	beq.n	80095e8 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8009568:	229c      	movs	r2, #156	@ 0x9c
 800956a:	2100      	movs	r1, #0
 800956c:	68f8      	ldr	r0, [r7, #12]
 800956e:	f007 ffda 	bl	8011526 <memset>
    pcb->prio = prio;
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	79fa      	ldrb	r2, [r7, #7]
 8009576:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800957e:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 8009588:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	22ff      	movs	r2, #255	@ 0xff
 8009596:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800959e:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	2206      	movs	r2, #6
 80095a4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	2206      	movs	r2, #6
 80095ac:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80095b4:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	2201      	movs	r2, #1
 80095ba:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 80095be:	4b0d      	ldr	r3, [pc, #52]	@ (80095f4 <tcp_alloc+0xf8>)
 80095c0:	681a      	ldr	r2, [r3, #0]
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 80095c6:	4b0c      	ldr	r3, [pc, #48]	@ (80095f8 <tcp_alloc+0xfc>)
 80095c8:	781a      	ldrb	r2, [r3, #0]
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 80095d4:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	4a08      	ldr	r2, [pc, #32]	@ (80095fc <tcp_alloc+0x100>)
 80095dc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	4a07      	ldr	r2, [pc, #28]	@ (8009600 <tcp_alloc+0x104>)
 80095e4:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 80095e8:	68fb      	ldr	r3, [r7, #12]
}
 80095ea:	4618      	mov	r0, r3
 80095ec:	3710      	adds	r7, #16
 80095ee:	46bd      	mov	sp, r7
 80095f0:	bd80      	pop	{r7, pc}
 80095f2:	bf00      	nop
 80095f4:	2000a7e8 	.word	0x2000a7e8
 80095f8:	2000a7fe 	.word	0x2000a7fe
 80095fc:	080092b5 	.word	0x080092b5
 8009600:	006ddd00 	.word	0x006ddd00

08009604 <tcp_new>:
 *
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new(void)
{
 8009604:	b580      	push	{r7, lr}
 8009606:	af00      	add	r7, sp, #0
  return tcp_alloc(TCP_PRIO_NORMAL);
 8009608:	2040      	movs	r0, #64	@ 0x40
 800960a:	f7ff ff77 	bl	80094fc <tcp_alloc>
 800960e:	4603      	mov	r3, r0
}
 8009610:	4618      	mov	r0, r3
 8009612:	bd80      	pop	{r7, pc}

08009614 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 8009614:	b480      	push	{r7}
 8009616:	b083      	sub	sp, #12
 8009618:	af00      	add	r7, sp, #0
 800961a:	6078      	str	r0, [r7, #4]
 800961c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	2b00      	cmp	r3, #0
 8009622:	d002      	beq.n	800962a <tcp_arg+0x16>
    pcb->callback_arg = arg;
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	683a      	ldr	r2, [r7, #0]
 8009628:	611a      	str	r2, [r3, #16]
  }
}
 800962a:	bf00      	nop
 800962c:	370c      	adds	r7, #12
 800962e:	46bd      	mov	sp, r7
 8009630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009634:	4770      	bx	lr
	...

08009638 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8009638:	b580      	push	{r7, lr}
 800963a:	b082      	sub	sp, #8
 800963c:	af00      	add	r7, sp, #0
 800963e:	6078      	str	r0, [r7, #4]
 8009640:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	2b00      	cmp	r3, #0
 8009646:	d00e      	beq.n	8009666 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	7d1b      	ldrb	r3, [r3, #20]
 800964c:	2b01      	cmp	r3, #1
 800964e:	d106      	bne.n	800965e <tcp_recv+0x26>
 8009650:	4b07      	ldr	r3, [pc, #28]	@ (8009670 <tcp_recv+0x38>)
 8009652:	f240 72df 	movw	r2, #2015	@ 0x7df
 8009656:	4907      	ldr	r1, [pc, #28]	@ (8009674 <tcp_recv+0x3c>)
 8009658:	4807      	ldr	r0, [pc, #28]	@ (8009678 <tcp_recv+0x40>)
 800965a:	f007 fe91 	bl	8011380 <iprintf>
    pcb->recv = recv;
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	683a      	ldr	r2, [r7, #0]
 8009662:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }
}
 8009666:	bf00      	nop
 8009668:	3708      	adds	r7, #8
 800966a:	46bd      	mov	sp, r7
 800966c:	bd80      	pop	{r7, pc}
 800966e:	bf00      	nop
 8009670:	08013174 	.word	0x08013174
 8009674:	08013710 	.word	0x08013710
 8009678:	080131b8 	.word	0x080131b8

0800967c <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800967c:	b580      	push	{r7, lr}
 800967e:	b082      	sub	sp, #8
 8009680:	af00      	add	r7, sp, #0
 8009682:	6078      	str	r0, [r7, #4]
 8009684:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	2b00      	cmp	r3, #0
 800968a:	d00e      	beq.n	80096aa <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	7d1b      	ldrb	r3, [r3, #20]
 8009690:	2b01      	cmp	r3, #1
 8009692:	d106      	bne.n	80096a2 <tcp_sent+0x26>
 8009694:	4b07      	ldr	r3, [pc, #28]	@ (80096b4 <tcp_sent+0x38>)
 8009696:	f240 72f3 	movw	r2, #2035	@ 0x7f3
 800969a:	4907      	ldr	r1, [pc, #28]	@ (80096b8 <tcp_sent+0x3c>)
 800969c:	4807      	ldr	r0, [pc, #28]	@ (80096bc <tcp_sent+0x40>)
 800969e:	f007 fe6f 	bl	8011380 <iprintf>
    pcb->sent = sent;
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	683a      	ldr	r2, [r7, #0]
 80096a6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  }
}
 80096aa:	bf00      	nop
 80096ac:	3708      	adds	r7, #8
 80096ae:	46bd      	mov	sp, r7
 80096b0:	bd80      	pop	{r7, pc}
 80096b2:	bf00      	nop
 80096b4:	08013174 	.word	0x08013174
 80096b8:	08013738 	.word	0x08013738
 80096bc:	080131b8 	.word	0x080131b8

080096c0 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 80096c0:	b580      	push	{r7, lr}
 80096c2:	b082      	sub	sp, #8
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	6078      	str	r0, [r7, #4]
 80096c8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d00e      	beq.n	80096ee <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	7d1b      	ldrb	r3, [r3, #20]
 80096d4:	2b01      	cmp	r3, #1
 80096d6:	d106      	bne.n	80096e6 <tcp_err+0x26>
 80096d8:	4b07      	ldr	r3, [pc, #28]	@ (80096f8 <tcp_err+0x38>)
 80096da:	f640 020d 	movw	r2, #2061	@ 0x80d
 80096de:	4907      	ldr	r1, [pc, #28]	@ (80096fc <tcp_err+0x3c>)
 80096e0:	4807      	ldr	r0, [pc, #28]	@ (8009700 <tcp_err+0x40>)
 80096e2:	f007 fe4d 	bl	8011380 <iprintf>
    pcb->errf = err;
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	683a      	ldr	r2, [r7, #0]
 80096ea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  }
}
 80096ee:	bf00      	nop
 80096f0:	3708      	adds	r7, #8
 80096f2:	46bd      	mov	sp, r7
 80096f4:	bd80      	pop	{r7, pc}
 80096f6:	bf00      	nop
 80096f8:	08013174 	.word	0x08013174
 80096fc:	08013760 	.word	0x08013760
 8009700:	080131b8 	.word	0x080131b8

08009704 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 8009704:	b480      	push	{r7}
 8009706:	b085      	sub	sp, #20
 8009708:	af00      	add	r7, sp, #0
 800970a:	6078      	str	r0, [r7, #4]
 800970c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	2b00      	cmp	r3, #0
 8009712:	d008      	beq.n	8009726 <tcp_accept+0x22>
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	7d1b      	ldrb	r3, [r3, #20]
 8009718:	2b01      	cmp	r3, #1
 800971a:	d104      	bne.n	8009726 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	683a      	ldr	r2, [r7, #0]
 8009724:	619a      	str	r2, [r3, #24]
  }
}
 8009726:	bf00      	nop
 8009728:	3714      	adds	r7, #20
 800972a:	46bd      	mov	sp, r7
 800972c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009730:	4770      	bx	lr
	...

08009734 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8009734:	b580      	push	{r7, lr}
 8009736:	b084      	sub	sp, #16
 8009738:	af00      	add	r7, sp, #0
 800973a:	60f8      	str	r0, [r7, #12]
 800973c:	60b9      	str	r1, [r7, #8]
 800973e:	4613      	mov	r3, r2
 8009740:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	2b00      	cmp	r3, #0
 8009746:	d107      	bne.n	8009758 <tcp_poll+0x24>
 8009748:	4b0e      	ldr	r3, [pc, #56]	@ (8009784 <tcp_poll+0x50>)
 800974a:	f640 023d 	movw	r2, #2109	@ 0x83d
 800974e:	490e      	ldr	r1, [pc, #56]	@ (8009788 <tcp_poll+0x54>)
 8009750:	480e      	ldr	r0, [pc, #56]	@ (800978c <tcp_poll+0x58>)
 8009752:	f007 fe15 	bl	8011380 <iprintf>
 8009756:	e011      	b.n	800977c <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	7d1b      	ldrb	r3, [r3, #20]
 800975c:	2b01      	cmp	r3, #1
 800975e:	d106      	bne.n	800976e <tcp_poll+0x3a>
 8009760:	4b08      	ldr	r3, [pc, #32]	@ (8009784 <tcp_poll+0x50>)
 8009762:	f640 023e 	movw	r2, #2110	@ 0x83e
 8009766:	490a      	ldr	r1, [pc, #40]	@ (8009790 <tcp_poll+0x5c>)
 8009768:	4808      	ldr	r0, [pc, #32]	@ (800978c <tcp_poll+0x58>)
 800976a:	f007 fe09 	bl	8011380 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	68ba      	ldr	r2, [r7, #8]
 8009772:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	79fa      	ldrb	r2, [r7, #7]
 800977a:	775a      	strb	r2, [r3, #29]
}
 800977c:	3710      	adds	r7, #16
 800977e:	46bd      	mov	sp, r7
 8009780:	bd80      	pop	{r7, pc}
 8009782:	bf00      	nop
 8009784:	08013174 	.word	0x08013174
 8009788:	08013788 	.word	0x08013788
 800978c:	080131b8 	.word	0x080131b8
 8009790:	080137a0 	.word	0x080137a0

08009794 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8009794:	b580      	push	{r7, lr}
 8009796:	b082      	sub	sp, #8
 8009798:	af00      	add	r7, sp, #0
 800979a:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d107      	bne.n	80097b2 <tcp_pcb_purge+0x1e>
 80097a2:	4b21      	ldr	r3, [pc, #132]	@ (8009828 <tcp_pcb_purge+0x94>)
 80097a4:	f640 0251 	movw	r2, #2129	@ 0x851
 80097a8:	4920      	ldr	r1, [pc, #128]	@ (800982c <tcp_pcb_purge+0x98>)
 80097aa:	4821      	ldr	r0, [pc, #132]	@ (8009830 <tcp_pcb_purge+0x9c>)
 80097ac:	f007 fde8 	bl	8011380 <iprintf>
 80097b0:	e037      	b.n	8009822 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	7d1b      	ldrb	r3, [r3, #20]
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d033      	beq.n	8009822 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 80097be:	2b0a      	cmp	r3, #10
 80097c0:	d02f      	beq.n	8009822 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 80097c6:	2b01      	cmp	r3, #1
 80097c8:	d02b      	beq.n	8009822 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d007      	beq.n	80097e2 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80097d6:	4618      	mov	r0, r3
 80097d8:	f7fe f838 	bl	800784c <pbuf_free>
      pcb->refused_data = NULL;
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	2200      	movs	r2, #0
 80097e0:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d002      	beq.n	80097f0 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 80097ea:	6878      	ldr	r0, [r7, #4]
 80097ec:	f000 f986 	bl	8009afc <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80097f6:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80097fc:	4618      	mov	r0, r3
 80097fe:	f7ff fce1 	bl	80091c4 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009806:	4618      	mov	r0, r3
 8009808:	f7ff fcdc 	bl	80091c4 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	2200      	movs	r2, #0
 8009810:	66da      	str	r2, [r3, #108]	@ 0x6c
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	2200      	movs	r2, #0
 800981e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8009822:	3708      	adds	r7, #8
 8009824:	46bd      	mov	sp, r7
 8009826:	bd80      	pop	{r7, pc}
 8009828:	08013174 	.word	0x08013174
 800982c:	080137c0 	.word	0x080137c0
 8009830:	080131b8 	.word	0x080131b8

08009834 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8009834:	b580      	push	{r7, lr}
 8009836:	b084      	sub	sp, #16
 8009838:	af00      	add	r7, sp, #0
 800983a:	6078      	str	r0, [r7, #4]
 800983c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800983e:	683b      	ldr	r3, [r7, #0]
 8009840:	2b00      	cmp	r3, #0
 8009842:	d106      	bne.n	8009852 <tcp_pcb_remove+0x1e>
 8009844:	4b3e      	ldr	r3, [pc, #248]	@ (8009940 <tcp_pcb_remove+0x10c>)
 8009846:	f640 0283 	movw	r2, #2179	@ 0x883
 800984a:	493e      	ldr	r1, [pc, #248]	@ (8009944 <tcp_pcb_remove+0x110>)
 800984c:	483e      	ldr	r0, [pc, #248]	@ (8009948 <tcp_pcb_remove+0x114>)
 800984e:	f007 fd97 	bl	8011380 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	2b00      	cmp	r3, #0
 8009856:	d106      	bne.n	8009866 <tcp_pcb_remove+0x32>
 8009858:	4b39      	ldr	r3, [pc, #228]	@ (8009940 <tcp_pcb_remove+0x10c>)
 800985a:	f640 0284 	movw	r2, #2180	@ 0x884
 800985e:	493b      	ldr	r1, [pc, #236]	@ (800994c <tcp_pcb_remove+0x118>)
 8009860:	4839      	ldr	r0, [pc, #228]	@ (8009948 <tcp_pcb_remove+0x114>)
 8009862:	f007 fd8d 	bl	8011380 <iprintf>

  TCP_RMV(pcblist, pcb);
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	683a      	ldr	r2, [r7, #0]
 800986c:	429a      	cmp	r2, r3
 800986e:	d105      	bne.n	800987c <tcp_pcb_remove+0x48>
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	68da      	ldr	r2, [r3, #12]
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	601a      	str	r2, [r3, #0]
 800987a:	e013      	b.n	80098a4 <tcp_pcb_remove+0x70>
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	60fb      	str	r3, [r7, #12]
 8009882:	e00c      	b.n	800989e <tcp_pcb_remove+0x6a>
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	68db      	ldr	r3, [r3, #12]
 8009888:	683a      	ldr	r2, [r7, #0]
 800988a:	429a      	cmp	r2, r3
 800988c:	d104      	bne.n	8009898 <tcp_pcb_remove+0x64>
 800988e:	683b      	ldr	r3, [r7, #0]
 8009890:	68da      	ldr	r2, [r3, #12]
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	60da      	str	r2, [r3, #12]
 8009896:	e005      	b.n	80098a4 <tcp_pcb_remove+0x70>
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	68db      	ldr	r3, [r3, #12]
 800989c:	60fb      	str	r3, [r7, #12]
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d1ef      	bne.n	8009884 <tcp_pcb_remove+0x50>
 80098a4:	683b      	ldr	r3, [r7, #0]
 80098a6:	2200      	movs	r2, #0
 80098a8:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 80098aa:	6838      	ldr	r0, [r7, #0]
 80098ac:	f7ff ff72 	bl	8009794 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 80098b0:	683b      	ldr	r3, [r7, #0]
 80098b2:	7d1b      	ldrb	r3, [r3, #20]
 80098b4:	2b0a      	cmp	r3, #10
 80098b6:	d013      	beq.n	80098e0 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 80098b8:	683b      	ldr	r3, [r7, #0]
 80098ba:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 80098bc:	2b01      	cmp	r3, #1
 80098be:	d00f      	beq.n	80098e0 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 80098c0:	683b      	ldr	r3, [r7, #0]
 80098c2:	8b5b      	ldrh	r3, [r3, #26]
 80098c4:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d009      	beq.n	80098e0 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 80098cc:	683b      	ldr	r3, [r7, #0]
 80098ce:	8b5b      	ldrh	r3, [r3, #26]
 80098d0:	f043 0302 	orr.w	r3, r3, #2
 80098d4:	b29a      	uxth	r2, r3
 80098d6:	683b      	ldr	r3, [r7, #0]
 80098d8:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80098da:	6838      	ldr	r0, [r7, #0]
 80098dc:	f003 fbc0 	bl	800d060 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 80098e0:	683b      	ldr	r3, [r7, #0]
 80098e2:	7d1b      	ldrb	r3, [r3, #20]
 80098e4:	2b01      	cmp	r3, #1
 80098e6:	d020      	beq.n	800992a <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 80098e8:	683b      	ldr	r3, [r7, #0]
 80098ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d006      	beq.n	80098fe <tcp_pcb_remove+0xca>
 80098f0:	4b13      	ldr	r3, [pc, #76]	@ (8009940 <tcp_pcb_remove+0x10c>)
 80098f2:	f640 0293 	movw	r2, #2195	@ 0x893
 80098f6:	4916      	ldr	r1, [pc, #88]	@ (8009950 <tcp_pcb_remove+0x11c>)
 80098f8:	4813      	ldr	r0, [pc, #76]	@ (8009948 <tcp_pcb_remove+0x114>)
 80098fa:	f007 fd41 	bl	8011380 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 80098fe:	683b      	ldr	r3, [r7, #0]
 8009900:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009902:	2b00      	cmp	r3, #0
 8009904:	d006      	beq.n	8009914 <tcp_pcb_remove+0xe0>
 8009906:	4b0e      	ldr	r3, [pc, #56]	@ (8009940 <tcp_pcb_remove+0x10c>)
 8009908:	f640 0294 	movw	r2, #2196	@ 0x894
 800990c:	4911      	ldr	r1, [pc, #68]	@ (8009954 <tcp_pcb_remove+0x120>)
 800990e:	480e      	ldr	r0, [pc, #56]	@ (8009948 <tcp_pcb_remove+0x114>)
 8009910:	f007 fd36 	bl	8011380 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8009914:	683b      	ldr	r3, [r7, #0]
 8009916:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009918:	2b00      	cmp	r3, #0
 800991a:	d006      	beq.n	800992a <tcp_pcb_remove+0xf6>
 800991c:	4b08      	ldr	r3, [pc, #32]	@ (8009940 <tcp_pcb_remove+0x10c>)
 800991e:	f640 0296 	movw	r2, #2198	@ 0x896
 8009922:	490d      	ldr	r1, [pc, #52]	@ (8009958 <tcp_pcb_remove+0x124>)
 8009924:	4808      	ldr	r0, [pc, #32]	@ (8009948 <tcp_pcb_remove+0x114>)
 8009926:	f007 fd2b 	bl	8011380 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800992a:	683b      	ldr	r3, [r7, #0]
 800992c:	2200      	movs	r2, #0
 800992e:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8009930:	683b      	ldr	r3, [r7, #0]
 8009932:	2200      	movs	r2, #0
 8009934:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8009936:	bf00      	nop
 8009938:	3710      	adds	r7, #16
 800993a:	46bd      	mov	sp, r7
 800993c:	bd80      	pop	{r7, pc}
 800993e:	bf00      	nop
 8009940:	08013174 	.word	0x08013174
 8009944:	080137dc 	.word	0x080137dc
 8009948:	080131b8 	.word	0x080131b8
 800994c:	080137f8 	.word	0x080137f8
 8009950:	08013818 	.word	0x08013818
 8009954:	08013830 	.word	0x08013830
 8009958:	0801384c 	.word	0x0801384c

0800995c <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800995c:	b580      	push	{r7, lr}
 800995e:	b082      	sub	sp, #8
 8009960:	af00      	add	r7, sp, #0
 8009962:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	2b00      	cmp	r3, #0
 8009968:	d106      	bne.n	8009978 <tcp_next_iss+0x1c>
 800996a:	4b0a      	ldr	r3, [pc, #40]	@ (8009994 <tcp_next_iss+0x38>)
 800996c:	f640 02af 	movw	r2, #2223	@ 0x8af
 8009970:	4909      	ldr	r1, [pc, #36]	@ (8009998 <tcp_next_iss+0x3c>)
 8009972:	480a      	ldr	r0, [pc, #40]	@ (800999c <tcp_next_iss+0x40>)
 8009974:	f007 fd04 	bl	8011380 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8009978:	4b09      	ldr	r3, [pc, #36]	@ (80099a0 <tcp_next_iss+0x44>)
 800997a:	681a      	ldr	r2, [r3, #0]
 800997c:	4b09      	ldr	r3, [pc, #36]	@ (80099a4 <tcp_next_iss+0x48>)
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	4413      	add	r3, r2
 8009982:	4a07      	ldr	r2, [pc, #28]	@ (80099a0 <tcp_next_iss+0x44>)
 8009984:	6013      	str	r3, [r2, #0]
  return iss;
 8009986:	4b06      	ldr	r3, [pc, #24]	@ (80099a0 <tcp_next_iss+0x44>)
 8009988:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800998a:	4618      	mov	r0, r3
 800998c:	3708      	adds	r7, #8
 800998e:	46bd      	mov	sp, r7
 8009990:	bd80      	pop	{r7, pc}
 8009992:	bf00      	nop
 8009994:	08013174 	.word	0x08013174
 8009998:	08013864 	.word	0x08013864
 800999c:	080131b8 	.word	0x080131b8
 80099a0:	20000064 	.word	0x20000064
 80099a4:	2000a7e8 	.word	0x2000a7e8

080099a8 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 80099a8:	b580      	push	{r7, lr}
 80099aa:	b086      	sub	sp, #24
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	4603      	mov	r3, r0
 80099b0:	60b9      	str	r1, [r7, #8]
 80099b2:	607a      	str	r2, [r7, #4]
 80099b4:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d106      	bne.n	80099ca <tcp_eff_send_mss_netif+0x22>
 80099bc:	4b14      	ldr	r3, [pc, #80]	@ (8009a10 <tcp_eff_send_mss_netif+0x68>)
 80099be:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 80099c2:	4914      	ldr	r1, [pc, #80]	@ (8009a14 <tcp_eff_send_mss_netif+0x6c>)
 80099c4:	4814      	ldr	r0, [pc, #80]	@ (8009a18 <tcp_eff_send_mss_netif+0x70>)
 80099c6:	f007 fcdb 	bl	8011380 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 80099ca:	68bb      	ldr	r3, [r7, #8]
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d101      	bne.n	80099d4 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 80099d0:	89fb      	ldrh	r3, [r7, #14]
 80099d2:	e019      	b.n	8009a08 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 80099d4:	68bb      	ldr	r3, [r7, #8]
 80099d6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80099d8:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 80099da:	8afb      	ldrh	r3, [r7, #22]
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d012      	beq.n	8009a06 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 80099e0:	2328      	movs	r3, #40	@ 0x28
 80099e2:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 80099e4:	8afa      	ldrh	r2, [r7, #22]
 80099e6:	8abb      	ldrh	r3, [r7, #20]
 80099e8:	429a      	cmp	r2, r3
 80099ea:	d904      	bls.n	80099f6 <tcp_eff_send_mss_netif+0x4e>
 80099ec:	8afa      	ldrh	r2, [r7, #22]
 80099ee:	8abb      	ldrh	r3, [r7, #20]
 80099f0:	1ad3      	subs	r3, r2, r3
 80099f2:	b29b      	uxth	r3, r3
 80099f4:	e000      	b.n	80099f8 <tcp_eff_send_mss_netif+0x50>
 80099f6:	2300      	movs	r3, #0
 80099f8:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 80099fa:	8a7a      	ldrh	r2, [r7, #18]
 80099fc:	89fb      	ldrh	r3, [r7, #14]
 80099fe:	4293      	cmp	r3, r2
 8009a00:	bf28      	it	cs
 8009a02:	4613      	movcs	r3, r2
 8009a04:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8009a06:	89fb      	ldrh	r3, [r7, #14]
}
 8009a08:	4618      	mov	r0, r3
 8009a0a:	3718      	adds	r7, #24
 8009a0c:	46bd      	mov	sp, r7
 8009a0e:	bd80      	pop	{r7, pc}
 8009a10:	08013174 	.word	0x08013174
 8009a14:	08013880 	.word	0x08013880
 8009a18:	080131b8 	.word	0x080131b8

08009a1c <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8009a1c:	b580      	push	{r7, lr}
 8009a1e:	b084      	sub	sp, #16
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	6078      	str	r0, [r7, #4]
 8009a24:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8009a26:	683b      	ldr	r3, [r7, #0]
 8009a28:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d119      	bne.n	8009a64 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8009a30:	4b10      	ldr	r3, [pc, #64]	@ (8009a74 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8009a32:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 8009a36:	4910      	ldr	r1, [pc, #64]	@ (8009a78 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8009a38:	4810      	ldr	r0, [pc, #64]	@ (8009a7c <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8009a3a:	f007 fca1 	bl	8011380 <iprintf>

  while (pcb != NULL) {
 8009a3e:	e011      	b.n	8009a64 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	681a      	ldr	r2, [r3, #0]
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	429a      	cmp	r2, r3
 8009a4a:	d108      	bne.n	8009a5e <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	68db      	ldr	r3, [r3, #12]
 8009a50:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8009a52:	68f8      	ldr	r0, [r7, #12]
 8009a54:	f7fe fd24 	bl	80084a0 <tcp_abort>
      pcb = next;
 8009a58:	68bb      	ldr	r3, [r7, #8]
 8009a5a:	60fb      	str	r3, [r7, #12]
 8009a5c:	e002      	b.n	8009a64 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	68db      	ldr	r3, [r3, #12]
 8009a62:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d1ea      	bne.n	8009a40 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8009a6a:	bf00      	nop
 8009a6c:	bf00      	nop
 8009a6e:	3710      	adds	r7, #16
 8009a70:	46bd      	mov	sp, r7
 8009a72:	bd80      	pop	{r7, pc}
 8009a74:	08013174 	.word	0x08013174
 8009a78:	080138a8 	.word	0x080138a8
 8009a7c:	080131b8 	.word	0x080131b8

08009a80 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8009a80:	b580      	push	{r7, lr}
 8009a82:	b084      	sub	sp, #16
 8009a84:	af00      	add	r7, sp, #0
 8009a86:	6078      	str	r0, [r7, #4]
 8009a88:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d02a      	beq.n	8009ae6 <tcp_netif_ip_addr_changed+0x66>
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d026      	beq.n	8009ae6 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8009a98:	4b15      	ldr	r3, [pc, #84]	@ (8009af0 <tcp_netif_ip_addr_changed+0x70>)
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	4619      	mov	r1, r3
 8009a9e:	6878      	ldr	r0, [r7, #4]
 8009aa0:	f7ff ffbc 	bl	8009a1c <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8009aa4:	4b13      	ldr	r3, [pc, #76]	@ (8009af4 <tcp_netif_ip_addr_changed+0x74>)
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	4619      	mov	r1, r3
 8009aaa:	6878      	ldr	r0, [r7, #4]
 8009aac:	f7ff ffb6 	bl	8009a1c <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8009ab0:	683b      	ldr	r3, [r7, #0]
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d017      	beq.n	8009ae6 <tcp_netif_ip_addr_changed+0x66>
 8009ab6:	683b      	ldr	r3, [r7, #0]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d013      	beq.n	8009ae6 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8009abe:	4b0e      	ldr	r3, [pc, #56]	@ (8009af8 <tcp_netif_ip_addr_changed+0x78>)
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	60fb      	str	r3, [r7, #12]
 8009ac4:	e00c      	b.n	8009ae0 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	681a      	ldr	r2, [r3, #0]
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	429a      	cmp	r2, r3
 8009ad0:	d103      	bne.n	8009ada <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8009ad2:	683b      	ldr	r3, [r7, #0]
 8009ad4:	681a      	ldr	r2, [r3, #0]
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	68db      	ldr	r3, [r3, #12]
 8009ade:	60fb      	str	r3, [r7, #12]
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d1ef      	bne.n	8009ac6 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8009ae6:	bf00      	nop
 8009ae8:	3710      	adds	r7, #16
 8009aea:	46bd      	mov	sp, r7
 8009aec:	bd80      	pop	{r7, pc}
 8009aee:	bf00      	nop
 8009af0:	2000a7f4 	.word	0x2000a7f4
 8009af4:	2000a7ec 	.word	0x2000a7ec
 8009af8:	2000a7f0 	.word	0x2000a7f0

08009afc <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8009afc:	b580      	push	{r7, lr}
 8009afe:	b082      	sub	sp, #8
 8009b00:	af00      	add	r7, sp, #0
 8009b02:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d007      	beq.n	8009b1c <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009b10:	4618      	mov	r0, r3
 8009b12:	f7ff fb57 	bl	80091c4 <tcp_segs_free>
    pcb->ooseq = NULL;
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	2200      	movs	r2, #0
 8009b1a:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8009b1c:	bf00      	nop
 8009b1e:	3708      	adds	r7, #8
 8009b20:	46bd      	mov	sp, r7
 8009b22:	bd80      	pop	{r7, pc}

08009b24 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8009b24:	b590      	push	{r4, r7, lr}
 8009b26:	b08d      	sub	sp, #52	@ 0x34
 8009b28:	af04      	add	r7, sp, #16
 8009b2a:	6078      	str	r0, [r7, #4]
 8009b2c:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d105      	bne.n	8009b40 <tcp_input+0x1c>
 8009b34:	4b9b      	ldr	r3, [pc, #620]	@ (8009da4 <tcp_input+0x280>)
 8009b36:	2283      	movs	r2, #131	@ 0x83
 8009b38:	499b      	ldr	r1, [pc, #620]	@ (8009da8 <tcp_input+0x284>)
 8009b3a:	489c      	ldr	r0, [pc, #624]	@ (8009dac <tcp_input+0x288>)
 8009b3c:	f007 fc20 	bl	8011380 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	685b      	ldr	r3, [r3, #4]
 8009b44:	4a9a      	ldr	r2, [pc, #616]	@ (8009db0 <tcp_input+0x28c>)
 8009b46:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	895b      	ldrh	r3, [r3, #10]
 8009b4c:	2b13      	cmp	r3, #19
 8009b4e:	f240 83d1 	bls.w	800a2f4 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8009b52:	4b98      	ldr	r3, [pc, #608]	@ (8009db4 <tcp_input+0x290>)
 8009b54:	695b      	ldr	r3, [r3, #20]
 8009b56:	4a97      	ldr	r2, [pc, #604]	@ (8009db4 <tcp_input+0x290>)
 8009b58:	6812      	ldr	r2, [r2, #0]
 8009b5a:	4611      	mov	r1, r2
 8009b5c:	4618      	mov	r0, r3
 8009b5e:	f006 fbb9 	bl	80102d4 <ip4_addr_isbroadcast_u32>
 8009b62:	4603      	mov	r3, r0
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	f040 83c7 	bne.w	800a2f8 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8009b6a:	4b92      	ldr	r3, [pc, #584]	@ (8009db4 <tcp_input+0x290>)
 8009b6c:	695b      	ldr	r3, [r3, #20]
 8009b6e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8009b72:	2be0      	cmp	r3, #224	@ 0xe0
 8009b74:	f000 83c0 	beq.w	800a2f8 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8009b78:	4b8d      	ldr	r3, [pc, #564]	@ (8009db0 <tcp_input+0x28c>)
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	899b      	ldrh	r3, [r3, #12]
 8009b7e:	b29b      	uxth	r3, r3
 8009b80:	4618      	mov	r0, r3
 8009b82:	f7fc fb05 	bl	8006190 <lwip_htons>
 8009b86:	4603      	mov	r3, r0
 8009b88:	0b1b      	lsrs	r3, r3, #12
 8009b8a:	b29b      	uxth	r3, r3
 8009b8c:	b2db      	uxtb	r3, r3
 8009b8e:	009b      	lsls	r3, r3, #2
 8009b90:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8009b92:	7cbb      	ldrb	r3, [r7, #18]
 8009b94:	2b13      	cmp	r3, #19
 8009b96:	f240 83b1 	bls.w	800a2fc <tcp_input+0x7d8>
 8009b9a:	7cbb      	ldrb	r3, [r7, #18]
 8009b9c:	b29a      	uxth	r2, r3
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	891b      	ldrh	r3, [r3, #8]
 8009ba2:	429a      	cmp	r2, r3
 8009ba4:	f200 83aa 	bhi.w	800a2fc <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8009ba8:	7cbb      	ldrb	r3, [r7, #18]
 8009baa:	b29b      	uxth	r3, r3
 8009bac:	3b14      	subs	r3, #20
 8009bae:	b29a      	uxth	r2, r3
 8009bb0:	4b81      	ldr	r3, [pc, #516]	@ (8009db8 <tcp_input+0x294>)
 8009bb2:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8009bb4:	4b81      	ldr	r3, [pc, #516]	@ (8009dbc <tcp_input+0x298>)
 8009bb6:	2200      	movs	r2, #0
 8009bb8:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	895a      	ldrh	r2, [r3, #10]
 8009bbe:	7cbb      	ldrb	r3, [r7, #18]
 8009bc0:	b29b      	uxth	r3, r3
 8009bc2:	429a      	cmp	r2, r3
 8009bc4:	d309      	bcc.n	8009bda <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8009bc6:	4b7c      	ldr	r3, [pc, #496]	@ (8009db8 <tcp_input+0x294>)
 8009bc8:	881a      	ldrh	r2, [r3, #0]
 8009bca:	4b7d      	ldr	r3, [pc, #500]	@ (8009dc0 <tcp_input+0x29c>)
 8009bcc:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8009bce:	7cbb      	ldrb	r3, [r7, #18]
 8009bd0:	4619      	mov	r1, r3
 8009bd2:	6878      	ldr	r0, [r7, #4]
 8009bd4:	f7fd fdb4 	bl	8007740 <pbuf_remove_header>
 8009bd8:	e04e      	b.n	8009c78 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d105      	bne.n	8009bee <tcp_input+0xca>
 8009be2:	4b70      	ldr	r3, [pc, #448]	@ (8009da4 <tcp_input+0x280>)
 8009be4:	22c2      	movs	r2, #194	@ 0xc2
 8009be6:	4977      	ldr	r1, [pc, #476]	@ (8009dc4 <tcp_input+0x2a0>)
 8009be8:	4870      	ldr	r0, [pc, #448]	@ (8009dac <tcp_input+0x288>)
 8009bea:	f007 fbc9 	bl	8011380 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8009bee:	2114      	movs	r1, #20
 8009bf0:	6878      	ldr	r0, [r7, #4]
 8009bf2:	f7fd fda5 	bl	8007740 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	895a      	ldrh	r2, [r3, #10]
 8009bfa:	4b71      	ldr	r3, [pc, #452]	@ (8009dc0 <tcp_input+0x29c>)
 8009bfc:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8009bfe:	4b6e      	ldr	r3, [pc, #440]	@ (8009db8 <tcp_input+0x294>)
 8009c00:	881a      	ldrh	r2, [r3, #0]
 8009c02:	4b6f      	ldr	r3, [pc, #444]	@ (8009dc0 <tcp_input+0x29c>)
 8009c04:	881b      	ldrh	r3, [r3, #0]
 8009c06:	1ad3      	subs	r3, r2, r3
 8009c08:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8009c0a:	4b6d      	ldr	r3, [pc, #436]	@ (8009dc0 <tcp_input+0x29c>)
 8009c0c:	881b      	ldrh	r3, [r3, #0]
 8009c0e:	4619      	mov	r1, r3
 8009c10:	6878      	ldr	r0, [r7, #4]
 8009c12:	f7fd fd95 	bl	8007740 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	895b      	ldrh	r3, [r3, #10]
 8009c1c:	8a3a      	ldrh	r2, [r7, #16]
 8009c1e:	429a      	cmp	r2, r3
 8009c20:	f200 836e 	bhi.w	800a300 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	685b      	ldr	r3, [r3, #4]
 8009c2a:	4a64      	ldr	r2, [pc, #400]	@ (8009dbc <tcp_input+0x298>)
 8009c2c:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	8a3a      	ldrh	r2, [r7, #16]
 8009c34:	4611      	mov	r1, r2
 8009c36:	4618      	mov	r0, r3
 8009c38:	f7fd fd82 	bl	8007740 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	891a      	ldrh	r2, [r3, #8]
 8009c40:	8a3b      	ldrh	r3, [r7, #16]
 8009c42:	1ad3      	subs	r3, r2, r3
 8009c44:	b29a      	uxth	r2, r3
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	895b      	ldrh	r3, [r3, #10]
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d005      	beq.n	8009c5e <tcp_input+0x13a>
 8009c52:	4b54      	ldr	r3, [pc, #336]	@ (8009da4 <tcp_input+0x280>)
 8009c54:	22df      	movs	r2, #223	@ 0xdf
 8009c56:	495c      	ldr	r1, [pc, #368]	@ (8009dc8 <tcp_input+0x2a4>)
 8009c58:	4854      	ldr	r0, [pc, #336]	@ (8009dac <tcp_input+0x288>)
 8009c5a:	f007 fb91 	bl	8011380 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	891a      	ldrh	r2, [r3, #8]
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	891b      	ldrh	r3, [r3, #8]
 8009c68:	429a      	cmp	r2, r3
 8009c6a:	d005      	beq.n	8009c78 <tcp_input+0x154>
 8009c6c:	4b4d      	ldr	r3, [pc, #308]	@ (8009da4 <tcp_input+0x280>)
 8009c6e:	22e0      	movs	r2, #224	@ 0xe0
 8009c70:	4956      	ldr	r1, [pc, #344]	@ (8009dcc <tcp_input+0x2a8>)
 8009c72:	484e      	ldr	r0, [pc, #312]	@ (8009dac <tcp_input+0x288>)
 8009c74:	f007 fb84 	bl	8011380 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8009c78:	4b4d      	ldr	r3, [pc, #308]	@ (8009db0 <tcp_input+0x28c>)
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	881b      	ldrh	r3, [r3, #0]
 8009c7e:	b29b      	uxth	r3, r3
 8009c80:	4a4b      	ldr	r2, [pc, #300]	@ (8009db0 <tcp_input+0x28c>)
 8009c82:	6814      	ldr	r4, [r2, #0]
 8009c84:	4618      	mov	r0, r3
 8009c86:	f7fc fa83 	bl	8006190 <lwip_htons>
 8009c8a:	4603      	mov	r3, r0
 8009c8c:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8009c8e:	4b48      	ldr	r3, [pc, #288]	@ (8009db0 <tcp_input+0x28c>)
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	885b      	ldrh	r3, [r3, #2]
 8009c94:	b29b      	uxth	r3, r3
 8009c96:	4a46      	ldr	r2, [pc, #280]	@ (8009db0 <tcp_input+0x28c>)
 8009c98:	6814      	ldr	r4, [r2, #0]
 8009c9a:	4618      	mov	r0, r3
 8009c9c:	f7fc fa78 	bl	8006190 <lwip_htons>
 8009ca0:	4603      	mov	r3, r0
 8009ca2:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8009ca4:	4b42      	ldr	r3, [pc, #264]	@ (8009db0 <tcp_input+0x28c>)
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	685b      	ldr	r3, [r3, #4]
 8009caa:	4a41      	ldr	r2, [pc, #260]	@ (8009db0 <tcp_input+0x28c>)
 8009cac:	6814      	ldr	r4, [r2, #0]
 8009cae:	4618      	mov	r0, r3
 8009cb0:	f7fc fa83 	bl	80061ba <lwip_htonl>
 8009cb4:	4603      	mov	r3, r0
 8009cb6:	6063      	str	r3, [r4, #4]
 8009cb8:	6863      	ldr	r3, [r4, #4]
 8009cba:	4a45      	ldr	r2, [pc, #276]	@ (8009dd0 <tcp_input+0x2ac>)
 8009cbc:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8009cbe:	4b3c      	ldr	r3, [pc, #240]	@ (8009db0 <tcp_input+0x28c>)
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	689b      	ldr	r3, [r3, #8]
 8009cc4:	4a3a      	ldr	r2, [pc, #232]	@ (8009db0 <tcp_input+0x28c>)
 8009cc6:	6814      	ldr	r4, [r2, #0]
 8009cc8:	4618      	mov	r0, r3
 8009cca:	f7fc fa76 	bl	80061ba <lwip_htonl>
 8009cce:	4603      	mov	r3, r0
 8009cd0:	60a3      	str	r3, [r4, #8]
 8009cd2:	68a3      	ldr	r3, [r4, #8]
 8009cd4:	4a3f      	ldr	r2, [pc, #252]	@ (8009dd4 <tcp_input+0x2b0>)
 8009cd6:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8009cd8:	4b35      	ldr	r3, [pc, #212]	@ (8009db0 <tcp_input+0x28c>)
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	89db      	ldrh	r3, [r3, #14]
 8009cde:	b29b      	uxth	r3, r3
 8009ce0:	4a33      	ldr	r2, [pc, #204]	@ (8009db0 <tcp_input+0x28c>)
 8009ce2:	6814      	ldr	r4, [r2, #0]
 8009ce4:	4618      	mov	r0, r3
 8009ce6:	f7fc fa53 	bl	8006190 <lwip_htons>
 8009cea:	4603      	mov	r3, r0
 8009cec:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8009cee:	4b30      	ldr	r3, [pc, #192]	@ (8009db0 <tcp_input+0x28c>)
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	899b      	ldrh	r3, [r3, #12]
 8009cf4:	b29b      	uxth	r3, r3
 8009cf6:	4618      	mov	r0, r3
 8009cf8:	f7fc fa4a 	bl	8006190 <lwip_htons>
 8009cfc:	4603      	mov	r3, r0
 8009cfe:	b2db      	uxtb	r3, r3
 8009d00:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009d04:	b2da      	uxtb	r2, r3
 8009d06:	4b34      	ldr	r3, [pc, #208]	@ (8009dd8 <tcp_input+0x2b4>)
 8009d08:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	891a      	ldrh	r2, [r3, #8]
 8009d0e:	4b33      	ldr	r3, [pc, #204]	@ (8009ddc <tcp_input+0x2b8>)
 8009d10:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8009d12:	4b31      	ldr	r3, [pc, #196]	@ (8009dd8 <tcp_input+0x2b4>)
 8009d14:	781b      	ldrb	r3, [r3, #0]
 8009d16:	f003 0303 	and.w	r3, r3, #3
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d00c      	beq.n	8009d38 <tcp_input+0x214>
    tcplen++;
 8009d1e:	4b2f      	ldr	r3, [pc, #188]	@ (8009ddc <tcp_input+0x2b8>)
 8009d20:	881b      	ldrh	r3, [r3, #0]
 8009d22:	3301      	adds	r3, #1
 8009d24:	b29a      	uxth	r2, r3
 8009d26:	4b2d      	ldr	r3, [pc, #180]	@ (8009ddc <tcp_input+0x2b8>)
 8009d28:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	891a      	ldrh	r2, [r3, #8]
 8009d2e:	4b2b      	ldr	r3, [pc, #172]	@ (8009ddc <tcp_input+0x2b8>)
 8009d30:	881b      	ldrh	r3, [r3, #0]
 8009d32:	429a      	cmp	r2, r3
 8009d34:	f200 82e6 	bhi.w	800a304 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8009d38:	2300      	movs	r3, #0
 8009d3a:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009d3c:	4b28      	ldr	r3, [pc, #160]	@ (8009de0 <tcp_input+0x2bc>)
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	61fb      	str	r3, [r7, #28]
 8009d42:	e09d      	b.n	8009e80 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8009d44:	69fb      	ldr	r3, [r7, #28]
 8009d46:	7d1b      	ldrb	r3, [r3, #20]
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d105      	bne.n	8009d58 <tcp_input+0x234>
 8009d4c:	4b15      	ldr	r3, [pc, #84]	@ (8009da4 <tcp_input+0x280>)
 8009d4e:	22fb      	movs	r2, #251	@ 0xfb
 8009d50:	4924      	ldr	r1, [pc, #144]	@ (8009de4 <tcp_input+0x2c0>)
 8009d52:	4816      	ldr	r0, [pc, #88]	@ (8009dac <tcp_input+0x288>)
 8009d54:	f007 fb14 	bl	8011380 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8009d58:	69fb      	ldr	r3, [r7, #28]
 8009d5a:	7d1b      	ldrb	r3, [r3, #20]
 8009d5c:	2b0a      	cmp	r3, #10
 8009d5e:	d105      	bne.n	8009d6c <tcp_input+0x248>
 8009d60:	4b10      	ldr	r3, [pc, #64]	@ (8009da4 <tcp_input+0x280>)
 8009d62:	22fc      	movs	r2, #252	@ 0xfc
 8009d64:	4920      	ldr	r1, [pc, #128]	@ (8009de8 <tcp_input+0x2c4>)
 8009d66:	4811      	ldr	r0, [pc, #68]	@ (8009dac <tcp_input+0x288>)
 8009d68:	f007 fb0a 	bl	8011380 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8009d6c:	69fb      	ldr	r3, [r7, #28]
 8009d6e:	7d1b      	ldrb	r3, [r3, #20]
 8009d70:	2b01      	cmp	r3, #1
 8009d72:	d105      	bne.n	8009d80 <tcp_input+0x25c>
 8009d74:	4b0b      	ldr	r3, [pc, #44]	@ (8009da4 <tcp_input+0x280>)
 8009d76:	22fd      	movs	r2, #253	@ 0xfd
 8009d78:	491c      	ldr	r1, [pc, #112]	@ (8009dec <tcp_input+0x2c8>)
 8009d7a:	480c      	ldr	r0, [pc, #48]	@ (8009dac <tcp_input+0x288>)
 8009d7c:	f007 fb00 	bl	8011380 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8009d80:	69fb      	ldr	r3, [r7, #28]
 8009d82:	7a1b      	ldrb	r3, [r3, #8]
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d033      	beq.n	8009df0 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8009d88:	69fb      	ldr	r3, [r7, #28]
 8009d8a:	7a1a      	ldrb	r2, [r3, #8]
 8009d8c:	4b09      	ldr	r3, [pc, #36]	@ (8009db4 <tcp_input+0x290>)
 8009d8e:	685b      	ldr	r3, [r3, #4]
 8009d90:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8009d94:	3301      	adds	r3, #1
 8009d96:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8009d98:	429a      	cmp	r2, r3
 8009d9a:	d029      	beq.n	8009df0 <tcp_input+0x2cc>
      prev = pcb;
 8009d9c:	69fb      	ldr	r3, [r7, #28]
 8009d9e:	61bb      	str	r3, [r7, #24]
      continue;
 8009da0:	e06b      	b.n	8009e7a <tcp_input+0x356>
 8009da2:	bf00      	nop
 8009da4:	080138dc 	.word	0x080138dc
 8009da8:	08013910 	.word	0x08013910
 8009dac:	08013928 	.word	0x08013928
 8009db0:	2000a810 	.word	0x2000a810
 8009db4:	200050b8 	.word	0x200050b8
 8009db8:	2000a814 	.word	0x2000a814
 8009dbc:	2000a818 	.word	0x2000a818
 8009dc0:	2000a816 	.word	0x2000a816
 8009dc4:	08013950 	.word	0x08013950
 8009dc8:	08013960 	.word	0x08013960
 8009dcc:	0801396c 	.word	0x0801396c
 8009dd0:	2000a820 	.word	0x2000a820
 8009dd4:	2000a824 	.word	0x2000a824
 8009dd8:	2000a82c 	.word	0x2000a82c
 8009ddc:	2000a82a 	.word	0x2000a82a
 8009de0:	2000a7f4 	.word	0x2000a7f4
 8009de4:	0801398c 	.word	0x0801398c
 8009de8:	080139b4 	.word	0x080139b4
 8009dec:	080139e0 	.word	0x080139e0
    }

    if (pcb->remote_port == tcphdr->src &&
 8009df0:	69fb      	ldr	r3, [r7, #28]
 8009df2:	8b1a      	ldrh	r2, [r3, #24]
 8009df4:	4b72      	ldr	r3, [pc, #456]	@ (8009fc0 <tcp_input+0x49c>)
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	881b      	ldrh	r3, [r3, #0]
 8009dfa:	b29b      	uxth	r3, r3
 8009dfc:	429a      	cmp	r2, r3
 8009dfe:	d13a      	bne.n	8009e76 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8009e00:	69fb      	ldr	r3, [r7, #28]
 8009e02:	8ada      	ldrh	r2, [r3, #22]
 8009e04:	4b6e      	ldr	r3, [pc, #440]	@ (8009fc0 <tcp_input+0x49c>)
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	885b      	ldrh	r3, [r3, #2]
 8009e0a:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8009e0c:	429a      	cmp	r2, r3
 8009e0e:	d132      	bne.n	8009e76 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8009e10:	69fb      	ldr	r3, [r7, #28]
 8009e12:	685a      	ldr	r2, [r3, #4]
 8009e14:	4b6b      	ldr	r3, [pc, #428]	@ (8009fc4 <tcp_input+0x4a0>)
 8009e16:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8009e18:	429a      	cmp	r2, r3
 8009e1a:	d12c      	bne.n	8009e76 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8009e1c:	69fb      	ldr	r3, [r7, #28]
 8009e1e:	681a      	ldr	r2, [r3, #0]
 8009e20:	4b68      	ldr	r3, [pc, #416]	@ (8009fc4 <tcp_input+0x4a0>)
 8009e22:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8009e24:	429a      	cmp	r2, r3
 8009e26:	d126      	bne.n	8009e76 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8009e28:	69fb      	ldr	r3, [r7, #28]
 8009e2a:	68db      	ldr	r3, [r3, #12]
 8009e2c:	69fa      	ldr	r2, [r7, #28]
 8009e2e:	429a      	cmp	r2, r3
 8009e30:	d106      	bne.n	8009e40 <tcp_input+0x31c>
 8009e32:	4b65      	ldr	r3, [pc, #404]	@ (8009fc8 <tcp_input+0x4a4>)
 8009e34:	f240 120d 	movw	r2, #269	@ 0x10d
 8009e38:	4964      	ldr	r1, [pc, #400]	@ (8009fcc <tcp_input+0x4a8>)
 8009e3a:	4865      	ldr	r0, [pc, #404]	@ (8009fd0 <tcp_input+0x4ac>)
 8009e3c:	f007 faa0 	bl	8011380 <iprintf>
      if (prev != NULL) {
 8009e40:	69bb      	ldr	r3, [r7, #24]
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d00a      	beq.n	8009e5c <tcp_input+0x338>
        prev->next = pcb->next;
 8009e46:	69fb      	ldr	r3, [r7, #28]
 8009e48:	68da      	ldr	r2, [r3, #12]
 8009e4a:	69bb      	ldr	r3, [r7, #24]
 8009e4c:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8009e4e:	4b61      	ldr	r3, [pc, #388]	@ (8009fd4 <tcp_input+0x4b0>)
 8009e50:	681a      	ldr	r2, [r3, #0]
 8009e52:	69fb      	ldr	r3, [r7, #28]
 8009e54:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8009e56:	4a5f      	ldr	r2, [pc, #380]	@ (8009fd4 <tcp_input+0x4b0>)
 8009e58:	69fb      	ldr	r3, [r7, #28]
 8009e5a:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8009e5c:	69fb      	ldr	r3, [r7, #28]
 8009e5e:	68db      	ldr	r3, [r3, #12]
 8009e60:	69fa      	ldr	r2, [r7, #28]
 8009e62:	429a      	cmp	r2, r3
 8009e64:	d111      	bne.n	8009e8a <tcp_input+0x366>
 8009e66:	4b58      	ldr	r3, [pc, #352]	@ (8009fc8 <tcp_input+0x4a4>)
 8009e68:	f240 1215 	movw	r2, #277	@ 0x115
 8009e6c:	495a      	ldr	r1, [pc, #360]	@ (8009fd8 <tcp_input+0x4b4>)
 8009e6e:	4858      	ldr	r0, [pc, #352]	@ (8009fd0 <tcp_input+0x4ac>)
 8009e70:	f007 fa86 	bl	8011380 <iprintf>
      break;
 8009e74:	e009      	b.n	8009e8a <tcp_input+0x366>
    }
    prev = pcb;
 8009e76:	69fb      	ldr	r3, [r7, #28]
 8009e78:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009e7a:	69fb      	ldr	r3, [r7, #28]
 8009e7c:	68db      	ldr	r3, [r3, #12]
 8009e7e:	61fb      	str	r3, [r7, #28]
 8009e80:	69fb      	ldr	r3, [r7, #28]
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	f47f af5e 	bne.w	8009d44 <tcp_input+0x220>
 8009e88:	e000      	b.n	8009e8c <tcp_input+0x368>
      break;
 8009e8a:	bf00      	nop
  }

  if (pcb == NULL) {
 8009e8c:	69fb      	ldr	r3, [r7, #28]
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	f040 80aa 	bne.w	8009fe8 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8009e94:	4b51      	ldr	r3, [pc, #324]	@ (8009fdc <tcp_input+0x4b8>)
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	61fb      	str	r3, [r7, #28]
 8009e9a:	e03f      	b.n	8009f1c <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8009e9c:	69fb      	ldr	r3, [r7, #28]
 8009e9e:	7d1b      	ldrb	r3, [r3, #20]
 8009ea0:	2b0a      	cmp	r3, #10
 8009ea2:	d006      	beq.n	8009eb2 <tcp_input+0x38e>
 8009ea4:	4b48      	ldr	r3, [pc, #288]	@ (8009fc8 <tcp_input+0x4a4>)
 8009ea6:	f240 121f 	movw	r2, #287	@ 0x11f
 8009eaa:	494d      	ldr	r1, [pc, #308]	@ (8009fe0 <tcp_input+0x4bc>)
 8009eac:	4848      	ldr	r0, [pc, #288]	@ (8009fd0 <tcp_input+0x4ac>)
 8009eae:	f007 fa67 	bl	8011380 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8009eb2:	69fb      	ldr	r3, [r7, #28]
 8009eb4:	7a1b      	ldrb	r3, [r3, #8]
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d009      	beq.n	8009ece <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8009eba:	69fb      	ldr	r3, [r7, #28]
 8009ebc:	7a1a      	ldrb	r2, [r3, #8]
 8009ebe:	4b41      	ldr	r3, [pc, #260]	@ (8009fc4 <tcp_input+0x4a0>)
 8009ec0:	685b      	ldr	r3, [r3, #4]
 8009ec2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8009ec6:	3301      	adds	r3, #1
 8009ec8:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8009eca:	429a      	cmp	r2, r3
 8009ecc:	d122      	bne.n	8009f14 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8009ece:	69fb      	ldr	r3, [r7, #28]
 8009ed0:	8b1a      	ldrh	r2, [r3, #24]
 8009ed2:	4b3b      	ldr	r3, [pc, #236]	@ (8009fc0 <tcp_input+0x49c>)
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	881b      	ldrh	r3, [r3, #0]
 8009ed8:	b29b      	uxth	r3, r3
 8009eda:	429a      	cmp	r2, r3
 8009edc:	d11b      	bne.n	8009f16 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8009ede:	69fb      	ldr	r3, [r7, #28]
 8009ee0:	8ada      	ldrh	r2, [r3, #22]
 8009ee2:	4b37      	ldr	r3, [pc, #220]	@ (8009fc0 <tcp_input+0x49c>)
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	885b      	ldrh	r3, [r3, #2]
 8009ee8:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8009eea:	429a      	cmp	r2, r3
 8009eec:	d113      	bne.n	8009f16 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8009eee:	69fb      	ldr	r3, [r7, #28]
 8009ef0:	685a      	ldr	r2, [r3, #4]
 8009ef2:	4b34      	ldr	r3, [pc, #208]	@ (8009fc4 <tcp_input+0x4a0>)
 8009ef4:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8009ef6:	429a      	cmp	r2, r3
 8009ef8:	d10d      	bne.n	8009f16 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8009efa:	69fb      	ldr	r3, [r7, #28]
 8009efc:	681a      	ldr	r2, [r3, #0]
 8009efe:	4b31      	ldr	r3, [pc, #196]	@ (8009fc4 <tcp_input+0x4a0>)
 8009f00:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8009f02:	429a      	cmp	r2, r3
 8009f04:	d107      	bne.n	8009f16 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8009f06:	69f8      	ldr	r0, [r7, #28]
 8009f08:	f000 fb56 	bl	800a5b8 <tcp_timewait_input>
        }
        pbuf_free(p);
 8009f0c:	6878      	ldr	r0, [r7, #4]
 8009f0e:	f7fd fc9d 	bl	800784c <pbuf_free>
        return;
 8009f12:	e1fd      	b.n	800a310 <tcp_input+0x7ec>
        continue;
 8009f14:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8009f16:	69fb      	ldr	r3, [r7, #28]
 8009f18:	68db      	ldr	r3, [r3, #12]
 8009f1a:	61fb      	str	r3, [r7, #28]
 8009f1c:	69fb      	ldr	r3, [r7, #28]
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d1bc      	bne.n	8009e9c <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8009f22:	2300      	movs	r3, #0
 8009f24:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8009f26:	4b2f      	ldr	r3, [pc, #188]	@ (8009fe4 <tcp_input+0x4c0>)
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	617b      	str	r3, [r7, #20]
 8009f2c:	e02a      	b.n	8009f84 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8009f2e:	697b      	ldr	r3, [r7, #20]
 8009f30:	7a1b      	ldrb	r3, [r3, #8]
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d00c      	beq.n	8009f50 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8009f36:	697b      	ldr	r3, [r7, #20]
 8009f38:	7a1a      	ldrb	r2, [r3, #8]
 8009f3a:	4b22      	ldr	r3, [pc, #136]	@ (8009fc4 <tcp_input+0x4a0>)
 8009f3c:	685b      	ldr	r3, [r3, #4]
 8009f3e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8009f42:	3301      	adds	r3, #1
 8009f44:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8009f46:	429a      	cmp	r2, r3
 8009f48:	d002      	beq.n	8009f50 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8009f4a:	697b      	ldr	r3, [r7, #20]
 8009f4c:	61bb      	str	r3, [r7, #24]
        continue;
 8009f4e:	e016      	b.n	8009f7e <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8009f50:	697b      	ldr	r3, [r7, #20]
 8009f52:	8ada      	ldrh	r2, [r3, #22]
 8009f54:	4b1a      	ldr	r3, [pc, #104]	@ (8009fc0 <tcp_input+0x49c>)
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	885b      	ldrh	r3, [r3, #2]
 8009f5a:	b29b      	uxth	r3, r3
 8009f5c:	429a      	cmp	r2, r3
 8009f5e:	d10c      	bne.n	8009f7a <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8009f60:	697b      	ldr	r3, [r7, #20]
 8009f62:	681a      	ldr	r2, [r3, #0]
 8009f64:	4b17      	ldr	r3, [pc, #92]	@ (8009fc4 <tcp_input+0x4a0>)
 8009f66:	695b      	ldr	r3, [r3, #20]
 8009f68:	429a      	cmp	r2, r3
 8009f6a:	d00f      	beq.n	8009f8c <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8009f6c:	697b      	ldr	r3, [r7, #20]
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d00d      	beq.n	8009f8e <tcp_input+0x46a>
 8009f72:	697b      	ldr	r3, [r7, #20]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d009      	beq.n	8009f8e <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8009f7a:	697b      	ldr	r3, [r7, #20]
 8009f7c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8009f7e:	697b      	ldr	r3, [r7, #20]
 8009f80:	68db      	ldr	r3, [r3, #12]
 8009f82:	617b      	str	r3, [r7, #20]
 8009f84:	697b      	ldr	r3, [r7, #20]
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d1d1      	bne.n	8009f2e <tcp_input+0x40a>
 8009f8a:	e000      	b.n	8009f8e <tcp_input+0x46a>
            break;
 8009f8c:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8009f8e:	697b      	ldr	r3, [r7, #20]
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d029      	beq.n	8009fe8 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8009f94:	69bb      	ldr	r3, [r7, #24]
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d00a      	beq.n	8009fb0 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8009f9a:	697b      	ldr	r3, [r7, #20]
 8009f9c:	68da      	ldr	r2, [r3, #12]
 8009f9e:	69bb      	ldr	r3, [r7, #24]
 8009fa0:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8009fa2:	4b10      	ldr	r3, [pc, #64]	@ (8009fe4 <tcp_input+0x4c0>)
 8009fa4:	681a      	ldr	r2, [r3, #0]
 8009fa6:	697b      	ldr	r3, [r7, #20]
 8009fa8:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8009faa:	4a0e      	ldr	r2, [pc, #56]	@ (8009fe4 <tcp_input+0x4c0>)
 8009fac:	697b      	ldr	r3, [r7, #20]
 8009fae:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8009fb0:	6978      	ldr	r0, [r7, #20]
 8009fb2:	f000 fa03 	bl	800a3bc <tcp_listen_input>
      }
      pbuf_free(p);
 8009fb6:	6878      	ldr	r0, [r7, #4]
 8009fb8:	f7fd fc48 	bl	800784c <pbuf_free>
      return;
 8009fbc:	e1a8      	b.n	800a310 <tcp_input+0x7ec>
 8009fbe:	bf00      	nop
 8009fc0:	2000a810 	.word	0x2000a810
 8009fc4:	200050b8 	.word	0x200050b8
 8009fc8:	080138dc 	.word	0x080138dc
 8009fcc:	08013a08 	.word	0x08013a08
 8009fd0:	08013928 	.word	0x08013928
 8009fd4:	2000a7f4 	.word	0x2000a7f4
 8009fd8:	08013a34 	.word	0x08013a34
 8009fdc:	2000a7f8 	.word	0x2000a7f8
 8009fe0:	08013a60 	.word	0x08013a60
 8009fe4:	2000a7f0 	.word	0x2000a7f0
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8009fe8:	69fb      	ldr	r3, [r7, #28]
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	f000 8158 	beq.w	800a2a0 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8009ff0:	4b95      	ldr	r3, [pc, #596]	@ (800a248 <tcp_input+0x724>)
 8009ff2:	2200      	movs	r2, #0
 8009ff4:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	891a      	ldrh	r2, [r3, #8]
 8009ffa:	4b93      	ldr	r3, [pc, #588]	@ (800a248 <tcp_input+0x724>)
 8009ffc:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8009ffe:	4a92      	ldr	r2, [pc, #584]	@ (800a248 <tcp_input+0x724>)
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800a004:	4b91      	ldr	r3, [pc, #580]	@ (800a24c <tcp_input+0x728>)
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	4a8f      	ldr	r2, [pc, #572]	@ (800a248 <tcp_input+0x724>)
 800a00a:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800a00c:	4b90      	ldr	r3, [pc, #576]	@ (800a250 <tcp_input+0x72c>)
 800a00e:	2200      	movs	r2, #0
 800a010:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800a012:	4b90      	ldr	r3, [pc, #576]	@ (800a254 <tcp_input+0x730>)
 800a014:	2200      	movs	r2, #0
 800a016:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800a018:	4b8f      	ldr	r3, [pc, #572]	@ (800a258 <tcp_input+0x734>)
 800a01a:	2200      	movs	r2, #0
 800a01c:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800a01e:	4b8f      	ldr	r3, [pc, #572]	@ (800a25c <tcp_input+0x738>)
 800a020:	781b      	ldrb	r3, [r3, #0]
 800a022:	f003 0308 	and.w	r3, r3, #8
 800a026:	2b00      	cmp	r3, #0
 800a028:	d006      	beq.n	800a038 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	7b5b      	ldrb	r3, [r3, #13]
 800a02e:	f043 0301 	orr.w	r3, r3, #1
 800a032:	b2da      	uxtb	r2, r3
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800a038:	69fb      	ldr	r3, [r7, #28]
 800a03a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d017      	beq.n	800a070 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800a040:	69f8      	ldr	r0, [r7, #28]
 800a042:	f7ff f843 	bl	80090cc <tcp_process_refused_data>
 800a046:	4603      	mov	r3, r0
 800a048:	f113 0f0d 	cmn.w	r3, #13
 800a04c:	d007      	beq.n	800a05e <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800a04e:	69fb      	ldr	r3, [r7, #28]
 800a050:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800a052:	2b00      	cmp	r3, #0
 800a054:	d00c      	beq.n	800a070 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800a056:	4b82      	ldr	r3, [pc, #520]	@ (800a260 <tcp_input+0x73c>)
 800a058:	881b      	ldrh	r3, [r3, #0]
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d008      	beq.n	800a070 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800a05e:	69fb      	ldr	r3, [r7, #28]
 800a060:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a062:	2b00      	cmp	r3, #0
 800a064:	f040 80e3 	bne.w	800a22e <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800a068:	69f8      	ldr	r0, [r7, #28]
 800a06a:	f003 fdff 	bl	800dc6c <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800a06e:	e0de      	b.n	800a22e <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800a070:	4a7c      	ldr	r2, [pc, #496]	@ (800a264 <tcp_input+0x740>)
 800a072:	69fb      	ldr	r3, [r7, #28]
 800a074:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800a076:	69f8      	ldr	r0, [r7, #28]
 800a078:	f000 fb18 	bl	800a6ac <tcp_process>
 800a07c:	4603      	mov	r3, r0
 800a07e:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800a080:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a084:	f113 0f0d 	cmn.w	r3, #13
 800a088:	f000 80d3 	beq.w	800a232 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800a08c:	4b71      	ldr	r3, [pc, #452]	@ (800a254 <tcp_input+0x730>)
 800a08e:	781b      	ldrb	r3, [r3, #0]
 800a090:	f003 0308 	and.w	r3, r3, #8
 800a094:	2b00      	cmp	r3, #0
 800a096:	d015      	beq.n	800a0c4 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800a098:	69fb      	ldr	r3, [r7, #28]
 800a09a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d008      	beq.n	800a0b4 <tcp_input+0x590>
 800a0a2:	69fb      	ldr	r3, [r7, #28]
 800a0a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a0a8:	69fa      	ldr	r2, [r7, #28]
 800a0aa:	6912      	ldr	r2, [r2, #16]
 800a0ac:	f06f 010d 	mvn.w	r1, #13
 800a0b0:	4610      	mov	r0, r2
 800a0b2:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800a0b4:	69f9      	ldr	r1, [r7, #28]
 800a0b6:	486c      	ldr	r0, [pc, #432]	@ (800a268 <tcp_input+0x744>)
 800a0b8:	f7ff fbbc 	bl	8009834 <tcp_pcb_remove>
        tcp_free(pcb);
 800a0bc:	69f8      	ldr	r0, [r7, #28]
 800a0be:	f7fd ff07 	bl	8007ed0 <tcp_free>
 800a0c2:	e0da      	b.n	800a27a <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800a0c4:	2300      	movs	r3, #0
 800a0c6:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800a0c8:	4b63      	ldr	r3, [pc, #396]	@ (800a258 <tcp_input+0x734>)
 800a0ca:	881b      	ldrh	r3, [r3, #0]
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d01d      	beq.n	800a10c <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800a0d0:	4b61      	ldr	r3, [pc, #388]	@ (800a258 <tcp_input+0x734>)
 800a0d2:	881b      	ldrh	r3, [r3, #0]
 800a0d4:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800a0d6:	69fb      	ldr	r3, [r7, #28]
 800a0d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d00a      	beq.n	800a0f6 <tcp_input+0x5d2>
 800a0e0:	69fb      	ldr	r3, [r7, #28]
 800a0e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a0e6:	69fa      	ldr	r2, [r7, #28]
 800a0e8:	6910      	ldr	r0, [r2, #16]
 800a0ea:	89fa      	ldrh	r2, [r7, #14]
 800a0ec:	69f9      	ldr	r1, [r7, #28]
 800a0ee:	4798      	blx	r3
 800a0f0:	4603      	mov	r3, r0
 800a0f2:	74fb      	strb	r3, [r7, #19]
 800a0f4:	e001      	b.n	800a0fa <tcp_input+0x5d6>
 800a0f6:	2300      	movs	r3, #0
 800a0f8:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800a0fa:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a0fe:	f113 0f0d 	cmn.w	r3, #13
 800a102:	f000 8098 	beq.w	800a236 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800a106:	4b54      	ldr	r3, [pc, #336]	@ (800a258 <tcp_input+0x734>)
 800a108:	2200      	movs	r2, #0
 800a10a:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800a10c:	69f8      	ldr	r0, [r7, #28]
 800a10e:	f000 f915 	bl	800a33c <tcp_input_delayed_close>
 800a112:	4603      	mov	r3, r0
 800a114:	2b00      	cmp	r3, #0
 800a116:	f040 8090 	bne.w	800a23a <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800a11a:	4b4d      	ldr	r3, [pc, #308]	@ (800a250 <tcp_input+0x72c>)
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d041      	beq.n	800a1a6 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800a122:	69fb      	ldr	r3, [r7, #28]
 800a124:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a126:	2b00      	cmp	r3, #0
 800a128:	d006      	beq.n	800a138 <tcp_input+0x614>
 800a12a:	4b50      	ldr	r3, [pc, #320]	@ (800a26c <tcp_input+0x748>)
 800a12c:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 800a130:	494f      	ldr	r1, [pc, #316]	@ (800a270 <tcp_input+0x74c>)
 800a132:	4850      	ldr	r0, [pc, #320]	@ (800a274 <tcp_input+0x750>)
 800a134:	f007 f924 	bl	8011380 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800a138:	69fb      	ldr	r3, [r7, #28]
 800a13a:	8b5b      	ldrh	r3, [r3, #26]
 800a13c:	f003 0310 	and.w	r3, r3, #16
 800a140:	2b00      	cmp	r3, #0
 800a142:	d008      	beq.n	800a156 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800a144:	4b42      	ldr	r3, [pc, #264]	@ (800a250 <tcp_input+0x72c>)
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	4618      	mov	r0, r3
 800a14a:	f7fd fb7f 	bl	800784c <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800a14e:	69f8      	ldr	r0, [r7, #28]
 800a150:	f7fe f9a6 	bl	80084a0 <tcp_abort>
            goto aborted;
 800a154:	e091      	b.n	800a27a <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800a156:	69fb      	ldr	r3, [r7, #28]
 800a158:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d00c      	beq.n	800a17a <tcp_input+0x656>
 800a160:	69fb      	ldr	r3, [r7, #28]
 800a162:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800a166:	69fb      	ldr	r3, [r7, #28]
 800a168:	6918      	ldr	r0, [r3, #16]
 800a16a:	4b39      	ldr	r3, [pc, #228]	@ (800a250 <tcp_input+0x72c>)
 800a16c:	681a      	ldr	r2, [r3, #0]
 800a16e:	2300      	movs	r3, #0
 800a170:	69f9      	ldr	r1, [r7, #28]
 800a172:	47a0      	blx	r4
 800a174:	4603      	mov	r3, r0
 800a176:	74fb      	strb	r3, [r7, #19]
 800a178:	e008      	b.n	800a18c <tcp_input+0x668>
 800a17a:	4b35      	ldr	r3, [pc, #212]	@ (800a250 <tcp_input+0x72c>)
 800a17c:	681a      	ldr	r2, [r3, #0]
 800a17e:	2300      	movs	r3, #0
 800a180:	69f9      	ldr	r1, [r7, #28]
 800a182:	2000      	movs	r0, #0
 800a184:	f7ff f896 	bl	80092b4 <tcp_recv_null>
 800a188:	4603      	mov	r3, r0
 800a18a:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800a18c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a190:	f113 0f0d 	cmn.w	r3, #13
 800a194:	d053      	beq.n	800a23e <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800a196:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d003      	beq.n	800a1a6 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800a19e:	4b2c      	ldr	r3, [pc, #176]	@ (800a250 <tcp_input+0x72c>)
 800a1a0:	681a      	ldr	r2, [r3, #0]
 800a1a2:	69fb      	ldr	r3, [r7, #28]
 800a1a4:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800a1a6:	4b2b      	ldr	r3, [pc, #172]	@ (800a254 <tcp_input+0x730>)
 800a1a8:	781b      	ldrb	r3, [r3, #0]
 800a1aa:	f003 0320 	and.w	r3, r3, #32
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d030      	beq.n	800a214 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800a1b2:	69fb      	ldr	r3, [r7, #28]
 800a1b4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d009      	beq.n	800a1ce <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800a1ba:	69fb      	ldr	r3, [r7, #28]
 800a1bc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a1be:	7b5a      	ldrb	r2, [r3, #13]
 800a1c0:	69fb      	ldr	r3, [r7, #28]
 800a1c2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a1c4:	f042 0220 	orr.w	r2, r2, #32
 800a1c8:	b2d2      	uxtb	r2, r2
 800a1ca:	735a      	strb	r2, [r3, #13]
 800a1cc:	e022      	b.n	800a214 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800a1ce:	69fb      	ldr	r3, [r7, #28]
 800a1d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a1d2:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800a1d6:	d005      	beq.n	800a1e4 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800a1d8:	69fb      	ldr	r3, [r7, #28]
 800a1da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a1dc:	3301      	adds	r3, #1
 800a1de:	b29a      	uxth	r2, r3
 800a1e0:	69fb      	ldr	r3, [r7, #28]
 800a1e2:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800a1e4:	69fb      	ldr	r3, [r7, #28]
 800a1e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d00b      	beq.n	800a206 <tcp_input+0x6e2>
 800a1ee:	69fb      	ldr	r3, [r7, #28]
 800a1f0:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800a1f4:	69fb      	ldr	r3, [r7, #28]
 800a1f6:	6918      	ldr	r0, [r3, #16]
 800a1f8:	2300      	movs	r3, #0
 800a1fa:	2200      	movs	r2, #0
 800a1fc:	69f9      	ldr	r1, [r7, #28]
 800a1fe:	47a0      	blx	r4
 800a200:	4603      	mov	r3, r0
 800a202:	74fb      	strb	r3, [r7, #19]
 800a204:	e001      	b.n	800a20a <tcp_input+0x6e6>
 800a206:	2300      	movs	r3, #0
 800a208:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800a20a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a20e:	f113 0f0d 	cmn.w	r3, #13
 800a212:	d016      	beq.n	800a242 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800a214:	4b13      	ldr	r3, [pc, #76]	@ (800a264 <tcp_input+0x740>)
 800a216:	2200      	movs	r2, #0
 800a218:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800a21a:	69f8      	ldr	r0, [r7, #28]
 800a21c:	f000 f88e 	bl	800a33c <tcp_input_delayed_close>
 800a220:	4603      	mov	r3, r0
 800a222:	2b00      	cmp	r3, #0
 800a224:	d128      	bne.n	800a278 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800a226:	69f8      	ldr	r0, [r7, #28]
 800a228:	f002 ff1a 	bl	800d060 <tcp_output>
 800a22c:	e025      	b.n	800a27a <tcp_input+0x756>
        goto aborted;
 800a22e:	bf00      	nop
 800a230:	e023      	b.n	800a27a <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800a232:	bf00      	nop
 800a234:	e021      	b.n	800a27a <tcp_input+0x756>
              goto aborted;
 800a236:	bf00      	nop
 800a238:	e01f      	b.n	800a27a <tcp_input+0x756>
          goto aborted;
 800a23a:	bf00      	nop
 800a23c:	e01d      	b.n	800a27a <tcp_input+0x756>
            goto aborted;
 800a23e:	bf00      	nop
 800a240:	e01b      	b.n	800a27a <tcp_input+0x756>
              goto aborted;
 800a242:	bf00      	nop
 800a244:	e019      	b.n	800a27a <tcp_input+0x756>
 800a246:	bf00      	nop
 800a248:	2000a800 	.word	0x2000a800
 800a24c:	2000a810 	.word	0x2000a810
 800a250:	2000a830 	.word	0x2000a830
 800a254:	2000a82d 	.word	0x2000a82d
 800a258:	2000a828 	.word	0x2000a828
 800a25c:	2000a82c 	.word	0x2000a82c
 800a260:	2000a82a 	.word	0x2000a82a
 800a264:	2000a834 	.word	0x2000a834
 800a268:	2000a7f4 	.word	0x2000a7f4
 800a26c:	080138dc 	.word	0x080138dc
 800a270:	08013a90 	.word	0x08013a90
 800a274:	08013928 	.word	0x08013928
          goto aborted;
 800a278:	bf00      	nop
    tcp_input_pcb = NULL;
 800a27a:	4b27      	ldr	r3, [pc, #156]	@ (800a318 <tcp_input+0x7f4>)
 800a27c:	2200      	movs	r2, #0
 800a27e:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800a280:	4b26      	ldr	r3, [pc, #152]	@ (800a31c <tcp_input+0x7f8>)
 800a282:	2200      	movs	r2, #0
 800a284:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800a286:	4b26      	ldr	r3, [pc, #152]	@ (800a320 <tcp_input+0x7fc>)
 800a288:	685b      	ldr	r3, [r3, #4]
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d03f      	beq.n	800a30e <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800a28e:	4b24      	ldr	r3, [pc, #144]	@ (800a320 <tcp_input+0x7fc>)
 800a290:	685b      	ldr	r3, [r3, #4]
 800a292:	4618      	mov	r0, r3
 800a294:	f7fd fada 	bl	800784c <pbuf_free>
      inseg.p = NULL;
 800a298:	4b21      	ldr	r3, [pc, #132]	@ (800a320 <tcp_input+0x7fc>)
 800a29a:	2200      	movs	r2, #0
 800a29c:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800a29e:	e036      	b.n	800a30e <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800a2a0:	4b20      	ldr	r3, [pc, #128]	@ (800a324 <tcp_input+0x800>)
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	899b      	ldrh	r3, [r3, #12]
 800a2a6:	b29b      	uxth	r3, r3
 800a2a8:	4618      	mov	r0, r3
 800a2aa:	f7fb ff71 	bl	8006190 <lwip_htons>
 800a2ae:	4603      	mov	r3, r0
 800a2b0:	b2db      	uxtb	r3, r3
 800a2b2:	f003 0304 	and.w	r3, r3, #4
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d118      	bne.n	800a2ec <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a2ba:	4b1b      	ldr	r3, [pc, #108]	@ (800a328 <tcp_input+0x804>)
 800a2bc:	6819      	ldr	r1, [r3, #0]
 800a2be:	4b1b      	ldr	r3, [pc, #108]	@ (800a32c <tcp_input+0x808>)
 800a2c0:	881b      	ldrh	r3, [r3, #0]
 800a2c2:	461a      	mov	r2, r3
 800a2c4:	4b1a      	ldr	r3, [pc, #104]	@ (800a330 <tcp_input+0x80c>)
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a2ca:	4b16      	ldr	r3, [pc, #88]	@ (800a324 <tcp_input+0x800>)
 800a2cc:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a2ce:	885b      	ldrh	r3, [r3, #2]
 800a2d0:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a2d2:	4a14      	ldr	r2, [pc, #80]	@ (800a324 <tcp_input+0x800>)
 800a2d4:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a2d6:	8812      	ldrh	r2, [r2, #0]
 800a2d8:	b292      	uxth	r2, r2
 800a2da:	9202      	str	r2, [sp, #8]
 800a2dc:	9301      	str	r3, [sp, #4]
 800a2de:	4b15      	ldr	r3, [pc, #84]	@ (800a334 <tcp_input+0x810>)
 800a2e0:	9300      	str	r3, [sp, #0]
 800a2e2:	4b15      	ldr	r3, [pc, #84]	@ (800a338 <tcp_input+0x814>)
 800a2e4:	4602      	mov	r2, r0
 800a2e6:	2000      	movs	r0, #0
 800a2e8:	f003 fc6e 	bl	800dbc8 <tcp_rst>
    pbuf_free(p);
 800a2ec:	6878      	ldr	r0, [r7, #4]
 800a2ee:	f7fd faad 	bl	800784c <pbuf_free>
  return;
 800a2f2:	e00c      	b.n	800a30e <tcp_input+0x7ea>
    goto dropped;
 800a2f4:	bf00      	nop
 800a2f6:	e006      	b.n	800a306 <tcp_input+0x7e2>
    goto dropped;
 800a2f8:	bf00      	nop
 800a2fa:	e004      	b.n	800a306 <tcp_input+0x7e2>
    goto dropped;
 800a2fc:	bf00      	nop
 800a2fe:	e002      	b.n	800a306 <tcp_input+0x7e2>
      goto dropped;
 800a300:	bf00      	nop
 800a302:	e000      	b.n	800a306 <tcp_input+0x7e2>
      goto dropped;
 800a304:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800a306:	6878      	ldr	r0, [r7, #4]
 800a308:	f7fd faa0 	bl	800784c <pbuf_free>
 800a30c:	e000      	b.n	800a310 <tcp_input+0x7ec>
  return;
 800a30e:	bf00      	nop
}
 800a310:	3724      	adds	r7, #36	@ 0x24
 800a312:	46bd      	mov	sp, r7
 800a314:	bd90      	pop	{r4, r7, pc}
 800a316:	bf00      	nop
 800a318:	2000a834 	.word	0x2000a834
 800a31c:	2000a830 	.word	0x2000a830
 800a320:	2000a800 	.word	0x2000a800
 800a324:	2000a810 	.word	0x2000a810
 800a328:	2000a824 	.word	0x2000a824
 800a32c:	2000a82a 	.word	0x2000a82a
 800a330:	2000a820 	.word	0x2000a820
 800a334:	200050c8 	.word	0x200050c8
 800a338:	200050cc 	.word	0x200050cc

0800a33c <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800a33c:	b580      	push	{r7, lr}
 800a33e:	b082      	sub	sp, #8
 800a340:	af00      	add	r7, sp, #0
 800a342:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	2b00      	cmp	r3, #0
 800a348:	d106      	bne.n	800a358 <tcp_input_delayed_close+0x1c>
 800a34a:	4b17      	ldr	r3, [pc, #92]	@ (800a3a8 <tcp_input_delayed_close+0x6c>)
 800a34c:	f240 225a 	movw	r2, #602	@ 0x25a
 800a350:	4916      	ldr	r1, [pc, #88]	@ (800a3ac <tcp_input_delayed_close+0x70>)
 800a352:	4817      	ldr	r0, [pc, #92]	@ (800a3b0 <tcp_input_delayed_close+0x74>)
 800a354:	f007 f814 	bl	8011380 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800a358:	4b16      	ldr	r3, [pc, #88]	@ (800a3b4 <tcp_input_delayed_close+0x78>)
 800a35a:	781b      	ldrb	r3, [r3, #0]
 800a35c:	f003 0310 	and.w	r3, r3, #16
 800a360:	2b00      	cmp	r3, #0
 800a362:	d01c      	beq.n	800a39e <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	8b5b      	ldrh	r3, [r3, #26]
 800a368:	f003 0310 	and.w	r3, r3, #16
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d10d      	bne.n	800a38c <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a376:	2b00      	cmp	r3, #0
 800a378:	d008      	beq.n	800a38c <tcp_input_delayed_close+0x50>
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a380:	687a      	ldr	r2, [r7, #4]
 800a382:	6912      	ldr	r2, [r2, #16]
 800a384:	f06f 010e 	mvn.w	r1, #14
 800a388:	4610      	mov	r0, r2
 800a38a:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800a38c:	6879      	ldr	r1, [r7, #4]
 800a38e:	480a      	ldr	r0, [pc, #40]	@ (800a3b8 <tcp_input_delayed_close+0x7c>)
 800a390:	f7ff fa50 	bl	8009834 <tcp_pcb_remove>
    tcp_free(pcb);
 800a394:	6878      	ldr	r0, [r7, #4]
 800a396:	f7fd fd9b 	bl	8007ed0 <tcp_free>
    return 1;
 800a39a:	2301      	movs	r3, #1
 800a39c:	e000      	b.n	800a3a0 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800a39e:	2300      	movs	r3, #0
}
 800a3a0:	4618      	mov	r0, r3
 800a3a2:	3708      	adds	r7, #8
 800a3a4:	46bd      	mov	sp, r7
 800a3a6:	bd80      	pop	{r7, pc}
 800a3a8:	080138dc 	.word	0x080138dc
 800a3ac:	08013aac 	.word	0x08013aac
 800a3b0:	08013928 	.word	0x08013928
 800a3b4:	2000a82d 	.word	0x2000a82d
 800a3b8:	2000a7f4 	.word	0x2000a7f4

0800a3bc <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800a3bc:	b590      	push	{r4, r7, lr}
 800a3be:	b08b      	sub	sp, #44	@ 0x2c
 800a3c0:	af04      	add	r7, sp, #16
 800a3c2:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800a3c4:	4b6f      	ldr	r3, [pc, #444]	@ (800a584 <tcp_listen_input+0x1c8>)
 800a3c6:	781b      	ldrb	r3, [r3, #0]
 800a3c8:	f003 0304 	and.w	r3, r3, #4
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	f040 80d2 	bne.w	800a576 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d106      	bne.n	800a3e6 <tcp_listen_input+0x2a>
 800a3d8:	4b6b      	ldr	r3, [pc, #428]	@ (800a588 <tcp_listen_input+0x1cc>)
 800a3da:	f240 2281 	movw	r2, #641	@ 0x281
 800a3de:	496b      	ldr	r1, [pc, #428]	@ (800a58c <tcp_listen_input+0x1d0>)
 800a3e0:	486b      	ldr	r0, [pc, #428]	@ (800a590 <tcp_listen_input+0x1d4>)
 800a3e2:	f006 ffcd 	bl	8011380 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800a3e6:	4b67      	ldr	r3, [pc, #412]	@ (800a584 <tcp_listen_input+0x1c8>)
 800a3e8:	781b      	ldrb	r3, [r3, #0]
 800a3ea:	f003 0310 	and.w	r3, r3, #16
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d019      	beq.n	800a426 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a3f2:	4b68      	ldr	r3, [pc, #416]	@ (800a594 <tcp_listen_input+0x1d8>)
 800a3f4:	6819      	ldr	r1, [r3, #0]
 800a3f6:	4b68      	ldr	r3, [pc, #416]	@ (800a598 <tcp_listen_input+0x1dc>)
 800a3f8:	881b      	ldrh	r3, [r3, #0]
 800a3fa:	461a      	mov	r2, r3
 800a3fc:	4b67      	ldr	r3, [pc, #412]	@ (800a59c <tcp_listen_input+0x1e0>)
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a402:	4b67      	ldr	r3, [pc, #412]	@ (800a5a0 <tcp_listen_input+0x1e4>)
 800a404:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a406:	885b      	ldrh	r3, [r3, #2]
 800a408:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a40a:	4a65      	ldr	r2, [pc, #404]	@ (800a5a0 <tcp_listen_input+0x1e4>)
 800a40c:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a40e:	8812      	ldrh	r2, [r2, #0]
 800a410:	b292      	uxth	r2, r2
 800a412:	9202      	str	r2, [sp, #8]
 800a414:	9301      	str	r3, [sp, #4]
 800a416:	4b63      	ldr	r3, [pc, #396]	@ (800a5a4 <tcp_listen_input+0x1e8>)
 800a418:	9300      	str	r3, [sp, #0]
 800a41a:	4b63      	ldr	r3, [pc, #396]	@ (800a5a8 <tcp_listen_input+0x1ec>)
 800a41c:	4602      	mov	r2, r0
 800a41e:	6878      	ldr	r0, [r7, #4]
 800a420:	f003 fbd2 	bl	800dbc8 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800a424:	e0a9      	b.n	800a57a <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800a426:	4b57      	ldr	r3, [pc, #348]	@ (800a584 <tcp_listen_input+0x1c8>)
 800a428:	781b      	ldrb	r3, [r3, #0]
 800a42a:	f003 0302 	and.w	r3, r3, #2
 800a42e:	2b00      	cmp	r3, #0
 800a430:	f000 80a3 	beq.w	800a57a <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	7d5b      	ldrb	r3, [r3, #21]
 800a438:	4618      	mov	r0, r3
 800a43a:	f7ff f85f 	bl	80094fc <tcp_alloc>
 800a43e:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800a440:	697b      	ldr	r3, [r7, #20]
 800a442:	2b00      	cmp	r3, #0
 800a444:	d111      	bne.n	800a46a <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	699b      	ldr	r3, [r3, #24]
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d00a      	beq.n	800a464 <tcp_listen_input+0xa8>
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	699b      	ldr	r3, [r3, #24]
 800a452:	687a      	ldr	r2, [r7, #4]
 800a454:	6910      	ldr	r0, [r2, #16]
 800a456:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a45a:	2100      	movs	r1, #0
 800a45c:	4798      	blx	r3
 800a45e:	4603      	mov	r3, r0
 800a460:	73bb      	strb	r3, [r7, #14]
      return;
 800a462:	e08b      	b.n	800a57c <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800a464:	23f0      	movs	r3, #240	@ 0xf0
 800a466:	73bb      	strb	r3, [r7, #14]
      return;
 800a468:	e088      	b.n	800a57c <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800a46a:	4b50      	ldr	r3, [pc, #320]	@ (800a5ac <tcp_listen_input+0x1f0>)
 800a46c:	695a      	ldr	r2, [r3, #20]
 800a46e:	697b      	ldr	r3, [r7, #20]
 800a470:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800a472:	4b4e      	ldr	r3, [pc, #312]	@ (800a5ac <tcp_listen_input+0x1f0>)
 800a474:	691a      	ldr	r2, [r3, #16]
 800a476:	697b      	ldr	r3, [r7, #20]
 800a478:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	8ada      	ldrh	r2, [r3, #22]
 800a47e:	697b      	ldr	r3, [r7, #20]
 800a480:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800a482:	4b47      	ldr	r3, [pc, #284]	@ (800a5a0 <tcp_listen_input+0x1e4>)
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	881b      	ldrh	r3, [r3, #0]
 800a488:	b29a      	uxth	r2, r3
 800a48a:	697b      	ldr	r3, [r7, #20]
 800a48c:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800a48e:	697b      	ldr	r3, [r7, #20]
 800a490:	2203      	movs	r2, #3
 800a492:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800a494:	4b41      	ldr	r3, [pc, #260]	@ (800a59c <tcp_listen_input+0x1e0>)
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	1c5a      	adds	r2, r3, #1
 800a49a:	697b      	ldr	r3, [r7, #20]
 800a49c:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800a49e:	697b      	ldr	r3, [r7, #20]
 800a4a0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a4a2:	697b      	ldr	r3, [r7, #20]
 800a4a4:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 800a4a6:	6978      	ldr	r0, [r7, #20]
 800a4a8:	f7ff fa58 	bl	800995c <tcp_next_iss>
 800a4ac:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800a4ae:	697b      	ldr	r3, [r7, #20]
 800a4b0:	693a      	ldr	r2, [r7, #16]
 800a4b2:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 800a4b4:	697b      	ldr	r3, [r7, #20]
 800a4b6:	693a      	ldr	r2, [r7, #16]
 800a4b8:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 800a4ba:	697b      	ldr	r3, [r7, #20]
 800a4bc:	693a      	ldr	r2, [r7, #16]
 800a4be:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 800a4c0:	697b      	ldr	r3, [r7, #20]
 800a4c2:	693a      	ldr	r2, [r7, #16]
 800a4c4:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800a4c6:	4b35      	ldr	r3, [pc, #212]	@ (800a59c <tcp_listen_input+0x1e0>)
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	1e5a      	subs	r2, r3, #1
 800a4cc:	697b      	ldr	r3, [r7, #20]
 800a4ce:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	691a      	ldr	r2, [r3, #16]
 800a4d4:	697b      	ldr	r3, [r7, #20]
 800a4d6:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800a4d8:	697b      	ldr	r3, [r7, #20]
 800a4da:	687a      	ldr	r2, [r7, #4]
 800a4dc:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	7a5b      	ldrb	r3, [r3, #9]
 800a4e2:	f003 030c 	and.w	r3, r3, #12
 800a4e6:	b2da      	uxtb	r2, r3
 800a4e8:	697b      	ldr	r3, [r7, #20]
 800a4ea:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	7a1a      	ldrb	r2, [r3, #8]
 800a4f0:	697b      	ldr	r3, [r7, #20]
 800a4f2:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800a4f4:	4b2e      	ldr	r3, [pc, #184]	@ (800a5b0 <tcp_listen_input+0x1f4>)
 800a4f6:	681a      	ldr	r2, [r3, #0]
 800a4f8:	697b      	ldr	r3, [r7, #20]
 800a4fa:	60da      	str	r2, [r3, #12]
 800a4fc:	4a2c      	ldr	r2, [pc, #176]	@ (800a5b0 <tcp_listen_input+0x1f4>)
 800a4fe:	697b      	ldr	r3, [r7, #20]
 800a500:	6013      	str	r3, [r2, #0]
 800a502:	f003 fd23 	bl	800df4c <tcp_timer_needed>
 800a506:	4b2b      	ldr	r3, [pc, #172]	@ (800a5b4 <tcp_listen_input+0x1f8>)
 800a508:	2201      	movs	r2, #1
 800a50a:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800a50c:	6978      	ldr	r0, [r7, #20]
 800a50e:	f001 fd8b 	bl	800c028 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800a512:	4b23      	ldr	r3, [pc, #140]	@ (800a5a0 <tcp_listen_input+0x1e4>)
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	89db      	ldrh	r3, [r3, #14]
 800a518:	b29a      	uxth	r2, r3
 800a51a:	697b      	ldr	r3, [r7, #20]
 800a51c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800a520:	697b      	ldr	r3, [r7, #20]
 800a522:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800a526:	697b      	ldr	r3, [r7, #20]
 800a528:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800a52c:	697b      	ldr	r3, [r7, #20]
 800a52e:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 800a530:	697b      	ldr	r3, [r7, #20]
 800a532:	3304      	adds	r3, #4
 800a534:	4618      	mov	r0, r3
 800a536:	f005 fc37 	bl	800fda8 <ip4_route>
 800a53a:	4601      	mov	r1, r0
 800a53c:	697b      	ldr	r3, [r7, #20]
 800a53e:	3304      	adds	r3, #4
 800a540:	461a      	mov	r2, r3
 800a542:	4620      	mov	r0, r4
 800a544:	f7ff fa30 	bl	80099a8 <tcp_eff_send_mss_netif>
 800a548:	4603      	mov	r3, r0
 800a54a:	461a      	mov	r2, r3
 800a54c:	697b      	ldr	r3, [r7, #20]
 800a54e:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800a550:	2112      	movs	r1, #18
 800a552:	6978      	ldr	r0, [r7, #20]
 800a554:	f002 fc96 	bl	800ce84 <tcp_enqueue_flags>
 800a558:	4603      	mov	r3, r0
 800a55a:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800a55c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a560:	2b00      	cmp	r3, #0
 800a562:	d004      	beq.n	800a56e <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800a564:	2100      	movs	r1, #0
 800a566:	6978      	ldr	r0, [r7, #20]
 800a568:	f7fd fedc 	bl	8008324 <tcp_abandon>
      return;
 800a56c:	e006      	b.n	800a57c <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800a56e:	6978      	ldr	r0, [r7, #20]
 800a570:	f002 fd76 	bl	800d060 <tcp_output>
  return;
 800a574:	e001      	b.n	800a57a <tcp_listen_input+0x1be>
    return;
 800a576:	bf00      	nop
 800a578:	e000      	b.n	800a57c <tcp_listen_input+0x1c0>
  return;
 800a57a:	bf00      	nop
}
 800a57c:	371c      	adds	r7, #28
 800a57e:	46bd      	mov	sp, r7
 800a580:	bd90      	pop	{r4, r7, pc}
 800a582:	bf00      	nop
 800a584:	2000a82c 	.word	0x2000a82c
 800a588:	080138dc 	.word	0x080138dc
 800a58c:	08013ad4 	.word	0x08013ad4
 800a590:	08013928 	.word	0x08013928
 800a594:	2000a824 	.word	0x2000a824
 800a598:	2000a82a 	.word	0x2000a82a
 800a59c:	2000a820 	.word	0x2000a820
 800a5a0:	2000a810 	.word	0x2000a810
 800a5a4:	200050c8 	.word	0x200050c8
 800a5a8:	200050cc 	.word	0x200050cc
 800a5ac:	200050b8 	.word	0x200050b8
 800a5b0:	2000a7f4 	.word	0x2000a7f4
 800a5b4:	2000a7fc 	.word	0x2000a7fc

0800a5b8 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800a5b8:	b580      	push	{r7, lr}
 800a5ba:	b086      	sub	sp, #24
 800a5bc:	af04      	add	r7, sp, #16
 800a5be:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800a5c0:	4b2f      	ldr	r3, [pc, #188]	@ (800a680 <tcp_timewait_input+0xc8>)
 800a5c2:	781b      	ldrb	r3, [r3, #0]
 800a5c4:	f003 0304 	and.w	r3, r3, #4
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d153      	bne.n	800a674 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d106      	bne.n	800a5e0 <tcp_timewait_input+0x28>
 800a5d2:	4b2c      	ldr	r3, [pc, #176]	@ (800a684 <tcp_timewait_input+0xcc>)
 800a5d4:	f240 22ee 	movw	r2, #750	@ 0x2ee
 800a5d8:	492b      	ldr	r1, [pc, #172]	@ (800a688 <tcp_timewait_input+0xd0>)
 800a5da:	482c      	ldr	r0, [pc, #176]	@ (800a68c <tcp_timewait_input+0xd4>)
 800a5dc:	f006 fed0 	bl	8011380 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800a5e0:	4b27      	ldr	r3, [pc, #156]	@ (800a680 <tcp_timewait_input+0xc8>)
 800a5e2:	781b      	ldrb	r3, [r3, #0]
 800a5e4:	f003 0302 	and.w	r3, r3, #2
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d02a      	beq.n	800a642 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800a5ec:	4b28      	ldr	r3, [pc, #160]	@ (800a690 <tcp_timewait_input+0xd8>)
 800a5ee:	681a      	ldr	r2, [r3, #0]
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a5f4:	1ad3      	subs	r3, r2, r3
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	db2d      	blt.n	800a656 <tcp_timewait_input+0x9e>
 800a5fa:	4b25      	ldr	r3, [pc, #148]	@ (800a690 <tcp_timewait_input+0xd8>)
 800a5fc:	681a      	ldr	r2, [r3, #0]
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a602:	6879      	ldr	r1, [r7, #4]
 800a604:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800a606:	440b      	add	r3, r1
 800a608:	1ad3      	subs	r3, r2, r3
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	dc23      	bgt.n	800a656 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a60e:	4b21      	ldr	r3, [pc, #132]	@ (800a694 <tcp_timewait_input+0xdc>)
 800a610:	6819      	ldr	r1, [r3, #0]
 800a612:	4b21      	ldr	r3, [pc, #132]	@ (800a698 <tcp_timewait_input+0xe0>)
 800a614:	881b      	ldrh	r3, [r3, #0]
 800a616:	461a      	mov	r2, r3
 800a618:	4b1d      	ldr	r3, [pc, #116]	@ (800a690 <tcp_timewait_input+0xd8>)
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a61e:	4b1f      	ldr	r3, [pc, #124]	@ (800a69c <tcp_timewait_input+0xe4>)
 800a620:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a622:	885b      	ldrh	r3, [r3, #2]
 800a624:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a626:	4a1d      	ldr	r2, [pc, #116]	@ (800a69c <tcp_timewait_input+0xe4>)
 800a628:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a62a:	8812      	ldrh	r2, [r2, #0]
 800a62c:	b292      	uxth	r2, r2
 800a62e:	9202      	str	r2, [sp, #8]
 800a630:	9301      	str	r3, [sp, #4]
 800a632:	4b1b      	ldr	r3, [pc, #108]	@ (800a6a0 <tcp_timewait_input+0xe8>)
 800a634:	9300      	str	r3, [sp, #0]
 800a636:	4b1b      	ldr	r3, [pc, #108]	@ (800a6a4 <tcp_timewait_input+0xec>)
 800a638:	4602      	mov	r2, r0
 800a63a:	6878      	ldr	r0, [r7, #4]
 800a63c:	f003 fac4 	bl	800dbc8 <tcp_rst>
      return;
 800a640:	e01b      	b.n	800a67a <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800a642:	4b0f      	ldr	r3, [pc, #60]	@ (800a680 <tcp_timewait_input+0xc8>)
 800a644:	781b      	ldrb	r3, [r3, #0]
 800a646:	f003 0301 	and.w	r3, r3, #1
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d003      	beq.n	800a656 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800a64e:	4b16      	ldr	r3, [pc, #88]	@ (800a6a8 <tcp_timewait_input+0xf0>)
 800a650:	681a      	ldr	r2, [r3, #0]
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800a656:	4b10      	ldr	r3, [pc, #64]	@ (800a698 <tcp_timewait_input+0xe0>)
 800a658:	881b      	ldrh	r3, [r3, #0]
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d00c      	beq.n	800a678 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	8b5b      	ldrh	r3, [r3, #26]
 800a662:	f043 0302 	orr.w	r3, r3, #2
 800a666:	b29a      	uxth	r2, r3
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800a66c:	6878      	ldr	r0, [r7, #4]
 800a66e:	f002 fcf7 	bl	800d060 <tcp_output>
  }
  return;
 800a672:	e001      	b.n	800a678 <tcp_timewait_input+0xc0>
    return;
 800a674:	bf00      	nop
 800a676:	e000      	b.n	800a67a <tcp_timewait_input+0xc2>
  return;
 800a678:	bf00      	nop
}
 800a67a:	3708      	adds	r7, #8
 800a67c:	46bd      	mov	sp, r7
 800a67e:	bd80      	pop	{r7, pc}
 800a680:	2000a82c 	.word	0x2000a82c
 800a684:	080138dc 	.word	0x080138dc
 800a688:	08013af4 	.word	0x08013af4
 800a68c:	08013928 	.word	0x08013928
 800a690:	2000a820 	.word	0x2000a820
 800a694:	2000a824 	.word	0x2000a824
 800a698:	2000a82a 	.word	0x2000a82a
 800a69c:	2000a810 	.word	0x2000a810
 800a6a0:	200050c8 	.word	0x200050c8
 800a6a4:	200050cc 	.word	0x200050cc
 800a6a8:	2000a7e8 	.word	0x2000a7e8

0800a6ac <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800a6ac:	b590      	push	{r4, r7, lr}
 800a6ae:	b08d      	sub	sp, #52	@ 0x34
 800a6b0:	af04      	add	r7, sp, #16
 800a6b2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800a6b4:	2300      	movs	r3, #0
 800a6b6:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800a6b8:	2300      	movs	r3, #0
 800a6ba:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d106      	bne.n	800a6d0 <tcp_process+0x24>
 800a6c2:	4b9d      	ldr	r3, [pc, #628]	@ (800a938 <tcp_process+0x28c>)
 800a6c4:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 800a6c8:	499c      	ldr	r1, [pc, #624]	@ (800a93c <tcp_process+0x290>)
 800a6ca:	489d      	ldr	r0, [pc, #628]	@ (800a940 <tcp_process+0x294>)
 800a6cc:	f006 fe58 	bl	8011380 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800a6d0:	4b9c      	ldr	r3, [pc, #624]	@ (800a944 <tcp_process+0x298>)
 800a6d2:	781b      	ldrb	r3, [r3, #0]
 800a6d4:	f003 0304 	and.w	r3, r3, #4
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d04e      	beq.n	800a77a <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	7d1b      	ldrb	r3, [r3, #20]
 800a6e0:	2b02      	cmp	r3, #2
 800a6e2:	d108      	bne.n	800a6f6 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a6e8:	4b97      	ldr	r3, [pc, #604]	@ (800a948 <tcp_process+0x29c>)
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	429a      	cmp	r2, r3
 800a6ee:	d123      	bne.n	800a738 <tcp_process+0x8c>
        acceptable = 1;
 800a6f0:	2301      	movs	r3, #1
 800a6f2:	76fb      	strb	r3, [r7, #27]
 800a6f4:	e020      	b.n	800a738 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a6fa:	4b94      	ldr	r3, [pc, #592]	@ (800a94c <tcp_process+0x2a0>)
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	429a      	cmp	r2, r3
 800a700:	d102      	bne.n	800a708 <tcp_process+0x5c>
        acceptable = 1;
 800a702:	2301      	movs	r3, #1
 800a704:	76fb      	strb	r3, [r7, #27]
 800a706:	e017      	b.n	800a738 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800a708:	4b90      	ldr	r3, [pc, #576]	@ (800a94c <tcp_process+0x2a0>)
 800a70a:	681a      	ldr	r2, [r3, #0]
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a710:	1ad3      	subs	r3, r2, r3
 800a712:	2b00      	cmp	r3, #0
 800a714:	db10      	blt.n	800a738 <tcp_process+0x8c>
 800a716:	4b8d      	ldr	r3, [pc, #564]	@ (800a94c <tcp_process+0x2a0>)
 800a718:	681a      	ldr	r2, [r3, #0]
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a71e:	6879      	ldr	r1, [r7, #4]
 800a720:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800a722:	440b      	add	r3, r1
 800a724:	1ad3      	subs	r3, r2, r3
 800a726:	2b00      	cmp	r3, #0
 800a728:	dc06      	bgt.n	800a738 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	8b5b      	ldrh	r3, [r3, #26]
 800a72e:	f043 0302 	orr.w	r3, r3, #2
 800a732:	b29a      	uxth	r2, r3
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800a738:	7efb      	ldrb	r3, [r7, #27]
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d01b      	beq.n	800a776 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	7d1b      	ldrb	r3, [r3, #20]
 800a742:	2b00      	cmp	r3, #0
 800a744:	d106      	bne.n	800a754 <tcp_process+0xa8>
 800a746:	4b7c      	ldr	r3, [pc, #496]	@ (800a938 <tcp_process+0x28c>)
 800a748:	f44f 724e 	mov.w	r2, #824	@ 0x338
 800a74c:	4980      	ldr	r1, [pc, #512]	@ (800a950 <tcp_process+0x2a4>)
 800a74e:	487c      	ldr	r0, [pc, #496]	@ (800a940 <tcp_process+0x294>)
 800a750:	f006 fe16 	bl	8011380 <iprintf>
      recv_flags |= TF_RESET;
 800a754:	4b7f      	ldr	r3, [pc, #508]	@ (800a954 <tcp_process+0x2a8>)
 800a756:	781b      	ldrb	r3, [r3, #0]
 800a758:	f043 0308 	orr.w	r3, r3, #8
 800a75c:	b2da      	uxtb	r2, r3
 800a75e:	4b7d      	ldr	r3, [pc, #500]	@ (800a954 <tcp_process+0x2a8>)
 800a760:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	8b5b      	ldrh	r3, [r3, #26]
 800a766:	f023 0301 	bic.w	r3, r3, #1
 800a76a:	b29a      	uxth	r2, r3
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800a770:	f06f 030d 	mvn.w	r3, #13
 800a774:	e37a      	b.n	800ae6c <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800a776:	2300      	movs	r3, #0
 800a778:	e378      	b.n	800ae6c <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800a77a:	4b72      	ldr	r3, [pc, #456]	@ (800a944 <tcp_process+0x298>)
 800a77c:	781b      	ldrb	r3, [r3, #0]
 800a77e:	f003 0302 	and.w	r3, r3, #2
 800a782:	2b00      	cmp	r3, #0
 800a784:	d010      	beq.n	800a7a8 <tcp_process+0xfc>
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	7d1b      	ldrb	r3, [r3, #20]
 800a78a:	2b02      	cmp	r3, #2
 800a78c:	d00c      	beq.n	800a7a8 <tcp_process+0xfc>
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	7d1b      	ldrb	r3, [r3, #20]
 800a792:	2b03      	cmp	r3, #3
 800a794:	d008      	beq.n	800a7a8 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	8b5b      	ldrh	r3, [r3, #26]
 800a79a:	f043 0302 	orr.w	r3, r3, #2
 800a79e:	b29a      	uxth	r2, r3
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800a7a4:	2300      	movs	r3, #0
 800a7a6:	e361      	b.n	800ae6c <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	8b5b      	ldrh	r3, [r3, #26]
 800a7ac:	f003 0310 	and.w	r3, r3, #16
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d103      	bne.n	800a7bc <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800a7b4:	4b68      	ldr	r3, [pc, #416]	@ (800a958 <tcp_process+0x2ac>)
 800a7b6:	681a      	ldr	r2, [r3, #0]
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	2200      	movs	r2, #0
 800a7c0:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	2200      	movs	r2, #0
 800a7c8:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 800a7cc:	6878      	ldr	r0, [r7, #4]
 800a7ce:	f001 fc2b 	bl	800c028 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	7d1b      	ldrb	r3, [r3, #20]
 800a7d6:	3b02      	subs	r3, #2
 800a7d8:	2b07      	cmp	r3, #7
 800a7da:	f200 8337 	bhi.w	800ae4c <tcp_process+0x7a0>
 800a7de:	a201      	add	r2, pc, #4	@ (adr r2, 800a7e4 <tcp_process+0x138>)
 800a7e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7e4:	0800a805 	.word	0x0800a805
 800a7e8:	0800aa35 	.word	0x0800aa35
 800a7ec:	0800abad 	.word	0x0800abad
 800a7f0:	0800abd7 	.word	0x0800abd7
 800a7f4:	0800acfb 	.word	0x0800acfb
 800a7f8:	0800abad 	.word	0x0800abad
 800a7fc:	0800ad87 	.word	0x0800ad87
 800a800:	0800ae17 	.word	0x0800ae17
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800a804:	4b4f      	ldr	r3, [pc, #316]	@ (800a944 <tcp_process+0x298>)
 800a806:	781b      	ldrb	r3, [r3, #0]
 800a808:	f003 0310 	and.w	r3, r3, #16
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	f000 80e4 	beq.w	800a9da <tcp_process+0x32e>
 800a812:	4b4c      	ldr	r3, [pc, #304]	@ (800a944 <tcp_process+0x298>)
 800a814:	781b      	ldrb	r3, [r3, #0]
 800a816:	f003 0302 	and.w	r3, r3, #2
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	f000 80dd 	beq.w	800a9da <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a824:	1c5a      	adds	r2, r3, #1
 800a826:	4b48      	ldr	r3, [pc, #288]	@ (800a948 <tcp_process+0x29c>)
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	429a      	cmp	r2, r3
 800a82c:	f040 80d5 	bne.w	800a9da <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800a830:	4b46      	ldr	r3, [pc, #280]	@ (800a94c <tcp_process+0x2a0>)
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	1c5a      	adds	r2, r3, #1
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 800a842:	4b41      	ldr	r3, [pc, #260]	@ (800a948 <tcp_process+0x29c>)
 800a844:	681a      	ldr	r2, [r3, #0]
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800a84a:	4b44      	ldr	r3, [pc, #272]	@ (800a95c <tcp_process+0x2b0>)
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	89db      	ldrh	r3, [r3, #14]
 800a850:	b29a      	uxth	r2, r3
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800a864:	4b39      	ldr	r3, [pc, #228]	@ (800a94c <tcp_process+0x2a0>)
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	1e5a      	subs	r2, r3, #1
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	2204      	movs	r2, #4
 800a872:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	3304      	adds	r3, #4
 800a87c:	4618      	mov	r0, r3
 800a87e:	f005 fa93 	bl	800fda8 <ip4_route>
 800a882:	4601      	mov	r1, r0
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	3304      	adds	r3, #4
 800a888:	461a      	mov	r2, r3
 800a88a:	4620      	mov	r0, r4
 800a88c:	f7ff f88c 	bl	80099a8 <tcp_eff_send_mss_netif>
 800a890:	4603      	mov	r3, r0
 800a892:	461a      	mov	r2, r3
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a89c:	009a      	lsls	r2, r3, #2
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a8a2:	005b      	lsls	r3, r3, #1
 800a8a4:	f241 111c 	movw	r1, #4380	@ 0x111c
 800a8a8:	428b      	cmp	r3, r1
 800a8aa:	bf38      	it	cc
 800a8ac:	460b      	movcc	r3, r1
 800a8ae:	429a      	cmp	r2, r3
 800a8b0:	d204      	bcs.n	800a8bc <tcp_process+0x210>
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a8b6:	009b      	lsls	r3, r3, #2
 800a8b8:	b29b      	uxth	r3, r3
 800a8ba:	e00d      	b.n	800a8d8 <tcp_process+0x22c>
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a8c0:	005b      	lsls	r3, r3, #1
 800a8c2:	f241 121c 	movw	r2, #4380	@ 0x111c
 800a8c6:	4293      	cmp	r3, r2
 800a8c8:	d904      	bls.n	800a8d4 <tcp_process+0x228>
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a8ce:	005b      	lsls	r3, r3, #1
 800a8d0:	b29b      	uxth	r3, r3
 800a8d2:	e001      	b.n	800a8d8 <tcp_process+0x22c>
 800a8d4:	f241 131c 	movw	r3, #4380	@ 0x111c
 800a8d8:	687a      	ldr	r2, [r7, #4]
 800a8da:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d106      	bne.n	800a8f6 <tcp_process+0x24a>
 800a8e8:	4b13      	ldr	r3, [pc, #76]	@ (800a938 <tcp_process+0x28c>)
 800a8ea:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 800a8ee:	491c      	ldr	r1, [pc, #112]	@ (800a960 <tcp_process+0x2b4>)
 800a8f0:	4813      	ldr	r0, [pc, #76]	@ (800a940 <tcp_process+0x294>)
 800a8f2:	f006 fd45 	bl	8011380 <iprintf>
        --pcb->snd_queuelen;
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800a8fc:	3b01      	subs	r3, #1
 800a8fe:	b29a      	uxth	r2, r3
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a90a:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800a90c:	69fb      	ldr	r3, [r7, #28]
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d12a      	bne.n	800a968 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a916:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800a918:	69fb      	ldr	r3, [r7, #28]
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d106      	bne.n	800a92c <tcp_process+0x280>
 800a91e:	4b06      	ldr	r3, [pc, #24]	@ (800a938 <tcp_process+0x28c>)
 800a920:	f44f 725d 	mov.w	r2, #884	@ 0x374
 800a924:	490f      	ldr	r1, [pc, #60]	@ (800a964 <tcp_process+0x2b8>)
 800a926:	4806      	ldr	r0, [pc, #24]	@ (800a940 <tcp_process+0x294>)
 800a928:	f006 fd2a 	bl	8011380 <iprintf>
          pcb->unsent = rseg->next;
 800a92c:	69fb      	ldr	r3, [r7, #28]
 800a92e:	681a      	ldr	r2, [r3, #0]
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	66da      	str	r2, [r3, #108]	@ 0x6c
 800a934:	e01c      	b.n	800a970 <tcp_process+0x2c4>
 800a936:	bf00      	nop
 800a938:	080138dc 	.word	0x080138dc
 800a93c:	08013b14 	.word	0x08013b14
 800a940:	08013928 	.word	0x08013928
 800a944:	2000a82c 	.word	0x2000a82c
 800a948:	2000a824 	.word	0x2000a824
 800a94c:	2000a820 	.word	0x2000a820
 800a950:	08013b30 	.word	0x08013b30
 800a954:	2000a82d 	.word	0x2000a82d
 800a958:	2000a7e8 	.word	0x2000a7e8
 800a95c:	2000a810 	.word	0x2000a810
 800a960:	08013b50 	.word	0x08013b50
 800a964:	08013b68 	.word	0x08013b68
        } else {
          pcb->unacked = rseg->next;
 800a968:	69fb      	ldr	r3, [r7, #28]
 800a96a:	681a      	ldr	r2, [r3, #0]
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 800a970:	69f8      	ldr	r0, [r7, #28]
 800a972:	f7fe fc3c 	bl	80091ee <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d104      	bne.n	800a988 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a984:	861a      	strh	r2, [r3, #48]	@ 0x30
 800a986:	e006      	b.n	800a996 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	2200      	movs	r2, #0
 800a98c:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	2200      	movs	r2, #0
 800a992:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d00a      	beq.n	800a9b6 <tcp_process+0x30a>
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a9a6:	687a      	ldr	r2, [r7, #4]
 800a9a8:	6910      	ldr	r0, [r2, #16]
 800a9aa:	2200      	movs	r2, #0
 800a9ac:	6879      	ldr	r1, [r7, #4]
 800a9ae:	4798      	blx	r3
 800a9b0:	4603      	mov	r3, r0
 800a9b2:	76bb      	strb	r3, [r7, #26]
 800a9b4:	e001      	b.n	800a9ba <tcp_process+0x30e>
 800a9b6:	2300      	movs	r3, #0
 800a9b8:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800a9ba:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800a9be:	f113 0f0d 	cmn.w	r3, #13
 800a9c2:	d102      	bne.n	800a9ca <tcp_process+0x31e>
          return ERR_ABRT;
 800a9c4:	f06f 030c 	mvn.w	r3, #12
 800a9c8:	e250      	b.n	800ae6c <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	8b5b      	ldrh	r3, [r3, #26]
 800a9ce:	f043 0302 	orr.w	r3, r3, #2
 800a9d2:	b29a      	uxth	r2, r3
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800a9d8:	e23a      	b.n	800ae50 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800a9da:	4b98      	ldr	r3, [pc, #608]	@ (800ac3c <tcp_process+0x590>)
 800a9dc:	781b      	ldrb	r3, [r3, #0]
 800a9de:	f003 0310 	and.w	r3, r3, #16
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	f000 8234 	beq.w	800ae50 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a9e8:	4b95      	ldr	r3, [pc, #596]	@ (800ac40 <tcp_process+0x594>)
 800a9ea:	6819      	ldr	r1, [r3, #0]
 800a9ec:	4b95      	ldr	r3, [pc, #596]	@ (800ac44 <tcp_process+0x598>)
 800a9ee:	881b      	ldrh	r3, [r3, #0]
 800a9f0:	461a      	mov	r2, r3
 800a9f2:	4b95      	ldr	r3, [pc, #596]	@ (800ac48 <tcp_process+0x59c>)
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a9f8:	4b94      	ldr	r3, [pc, #592]	@ (800ac4c <tcp_process+0x5a0>)
 800a9fa:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a9fc:	885b      	ldrh	r3, [r3, #2]
 800a9fe:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800aa00:	4a92      	ldr	r2, [pc, #584]	@ (800ac4c <tcp_process+0x5a0>)
 800aa02:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800aa04:	8812      	ldrh	r2, [r2, #0]
 800aa06:	b292      	uxth	r2, r2
 800aa08:	9202      	str	r2, [sp, #8]
 800aa0a:	9301      	str	r3, [sp, #4]
 800aa0c:	4b90      	ldr	r3, [pc, #576]	@ (800ac50 <tcp_process+0x5a4>)
 800aa0e:	9300      	str	r3, [sp, #0]
 800aa10:	4b90      	ldr	r3, [pc, #576]	@ (800ac54 <tcp_process+0x5a8>)
 800aa12:	4602      	mov	r2, r0
 800aa14:	6878      	ldr	r0, [r7, #4]
 800aa16:	f003 f8d7 	bl	800dbc8 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800aa20:	2b05      	cmp	r3, #5
 800aa22:	f200 8215 	bhi.w	800ae50 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	2200      	movs	r2, #0
 800aa2a:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 800aa2c:	6878      	ldr	r0, [r7, #4]
 800aa2e:	f002 fea3 	bl	800d778 <tcp_rexmit_rto>
      break;
 800aa32:	e20d      	b.n	800ae50 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800aa34:	4b81      	ldr	r3, [pc, #516]	@ (800ac3c <tcp_process+0x590>)
 800aa36:	781b      	ldrb	r3, [r3, #0]
 800aa38:	f003 0310 	and.w	r3, r3, #16
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	f000 80a1 	beq.w	800ab84 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800aa42:	4b7f      	ldr	r3, [pc, #508]	@ (800ac40 <tcp_process+0x594>)
 800aa44:	681a      	ldr	r2, [r3, #0]
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aa4a:	1ad3      	subs	r3, r2, r3
 800aa4c:	3b01      	subs	r3, #1
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	db7e      	blt.n	800ab50 <tcp_process+0x4a4>
 800aa52:	4b7b      	ldr	r3, [pc, #492]	@ (800ac40 <tcp_process+0x594>)
 800aa54:	681a      	ldr	r2, [r3, #0]
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aa5a:	1ad3      	subs	r3, r2, r3
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	dc77      	bgt.n	800ab50 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	2204      	movs	r2, #4
 800aa64:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d102      	bne.n	800aa74 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800aa6e:	23fa      	movs	r3, #250	@ 0xfa
 800aa70:	76bb      	strb	r3, [r7, #26]
 800aa72:	e01d      	b.n	800aab0 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800aa78:	699b      	ldr	r3, [r3, #24]
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d106      	bne.n	800aa8c <tcp_process+0x3e0>
 800aa7e:	4b76      	ldr	r3, [pc, #472]	@ (800ac58 <tcp_process+0x5ac>)
 800aa80:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 800aa84:	4975      	ldr	r1, [pc, #468]	@ (800ac5c <tcp_process+0x5b0>)
 800aa86:	4876      	ldr	r0, [pc, #472]	@ (800ac60 <tcp_process+0x5b4>)
 800aa88:	f006 fc7a 	bl	8011380 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800aa90:	699b      	ldr	r3, [r3, #24]
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d00a      	beq.n	800aaac <tcp_process+0x400>
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800aa9a:	699b      	ldr	r3, [r3, #24]
 800aa9c:	687a      	ldr	r2, [r7, #4]
 800aa9e:	6910      	ldr	r0, [r2, #16]
 800aaa0:	2200      	movs	r2, #0
 800aaa2:	6879      	ldr	r1, [r7, #4]
 800aaa4:	4798      	blx	r3
 800aaa6:	4603      	mov	r3, r0
 800aaa8:	76bb      	strb	r3, [r7, #26]
 800aaaa:	e001      	b.n	800aab0 <tcp_process+0x404>
 800aaac:	23f0      	movs	r3, #240	@ 0xf0
 800aaae:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800aab0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d00a      	beq.n	800aace <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800aab8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800aabc:	f113 0f0d 	cmn.w	r3, #13
 800aac0:	d002      	beq.n	800aac8 <tcp_process+0x41c>
              tcp_abort(pcb);
 800aac2:	6878      	ldr	r0, [r7, #4]
 800aac4:	f7fd fcec 	bl	80084a0 <tcp_abort>
            }
            return ERR_ABRT;
 800aac8:	f06f 030c 	mvn.w	r3, #12
 800aacc:	e1ce      	b.n	800ae6c <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800aace:	6878      	ldr	r0, [r7, #4]
 800aad0:	f000 fae0 	bl	800b094 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800aad4:	4b63      	ldr	r3, [pc, #396]	@ (800ac64 <tcp_process+0x5b8>)
 800aad6:	881b      	ldrh	r3, [r3, #0]
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d005      	beq.n	800aae8 <tcp_process+0x43c>
            recv_acked--;
 800aadc:	4b61      	ldr	r3, [pc, #388]	@ (800ac64 <tcp_process+0x5b8>)
 800aade:	881b      	ldrh	r3, [r3, #0]
 800aae0:	3b01      	subs	r3, #1
 800aae2:	b29a      	uxth	r2, r3
 800aae4:	4b5f      	ldr	r3, [pc, #380]	@ (800ac64 <tcp_process+0x5b8>)
 800aae6:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800aaec:	009a      	lsls	r2, r3, #2
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800aaf2:	005b      	lsls	r3, r3, #1
 800aaf4:	f241 111c 	movw	r1, #4380	@ 0x111c
 800aaf8:	428b      	cmp	r3, r1
 800aafa:	bf38      	it	cc
 800aafc:	460b      	movcc	r3, r1
 800aafe:	429a      	cmp	r2, r3
 800ab00:	d204      	bcs.n	800ab0c <tcp_process+0x460>
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ab06:	009b      	lsls	r3, r3, #2
 800ab08:	b29b      	uxth	r3, r3
 800ab0a:	e00d      	b.n	800ab28 <tcp_process+0x47c>
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ab10:	005b      	lsls	r3, r3, #1
 800ab12:	f241 121c 	movw	r2, #4380	@ 0x111c
 800ab16:	4293      	cmp	r3, r2
 800ab18:	d904      	bls.n	800ab24 <tcp_process+0x478>
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ab1e:	005b      	lsls	r3, r3, #1
 800ab20:	b29b      	uxth	r3, r3
 800ab22:	e001      	b.n	800ab28 <tcp_process+0x47c>
 800ab24:	f241 131c 	movw	r3, #4380	@ 0x111c
 800ab28:	687a      	ldr	r2, [r7, #4]
 800ab2a:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800ab2e:	4b4e      	ldr	r3, [pc, #312]	@ (800ac68 <tcp_process+0x5bc>)
 800ab30:	781b      	ldrb	r3, [r3, #0]
 800ab32:	f003 0320 	and.w	r3, r3, #32
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d037      	beq.n	800abaa <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	8b5b      	ldrh	r3, [r3, #26]
 800ab3e:	f043 0302 	orr.w	r3, r3, #2
 800ab42:	b29a      	uxth	r2, r3
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	2207      	movs	r2, #7
 800ab4c:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800ab4e:	e02c      	b.n	800abaa <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ab50:	4b3b      	ldr	r3, [pc, #236]	@ (800ac40 <tcp_process+0x594>)
 800ab52:	6819      	ldr	r1, [r3, #0]
 800ab54:	4b3b      	ldr	r3, [pc, #236]	@ (800ac44 <tcp_process+0x598>)
 800ab56:	881b      	ldrh	r3, [r3, #0]
 800ab58:	461a      	mov	r2, r3
 800ab5a:	4b3b      	ldr	r3, [pc, #236]	@ (800ac48 <tcp_process+0x59c>)
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ab60:	4b3a      	ldr	r3, [pc, #232]	@ (800ac4c <tcp_process+0x5a0>)
 800ab62:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ab64:	885b      	ldrh	r3, [r3, #2]
 800ab66:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ab68:	4a38      	ldr	r2, [pc, #224]	@ (800ac4c <tcp_process+0x5a0>)
 800ab6a:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ab6c:	8812      	ldrh	r2, [r2, #0]
 800ab6e:	b292      	uxth	r2, r2
 800ab70:	9202      	str	r2, [sp, #8]
 800ab72:	9301      	str	r3, [sp, #4]
 800ab74:	4b36      	ldr	r3, [pc, #216]	@ (800ac50 <tcp_process+0x5a4>)
 800ab76:	9300      	str	r3, [sp, #0]
 800ab78:	4b36      	ldr	r3, [pc, #216]	@ (800ac54 <tcp_process+0x5a8>)
 800ab7a:	4602      	mov	r2, r0
 800ab7c:	6878      	ldr	r0, [r7, #4]
 800ab7e:	f003 f823 	bl	800dbc8 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800ab82:	e167      	b.n	800ae54 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800ab84:	4b2d      	ldr	r3, [pc, #180]	@ (800ac3c <tcp_process+0x590>)
 800ab86:	781b      	ldrb	r3, [r3, #0]
 800ab88:	f003 0302 	and.w	r3, r3, #2
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	f000 8161 	beq.w	800ae54 <tcp_process+0x7a8>
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab96:	1e5a      	subs	r2, r3, #1
 800ab98:	4b2b      	ldr	r3, [pc, #172]	@ (800ac48 <tcp_process+0x59c>)
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	429a      	cmp	r2, r3
 800ab9e:	f040 8159 	bne.w	800ae54 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800aba2:	6878      	ldr	r0, [r7, #4]
 800aba4:	f002 fe0a 	bl	800d7bc <tcp_rexmit>
      break;
 800aba8:	e154      	b.n	800ae54 <tcp_process+0x7a8>
 800abaa:	e153      	b.n	800ae54 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800abac:	6878      	ldr	r0, [r7, #4]
 800abae:	f000 fa71 	bl	800b094 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800abb2:	4b2d      	ldr	r3, [pc, #180]	@ (800ac68 <tcp_process+0x5bc>)
 800abb4:	781b      	ldrb	r3, [r3, #0]
 800abb6:	f003 0320 	and.w	r3, r3, #32
 800abba:	2b00      	cmp	r3, #0
 800abbc:	f000 814c 	beq.w	800ae58 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	8b5b      	ldrh	r3, [r3, #26]
 800abc4:	f043 0302 	orr.w	r3, r3, #2
 800abc8:	b29a      	uxth	r2, r3
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	2207      	movs	r2, #7
 800abd2:	751a      	strb	r2, [r3, #20]
      }
      break;
 800abd4:	e140      	b.n	800ae58 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800abd6:	6878      	ldr	r0, [r7, #4]
 800abd8:	f000 fa5c 	bl	800b094 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800abdc:	4b22      	ldr	r3, [pc, #136]	@ (800ac68 <tcp_process+0x5bc>)
 800abde:	781b      	ldrb	r3, [r3, #0]
 800abe0:	f003 0320 	and.w	r3, r3, #32
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d071      	beq.n	800accc <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800abe8:	4b14      	ldr	r3, [pc, #80]	@ (800ac3c <tcp_process+0x590>)
 800abea:	781b      	ldrb	r3, [r3, #0]
 800abec:	f003 0310 	and.w	r3, r3, #16
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d060      	beq.n	800acb6 <tcp_process+0x60a>
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800abf8:	4b11      	ldr	r3, [pc, #68]	@ (800ac40 <tcp_process+0x594>)
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	429a      	cmp	r2, r3
 800abfe:	d15a      	bne.n	800acb6 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d156      	bne.n	800acb6 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	8b5b      	ldrh	r3, [r3, #26]
 800ac0c:	f043 0302 	orr.w	r3, r3, #2
 800ac10:	b29a      	uxth	r2, r3
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800ac16:	6878      	ldr	r0, [r7, #4]
 800ac18:	f7fe fdbc 	bl	8009794 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800ac1c:	4b13      	ldr	r3, [pc, #76]	@ (800ac6c <tcp_process+0x5c0>)
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	687a      	ldr	r2, [r7, #4]
 800ac22:	429a      	cmp	r2, r3
 800ac24:	d105      	bne.n	800ac32 <tcp_process+0x586>
 800ac26:	4b11      	ldr	r3, [pc, #68]	@ (800ac6c <tcp_process+0x5c0>)
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	68db      	ldr	r3, [r3, #12]
 800ac2c:	4a0f      	ldr	r2, [pc, #60]	@ (800ac6c <tcp_process+0x5c0>)
 800ac2e:	6013      	str	r3, [r2, #0]
 800ac30:	e02e      	b.n	800ac90 <tcp_process+0x5e4>
 800ac32:	4b0e      	ldr	r3, [pc, #56]	@ (800ac6c <tcp_process+0x5c0>)
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	617b      	str	r3, [r7, #20]
 800ac38:	e027      	b.n	800ac8a <tcp_process+0x5de>
 800ac3a:	bf00      	nop
 800ac3c:	2000a82c 	.word	0x2000a82c
 800ac40:	2000a824 	.word	0x2000a824
 800ac44:	2000a82a 	.word	0x2000a82a
 800ac48:	2000a820 	.word	0x2000a820
 800ac4c:	2000a810 	.word	0x2000a810
 800ac50:	200050c8 	.word	0x200050c8
 800ac54:	200050cc 	.word	0x200050cc
 800ac58:	080138dc 	.word	0x080138dc
 800ac5c:	08013b7c 	.word	0x08013b7c
 800ac60:	08013928 	.word	0x08013928
 800ac64:	2000a828 	.word	0x2000a828
 800ac68:	2000a82d 	.word	0x2000a82d
 800ac6c:	2000a7f4 	.word	0x2000a7f4
 800ac70:	697b      	ldr	r3, [r7, #20]
 800ac72:	68db      	ldr	r3, [r3, #12]
 800ac74:	687a      	ldr	r2, [r7, #4]
 800ac76:	429a      	cmp	r2, r3
 800ac78:	d104      	bne.n	800ac84 <tcp_process+0x5d8>
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	68da      	ldr	r2, [r3, #12]
 800ac7e:	697b      	ldr	r3, [r7, #20]
 800ac80:	60da      	str	r2, [r3, #12]
 800ac82:	e005      	b.n	800ac90 <tcp_process+0x5e4>
 800ac84:	697b      	ldr	r3, [r7, #20]
 800ac86:	68db      	ldr	r3, [r3, #12]
 800ac88:	617b      	str	r3, [r7, #20]
 800ac8a:	697b      	ldr	r3, [r7, #20]
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d1ef      	bne.n	800ac70 <tcp_process+0x5c4>
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	2200      	movs	r2, #0
 800ac94:	60da      	str	r2, [r3, #12]
 800ac96:	4b77      	ldr	r3, [pc, #476]	@ (800ae74 <tcp_process+0x7c8>)
 800ac98:	2201      	movs	r2, #1
 800ac9a:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	220a      	movs	r2, #10
 800aca0:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800aca2:	4b75      	ldr	r3, [pc, #468]	@ (800ae78 <tcp_process+0x7cc>)
 800aca4:	681a      	ldr	r2, [r3, #0]
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	60da      	str	r2, [r3, #12]
 800acaa:	4a73      	ldr	r2, [pc, #460]	@ (800ae78 <tcp_process+0x7cc>)
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	6013      	str	r3, [r2, #0]
 800acb0:	f003 f94c 	bl	800df4c <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800acb4:	e0d2      	b.n	800ae5c <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	8b5b      	ldrh	r3, [r3, #26]
 800acba:	f043 0302 	orr.w	r3, r3, #2
 800acbe:	b29a      	uxth	r2, r3
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	2208      	movs	r2, #8
 800acc8:	751a      	strb	r2, [r3, #20]
      break;
 800acca:	e0c7      	b.n	800ae5c <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800accc:	4b6b      	ldr	r3, [pc, #428]	@ (800ae7c <tcp_process+0x7d0>)
 800acce:	781b      	ldrb	r3, [r3, #0]
 800acd0:	f003 0310 	and.w	r3, r3, #16
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	f000 80c1 	beq.w	800ae5c <tcp_process+0x7b0>
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800acde:	4b68      	ldr	r3, [pc, #416]	@ (800ae80 <tcp_process+0x7d4>)
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	429a      	cmp	r2, r3
 800ace4:	f040 80ba 	bne.w	800ae5c <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800acec:	2b00      	cmp	r3, #0
 800acee:	f040 80b5 	bne.w	800ae5c <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	2206      	movs	r2, #6
 800acf6:	751a      	strb	r2, [r3, #20]
      break;
 800acf8:	e0b0      	b.n	800ae5c <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800acfa:	6878      	ldr	r0, [r7, #4]
 800acfc:	f000 f9ca 	bl	800b094 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800ad00:	4b60      	ldr	r3, [pc, #384]	@ (800ae84 <tcp_process+0x7d8>)
 800ad02:	781b      	ldrb	r3, [r3, #0]
 800ad04:	f003 0320 	and.w	r3, r3, #32
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	f000 80a9 	beq.w	800ae60 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	8b5b      	ldrh	r3, [r3, #26]
 800ad12:	f043 0302 	orr.w	r3, r3, #2
 800ad16:	b29a      	uxth	r2, r3
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800ad1c:	6878      	ldr	r0, [r7, #4]
 800ad1e:	f7fe fd39 	bl	8009794 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800ad22:	4b59      	ldr	r3, [pc, #356]	@ (800ae88 <tcp_process+0x7dc>)
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	687a      	ldr	r2, [r7, #4]
 800ad28:	429a      	cmp	r2, r3
 800ad2a:	d105      	bne.n	800ad38 <tcp_process+0x68c>
 800ad2c:	4b56      	ldr	r3, [pc, #344]	@ (800ae88 <tcp_process+0x7dc>)
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	68db      	ldr	r3, [r3, #12]
 800ad32:	4a55      	ldr	r2, [pc, #340]	@ (800ae88 <tcp_process+0x7dc>)
 800ad34:	6013      	str	r3, [r2, #0]
 800ad36:	e013      	b.n	800ad60 <tcp_process+0x6b4>
 800ad38:	4b53      	ldr	r3, [pc, #332]	@ (800ae88 <tcp_process+0x7dc>)
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	613b      	str	r3, [r7, #16]
 800ad3e:	e00c      	b.n	800ad5a <tcp_process+0x6ae>
 800ad40:	693b      	ldr	r3, [r7, #16]
 800ad42:	68db      	ldr	r3, [r3, #12]
 800ad44:	687a      	ldr	r2, [r7, #4]
 800ad46:	429a      	cmp	r2, r3
 800ad48:	d104      	bne.n	800ad54 <tcp_process+0x6a8>
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	68da      	ldr	r2, [r3, #12]
 800ad4e:	693b      	ldr	r3, [r7, #16]
 800ad50:	60da      	str	r2, [r3, #12]
 800ad52:	e005      	b.n	800ad60 <tcp_process+0x6b4>
 800ad54:	693b      	ldr	r3, [r7, #16]
 800ad56:	68db      	ldr	r3, [r3, #12]
 800ad58:	613b      	str	r3, [r7, #16]
 800ad5a:	693b      	ldr	r3, [r7, #16]
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d1ef      	bne.n	800ad40 <tcp_process+0x694>
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	2200      	movs	r2, #0
 800ad64:	60da      	str	r2, [r3, #12]
 800ad66:	4b43      	ldr	r3, [pc, #268]	@ (800ae74 <tcp_process+0x7c8>)
 800ad68:	2201      	movs	r2, #1
 800ad6a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	220a      	movs	r2, #10
 800ad70:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800ad72:	4b41      	ldr	r3, [pc, #260]	@ (800ae78 <tcp_process+0x7cc>)
 800ad74:	681a      	ldr	r2, [r3, #0]
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	60da      	str	r2, [r3, #12]
 800ad7a:	4a3f      	ldr	r2, [pc, #252]	@ (800ae78 <tcp_process+0x7cc>)
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	6013      	str	r3, [r2, #0]
 800ad80:	f003 f8e4 	bl	800df4c <tcp_timer_needed>
      }
      break;
 800ad84:	e06c      	b.n	800ae60 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800ad86:	6878      	ldr	r0, [r7, #4]
 800ad88:	f000 f984 	bl	800b094 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800ad8c:	4b3b      	ldr	r3, [pc, #236]	@ (800ae7c <tcp_process+0x7d0>)
 800ad8e:	781b      	ldrb	r3, [r3, #0]
 800ad90:	f003 0310 	and.w	r3, r3, #16
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d065      	beq.n	800ae64 <tcp_process+0x7b8>
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ad9c:	4b38      	ldr	r3, [pc, #224]	@ (800ae80 <tcp_process+0x7d4>)
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	429a      	cmp	r2, r3
 800ada2:	d15f      	bne.n	800ae64 <tcp_process+0x7b8>
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d15b      	bne.n	800ae64 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800adac:	6878      	ldr	r0, [r7, #4]
 800adae:	f7fe fcf1 	bl	8009794 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800adb2:	4b35      	ldr	r3, [pc, #212]	@ (800ae88 <tcp_process+0x7dc>)
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	687a      	ldr	r2, [r7, #4]
 800adb8:	429a      	cmp	r2, r3
 800adba:	d105      	bne.n	800adc8 <tcp_process+0x71c>
 800adbc:	4b32      	ldr	r3, [pc, #200]	@ (800ae88 <tcp_process+0x7dc>)
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	68db      	ldr	r3, [r3, #12]
 800adc2:	4a31      	ldr	r2, [pc, #196]	@ (800ae88 <tcp_process+0x7dc>)
 800adc4:	6013      	str	r3, [r2, #0]
 800adc6:	e013      	b.n	800adf0 <tcp_process+0x744>
 800adc8:	4b2f      	ldr	r3, [pc, #188]	@ (800ae88 <tcp_process+0x7dc>)
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	60fb      	str	r3, [r7, #12]
 800adce:	e00c      	b.n	800adea <tcp_process+0x73e>
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	68db      	ldr	r3, [r3, #12]
 800add4:	687a      	ldr	r2, [r7, #4]
 800add6:	429a      	cmp	r2, r3
 800add8:	d104      	bne.n	800ade4 <tcp_process+0x738>
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	68da      	ldr	r2, [r3, #12]
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	60da      	str	r2, [r3, #12]
 800ade2:	e005      	b.n	800adf0 <tcp_process+0x744>
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	68db      	ldr	r3, [r3, #12]
 800ade8:	60fb      	str	r3, [r7, #12]
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	2b00      	cmp	r3, #0
 800adee:	d1ef      	bne.n	800add0 <tcp_process+0x724>
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	2200      	movs	r2, #0
 800adf4:	60da      	str	r2, [r3, #12]
 800adf6:	4b1f      	ldr	r3, [pc, #124]	@ (800ae74 <tcp_process+0x7c8>)
 800adf8:	2201      	movs	r2, #1
 800adfa:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	220a      	movs	r2, #10
 800ae00:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800ae02:	4b1d      	ldr	r3, [pc, #116]	@ (800ae78 <tcp_process+0x7cc>)
 800ae04:	681a      	ldr	r2, [r3, #0]
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	60da      	str	r2, [r3, #12]
 800ae0a:	4a1b      	ldr	r2, [pc, #108]	@ (800ae78 <tcp_process+0x7cc>)
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	6013      	str	r3, [r2, #0]
 800ae10:	f003 f89c 	bl	800df4c <tcp_timer_needed>
      }
      break;
 800ae14:	e026      	b.n	800ae64 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800ae16:	6878      	ldr	r0, [r7, #4]
 800ae18:	f000 f93c 	bl	800b094 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800ae1c:	4b17      	ldr	r3, [pc, #92]	@ (800ae7c <tcp_process+0x7d0>)
 800ae1e:	781b      	ldrb	r3, [r3, #0]
 800ae20:	f003 0310 	and.w	r3, r3, #16
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d01f      	beq.n	800ae68 <tcp_process+0x7bc>
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ae2c:	4b14      	ldr	r3, [pc, #80]	@ (800ae80 <tcp_process+0x7d4>)
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	429a      	cmp	r2, r3
 800ae32:	d119      	bne.n	800ae68 <tcp_process+0x7bc>
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d115      	bne.n	800ae68 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800ae3c:	4b11      	ldr	r3, [pc, #68]	@ (800ae84 <tcp_process+0x7d8>)
 800ae3e:	781b      	ldrb	r3, [r3, #0]
 800ae40:	f043 0310 	orr.w	r3, r3, #16
 800ae44:	b2da      	uxtb	r2, r3
 800ae46:	4b0f      	ldr	r3, [pc, #60]	@ (800ae84 <tcp_process+0x7d8>)
 800ae48:	701a      	strb	r2, [r3, #0]
      }
      break;
 800ae4a:	e00d      	b.n	800ae68 <tcp_process+0x7bc>
    default:
      break;
 800ae4c:	bf00      	nop
 800ae4e:	e00c      	b.n	800ae6a <tcp_process+0x7be>
      break;
 800ae50:	bf00      	nop
 800ae52:	e00a      	b.n	800ae6a <tcp_process+0x7be>
      break;
 800ae54:	bf00      	nop
 800ae56:	e008      	b.n	800ae6a <tcp_process+0x7be>
      break;
 800ae58:	bf00      	nop
 800ae5a:	e006      	b.n	800ae6a <tcp_process+0x7be>
      break;
 800ae5c:	bf00      	nop
 800ae5e:	e004      	b.n	800ae6a <tcp_process+0x7be>
      break;
 800ae60:	bf00      	nop
 800ae62:	e002      	b.n	800ae6a <tcp_process+0x7be>
      break;
 800ae64:	bf00      	nop
 800ae66:	e000      	b.n	800ae6a <tcp_process+0x7be>
      break;
 800ae68:	bf00      	nop
  }
  return ERR_OK;
 800ae6a:	2300      	movs	r3, #0
}
 800ae6c:	4618      	mov	r0, r3
 800ae6e:	3724      	adds	r7, #36	@ 0x24
 800ae70:	46bd      	mov	sp, r7
 800ae72:	bd90      	pop	{r4, r7, pc}
 800ae74:	2000a7fc 	.word	0x2000a7fc
 800ae78:	2000a7f8 	.word	0x2000a7f8
 800ae7c:	2000a82c 	.word	0x2000a82c
 800ae80:	2000a824 	.word	0x2000a824
 800ae84:	2000a82d 	.word	0x2000a82d
 800ae88:	2000a7f4 	.word	0x2000a7f4

0800ae8c <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800ae8c:	b590      	push	{r4, r7, lr}
 800ae8e:	b085      	sub	sp, #20
 800ae90:	af00      	add	r7, sp, #0
 800ae92:	6078      	str	r0, [r7, #4]
 800ae94:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d106      	bne.n	800aeaa <tcp_oos_insert_segment+0x1e>
 800ae9c:	4b3b      	ldr	r3, [pc, #236]	@ (800af8c <tcp_oos_insert_segment+0x100>)
 800ae9e:	f240 421f 	movw	r2, #1055	@ 0x41f
 800aea2:	493b      	ldr	r1, [pc, #236]	@ (800af90 <tcp_oos_insert_segment+0x104>)
 800aea4:	483b      	ldr	r0, [pc, #236]	@ (800af94 <tcp_oos_insert_segment+0x108>)
 800aea6:	f006 fa6b 	bl	8011380 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	68db      	ldr	r3, [r3, #12]
 800aeae:	899b      	ldrh	r3, [r3, #12]
 800aeb0:	b29b      	uxth	r3, r3
 800aeb2:	4618      	mov	r0, r3
 800aeb4:	f7fb f96c 	bl	8006190 <lwip_htons>
 800aeb8:	4603      	mov	r3, r0
 800aeba:	b2db      	uxtb	r3, r3
 800aebc:	f003 0301 	and.w	r3, r3, #1
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d028      	beq.n	800af16 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800aec4:	6838      	ldr	r0, [r7, #0]
 800aec6:	f7fe f97d 	bl	80091c4 <tcp_segs_free>
    next = NULL;
 800aeca:	2300      	movs	r3, #0
 800aecc:	603b      	str	r3, [r7, #0]
 800aece:	e056      	b.n	800af7e <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800aed0:	683b      	ldr	r3, [r7, #0]
 800aed2:	68db      	ldr	r3, [r3, #12]
 800aed4:	899b      	ldrh	r3, [r3, #12]
 800aed6:	b29b      	uxth	r3, r3
 800aed8:	4618      	mov	r0, r3
 800aeda:	f7fb f959 	bl	8006190 <lwip_htons>
 800aede:	4603      	mov	r3, r0
 800aee0:	b2db      	uxtb	r3, r3
 800aee2:	f003 0301 	and.w	r3, r3, #1
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d00d      	beq.n	800af06 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	68db      	ldr	r3, [r3, #12]
 800aeee:	899b      	ldrh	r3, [r3, #12]
 800aef0:	b29c      	uxth	r4, r3
 800aef2:	2001      	movs	r0, #1
 800aef4:	f7fb f94c 	bl	8006190 <lwip_htons>
 800aef8:	4603      	mov	r3, r0
 800aefa:	461a      	mov	r2, r3
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	68db      	ldr	r3, [r3, #12]
 800af00:	4322      	orrs	r2, r4
 800af02:	b292      	uxth	r2, r2
 800af04:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800af06:	683b      	ldr	r3, [r7, #0]
 800af08:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800af0a:	683b      	ldr	r3, [r7, #0]
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800af10:	68f8      	ldr	r0, [r7, #12]
 800af12:	f7fe f96c 	bl	80091ee <tcp_seg_free>
    while (next &&
 800af16:	683b      	ldr	r3, [r7, #0]
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d00e      	beq.n	800af3a <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	891b      	ldrh	r3, [r3, #8]
 800af20:	461a      	mov	r2, r3
 800af22:	4b1d      	ldr	r3, [pc, #116]	@ (800af98 <tcp_oos_insert_segment+0x10c>)
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	441a      	add	r2, r3
 800af28:	683b      	ldr	r3, [r7, #0]
 800af2a:	68db      	ldr	r3, [r3, #12]
 800af2c:	685b      	ldr	r3, [r3, #4]
 800af2e:	6839      	ldr	r1, [r7, #0]
 800af30:	8909      	ldrh	r1, [r1, #8]
 800af32:	440b      	add	r3, r1
 800af34:	1ad3      	subs	r3, r2, r3
    while (next &&
 800af36:	2b00      	cmp	r3, #0
 800af38:	daca      	bge.n	800aed0 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800af3a:	683b      	ldr	r3, [r7, #0]
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d01e      	beq.n	800af7e <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	891b      	ldrh	r3, [r3, #8]
 800af44:	461a      	mov	r2, r3
 800af46:	4b14      	ldr	r3, [pc, #80]	@ (800af98 <tcp_oos_insert_segment+0x10c>)
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	441a      	add	r2, r3
 800af4c:	683b      	ldr	r3, [r7, #0]
 800af4e:	68db      	ldr	r3, [r3, #12]
 800af50:	685b      	ldr	r3, [r3, #4]
 800af52:	1ad3      	subs	r3, r2, r3
    if (next &&
 800af54:	2b00      	cmp	r3, #0
 800af56:	dd12      	ble.n	800af7e <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800af58:	683b      	ldr	r3, [r7, #0]
 800af5a:	68db      	ldr	r3, [r3, #12]
 800af5c:	685b      	ldr	r3, [r3, #4]
 800af5e:	b29a      	uxth	r2, r3
 800af60:	4b0d      	ldr	r3, [pc, #52]	@ (800af98 <tcp_oos_insert_segment+0x10c>)
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	b29b      	uxth	r3, r3
 800af66:	1ad3      	subs	r3, r2, r3
 800af68:	b29a      	uxth	r2, r3
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	685a      	ldr	r2, [r3, #4]
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	891b      	ldrh	r3, [r3, #8]
 800af76:	4619      	mov	r1, r3
 800af78:	4610      	mov	r0, r2
 800af7a:	f7fc fae1 	bl	8007540 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	683a      	ldr	r2, [r7, #0]
 800af82:	601a      	str	r2, [r3, #0]
}
 800af84:	bf00      	nop
 800af86:	3714      	adds	r7, #20
 800af88:	46bd      	mov	sp, r7
 800af8a:	bd90      	pop	{r4, r7, pc}
 800af8c:	080138dc 	.word	0x080138dc
 800af90:	08013b9c 	.word	0x08013b9c
 800af94:	08013928 	.word	0x08013928
 800af98:	2000a820 	.word	0x2000a820

0800af9c <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800af9c:	b5b0      	push	{r4, r5, r7, lr}
 800af9e:	b086      	sub	sp, #24
 800afa0:	af00      	add	r7, sp, #0
 800afa2:	60f8      	str	r0, [r7, #12]
 800afa4:	60b9      	str	r1, [r7, #8]
 800afa6:	607a      	str	r2, [r7, #4]
 800afa8:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800afaa:	e03e      	b.n	800b02a <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800afac:	68bb      	ldr	r3, [r7, #8]
 800afae:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800afb0:	68bb      	ldr	r3, [r7, #8]
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800afb6:	697b      	ldr	r3, [r7, #20]
 800afb8:	685b      	ldr	r3, [r3, #4]
 800afba:	4618      	mov	r0, r3
 800afbc:	f7fc fcce 	bl	800795c <pbuf_clen>
 800afc0:	4603      	mov	r3, r0
 800afc2:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800afca:	8a7a      	ldrh	r2, [r7, #18]
 800afcc:	429a      	cmp	r2, r3
 800afce:	d906      	bls.n	800afde <tcp_free_acked_segments+0x42>
 800afd0:	4b2a      	ldr	r3, [pc, #168]	@ (800b07c <tcp_free_acked_segments+0xe0>)
 800afd2:	f240 4257 	movw	r2, #1111	@ 0x457
 800afd6:	492a      	ldr	r1, [pc, #168]	@ (800b080 <tcp_free_acked_segments+0xe4>)
 800afd8:	482a      	ldr	r0, [pc, #168]	@ (800b084 <tcp_free_acked_segments+0xe8>)
 800afda:	f006 f9d1 	bl	8011380 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 800afe4:	8a7b      	ldrh	r3, [r7, #18]
 800afe6:	1ad3      	subs	r3, r2, r3
 800afe8:	b29a      	uxth	r2, r3
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800aff0:	697b      	ldr	r3, [r7, #20]
 800aff2:	891a      	ldrh	r2, [r3, #8]
 800aff4:	4b24      	ldr	r3, [pc, #144]	@ (800b088 <tcp_free_acked_segments+0xec>)
 800aff6:	881b      	ldrh	r3, [r3, #0]
 800aff8:	4413      	add	r3, r2
 800affa:	b29a      	uxth	r2, r3
 800affc:	4b22      	ldr	r3, [pc, #136]	@ (800b088 <tcp_free_acked_segments+0xec>)
 800affe:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800b000:	6978      	ldr	r0, [r7, #20]
 800b002:	f7fe f8f4 	bl	80091ee <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d00c      	beq.n	800b02a <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800b010:	68bb      	ldr	r3, [r7, #8]
 800b012:	2b00      	cmp	r3, #0
 800b014:	d109      	bne.n	800b02a <tcp_free_acked_segments+0x8e>
 800b016:	683b      	ldr	r3, [r7, #0]
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d106      	bne.n	800b02a <tcp_free_acked_segments+0x8e>
 800b01c:	4b17      	ldr	r3, [pc, #92]	@ (800b07c <tcp_free_acked_segments+0xe0>)
 800b01e:	f240 4261 	movw	r2, #1121	@ 0x461
 800b022:	491a      	ldr	r1, [pc, #104]	@ (800b08c <tcp_free_acked_segments+0xf0>)
 800b024:	4817      	ldr	r0, [pc, #92]	@ (800b084 <tcp_free_acked_segments+0xe8>)
 800b026:	f006 f9ab 	bl	8011380 <iprintf>
  while (seg_list != NULL &&
 800b02a:	68bb      	ldr	r3, [r7, #8]
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d020      	beq.n	800b072 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800b030:	68bb      	ldr	r3, [r7, #8]
 800b032:	68db      	ldr	r3, [r3, #12]
 800b034:	685b      	ldr	r3, [r3, #4]
 800b036:	4618      	mov	r0, r3
 800b038:	f7fb f8bf 	bl	80061ba <lwip_htonl>
 800b03c:	4604      	mov	r4, r0
 800b03e:	68bb      	ldr	r3, [r7, #8]
 800b040:	891b      	ldrh	r3, [r3, #8]
 800b042:	461d      	mov	r5, r3
 800b044:	68bb      	ldr	r3, [r7, #8]
 800b046:	68db      	ldr	r3, [r3, #12]
 800b048:	899b      	ldrh	r3, [r3, #12]
 800b04a:	b29b      	uxth	r3, r3
 800b04c:	4618      	mov	r0, r3
 800b04e:	f7fb f89f 	bl	8006190 <lwip_htons>
 800b052:	4603      	mov	r3, r0
 800b054:	b2db      	uxtb	r3, r3
 800b056:	f003 0303 	and.w	r3, r3, #3
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d001      	beq.n	800b062 <tcp_free_acked_segments+0xc6>
 800b05e:	2301      	movs	r3, #1
 800b060:	e000      	b.n	800b064 <tcp_free_acked_segments+0xc8>
 800b062:	2300      	movs	r3, #0
 800b064:	442b      	add	r3, r5
 800b066:	18e2      	adds	r2, r4, r3
 800b068:	4b09      	ldr	r3, [pc, #36]	@ (800b090 <tcp_free_acked_segments+0xf4>)
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800b06e:	2b00      	cmp	r3, #0
 800b070:	dd9c      	ble.n	800afac <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800b072:	68bb      	ldr	r3, [r7, #8]
}
 800b074:	4618      	mov	r0, r3
 800b076:	3718      	adds	r7, #24
 800b078:	46bd      	mov	sp, r7
 800b07a:	bdb0      	pop	{r4, r5, r7, pc}
 800b07c:	080138dc 	.word	0x080138dc
 800b080:	08013bc4 	.word	0x08013bc4
 800b084:	08013928 	.word	0x08013928
 800b088:	2000a828 	.word	0x2000a828
 800b08c:	08013bec 	.word	0x08013bec
 800b090:	2000a824 	.word	0x2000a824

0800b094 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800b094:	b5b0      	push	{r4, r5, r7, lr}
 800b096:	b094      	sub	sp, #80	@ 0x50
 800b098:	af00      	add	r7, sp, #0
 800b09a:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800b09c:	2300      	movs	r3, #0
 800b09e:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d106      	bne.n	800b0b4 <tcp_receive+0x20>
 800b0a6:	4b91      	ldr	r3, [pc, #580]	@ (800b2ec <tcp_receive+0x258>)
 800b0a8:	f240 427b 	movw	r2, #1147	@ 0x47b
 800b0ac:	4990      	ldr	r1, [pc, #576]	@ (800b2f0 <tcp_receive+0x25c>)
 800b0ae:	4891      	ldr	r0, [pc, #580]	@ (800b2f4 <tcp_receive+0x260>)
 800b0b0:	f006 f966 	bl	8011380 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	7d1b      	ldrb	r3, [r3, #20]
 800b0b8:	2b03      	cmp	r3, #3
 800b0ba:	d806      	bhi.n	800b0ca <tcp_receive+0x36>
 800b0bc:	4b8b      	ldr	r3, [pc, #556]	@ (800b2ec <tcp_receive+0x258>)
 800b0be:	f240 427c 	movw	r2, #1148	@ 0x47c
 800b0c2:	498d      	ldr	r1, [pc, #564]	@ (800b2f8 <tcp_receive+0x264>)
 800b0c4:	488b      	ldr	r0, [pc, #556]	@ (800b2f4 <tcp_receive+0x260>)
 800b0c6:	f006 f95b 	bl	8011380 <iprintf>

  if (flags & TCP_ACK) {
 800b0ca:	4b8c      	ldr	r3, [pc, #560]	@ (800b2fc <tcp_receive+0x268>)
 800b0cc:	781b      	ldrb	r3, [r3, #0]
 800b0ce:	f003 0310 	and.w	r3, r3, #16
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	f000 8264 	beq.w	800b5a0 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800b0de:	461a      	mov	r2, r3
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b0e4:	4413      	add	r3, r2
 800b0e6:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b0ec:	4b84      	ldr	r3, [pc, #528]	@ (800b300 <tcp_receive+0x26c>)
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	1ad3      	subs	r3, r2, r3
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	db1b      	blt.n	800b12e <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b0fa:	4b81      	ldr	r3, [pc, #516]	@ (800b300 <tcp_receive+0x26c>)
 800b0fc:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800b0fe:	429a      	cmp	r2, r3
 800b100:	d106      	bne.n	800b110 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800b106:	4b7f      	ldr	r3, [pc, #508]	@ (800b304 <tcp_receive+0x270>)
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	1ad3      	subs	r3, r2, r3
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	db0e      	blt.n	800b12e <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800b114:	4b7b      	ldr	r3, [pc, #492]	@ (800b304 <tcp_receive+0x270>)
 800b116:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800b118:	429a      	cmp	r2, r3
 800b11a:	d125      	bne.n	800b168 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800b11c:	4b7a      	ldr	r3, [pc, #488]	@ (800b308 <tcp_receive+0x274>)
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	89db      	ldrh	r3, [r3, #14]
 800b122:	b29a      	uxth	r2, r3
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800b12a:	429a      	cmp	r2, r3
 800b12c:	d91c      	bls.n	800b168 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800b12e:	4b76      	ldr	r3, [pc, #472]	@ (800b308 <tcp_receive+0x274>)
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	89db      	ldrh	r3, [r3, #14]
 800b134:	b29a      	uxth	r2, r3
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800b148:	429a      	cmp	r2, r3
 800b14a:	d205      	bcs.n	800b158 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 800b158:	4b69      	ldr	r3, [pc, #420]	@ (800b300 <tcp_receive+0x26c>)
 800b15a:	681a      	ldr	r2, [r3, #0]
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 800b160:	4b68      	ldr	r3, [pc, #416]	@ (800b304 <tcp_receive+0x270>)
 800b162:	681a      	ldr	r2, [r3, #0]
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800b168:	4b66      	ldr	r3, [pc, #408]	@ (800b304 <tcp_receive+0x270>)
 800b16a:	681a      	ldr	r2, [r3, #0]
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b170:	1ad3      	subs	r3, r2, r3
 800b172:	2b00      	cmp	r3, #0
 800b174:	dc58      	bgt.n	800b228 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800b176:	4b65      	ldr	r3, [pc, #404]	@ (800b30c <tcp_receive+0x278>)
 800b178:	881b      	ldrh	r3, [r3, #0]
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d14b      	bne.n	800b216 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b182:	687a      	ldr	r2, [r7, #4]
 800b184:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 800b188:	4413      	add	r3, r2
 800b18a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b18c:	429a      	cmp	r2, r3
 800b18e:	d142      	bne.n	800b216 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800b196:	2b00      	cmp	r3, #0
 800b198:	db3d      	blt.n	800b216 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b19e:	4b59      	ldr	r3, [pc, #356]	@ (800b304 <tcp_receive+0x270>)
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	429a      	cmp	r2, r3
 800b1a4:	d137      	bne.n	800b216 <tcp_receive+0x182>
              found_dupack = 1;
 800b1a6:	2301      	movs	r3, #1
 800b1a8:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800b1b0:	2bff      	cmp	r3, #255	@ 0xff
 800b1b2:	d007      	beq.n	800b1c4 <tcp_receive+0x130>
                ++pcb->dupacks;
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800b1ba:	3301      	adds	r3, #1
 800b1bc:	b2da      	uxtb	r2, r3
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800b1ca:	2b03      	cmp	r3, #3
 800b1cc:	d91b      	bls.n	800b206 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b1d8:	4413      	add	r3, r2
 800b1da:	b29a      	uxth	r2, r3
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800b1e2:	429a      	cmp	r2, r3
 800b1e4:	d30a      	bcc.n	800b1fc <tcp_receive+0x168>
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b1f0:	4413      	add	r3, r2
 800b1f2:	b29a      	uxth	r2, r3
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800b1fa:	e004      	b.n	800b206 <tcp_receive+0x172>
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b202:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800b20c:	2b02      	cmp	r3, #2
 800b20e:	d902      	bls.n	800b216 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800b210:	6878      	ldr	r0, [r7, #4]
 800b212:	f002 fb3f 	bl	800d894 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800b216:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b218:	2b00      	cmp	r3, #0
 800b21a:	f040 8161 	bne.w	800b4e0 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	2200      	movs	r2, #0
 800b222:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800b226:	e15b      	b.n	800b4e0 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800b228:	4b36      	ldr	r3, [pc, #216]	@ (800b304 <tcp_receive+0x270>)
 800b22a:	681a      	ldr	r2, [r3, #0]
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b230:	1ad3      	subs	r3, r2, r3
 800b232:	3b01      	subs	r3, #1
 800b234:	2b00      	cmp	r3, #0
 800b236:	f2c0 814e 	blt.w	800b4d6 <tcp_receive+0x442>
 800b23a:	4b32      	ldr	r3, [pc, #200]	@ (800b304 <tcp_receive+0x270>)
 800b23c:	681a      	ldr	r2, [r3, #0]
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b242:	1ad3      	subs	r3, r2, r3
 800b244:	2b00      	cmp	r3, #0
 800b246:	f300 8146 	bgt.w	800b4d6 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	8b5b      	ldrh	r3, [r3, #26]
 800b24e:	f003 0304 	and.w	r3, r3, #4
 800b252:	2b00      	cmp	r3, #0
 800b254:	d010      	beq.n	800b278 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	8b5b      	ldrh	r3, [r3, #26]
 800b25a:	f023 0304 	bic.w	r3, r3, #4
 800b25e:	b29a      	uxth	r2, r3
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	2200      	movs	r2, #0
 800b274:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	2200      	movs	r2, #0
 800b27c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800b286:	10db      	asrs	r3, r3, #3
 800b288:	b21b      	sxth	r3, r3
 800b28a:	b29a      	uxth	r2, r3
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800b292:	b29b      	uxth	r3, r3
 800b294:	4413      	add	r3, r2
 800b296:	b29b      	uxth	r3, r3
 800b298:	b21a      	sxth	r2, r3
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800b2a0:	4b18      	ldr	r3, [pc, #96]	@ (800b304 <tcp_receive+0x270>)
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	b29a      	uxth	r2, r3
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b2aa:	b29b      	uxth	r3, r3
 800b2ac:	1ad3      	subs	r3, r2, r3
 800b2ae:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	2200      	movs	r2, #0
 800b2b4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 800b2b8:	4b12      	ldr	r3, [pc, #72]	@ (800b304 <tcp_receive+0x270>)
 800b2ba:	681a      	ldr	r2, [r3, #0]
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	7d1b      	ldrb	r3, [r3, #20]
 800b2c4:	2b03      	cmp	r3, #3
 800b2c6:	f240 8097 	bls.w	800b3f8 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 800b2d6:	429a      	cmp	r2, r3
 800b2d8:	d245      	bcs.n	800b366 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	8b5b      	ldrh	r3, [r3, #26]
 800b2de:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d014      	beq.n	800b310 <tcp_receive+0x27c>
 800b2e6:	2301      	movs	r3, #1
 800b2e8:	e013      	b.n	800b312 <tcp_receive+0x27e>
 800b2ea:	bf00      	nop
 800b2ec:	080138dc 	.word	0x080138dc
 800b2f0:	08013c0c 	.word	0x08013c0c
 800b2f4:	08013928 	.word	0x08013928
 800b2f8:	08013c28 	.word	0x08013c28
 800b2fc:	2000a82c 	.word	0x2000a82c
 800b300:	2000a820 	.word	0x2000a820
 800b304:	2000a824 	.word	0x2000a824
 800b308:	2000a810 	.word	0x2000a810
 800b30c:	2000a82a 	.word	0x2000a82a
 800b310:	2302      	movs	r3, #2
 800b312:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800b316:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800b31a:	b29a      	uxth	r2, r3
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b320:	fb12 f303 	smulbb	r3, r2, r3
 800b324:	b29b      	uxth	r3, r3
 800b326:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800b328:	4293      	cmp	r3, r2
 800b32a:	bf28      	it	cs
 800b32c:	4613      	movcs	r3, r2
 800b32e:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800b336:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800b338:	4413      	add	r3, r2
 800b33a:	b29a      	uxth	r2, r3
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800b342:	429a      	cmp	r2, r3
 800b344:	d309      	bcc.n	800b35a <tcp_receive+0x2c6>
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800b34c:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800b34e:	4413      	add	r3, r2
 800b350:	b29a      	uxth	r2, r3
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800b358:	e04e      	b.n	800b3f8 <tcp_receive+0x364>
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b360:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800b364:	e048      	b.n	800b3f8 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800b36c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800b36e:	4413      	add	r3, r2
 800b370:	b29a      	uxth	r2, r3
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b378:	429a      	cmp	r2, r3
 800b37a:	d309      	bcc.n	800b390 <tcp_receive+0x2fc>
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800b382:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800b384:	4413      	add	r3, r2
 800b386:	b29a      	uxth	r2, r3
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800b38e:	e004      	b.n	800b39a <tcp_receive+0x306>
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b396:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800b3a6:	429a      	cmp	r2, r3
 800b3a8:	d326      	bcc.n	800b3f8 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800b3b6:	1ad3      	subs	r3, r2, r3
 800b3b8:	b29a      	uxth	r2, r3
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b3ca:	4413      	add	r3, r2
 800b3cc:	b29a      	uxth	r2, r3
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800b3d4:	429a      	cmp	r2, r3
 800b3d6:	d30a      	bcc.n	800b3ee <tcp_receive+0x35a>
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b3e2:	4413      	add	r3, r2
 800b3e4:	b29a      	uxth	r2, r3
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800b3ec:	e004      	b.n	800b3f8 <tcp_receive+0x364>
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b3f4:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b400:	4a98      	ldr	r2, [pc, #608]	@ (800b664 <tcp_receive+0x5d0>)
 800b402:	6878      	ldr	r0, [r7, #4]
 800b404:	f7ff fdca 	bl	800af9c <tcp_free_acked_segments>
 800b408:	4602      	mov	r2, r0
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b416:	4a94      	ldr	r2, [pc, #592]	@ (800b668 <tcp_receive+0x5d4>)
 800b418:	6878      	ldr	r0, [r7, #4]
 800b41a:	f7ff fdbf 	bl	800af9c <tcp_free_acked_segments>
 800b41e:	4602      	mov	r2, r0
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d104      	bne.n	800b436 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b432:	861a      	strh	r2, [r3, #48]	@ 0x30
 800b434:	e002      	b.n	800b43c <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	2200      	movs	r2, #0
 800b43a:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	2200      	movs	r2, #0
 800b440:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b446:	2b00      	cmp	r3, #0
 800b448:	d103      	bne.n	800b452 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	2200      	movs	r2, #0
 800b44e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 800b458:	4b84      	ldr	r3, [pc, #528]	@ (800b66c <tcp_receive+0x5d8>)
 800b45a:	881b      	ldrh	r3, [r3, #0]
 800b45c:	4413      	add	r3, r2
 800b45e:	b29a      	uxth	r2, r3
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	8b5b      	ldrh	r3, [r3, #26]
 800b46a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d035      	beq.n	800b4de <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b476:	2b00      	cmp	r3, #0
 800b478:	d118      	bne.n	800b4ac <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d00c      	beq.n	800b49c <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b48a:	68db      	ldr	r3, [r3, #12]
 800b48c:	685b      	ldr	r3, [r3, #4]
 800b48e:	4618      	mov	r0, r3
 800b490:	f7fa fe93 	bl	80061ba <lwip_htonl>
 800b494:	4603      	mov	r3, r0
 800b496:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800b498:	2b00      	cmp	r3, #0
 800b49a:	dc20      	bgt.n	800b4de <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	8b5b      	ldrh	r3, [r3, #26]
 800b4a0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b4a4:	b29a      	uxth	r2, r3
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800b4aa:	e018      	b.n	800b4de <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b4b4:	68db      	ldr	r3, [r3, #12]
 800b4b6:	685b      	ldr	r3, [r3, #4]
 800b4b8:	4618      	mov	r0, r3
 800b4ba:	f7fa fe7e 	bl	80061ba <lwip_htonl>
 800b4be:	4603      	mov	r3, r0
 800b4c0:	1ae3      	subs	r3, r4, r3
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	dc0b      	bgt.n	800b4de <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	8b5b      	ldrh	r3, [r3, #26]
 800b4ca:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b4ce:	b29a      	uxth	r2, r3
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800b4d4:	e003      	b.n	800b4de <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800b4d6:	6878      	ldr	r0, [r7, #4]
 800b4d8:	f002 fbc8 	bl	800dc6c <tcp_send_empty_ack>
 800b4dc:	e000      	b.n	800b4e0 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800b4de:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d05b      	beq.n	800b5a0 <tcp_receive+0x50c>
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b4ec:	4b60      	ldr	r3, [pc, #384]	@ (800b670 <tcp_receive+0x5dc>)
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	1ad3      	subs	r3, r2, r3
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	da54      	bge.n	800b5a0 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800b4f6:	4b5f      	ldr	r3, [pc, #380]	@ (800b674 <tcp_receive+0x5e0>)
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	b29a      	uxth	r2, r3
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b500:	b29b      	uxth	r3, r3
 800b502:	1ad3      	subs	r3, r2, r3
 800b504:	b29b      	uxth	r3, r3
 800b506:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800b50a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800b514:	10db      	asrs	r3, r3, #3
 800b516:	b21b      	sxth	r3, r3
 800b518:	b29b      	uxth	r3, r3
 800b51a:	1ad3      	subs	r3, r2, r3
 800b51c:	b29b      	uxth	r3, r3
 800b51e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800b528:	b29a      	uxth	r2, r3
 800b52a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800b52e:	4413      	add	r3, r2
 800b530:	b29b      	uxth	r3, r3
 800b532:	b21a      	sxth	r2, r3
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 800b538:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	da05      	bge.n	800b54c <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800b540:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800b544:	425b      	negs	r3, r3
 800b546:	b29b      	uxth	r3, r3
 800b548:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800b54c:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800b556:	109b      	asrs	r3, r3, #2
 800b558:	b21b      	sxth	r3, r3
 800b55a:	b29b      	uxth	r3, r3
 800b55c:	1ad3      	subs	r3, r2, r3
 800b55e:	b29b      	uxth	r3, r3
 800b560:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800b56a:	b29a      	uxth	r2, r3
 800b56c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800b570:	4413      	add	r3, r2
 800b572:	b29b      	uxth	r3, r3
 800b574:	b21a      	sxth	r2, r3
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800b580:	10db      	asrs	r3, r3, #3
 800b582:	b21b      	sxth	r3, r3
 800b584:	b29a      	uxth	r2, r3
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800b58c:	b29b      	uxth	r3, r3
 800b58e:	4413      	add	r3, r2
 800b590:	b29b      	uxth	r3, r3
 800b592:	b21a      	sxth	r2, r3
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	2200      	movs	r2, #0
 800b59e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800b5a0:	4b35      	ldr	r3, [pc, #212]	@ (800b678 <tcp_receive+0x5e4>)
 800b5a2:	881b      	ldrh	r3, [r3, #0]
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	f000 84df 	beq.w	800bf68 <tcp_receive+0xed4>
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	7d1b      	ldrb	r3, [r3, #20]
 800b5ae:	2b06      	cmp	r3, #6
 800b5b0:	f200 84da 	bhi.w	800bf68 <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b5b8:	4b30      	ldr	r3, [pc, #192]	@ (800b67c <tcp_receive+0x5e8>)
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	1ad3      	subs	r3, r2, r3
 800b5be:	3b01      	subs	r3, #1
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	f2c0 808f 	blt.w	800b6e4 <tcp_receive+0x650>
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b5ca:	4b2b      	ldr	r3, [pc, #172]	@ (800b678 <tcp_receive+0x5e4>)
 800b5cc:	881b      	ldrh	r3, [r3, #0]
 800b5ce:	4619      	mov	r1, r3
 800b5d0:	4b2a      	ldr	r3, [pc, #168]	@ (800b67c <tcp_receive+0x5e8>)
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	440b      	add	r3, r1
 800b5d6:	1ad3      	subs	r3, r2, r3
 800b5d8:	3301      	adds	r3, #1
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	f300 8082 	bgt.w	800b6e4 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800b5e0:	4b27      	ldr	r3, [pc, #156]	@ (800b680 <tcp_receive+0x5ec>)
 800b5e2:	685b      	ldr	r3, [r3, #4]
 800b5e4:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b5ea:	4b24      	ldr	r3, [pc, #144]	@ (800b67c <tcp_receive+0x5e8>)
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	1ad3      	subs	r3, r2, r3
 800b5f0:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800b5f2:	4b23      	ldr	r3, [pc, #140]	@ (800b680 <tcp_receive+0x5ec>)
 800b5f4:	685b      	ldr	r3, [r3, #4]
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d106      	bne.n	800b608 <tcp_receive+0x574>
 800b5fa:	4b22      	ldr	r3, [pc, #136]	@ (800b684 <tcp_receive+0x5f0>)
 800b5fc:	f240 5294 	movw	r2, #1428	@ 0x594
 800b600:	4921      	ldr	r1, [pc, #132]	@ (800b688 <tcp_receive+0x5f4>)
 800b602:	4822      	ldr	r0, [pc, #136]	@ (800b68c <tcp_receive+0x5f8>)
 800b604:	f005 febc 	bl	8011380 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800b608:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b60a:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800b60e:	4293      	cmp	r3, r2
 800b610:	d906      	bls.n	800b620 <tcp_receive+0x58c>
 800b612:	4b1c      	ldr	r3, [pc, #112]	@ (800b684 <tcp_receive+0x5f0>)
 800b614:	f240 5295 	movw	r2, #1429	@ 0x595
 800b618:	491d      	ldr	r1, [pc, #116]	@ (800b690 <tcp_receive+0x5fc>)
 800b61a:	481c      	ldr	r0, [pc, #112]	@ (800b68c <tcp_receive+0x5f8>)
 800b61c:	f005 feb0 	bl	8011380 <iprintf>
      off = (u16_t)off32;
 800b620:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b622:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800b626:	4b16      	ldr	r3, [pc, #88]	@ (800b680 <tcp_receive+0x5ec>)
 800b628:	685b      	ldr	r3, [r3, #4]
 800b62a:	891b      	ldrh	r3, [r3, #8]
 800b62c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800b630:	429a      	cmp	r2, r3
 800b632:	d906      	bls.n	800b642 <tcp_receive+0x5ae>
 800b634:	4b13      	ldr	r3, [pc, #76]	@ (800b684 <tcp_receive+0x5f0>)
 800b636:	f240 5297 	movw	r2, #1431	@ 0x597
 800b63a:	4916      	ldr	r1, [pc, #88]	@ (800b694 <tcp_receive+0x600>)
 800b63c:	4813      	ldr	r0, [pc, #76]	@ (800b68c <tcp_receive+0x5f8>)
 800b63e:	f005 fe9f 	bl	8011380 <iprintf>
      inseg.len -= off;
 800b642:	4b0f      	ldr	r3, [pc, #60]	@ (800b680 <tcp_receive+0x5ec>)
 800b644:	891a      	ldrh	r2, [r3, #8]
 800b646:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800b64a:	1ad3      	subs	r3, r2, r3
 800b64c:	b29a      	uxth	r2, r3
 800b64e:	4b0c      	ldr	r3, [pc, #48]	@ (800b680 <tcp_receive+0x5ec>)
 800b650:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800b652:	4b0b      	ldr	r3, [pc, #44]	@ (800b680 <tcp_receive+0x5ec>)
 800b654:	685b      	ldr	r3, [r3, #4]
 800b656:	891a      	ldrh	r2, [r3, #8]
 800b658:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800b65c:	1ad3      	subs	r3, r2, r3
 800b65e:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 800b660:	e02a      	b.n	800b6b8 <tcp_receive+0x624>
 800b662:	bf00      	nop
 800b664:	08013c44 	.word	0x08013c44
 800b668:	08013c4c 	.word	0x08013c4c
 800b66c:	2000a828 	.word	0x2000a828
 800b670:	2000a824 	.word	0x2000a824
 800b674:	2000a7e8 	.word	0x2000a7e8
 800b678:	2000a82a 	.word	0x2000a82a
 800b67c:	2000a820 	.word	0x2000a820
 800b680:	2000a800 	.word	0x2000a800
 800b684:	080138dc 	.word	0x080138dc
 800b688:	08013c54 	.word	0x08013c54
 800b68c:	08013928 	.word	0x08013928
 800b690:	08013c64 	.word	0x08013c64
 800b694:	08013c74 	.word	0x08013c74
        off -= p->len;
 800b698:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b69a:	895b      	ldrh	r3, [r3, #10]
 800b69c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800b6a0:	1ad3      	subs	r3, r2, r3
 800b6a2:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800b6a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b6a8:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800b6aa:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800b6ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b6ae:	2200      	movs	r2, #0
 800b6b0:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800b6b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 800b6b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b6ba:	895b      	ldrh	r3, [r3, #10]
 800b6bc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800b6c0:	429a      	cmp	r2, r3
 800b6c2:	d8e9      	bhi.n	800b698 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800b6c4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800b6c8:	4619      	mov	r1, r3
 800b6ca:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800b6cc:	f7fc f838 	bl	8007740 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b6d4:	4a90      	ldr	r2, [pc, #576]	@ (800b918 <tcp_receive+0x884>)
 800b6d6:	6013      	str	r3, [r2, #0]
 800b6d8:	4b90      	ldr	r3, [pc, #576]	@ (800b91c <tcp_receive+0x888>)
 800b6da:	68db      	ldr	r3, [r3, #12]
 800b6dc:	4a8e      	ldr	r2, [pc, #568]	@ (800b918 <tcp_receive+0x884>)
 800b6de:	6812      	ldr	r2, [r2, #0]
 800b6e0:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800b6e2:	e00d      	b.n	800b700 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800b6e4:	4b8c      	ldr	r3, [pc, #560]	@ (800b918 <tcp_receive+0x884>)
 800b6e6:	681a      	ldr	r2, [r3, #0]
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b6ec:	1ad3      	subs	r3, r2, r3
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	da06      	bge.n	800b700 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	8b5b      	ldrh	r3, [r3, #26]
 800b6f6:	f043 0302 	orr.w	r3, r3, #2
 800b6fa:	b29a      	uxth	r2, r3
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800b700:	4b85      	ldr	r3, [pc, #532]	@ (800b918 <tcp_receive+0x884>)
 800b702:	681a      	ldr	r2, [r3, #0]
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b708:	1ad3      	subs	r3, r2, r3
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	f2c0 8427 	blt.w	800bf5e <tcp_receive+0xeca>
 800b710:	4b81      	ldr	r3, [pc, #516]	@ (800b918 <tcp_receive+0x884>)
 800b712:	681a      	ldr	r2, [r3, #0]
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b718:	6879      	ldr	r1, [r7, #4]
 800b71a:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800b71c:	440b      	add	r3, r1
 800b71e:	1ad3      	subs	r3, r2, r3
 800b720:	3301      	adds	r3, #1
 800b722:	2b00      	cmp	r3, #0
 800b724:	f300 841b 	bgt.w	800bf5e <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b72c:	4b7a      	ldr	r3, [pc, #488]	@ (800b918 <tcp_receive+0x884>)
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	429a      	cmp	r2, r3
 800b732:	f040 8298 	bne.w	800bc66 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800b736:	4b79      	ldr	r3, [pc, #484]	@ (800b91c <tcp_receive+0x888>)
 800b738:	891c      	ldrh	r4, [r3, #8]
 800b73a:	4b78      	ldr	r3, [pc, #480]	@ (800b91c <tcp_receive+0x888>)
 800b73c:	68db      	ldr	r3, [r3, #12]
 800b73e:	899b      	ldrh	r3, [r3, #12]
 800b740:	b29b      	uxth	r3, r3
 800b742:	4618      	mov	r0, r3
 800b744:	f7fa fd24 	bl	8006190 <lwip_htons>
 800b748:	4603      	mov	r3, r0
 800b74a:	b2db      	uxtb	r3, r3
 800b74c:	f003 0303 	and.w	r3, r3, #3
 800b750:	2b00      	cmp	r3, #0
 800b752:	d001      	beq.n	800b758 <tcp_receive+0x6c4>
 800b754:	2301      	movs	r3, #1
 800b756:	e000      	b.n	800b75a <tcp_receive+0x6c6>
 800b758:	2300      	movs	r3, #0
 800b75a:	4423      	add	r3, r4
 800b75c:	b29a      	uxth	r2, r3
 800b75e:	4b70      	ldr	r3, [pc, #448]	@ (800b920 <tcp_receive+0x88c>)
 800b760:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800b766:	4b6e      	ldr	r3, [pc, #440]	@ (800b920 <tcp_receive+0x88c>)
 800b768:	881b      	ldrh	r3, [r3, #0]
 800b76a:	429a      	cmp	r2, r3
 800b76c:	d274      	bcs.n	800b858 <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800b76e:	4b6b      	ldr	r3, [pc, #428]	@ (800b91c <tcp_receive+0x888>)
 800b770:	68db      	ldr	r3, [r3, #12]
 800b772:	899b      	ldrh	r3, [r3, #12]
 800b774:	b29b      	uxth	r3, r3
 800b776:	4618      	mov	r0, r3
 800b778:	f7fa fd0a 	bl	8006190 <lwip_htons>
 800b77c:	4603      	mov	r3, r0
 800b77e:	b2db      	uxtb	r3, r3
 800b780:	f003 0301 	and.w	r3, r3, #1
 800b784:	2b00      	cmp	r3, #0
 800b786:	d01e      	beq.n	800b7c6 <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800b788:	4b64      	ldr	r3, [pc, #400]	@ (800b91c <tcp_receive+0x888>)
 800b78a:	68db      	ldr	r3, [r3, #12]
 800b78c:	899b      	ldrh	r3, [r3, #12]
 800b78e:	b29b      	uxth	r3, r3
 800b790:	b21b      	sxth	r3, r3
 800b792:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800b796:	b21c      	sxth	r4, r3
 800b798:	4b60      	ldr	r3, [pc, #384]	@ (800b91c <tcp_receive+0x888>)
 800b79a:	68db      	ldr	r3, [r3, #12]
 800b79c:	899b      	ldrh	r3, [r3, #12]
 800b79e:	b29b      	uxth	r3, r3
 800b7a0:	4618      	mov	r0, r3
 800b7a2:	f7fa fcf5 	bl	8006190 <lwip_htons>
 800b7a6:	4603      	mov	r3, r0
 800b7a8:	b2db      	uxtb	r3, r3
 800b7aa:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 800b7ae:	b29b      	uxth	r3, r3
 800b7b0:	4618      	mov	r0, r3
 800b7b2:	f7fa fced 	bl	8006190 <lwip_htons>
 800b7b6:	4603      	mov	r3, r0
 800b7b8:	b21b      	sxth	r3, r3
 800b7ba:	4323      	orrs	r3, r4
 800b7bc:	b21a      	sxth	r2, r3
 800b7be:	4b57      	ldr	r3, [pc, #348]	@ (800b91c <tcp_receive+0x888>)
 800b7c0:	68db      	ldr	r3, [r3, #12]
 800b7c2:	b292      	uxth	r2, r2
 800b7c4:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800b7ca:	4b54      	ldr	r3, [pc, #336]	@ (800b91c <tcp_receive+0x888>)
 800b7cc:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800b7ce:	4b53      	ldr	r3, [pc, #332]	@ (800b91c <tcp_receive+0x888>)
 800b7d0:	68db      	ldr	r3, [r3, #12]
 800b7d2:	899b      	ldrh	r3, [r3, #12]
 800b7d4:	b29b      	uxth	r3, r3
 800b7d6:	4618      	mov	r0, r3
 800b7d8:	f7fa fcda 	bl	8006190 <lwip_htons>
 800b7dc:	4603      	mov	r3, r0
 800b7de:	b2db      	uxtb	r3, r3
 800b7e0:	f003 0302 	and.w	r3, r3, #2
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d005      	beq.n	800b7f4 <tcp_receive+0x760>
            inseg.len -= 1;
 800b7e8:	4b4c      	ldr	r3, [pc, #304]	@ (800b91c <tcp_receive+0x888>)
 800b7ea:	891b      	ldrh	r3, [r3, #8]
 800b7ec:	3b01      	subs	r3, #1
 800b7ee:	b29a      	uxth	r2, r3
 800b7f0:	4b4a      	ldr	r3, [pc, #296]	@ (800b91c <tcp_receive+0x888>)
 800b7f2:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800b7f4:	4b49      	ldr	r3, [pc, #292]	@ (800b91c <tcp_receive+0x888>)
 800b7f6:	685b      	ldr	r3, [r3, #4]
 800b7f8:	4a48      	ldr	r2, [pc, #288]	@ (800b91c <tcp_receive+0x888>)
 800b7fa:	8912      	ldrh	r2, [r2, #8]
 800b7fc:	4611      	mov	r1, r2
 800b7fe:	4618      	mov	r0, r3
 800b800:	f7fb fe9e 	bl	8007540 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800b804:	4b45      	ldr	r3, [pc, #276]	@ (800b91c <tcp_receive+0x888>)
 800b806:	891c      	ldrh	r4, [r3, #8]
 800b808:	4b44      	ldr	r3, [pc, #272]	@ (800b91c <tcp_receive+0x888>)
 800b80a:	68db      	ldr	r3, [r3, #12]
 800b80c:	899b      	ldrh	r3, [r3, #12]
 800b80e:	b29b      	uxth	r3, r3
 800b810:	4618      	mov	r0, r3
 800b812:	f7fa fcbd 	bl	8006190 <lwip_htons>
 800b816:	4603      	mov	r3, r0
 800b818:	b2db      	uxtb	r3, r3
 800b81a:	f003 0303 	and.w	r3, r3, #3
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d001      	beq.n	800b826 <tcp_receive+0x792>
 800b822:	2301      	movs	r3, #1
 800b824:	e000      	b.n	800b828 <tcp_receive+0x794>
 800b826:	2300      	movs	r3, #0
 800b828:	4423      	add	r3, r4
 800b82a:	b29a      	uxth	r2, r3
 800b82c:	4b3c      	ldr	r3, [pc, #240]	@ (800b920 <tcp_receive+0x88c>)
 800b82e:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800b830:	4b3b      	ldr	r3, [pc, #236]	@ (800b920 <tcp_receive+0x88c>)
 800b832:	881b      	ldrh	r3, [r3, #0]
 800b834:	461a      	mov	r2, r3
 800b836:	4b38      	ldr	r3, [pc, #224]	@ (800b918 <tcp_receive+0x884>)
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	441a      	add	r2, r3
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b840:	6879      	ldr	r1, [r7, #4]
 800b842:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800b844:	440b      	add	r3, r1
 800b846:	429a      	cmp	r2, r3
 800b848:	d006      	beq.n	800b858 <tcp_receive+0x7c4>
 800b84a:	4b36      	ldr	r3, [pc, #216]	@ (800b924 <tcp_receive+0x890>)
 800b84c:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 800b850:	4935      	ldr	r1, [pc, #212]	@ (800b928 <tcp_receive+0x894>)
 800b852:	4836      	ldr	r0, [pc, #216]	@ (800b92c <tcp_receive+0x898>)
 800b854:	f005 fd94 	bl	8011380 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	f000 80e6 	beq.w	800ba2e <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800b862:	4b2e      	ldr	r3, [pc, #184]	@ (800b91c <tcp_receive+0x888>)
 800b864:	68db      	ldr	r3, [r3, #12]
 800b866:	899b      	ldrh	r3, [r3, #12]
 800b868:	b29b      	uxth	r3, r3
 800b86a:	4618      	mov	r0, r3
 800b86c:	f7fa fc90 	bl	8006190 <lwip_htons>
 800b870:	4603      	mov	r3, r0
 800b872:	b2db      	uxtb	r3, r3
 800b874:	f003 0301 	and.w	r3, r3, #1
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d010      	beq.n	800b89e <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800b87c:	e00a      	b.n	800b894 <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b882:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b888:	681a      	ldr	r2, [r3, #0]
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 800b88e:	68f8      	ldr	r0, [r7, #12]
 800b890:	f7fd fcad 	bl	80091ee <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d1f0      	bne.n	800b87e <tcp_receive+0x7ea>
 800b89c:	e0c7      	b.n	800ba2e <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b8a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800b8a4:	e051      	b.n	800b94a <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800b8a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b8a8:	68db      	ldr	r3, [r3, #12]
 800b8aa:	899b      	ldrh	r3, [r3, #12]
 800b8ac:	b29b      	uxth	r3, r3
 800b8ae:	4618      	mov	r0, r3
 800b8b0:	f7fa fc6e 	bl	8006190 <lwip_htons>
 800b8b4:	4603      	mov	r3, r0
 800b8b6:	b2db      	uxtb	r3, r3
 800b8b8:	f003 0301 	and.w	r3, r3, #1
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d03c      	beq.n	800b93a <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800b8c0:	4b16      	ldr	r3, [pc, #88]	@ (800b91c <tcp_receive+0x888>)
 800b8c2:	68db      	ldr	r3, [r3, #12]
 800b8c4:	899b      	ldrh	r3, [r3, #12]
 800b8c6:	b29b      	uxth	r3, r3
 800b8c8:	4618      	mov	r0, r3
 800b8ca:	f7fa fc61 	bl	8006190 <lwip_htons>
 800b8ce:	4603      	mov	r3, r0
 800b8d0:	b2db      	uxtb	r3, r3
 800b8d2:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d12f      	bne.n	800b93a <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800b8da:	4b10      	ldr	r3, [pc, #64]	@ (800b91c <tcp_receive+0x888>)
 800b8dc:	68db      	ldr	r3, [r3, #12]
 800b8de:	899b      	ldrh	r3, [r3, #12]
 800b8e0:	b29c      	uxth	r4, r3
 800b8e2:	2001      	movs	r0, #1
 800b8e4:	f7fa fc54 	bl	8006190 <lwip_htons>
 800b8e8:	4603      	mov	r3, r0
 800b8ea:	461a      	mov	r2, r3
 800b8ec:	4b0b      	ldr	r3, [pc, #44]	@ (800b91c <tcp_receive+0x888>)
 800b8ee:	68db      	ldr	r3, [r3, #12]
 800b8f0:	4322      	orrs	r2, r4
 800b8f2:	b292      	uxth	r2, r2
 800b8f4:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800b8f6:	4b09      	ldr	r3, [pc, #36]	@ (800b91c <tcp_receive+0x888>)
 800b8f8:	891c      	ldrh	r4, [r3, #8]
 800b8fa:	4b08      	ldr	r3, [pc, #32]	@ (800b91c <tcp_receive+0x888>)
 800b8fc:	68db      	ldr	r3, [r3, #12]
 800b8fe:	899b      	ldrh	r3, [r3, #12]
 800b900:	b29b      	uxth	r3, r3
 800b902:	4618      	mov	r0, r3
 800b904:	f7fa fc44 	bl	8006190 <lwip_htons>
 800b908:	4603      	mov	r3, r0
 800b90a:	b2db      	uxtb	r3, r3
 800b90c:	f003 0303 	and.w	r3, r3, #3
 800b910:	2b00      	cmp	r3, #0
 800b912:	d00d      	beq.n	800b930 <tcp_receive+0x89c>
 800b914:	2301      	movs	r3, #1
 800b916:	e00c      	b.n	800b932 <tcp_receive+0x89e>
 800b918:	2000a820 	.word	0x2000a820
 800b91c:	2000a800 	.word	0x2000a800
 800b920:	2000a82a 	.word	0x2000a82a
 800b924:	080138dc 	.word	0x080138dc
 800b928:	08013c84 	.word	0x08013c84
 800b92c:	08013928 	.word	0x08013928
 800b930:	2300      	movs	r3, #0
 800b932:	4423      	add	r3, r4
 800b934:	b29a      	uxth	r2, r3
 800b936:	4b98      	ldr	r3, [pc, #608]	@ (800bb98 <tcp_receive+0xb04>)
 800b938:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800b93a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b93c:	613b      	str	r3, [r7, #16]
              next = next->next;
 800b93e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 800b944:	6938      	ldr	r0, [r7, #16]
 800b946:	f7fd fc52 	bl	80091ee <tcp_seg_free>
            while (next &&
 800b94a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d00e      	beq.n	800b96e <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800b950:	4b91      	ldr	r3, [pc, #580]	@ (800bb98 <tcp_receive+0xb04>)
 800b952:	881b      	ldrh	r3, [r3, #0]
 800b954:	461a      	mov	r2, r3
 800b956:	4b91      	ldr	r3, [pc, #580]	@ (800bb9c <tcp_receive+0xb08>)
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	441a      	add	r2, r3
 800b95c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b95e:	68db      	ldr	r3, [r3, #12]
 800b960:	685b      	ldr	r3, [r3, #4]
 800b962:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b964:	8909      	ldrh	r1, [r1, #8]
 800b966:	440b      	add	r3, r1
 800b968:	1ad3      	subs	r3, r2, r3
            while (next &&
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	da9b      	bge.n	800b8a6 <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800b96e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b970:	2b00      	cmp	r3, #0
 800b972:	d059      	beq.n	800ba28 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 800b974:	4b88      	ldr	r3, [pc, #544]	@ (800bb98 <tcp_receive+0xb04>)
 800b976:	881b      	ldrh	r3, [r3, #0]
 800b978:	461a      	mov	r2, r3
 800b97a:	4b88      	ldr	r3, [pc, #544]	@ (800bb9c <tcp_receive+0xb08>)
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	441a      	add	r2, r3
 800b980:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b982:	68db      	ldr	r3, [r3, #12]
 800b984:	685b      	ldr	r3, [r3, #4]
 800b986:	1ad3      	subs	r3, r2, r3
            if (next &&
 800b988:	2b00      	cmp	r3, #0
 800b98a:	dd4d      	ble.n	800ba28 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800b98c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b98e:	68db      	ldr	r3, [r3, #12]
 800b990:	685b      	ldr	r3, [r3, #4]
 800b992:	b29a      	uxth	r2, r3
 800b994:	4b81      	ldr	r3, [pc, #516]	@ (800bb9c <tcp_receive+0xb08>)
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	b29b      	uxth	r3, r3
 800b99a:	1ad3      	subs	r3, r2, r3
 800b99c:	b29a      	uxth	r2, r3
 800b99e:	4b80      	ldr	r3, [pc, #512]	@ (800bba0 <tcp_receive+0xb0c>)
 800b9a0:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800b9a2:	4b7f      	ldr	r3, [pc, #508]	@ (800bba0 <tcp_receive+0xb0c>)
 800b9a4:	68db      	ldr	r3, [r3, #12]
 800b9a6:	899b      	ldrh	r3, [r3, #12]
 800b9a8:	b29b      	uxth	r3, r3
 800b9aa:	4618      	mov	r0, r3
 800b9ac:	f7fa fbf0 	bl	8006190 <lwip_htons>
 800b9b0:	4603      	mov	r3, r0
 800b9b2:	b2db      	uxtb	r3, r3
 800b9b4:	f003 0302 	and.w	r3, r3, #2
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d005      	beq.n	800b9c8 <tcp_receive+0x934>
                inseg.len -= 1;
 800b9bc:	4b78      	ldr	r3, [pc, #480]	@ (800bba0 <tcp_receive+0xb0c>)
 800b9be:	891b      	ldrh	r3, [r3, #8]
 800b9c0:	3b01      	subs	r3, #1
 800b9c2:	b29a      	uxth	r2, r3
 800b9c4:	4b76      	ldr	r3, [pc, #472]	@ (800bba0 <tcp_receive+0xb0c>)
 800b9c6:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800b9c8:	4b75      	ldr	r3, [pc, #468]	@ (800bba0 <tcp_receive+0xb0c>)
 800b9ca:	685b      	ldr	r3, [r3, #4]
 800b9cc:	4a74      	ldr	r2, [pc, #464]	@ (800bba0 <tcp_receive+0xb0c>)
 800b9ce:	8912      	ldrh	r2, [r2, #8]
 800b9d0:	4611      	mov	r1, r2
 800b9d2:	4618      	mov	r0, r3
 800b9d4:	f7fb fdb4 	bl	8007540 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800b9d8:	4b71      	ldr	r3, [pc, #452]	@ (800bba0 <tcp_receive+0xb0c>)
 800b9da:	891c      	ldrh	r4, [r3, #8]
 800b9dc:	4b70      	ldr	r3, [pc, #448]	@ (800bba0 <tcp_receive+0xb0c>)
 800b9de:	68db      	ldr	r3, [r3, #12]
 800b9e0:	899b      	ldrh	r3, [r3, #12]
 800b9e2:	b29b      	uxth	r3, r3
 800b9e4:	4618      	mov	r0, r3
 800b9e6:	f7fa fbd3 	bl	8006190 <lwip_htons>
 800b9ea:	4603      	mov	r3, r0
 800b9ec:	b2db      	uxtb	r3, r3
 800b9ee:	f003 0303 	and.w	r3, r3, #3
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d001      	beq.n	800b9fa <tcp_receive+0x966>
 800b9f6:	2301      	movs	r3, #1
 800b9f8:	e000      	b.n	800b9fc <tcp_receive+0x968>
 800b9fa:	2300      	movs	r3, #0
 800b9fc:	4423      	add	r3, r4
 800b9fe:	b29a      	uxth	r2, r3
 800ba00:	4b65      	ldr	r3, [pc, #404]	@ (800bb98 <tcp_receive+0xb04>)
 800ba02:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800ba04:	4b64      	ldr	r3, [pc, #400]	@ (800bb98 <tcp_receive+0xb04>)
 800ba06:	881b      	ldrh	r3, [r3, #0]
 800ba08:	461a      	mov	r2, r3
 800ba0a:	4b64      	ldr	r3, [pc, #400]	@ (800bb9c <tcp_receive+0xb08>)
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	441a      	add	r2, r3
 800ba10:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ba12:	68db      	ldr	r3, [r3, #12]
 800ba14:	685b      	ldr	r3, [r3, #4]
 800ba16:	429a      	cmp	r2, r3
 800ba18:	d006      	beq.n	800ba28 <tcp_receive+0x994>
 800ba1a:	4b62      	ldr	r3, [pc, #392]	@ (800bba4 <tcp_receive+0xb10>)
 800ba1c:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 800ba20:	4961      	ldr	r1, [pc, #388]	@ (800bba8 <tcp_receive+0xb14>)
 800ba22:	4862      	ldr	r0, [pc, #392]	@ (800bbac <tcp_receive+0xb18>)
 800ba24:	f005 fcac 	bl	8011380 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800ba2c:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800ba2e:	4b5a      	ldr	r3, [pc, #360]	@ (800bb98 <tcp_receive+0xb04>)
 800ba30:	881b      	ldrh	r3, [r3, #0]
 800ba32:	461a      	mov	r2, r3
 800ba34:	4b59      	ldr	r3, [pc, #356]	@ (800bb9c <tcp_receive+0xb08>)
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	441a      	add	r2, r3
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800ba42:	4b55      	ldr	r3, [pc, #340]	@ (800bb98 <tcp_receive+0xb04>)
 800ba44:	881b      	ldrh	r3, [r3, #0]
 800ba46:	429a      	cmp	r2, r3
 800ba48:	d206      	bcs.n	800ba58 <tcp_receive+0x9c4>
 800ba4a:	4b56      	ldr	r3, [pc, #344]	@ (800bba4 <tcp_receive+0xb10>)
 800ba4c:	f240 6207 	movw	r2, #1543	@ 0x607
 800ba50:	4957      	ldr	r1, [pc, #348]	@ (800bbb0 <tcp_receive+0xb1c>)
 800ba52:	4856      	ldr	r0, [pc, #344]	@ (800bbac <tcp_receive+0xb18>)
 800ba54:	f005 fc94 	bl	8011380 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800ba5c:	4b4e      	ldr	r3, [pc, #312]	@ (800bb98 <tcp_receive+0xb04>)
 800ba5e:	881b      	ldrh	r3, [r3, #0]
 800ba60:	1ad3      	subs	r3, r2, r3
 800ba62:	b29a      	uxth	r2, r3
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800ba68:	6878      	ldr	r0, [r7, #4]
 800ba6a:	f7fc fe99 	bl	80087a0 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800ba6e:	4b4c      	ldr	r3, [pc, #304]	@ (800bba0 <tcp_receive+0xb0c>)
 800ba70:	685b      	ldr	r3, [r3, #4]
 800ba72:	891b      	ldrh	r3, [r3, #8]
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d006      	beq.n	800ba86 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 800ba78:	4b49      	ldr	r3, [pc, #292]	@ (800bba0 <tcp_receive+0xb0c>)
 800ba7a:	685b      	ldr	r3, [r3, #4]
 800ba7c:	4a4d      	ldr	r2, [pc, #308]	@ (800bbb4 <tcp_receive+0xb20>)
 800ba7e:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800ba80:	4b47      	ldr	r3, [pc, #284]	@ (800bba0 <tcp_receive+0xb0c>)
 800ba82:	2200      	movs	r2, #0
 800ba84:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800ba86:	4b46      	ldr	r3, [pc, #280]	@ (800bba0 <tcp_receive+0xb0c>)
 800ba88:	68db      	ldr	r3, [r3, #12]
 800ba8a:	899b      	ldrh	r3, [r3, #12]
 800ba8c:	b29b      	uxth	r3, r3
 800ba8e:	4618      	mov	r0, r3
 800ba90:	f7fa fb7e 	bl	8006190 <lwip_htons>
 800ba94:	4603      	mov	r3, r0
 800ba96:	b2db      	uxtb	r3, r3
 800ba98:	f003 0301 	and.w	r3, r3, #1
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	f000 80b8 	beq.w	800bc12 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800baa2:	4b45      	ldr	r3, [pc, #276]	@ (800bbb8 <tcp_receive+0xb24>)
 800baa4:	781b      	ldrb	r3, [r3, #0]
 800baa6:	f043 0320 	orr.w	r3, r3, #32
 800baaa:	b2da      	uxtb	r2, r3
 800baac:	4b42      	ldr	r3, [pc, #264]	@ (800bbb8 <tcp_receive+0xb24>)
 800baae:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800bab0:	e0af      	b.n	800bc12 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bab6:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800babc:	68db      	ldr	r3, [r3, #12]
 800babe:	685b      	ldr	r3, [r3, #4]
 800bac0:	4a36      	ldr	r2, [pc, #216]	@ (800bb9c <tcp_receive+0xb08>)
 800bac2:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800bac4:	68bb      	ldr	r3, [r7, #8]
 800bac6:	891b      	ldrh	r3, [r3, #8]
 800bac8:	461c      	mov	r4, r3
 800baca:	68bb      	ldr	r3, [r7, #8]
 800bacc:	68db      	ldr	r3, [r3, #12]
 800bace:	899b      	ldrh	r3, [r3, #12]
 800bad0:	b29b      	uxth	r3, r3
 800bad2:	4618      	mov	r0, r3
 800bad4:	f7fa fb5c 	bl	8006190 <lwip_htons>
 800bad8:	4603      	mov	r3, r0
 800bada:	b2db      	uxtb	r3, r3
 800badc:	f003 0303 	and.w	r3, r3, #3
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d001      	beq.n	800bae8 <tcp_receive+0xa54>
 800bae4:	2301      	movs	r3, #1
 800bae6:	e000      	b.n	800baea <tcp_receive+0xa56>
 800bae8:	2300      	movs	r3, #0
 800baea:	191a      	adds	r2, r3, r4
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800baf0:	441a      	add	r2, r3
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bafa:	461c      	mov	r4, r3
 800bafc:	68bb      	ldr	r3, [r7, #8]
 800bafe:	891b      	ldrh	r3, [r3, #8]
 800bb00:	461d      	mov	r5, r3
 800bb02:	68bb      	ldr	r3, [r7, #8]
 800bb04:	68db      	ldr	r3, [r3, #12]
 800bb06:	899b      	ldrh	r3, [r3, #12]
 800bb08:	b29b      	uxth	r3, r3
 800bb0a:	4618      	mov	r0, r3
 800bb0c:	f7fa fb40 	bl	8006190 <lwip_htons>
 800bb10:	4603      	mov	r3, r0
 800bb12:	b2db      	uxtb	r3, r3
 800bb14:	f003 0303 	and.w	r3, r3, #3
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d001      	beq.n	800bb20 <tcp_receive+0xa8c>
 800bb1c:	2301      	movs	r3, #1
 800bb1e:	e000      	b.n	800bb22 <tcp_receive+0xa8e>
 800bb20:	2300      	movs	r3, #0
 800bb22:	442b      	add	r3, r5
 800bb24:	429c      	cmp	r4, r3
 800bb26:	d206      	bcs.n	800bb36 <tcp_receive+0xaa2>
 800bb28:	4b1e      	ldr	r3, [pc, #120]	@ (800bba4 <tcp_receive+0xb10>)
 800bb2a:	f240 622b 	movw	r2, #1579	@ 0x62b
 800bb2e:	4923      	ldr	r1, [pc, #140]	@ (800bbbc <tcp_receive+0xb28>)
 800bb30:	481e      	ldr	r0, [pc, #120]	@ (800bbac <tcp_receive+0xb18>)
 800bb32:	f005 fc25 	bl	8011380 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800bb36:	68bb      	ldr	r3, [r7, #8]
 800bb38:	891b      	ldrh	r3, [r3, #8]
 800bb3a:	461c      	mov	r4, r3
 800bb3c:	68bb      	ldr	r3, [r7, #8]
 800bb3e:	68db      	ldr	r3, [r3, #12]
 800bb40:	899b      	ldrh	r3, [r3, #12]
 800bb42:	b29b      	uxth	r3, r3
 800bb44:	4618      	mov	r0, r3
 800bb46:	f7fa fb23 	bl	8006190 <lwip_htons>
 800bb4a:	4603      	mov	r3, r0
 800bb4c:	b2db      	uxtb	r3, r3
 800bb4e:	f003 0303 	and.w	r3, r3, #3
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d001      	beq.n	800bb5a <tcp_receive+0xac6>
 800bb56:	2301      	movs	r3, #1
 800bb58:	e000      	b.n	800bb5c <tcp_receive+0xac8>
 800bb5a:	2300      	movs	r3, #0
 800bb5c:	1919      	adds	r1, r3, r4
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800bb62:	b28b      	uxth	r3, r1
 800bb64:	1ad3      	subs	r3, r2, r3
 800bb66:	b29a      	uxth	r2, r3
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800bb6c:	6878      	ldr	r0, [r7, #4]
 800bb6e:	f7fc fe17 	bl	80087a0 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800bb72:	68bb      	ldr	r3, [r7, #8]
 800bb74:	685b      	ldr	r3, [r3, #4]
 800bb76:	891b      	ldrh	r3, [r3, #8]
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d028      	beq.n	800bbce <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800bb7c:	4b0d      	ldr	r3, [pc, #52]	@ (800bbb4 <tcp_receive+0xb20>)
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d01d      	beq.n	800bbc0 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 800bb84:	4b0b      	ldr	r3, [pc, #44]	@ (800bbb4 <tcp_receive+0xb20>)
 800bb86:	681a      	ldr	r2, [r3, #0]
 800bb88:	68bb      	ldr	r3, [r7, #8]
 800bb8a:	685b      	ldr	r3, [r3, #4]
 800bb8c:	4619      	mov	r1, r3
 800bb8e:	4610      	mov	r0, r2
 800bb90:	f7fb ff1e 	bl	80079d0 <pbuf_cat>
 800bb94:	e018      	b.n	800bbc8 <tcp_receive+0xb34>
 800bb96:	bf00      	nop
 800bb98:	2000a82a 	.word	0x2000a82a
 800bb9c:	2000a820 	.word	0x2000a820
 800bba0:	2000a800 	.word	0x2000a800
 800bba4:	080138dc 	.word	0x080138dc
 800bba8:	08013cbc 	.word	0x08013cbc
 800bbac:	08013928 	.word	0x08013928
 800bbb0:	08013cf8 	.word	0x08013cf8
 800bbb4:	2000a830 	.word	0x2000a830
 800bbb8:	2000a82d 	.word	0x2000a82d
 800bbbc:	08013d18 	.word	0x08013d18
            } else {
              recv_data = cseg->p;
 800bbc0:	68bb      	ldr	r3, [r7, #8]
 800bbc2:	685b      	ldr	r3, [r3, #4]
 800bbc4:	4a70      	ldr	r2, [pc, #448]	@ (800bd88 <tcp_receive+0xcf4>)
 800bbc6:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800bbc8:	68bb      	ldr	r3, [r7, #8]
 800bbca:	2200      	movs	r2, #0
 800bbcc:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800bbce:	68bb      	ldr	r3, [r7, #8]
 800bbd0:	68db      	ldr	r3, [r3, #12]
 800bbd2:	899b      	ldrh	r3, [r3, #12]
 800bbd4:	b29b      	uxth	r3, r3
 800bbd6:	4618      	mov	r0, r3
 800bbd8:	f7fa fada 	bl	8006190 <lwip_htons>
 800bbdc:	4603      	mov	r3, r0
 800bbde:	b2db      	uxtb	r3, r3
 800bbe0:	f003 0301 	and.w	r3, r3, #1
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d00d      	beq.n	800bc04 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800bbe8:	4b68      	ldr	r3, [pc, #416]	@ (800bd8c <tcp_receive+0xcf8>)
 800bbea:	781b      	ldrb	r3, [r3, #0]
 800bbec:	f043 0320 	orr.w	r3, r3, #32
 800bbf0:	b2da      	uxtb	r2, r3
 800bbf2:	4b66      	ldr	r3, [pc, #408]	@ (800bd8c <tcp_receive+0xcf8>)
 800bbf4:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	7d1b      	ldrb	r3, [r3, #20]
 800bbfa:	2b04      	cmp	r3, #4
 800bbfc:	d102      	bne.n	800bc04 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	2207      	movs	r2, #7
 800bc02:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800bc04:	68bb      	ldr	r3, [r7, #8]
 800bc06:	681a      	ldr	r2, [r3, #0]
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 800bc0c:	68b8      	ldr	r0, [r7, #8]
 800bc0e:	f7fd faee 	bl	80091ee <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d008      	beq.n	800bc2c <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bc1e:	68db      	ldr	r3, [r3, #12]
 800bc20:	685a      	ldr	r2, [r3, #4]
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 800bc26:	429a      	cmp	r2, r3
 800bc28:	f43f af43 	beq.w	800bab2 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	8b5b      	ldrh	r3, [r3, #26]
 800bc30:	f003 0301 	and.w	r3, r3, #1
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d00e      	beq.n	800bc56 <tcp_receive+0xbc2>
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	8b5b      	ldrh	r3, [r3, #26]
 800bc3c:	f023 0301 	bic.w	r3, r3, #1
 800bc40:	b29a      	uxth	r2, r3
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	835a      	strh	r2, [r3, #26]
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	8b5b      	ldrh	r3, [r3, #26]
 800bc4a:	f043 0302 	orr.w	r3, r3, #2
 800bc4e:	b29a      	uxth	r2, r3
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800bc54:	e187      	b.n	800bf66 <tcp_receive+0xed2>
        tcp_ack(pcb);
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	8b5b      	ldrh	r3, [r3, #26]
 800bc5a:	f043 0301 	orr.w	r3, r3, #1
 800bc5e:	b29a      	uxth	r2, r3
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800bc64:	e17f      	b.n	800bf66 <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d106      	bne.n	800bc7c <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800bc6e:	4848      	ldr	r0, [pc, #288]	@ (800bd90 <tcp_receive+0xcfc>)
 800bc70:	f7fd faf4 	bl	800925c <tcp_seg_copy>
 800bc74:	4602      	mov	r2, r0
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	675a      	str	r2, [r3, #116]	@ 0x74
 800bc7a:	e16c      	b.n	800bf56 <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800bc7c:	2300      	movs	r3, #0
 800bc7e:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bc84:	63bb      	str	r3, [r7, #56]	@ 0x38
 800bc86:	e156      	b.n	800bf36 <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 800bc88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc8a:	68db      	ldr	r3, [r3, #12]
 800bc8c:	685a      	ldr	r2, [r3, #4]
 800bc8e:	4b41      	ldr	r3, [pc, #260]	@ (800bd94 <tcp_receive+0xd00>)
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	429a      	cmp	r2, r3
 800bc94:	d11d      	bne.n	800bcd2 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800bc96:	4b3e      	ldr	r3, [pc, #248]	@ (800bd90 <tcp_receive+0xcfc>)
 800bc98:	891a      	ldrh	r2, [r3, #8]
 800bc9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc9c:	891b      	ldrh	r3, [r3, #8]
 800bc9e:	429a      	cmp	r2, r3
 800bca0:	f240 814e 	bls.w	800bf40 <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800bca4:	483a      	ldr	r0, [pc, #232]	@ (800bd90 <tcp_receive+0xcfc>)
 800bca6:	f7fd fad9 	bl	800925c <tcp_seg_copy>
 800bcaa:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800bcac:	697b      	ldr	r3, [r7, #20]
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	f000 8148 	beq.w	800bf44 <tcp_receive+0xeb0>
                  if (prev != NULL) {
 800bcb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d003      	beq.n	800bcc2 <tcp_receive+0xc2e>
                    prev->next = cseg;
 800bcba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bcbc:	697a      	ldr	r2, [r7, #20]
 800bcbe:	601a      	str	r2, [r3, #0]
 800bcc0:	e002      	b.n	800bcc8 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	697a      	ldr	r2, [r7, #20]
 800bcc6:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800bcc8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800bcca:	6978      	ldr	r0, [r7, #20]
 800bccc:	f7ff f8de 	bl	800ae8c <tcp_oos_insert_segment>
                }
                break;
 800bcd0:	e138      	b.n	800bf44 <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800bcd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d117      	bne.n	800bd08 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800bcd8:	4b2e      	ldr	r3, [pc, #184]	@ (800bd94 <tcp_receive+0xd00>)
 800bcda:	681a      	ldr	r2, [r3, #0]
 800bcdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bcde:	68db      	ldr	r3, [r3, #12]
 800bce0:	685b      	ldr	r3, [r3, #4]
 800bce2:	1ad3      	subs	r3, r2, r3
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	da57      	bge.n	800bd98 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800bce8:	4829      	ldr	r0, [pc, #164]	@ (800bd90 <tcp_receive+0xcfc>)
 800bcea:	f7fd fab7 	bl	800925c <tcp_seg_copy>
 800bcee:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800bcf0:	69bb      	ldr	r3, [r7, #24]
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	f000 8128 	beq.w	800bf48 <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	69ba      	ldr	r2, [r7, #24]
 800bcfc:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 800bcfe:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800bd00:	69b8      	ldr	r0, [r7, #24]
 800bd02:	f7ff f8c3 	bl	800ae8c <tcp_oos_insert_segment>
                  }
                  break;
 800bd06:	e11f      	b.n	800bf48 <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800bd08:	4b22      	ldr	r3, [pc, #136]	@ (800bd94 <tcp_receive+0xd00>)
 800bd0a:	681a      	ldr	r2, [r3, #0]
 800bd0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bd0e:	68db      	ldr	r3, [r3, #12]
 800bd10:	685b      	ldr	r3, [r3, #4]
 800bd12:	1ad3      	subs	r3, r2, r3
 800bd14:	3b01      	subs	r3, #1
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	db3e      	blt.n	800bd98 <tcp_receive+0xd04>
 800bd1a:	4b1e      	ldr	r3, [pc, #120]	@ (800bd94 <tcp_receive+0xd00>)
 800bd1c:	681a      	ldr	r2, [r3, #0]
 800bd1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd20:	68db      	ldr	r3, [r3, #12]
 800bd22:	685b      	ldr	r3, [r3, #4]
 800bd24:	1ad3      	subs	r3, r2, r3
 800bd26:	3301      	adds	r3, #1
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	dc35      	bgt.n	800bd98 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800bd2c:	4818      	ldr	r0, [pc, #96]	@ (800bd90 <tcp_receive+0xcfc>)
 800bd2e:	f7fd fa95 	bl	800925c <tcp_seg_copy>
 800bd32:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800bd34:	69fb      	ldr	r3, [r7, #28]
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	f000 8108 	beq.w	800bf4c <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800bd3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bd3e:	68db      	ldr	r3, [r3, #12]
 800bd40:	685b      	ldr	r3, [r3, #4]
 800bd42:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800bd44:	8912      	ldrh	r2, [r2, #8]
 800bd46:	441a      	add	r2, r3
 800bd48:	4b12      	ldr	r3, [pc, #72]	@ (800bd94 <tcp_receive+0xd00>)
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	1ad3      	subs	r3, r2, r3
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	dd12      	ble.n	800bd78 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800bd52:	4b10      	ldr	r3, [pc, #64]	@ (800bd94 <tcp_receive+0xd00>)
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	b29a      	uxth	r2, r3
 800bd58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bd5a:	68db      	ldr	r3, [r3, #12]
 800bd5c:	685b      	ldr	r3, [r3, #4]
 800bd5e:	b29b      	uxth	r3, r3
 800bd60:	1ad3      	subs	r3, r2, r3
 800bd62:	b29a      	uxth	r2, r3
 800bd64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bd66:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800bd68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bd6a:	685a      	ldr	r2, [r3, #4]
 800bd6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bd6e:	891b      	ldrh	r3, [r3, #8]
 800bd70:	4619      	mov	r1, r3
 800bd72:	4610      	mov	r0, r2
 800bd74:	f7fb fbe4 	bl	8007540 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800bd78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bd7a:	69fa      	ldr	r2, [r7, #28]
 800bd7c:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800bd7e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800bd80:	69f8      	ldr	r0, [r7, #28]
 800bd82:	f7ff f883 	bl	800ae8c <tcp_oos_insert_segment>
                  }
                  break;
 800bd86:	e0e1      	b.n	800bf4c <tcp_receive+0xeb8>
 800bd88:	2000a830 	.word	0x2000a830
 800bd8c:	2000a82d 	.word	0x2000a82d
 800bd90:	2000a800 	.word	0x2000a800
 800bd94:	2000a820 	.word	0x2000a820
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800bd98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd9a:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800bd9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	f040 80c5 	bne.w	800bf30 <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800bda6:	4b7f      	ldr	r3, [pc, #508]	@ (800bfa4 <tcp_receive+0xf10>)
 800bda8:	681a      	ldr	r2, [r3, #0]
 800bdaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bdac:	68db      	ldr	r3, [r3, #12]
 800bdae:	685b      	ldr	r3, [r3, #4]
 800bdb0:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	f340 80bc 	ble.w	800bf30 <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800bdb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bdba:	68db      	ldr	r3, [r3, #12]
 800bdbc:	899b      	ldrh	r3, [r3, #12]
 800bdbe:	b29b      	uxth	r3, r3
 800bdc0:	4618      	mov	r0, r3
 800bdc2:	f7fa f9e5 	bl	8006190 <lwip_htons>
 800bdc6:	4603      	mov	r3, r0
 800bdc8:	b2db      	uxtb	r3, r3
 800bdca:	f003 0301 	and.w	r3, r3, #1
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	f040 80be 	bne.w	800bf50 <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800bdd4:	4874      	ldr	r0, [pc, #464]	@ (800bfa8 <tcp_receive+0xf14>)
 800bdd6:	f7fd fa41 	bl	800925c <tcp_seg_copy>
 800bdda:	4602      	mov	r2, r0
 800bddc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bdde:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800bde0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	f000 80b5 	beq.w	800bf54 <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800bdea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bdec:	68db      	ldr	r3, [r3, #12]
 800bdee:	685b      	ldr	r3, [r3, #4]
 800bdf0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800bdf2:	8912      	ldrh	r2, [r2, #8]
 800bdf4:	441a      	add	r2, r3
 800bdf6:	4b6b      	ldr	r3, [pc, #428]	@ (800bfa4 <tcp_receive+0xf10>)
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	1ad3      	subs	r3, r2, r3
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	dd12      	ble.n	800be26 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800be00:	4b68      	ldr	r3, [pc, #416]	@ (800bfa4 <tcp_receive+0xf10>)
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	b29a      	uxth	r2, r3
 800be06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be08:	68db      	ldr	r3, [r3, #12]
 800be0a:	685b      	ldr	r3, [r3, #4]
 800be0c:	b29b      	uxth	r3, r3
 800be0e:	1ad3      	subs	r3, r2, r3
 800be10:	b29a      	uxth	r2, r3
 800be12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be14:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800be16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be18:	685a      	ldr	r2, [r3, #4]
 800be1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be1c:	891b      	ldrh	r3, [r3, #8]
 800be1e:	4619      	mov	r1, r3
 800be20:	4610      	mov	r0, r2
 800be22:	f7fb fb8d 	bl	8007540 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800be26:	4b61      	ldr	r3, [pc, #388]	@ (800bfac <tcp_receive+0xf18>)
 800be28:	881b      	ldrh	r3, [r3, #0]
 800be2a:	461a      	mov	r2, r3
 800be2c:	4b5d      	ldr	r3, [pc, #372]	@ (800bfa4 <tcp_receive+0xf10>)
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	441a      	add	r2, r3
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be36:	6879      	ldr	r1, [r7, #4]
 800be38:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800be3a:	440b      	add	r3, r1
 800be3c:	1ad3      	subs	r3, r2, r3
 800be3e:	2b00      	cmp	r3, #0
 800be40:	f340 8088 	ble.w	800bf54 <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800be44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	68db      	ldr	r3, [r3, #12]
 800be4a:	899b      	ldrh	r3, [r3, #12]
 800be4c:	b29b      	uxth	r3, r3
 800be4e:	4618      	mov	r0, r3
 800be50:	f7fa f99e 	bl	8006190 <lwip_htons>
 800be54:	4603      	mov	r3, r0
 800be56:	b2db      	uxtb	r3, r3
 800be58:	f003 0301 	and.w	r3, r3, #1
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d021      	beq.n	800bea4 <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800be60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	68db      	ldr	r3, [r3, #12]
 800be66:	899b      	ldrh	r3, [r3, #12]
 800be68:	b29b      	uxth	r3, r3
 800be6a:	b21b      	sxth	r3, r3
 800be6c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800be70:	b21c      	sxth	r4, r3
 800be72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be74:	681b      	ldr	r3, [r3, #0]
 800be76:	68db      	ldr	r3, [r3, #12]
 800be78:	899b      	ldrh	r3, [r3, #12]
 800be7a:	b29b      	uxth	r3, r3
 800be7c:	4618      	mov	r0, r3
 800be7e:	f7fa f987 	bl	8006190 <lwip_htons>
 800be82:	4603      	mov	r3, r0
 800be84:	b2db      	uxtb	r3, r3
 800be86:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 800be8a:	b29b      	uxth	r3, r3
 800be8c:	4618      	mov	r0, r3
 800be8e:	f7fa f97f 	bl	8006190 <lwip_htons>
 800be92:	4603      	mov	r3, r0
 800be94:	b21b      	sxth	r3, r3
 800be96:	4323      	orrs	r3, r4
 800be98:	b21a      	sxth	r2, r3
 800be9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	68db      	ldr	r3, [r3, #12]
 800bea0:	b292      	uxth	r2, r2
 800bea2:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bea8:	b29a      	uxth	r2, r3
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800beae:	4413      	add	r3, r2
 800beb0:	b299      	uxth	r1, r3
 800beb2:	4b3c      	ldr	r3, [pc, #240]	@ (800bfa4 <tcp_receive+0xf10>)
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	b29a      	uxth	r2, r3
 800beb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	1a8a      	subs	r2, r1, r2
 800bebe:	b292      	uxth	r2, r2
 800bec0:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800bec2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	685a      	ldr	r2, [r3, #4]
 800bec8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	891b      	ldrh	r3, [r3, #8]
 800bece:	4619      	mov	r1, r3
 800bed0:	4610      	mov	r0, r2
 800bed2:	f7fb fb35 	bl	8007540 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800bed6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	891c      	ldrh	r4, [r3, #8]
 800bedc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	68db      	ldr	r3, [r3, #12]
 800bee2:	899b      	ldrh	r3, [r3, #12]
 800bee4:	b29b      	uxth	r3, r3
 800bee6:	4618      	mov	r0, r3
 800bee8:	f7fa f952 	bl	8006190 <lwip_htons>
 800beec:	4603      	mov	r3, r0
 800beee:	b2db      	uxtb	r3, r3
 800bef0:	f003 0303 	and.w	r3, r3, #3
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d001      	beq.n	800befc <tcp_receive+0xe68>
 800bef8:	2301      	movs	r3, #1
 800befa:	e000      	b.n	800befe <tcp_receive+0xe6a>
 800befc:	2300      	movs	r3, #0
 800befe:	4423      	add	r3, r4
 800bf00:	b29a      	uxth	r2, r3
 800bf02:	4b2a      	ldr	r3, [pc, #168]	@ (800bfac <tcp_receive+0xf18>)
 800bf04:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800bf06:	4b29      	ldr	r3, [pc, #164]	@ (800bfac <tcp_receive+0xf18>)
 800bf08:	881b      	ldrh	r3, [r3, #0]
 800bf0a:	461a      	mov	r2, r3
 800bf0c:	4b25      	ldr	r3, [pc, #148]	@ (800bfa4 <tcp_receive+0xf10>)
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	441a      	add	r2, r3
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bf16:	6879      	ldr	r1, [r7, #4]
 800bf18:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800bf1a:	440b      	add	r3, r1
 800bf1c:	429a      	cmp	r2, r3
 800bf1e:	d019      	beq.n	800bf54 <tcp_receive+0xec0>
 800bf20:	4b23      	ldr	r3, [pc, #140]	@ (800bfb0 <tcp_receive+0xf1c>)
 800bf22:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 800bf26:	4923      	ldr	r1, [pc, #140]	@ (800bfb4 <tcp_receive+0xf20>)
 800bf28:	4823      	ldr	r0, [pc, #140]	@ (800bfb8 <tcp_receive+0xf24>)
 800bf2a:	f005 fa29 	bl	8011380 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800bf2e:	e011      	b.n	800bf54 <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800bf30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	63bb      	str	r3, [r7, #56]	@ 0x38
 800bf36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	f47f aea5 	bne.w	800bc88 <tcp_receive+0xbf4>
 800bf3e:	e00a      	b.n	800bf56 <tcp_receive+0xec2>
                break;
 800bf40:	bf00      	nop
 800bf42:	e008      	b.n	800bf56 <tcp_receive+0xec2>
                break;
 800bf44:	bf00      	nop
 800bf46:	e006      	b.n	800bf56 <tcp_receive+0xec2>
                  break;
 800bf48:	bf00      	nop
 800bf4a:	e004      	b.n	800bf56 <tcp_receive+0xec2>
                  break;
 800bf4c:	bf00      	nop
 800bf4e:	e002      	b.n	800bf56 <tcp_receive+0xec2>
                  break;
 800bf50:	bf00      	nop
 800bf52:	e000      	b.n	800bf56 <tcp_receive+0xec2>
                break;
 800bf54:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800bf56:	6878      	ldr	r0, [r7, #4]
 800bf58:	f001 fe88 	bl	800dc6c <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800bf5c:	e003      	b.n	800bf66 <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800bf5e:	6878      	ldr	r0, [r7, #4]
 800bf60:	f001 fe84 	bl	800dc6c <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800bf64:	e01a      	b.n	800bf9c <tcp_receive+0xf08>
 800bf66:	e019      	b.n	800bf9c <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800bf68:	4b0e      	ldr	r3, [pc, #56]	@ (800bfa4 <tcp_receive+0xf10>)
 800bf6a:	681a      	ldr	r2, [r3, #0]
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bf70:	1ad3      	subs	r3, r2, r3
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	db0a      	blt.n	800bf8c <tcp_receive+0xef8>
 800bf76:	4b0b      	ldr	r3, [pc, #44]	@ (800bfa4 <tcp_receive+0xf10>)
 800bf78:	681a      	ldr	r2, [r3, #0]
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bf7e:	6879      	ldr	r1, [r7, #4]
 800bf80:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800bf82:	440b      	add	r3, r1
 800bf84:	1ad3      	subs	r3, r2, r3
 800bf86:	3301      	adds	r3, #1
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	dd07      	ble.n	800bf9c <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	8b5b      	ldrh	r3, [r3, #26]
 800bf90:	f043 0302 	orr.w	r3, r3, #2
 800bf94:	b29a      	uxth	r2, r3
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800bf9a:	e7ff      	b.n	800bf9c <tcp_receive+0xf08>
 800bf9c:	bf00      	nop
 800bf9e:	3750      	adds	r7, #80	@ 0x50
 800bfa0:	46bd      	mov	sp, r7
 800bfa2:	bdb0      	pop	{r4, r5, r7, pc}
 800bfa4:	2000a820 	.word	0x2000a820
 800bfa8:	2000a800 	.word	0x2000a800
 800bfac:	2000a82a 	.word	0x2000a82a
 800bfb0:	080138dc 	.word	0x080138dc
 800bfb4:	08013c84 	.word	0x08013c84
 800bfb8:	08013928 	.word	0x08013928

0800bfbc <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800bfbc:	b480      	push	{r7}
 800bfbe:	b083      	sub	sp, #12
 800bfc0:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800bfc2:	4b15      	ldr	r3, [pc, #84]	@ (800c018 <tcp_get_next_optbyte+0x5c>)
 800bfc4:	881b      	ldrh	r3, [r3, #0]
 800bfc6:	1c5a      	adds	r2, r3, #1
 800bfc8:	b291      	uxth	r1, r2
 800bfca:	4a13      	ldr	r2, [pc, #76]	@ (800c018 <tcp_get_next_optbyte+0x5c>)
 800bfcc:	8011      	strh	r1, [r2, #0]
 800bfce:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800bfd0:	4b12      	ldr	r3, [pc, #72]	@ (800c01c <tcp_get_next_optbyte+0x60>)
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d004      	beq.n	800bfe2 <tcp_get_next_optbyte+0x26>
 800bfd8:	4b11      	ldr	r3, [pc, #68]	@ (800c020 <tcp_get_next_optbyte+0x64>)
 800bfda:	881b      	ldrh	r3, [r3, #0]
 800bfdc:	88fa      	ldrh	r2, [r7, #6]
 800bfde:	429a      	cmp	r2, r3
 800bfe0:	d208      	bcs.n	800bff4 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800bfe2:	4b10      	ldr	r3, [pc, #64]	@ (800c024 <tcp_get_next_optbyte+0x68>)
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	3314      	adds	r3, #20
 800bfe8:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800bfea:	88fb      	ldrh	r3, [r7, #6]
 800bfec:	683a      	ldr	r2, [r7, #0]
 800bfee:	4413      	add	r3, r2
 800bff0:	781b      	ldrb	r3, [r3, #0]
 800bff2:	e00b      	b.n	800c00c <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800bff4:	88fb      	ldrh	r3, [r7, #6]
 800bff6:	b2da      	uxtb	r2, r3
 800bff8:	4b09      	ldr	r3, [pc, #36]	@ (800c020 <tcp_get_next_optbyte+0x64>)
 800bffa:	881b      	ldrh	r3, [r3, #0]
 800bffc:	b2db      	uxtb	r3, r3
 800bffe:	1ad3      	subs	r3, r2, r3
 800c000:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800c002:	4b06      	ldr	r3, [pc, #24]	@ (800c01c <tcp_get_next_optbyte+0x60>)
 800c004:	681a      	ldr	r2, [r3, #0]
 800c006:	797b      	ldrb	r3, [r7, #5]
 800c008:	4413      	add	r3, r2
 800c00a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c00c:	4618      	mov	r0, r3
 800c00e:	370c      	adds	r7, #12
 800c010:	46bd      	mov	sp, r7
 800c012:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c016:	4770      	bx	lr
 800c018:	2000a81c 	.word	0x2000a81c
 800c01c:	2000a818 	.word	0x2000a818
 800c020:	2000a816 	.word	0x2000a816
 800c024:	2000a810 	.word	0x2000a810

0800c028 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800c028:	b580      	push	{r7, lr}
 800c02a:	b084      	sub	sp, #16
 800c02c:	af00      	add	r7, sp, #0
 800c02e:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	2b00      	cmp	r3, #0
 800c034:	d106      	bne.n	800c044 <tcp_parseopt+0x1c>
 800c036:	4b32      	ldr	r3, [pc, #200]	@ (800c100 <tcp_parseopt+0xd8>)
 800c038:	f240 727d 	movw	r2, #1917	@ 0x77d
 800c03c:	4931      	ldr	r1, [pc, #196]	@ (800c104 <tcp_parseopt+0xdc>)
 800c03e:	4832      	ldr	r0, [pc, #200]	@ (800c108 <tcp_parseopt+0xe0>)
 800c040:	f005 f99e 	bl	8011380 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800c044:	4b31      	ldr	r3, [pc, #196]	@ (800c10c <tcp_parseopt+0xe4>)
 800c046:	881b      	ldrh	r3, [r3, #0]
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d056      	beq.n	800c0fa <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800c04c:	4b30      	ldr	r3, [pc, #192]	@ (800c110 <tcp_parseopt+0xe8>)
 800c04e:	2200      	movs	r2, #0
 800c050:	801a      	strh	r2, [r3, #0]
 800c052:	e046      	b.n	800c0e2 <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 800c054:	f7ff ffb2 	bl	800bfbc <tcp_get_next_optbyte>
 800c058:	4603      	mov	r3, r0
 800c05a:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800c05c:	7bfb      	ldrb	r3, [r7, #15]
 800c05e:	2b02      	cmp	r3, #2
 800c060:	d006      	beq.n	800c070 <tcp_parseopt+0x48>
 800c062:	2b02      	cmp	r3, #2
 800c064:	dc2a      	bgt.n	800c0bc <tcp_parseopt+0x94>
 800c066:	2b00      	cmp	r3, #0
 800c068:	d042      	beq.n	800c0f0 <tcp_parseopt+0xc8>
 800c06a:	2b01      	cmp	r3, #1
 800c06c:	d038      	beq.n	800c0e0 <tcp_parseopt+0xb8>
 800c06e:	e025      	b.n	800c0bc <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800c070:	f7ff ffa4 	bl	800bfbc <tcp_get_next_optbyte>
 800c074:	4603      	mov	r3, r0
 800c076:	2b04      	cmp	r3, #4
 800c078:	d13c      	bne.n	800c0f4 <tcp_parseopt+0xcc>
 800c07a:	4b25      	ldr	r3, [pc, #148]	@ (800c110 <tcp_parseopt+0xe8>)
 800c07c:	881b      	ldrh	r3, [r3, #0]
 800c07e:	3301      	adds	r3, #1
 800c080:	4a22      	ldr	r2, [pc, #136]	@ (800c10c <tcp_parseopt+0xe4>)
 800c082:	8812      	ldrh	r2, [r2, #0]
 800c084:	4293      	cmp	r3, r2
 800c086:	da35      	bge.n	800c0f4 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800c088:	f7ff ff98 	bl	800bfbc <tcp_get_next_optbyte>
 800c08c:	4603      	mov	r3, r0
 800c08e:	021b      	lsls	r3, r3, #8
 800c090:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800c092:	f7ff ff93 	bl	800bfbc <tcp_get_next_optbyte>
 800c096:	4603      	mov	r3, r0
 800c098:	461a      	mov	r2, r3
 800c09a:	89bb      	ldrh	r3, [r7, #12]
 800c09c:	4313      	orrs	r3, r2
 800c09e:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800c0a0:	89bb      	ldrh	r3, [r7, #12]
 800c0a2:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 800c0a6:	d804      	bhi.n	800c0b2 <tcp_parseopt+0x8a>
 800c0a8:	89bb      	ldrh	r3, [r7, #12]
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d001      	beq.n	800c0b2 <tcp_parseopt+0x8a>
 800c0ae:	89ba      	ldrh	r2, [r7, #12]
 800c0b0:	e001      	b.n	800c0b6 <tcp_parseopt+0x8e>
 800c0b2:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 800c0ba:	e012      	b.n	800c0e2 <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800c0bc:	f7ff ff7e 	bl	800bfbc <tcp_get_next_optbyte>
 800c0c0:	4603      	mov	r3, r0
 800c0c2:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800c0c4:	7afb      	ldrb	r3, [r7, #11]
 800c0c6:	2b01      	cmp	r3, #1
 800c0c8:	d916      	bls.n	800c0f8 <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800c0ca:	7afb      	ldrb	r3, [r7, #11]
 800c0cc:	b29a      	uxth	r2, r3
 800c0ce:	4b10      	ldr	r3, [pc, #64]	@ (800c110 <tcp_parseopt+0xe8>)
 800c0d0:	881b      	ldrh	r3, [r3, #0]
 800c0d2:	4413      	add	r3, r2
 800c0d4:	b29b      	uxth	r3, r3
 800c0d6:	3b02      	subs	r3, #2
 800c0d8:	b29a      	uxth	r2, r3
 800c0da:	4b0d      	ldr	r3, [pc, #52]	@ (800c110 <tcp_parseopt+0xe8>)
 800c0dc:	801a      	strh	r2, [r3, #0]
 800c0de:	e000      	b.n	800c0e2 <tcp_parseopt+0xba>
          break;
 800c0e0:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800c0e2:	4b0b      	ldr	r3, [pc, #44]	@ (800c110 <tcp_parseopt+0xe8>)
 800c0e4:	881a      	ldrh	r2, [r3, #0]
 800c0e6:	4b09      	ldr	r3, [pc, #36]	@ (800c10c <tcp_parseopt+0xe4>)
 800c0e8:	881b      	ldrh	r3, [r3, #0]
 800c0ea:	429a      	cmp	r2, r3
 800c0ec:	d3b2      	bcc.n	800c054 <tcp_parseopt+0x2c>
 800c0ee:	e004      	b.n	800c0fa <tcp_parseopt+0xd2>
          return;
 800c0f0:	bf00      	nop
 800c0f2:	e002      	b.n	800c0fa <tcp_parseopt+0xd2>
            return;
 800c0f4:	bf00      	nop
 800c0f6:	e000      	b.n	800c0fa <tcp_parseopt+0xd2>
            return;
 800c0f8:	bf00      	nop
      }
    }
  }
}
 800c0fa:	3710      	adds	r7, #16
 800c0fc:	46bd      	mov	sp, r7
 800c0fe:	bd80      	pop	{r7, pc}
 800c100:	080138dc 	.word	0x080138dc
 800c104:	08013d40 	.word	0x08013d40
 800c108:	08013928 	.word	0x08013928
 800c10c:	2000a814 	.word	0x2000a814
 800c110:	2000a81c 	.word	0x2000a81c

0800c114 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800c114:	b480      	push	{r7}
 800c116:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800c118:	4b05      	ldr	r3, [pc, #20]	@ (800c130 <tcp_trigger_input_pcb_close+0x1c>)
 800c11a:	781b      	ldrb	r3, [r3, #0]
 800c11c:	f043 0310 	orr.w	r3, r3, #16
 800c120:	b2da      	uxtb	r2, r3
 800c122:	4b03      	ldr	r3, [pc, #12]	@ (800c130 <tcp_trigger_input_pcb_close+0x1c>)
 800c124:	701a      	strb	r2, [r3, #0]
}
 800c126:	bf00      	nop
 800c128:	46bd      	mov	sp, r7
 800c12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c12e:	4770      	bx	lr
 800c130:	2000a82d 	.word	0x2000a82d

0800c134 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800c134:	b580      	push	{r7, lr}
 800c136:	b084      	sub	sp, #16
 800c138:	af00      	add	r7, sp, #0
 800c13a:	60f8      	str	r0, [r7, #12]
 800c13c:	60b9      	str	r1, [r7, #8]
 800c13e:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	2b00      	cmp	r3, #0
 800c144:	d00a      	beq.n	800c15c <tcp_route+0x28>
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	7a1b      	ldrb	r3, [r3, #8]
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d006      	beq.n	800c15c <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	7a1b      	ldrb	r3, [r3, #8]
 800c152:	4618      	mov	r0, r3
 800c154:	f7fb f81a 	bl	800718c <netif_get_by_index>
 800c158:	4603      	mov	r3, r0
 800c15a:	e003      	b.n	800c164 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800c15c:	6878      	ldr	r0, [r7, #4]
 800c15e:	f003 fe23 	bl	800fda8 <ip4_route>
 800c162:	4603      	mov	r3, r0
  }
}
 800c164:	4618      	mov	r0, r3
 800c166:	3710      	adds	r7, #16
 800c168:	46bd      	mov	sp, r7
 800c16a:	bd80      	pop	{r7, pc}

0800c16c <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800c16c:	b590      	push	{r4, r7, lr}
 800c16e:	b087      	sub	sp, #28
 800c170:	af00      	add	r7, sp, #0
 800c172:	60f8      	str	r0, [r7, #12]
 800c174:	60b9      	str	r1, [r7, #8]
 800c176:	603b      	str	r3, [r7, #0]
 800c178:	4613      	mov	r3, r2
 800c17a:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	2b00      	cmp	r3, #0
 800c180:	d105      	bne.n	800c18e <tcp_create_segment+0x22>
 800c182:	4b43      	ldr	r3, [pc, #268]	@ (800c290 <tcp_create_segment+0x124>)
 800c184:	22a3      	movs	r2, #163	@ 0xa3
 800c186:	4943      	ldr	r1, [pc, #268]	@ (800c294 <tcp_create_segment+0x128>)
 800c188:	4843      	ldr	r0, [pc, #268]	@ (800c298 <tcp_create_segment+0x12c>)
 800c18a:	f005 f8f9 	bl	8011380 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800c18e:	68bb      	ldr	r3, [r7, #8]
 800c190:	2b00      	cmp	r3, #0
 800c192:	d105      	bne.n	800c1a0 <tcp_create_segment+0x34>
 800c194:	4b3e      	ldr	r3, [pc, #248]	@ (800c290 <tcp_create_segment+0x124>)
 800c196:	22a4      	movs	r2, #164	@ 0xa4
 800c198:	4940      	ldr	r1, [pc, #256]	@ (800c29c <tcp_create_segment+0x130>)
 800c19a:	483f      	ldr	r0, [pc, #252]	@ (800c298 <tcp_create_segment+0x12c>)
 800c19c:	f005 f8f0 	bl	8011380 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800c1a0:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800c1a4:	009b      	lsls	r3, r3, #2
 800c1a6:	b2db      	uxtb	r3, r3
 800c1a8:	f003 0304 	and.w	r3, r3, #4
 800c1ac:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800c1ae:	2003      	movs	r0, #3
 800c1b0:	f7fa fc66 	bl	8006a80 <memp_malloc>
 800c1b4:	6138      	str	r0, [r7, #16]
 800c1b6:	693b      	ldr	r3, [r7, #16]
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d104      	bne.n	800c1c6 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800c1bc:	68b8      	ldr	r0, [r7, #8]
 800c1be:	f7fb fb45 	bl	800784c <pbuf_free>
    return NULL;
 800c1c2:	2300      	movs	r3, #0
 800c1c4:	e060      	b.n	800c288 <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 800c1c6:	693b      	ldr	r3, [r7, #16]
 800c1c8:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800c1cc:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800c1ce:	693b      	ldr	r3, [r7, #16]
 800c1d0:	2200      	movs	r2, #0
 800c1d2:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800c1d4:	693b      	ldr	r3, [r7, #16]
 800c1d6:	68ba      	ldr	r2, [r7, #8]
 800c1d8:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800c1da:	68bb      	ldr	r3, [r7, #8]
 800c1dc:	891a      	ldrh	r2, [r3, #8]
 800c1de:	7dfb      	ldrb	r3, [r7, #23]
 800c1e0:	b29b      	uxth	r3, r3
 800c1e2:	429a      	cmp	r2, r3
 800c1e4:	d205      	bcs.n	800c1f2 <tcp_create_segment+0x86>
 800c1e6:	4b2a      	ldr	r3, [pc, #168]	@ (800c290 <tcp_create_segment+0x124>)
 800c1e8:	22b0      	movs	r2, #176	@ 0xb0
 800c1ea:	492d      	ldr	r1, [pc, #180]	@ (800c2a0 <tcp_create_segment+0x134>)
 800c1ec:	482a      	ldr	r0, [pc, #168]	@ (800c298 <tcp_create_segment+0x12c>)
 800c1ee:	f005 f8c7 	bl	8011380 <iprintf>
  seg->len = p->tot_len - optlen;
 800c1f2:	68bb      	ldr	r3, [r7, #8]
 800c1f4:	891a      	ldrh	r2, [r3, #8]
 800c1f6:	7dfb      	ldrb	r3, [r7, #23]
 800c1f8:	b29b      	uxth	r3, r3
 800c1fa:	1ad3      	subs	r3, r2, r3
 800c1fc:	b29a      	uxth	r2, r3
 800c1fe:	693b      	ldr	r3, [r7, #16]
 800c200:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800c202:	2114      	movs	r1, #20
 800c204:	68b8      	ldr	r0, [r7, #8]
 800c206:	f7fb fa8b 	bl	8007720 <pbuf_add_header>
 800c20a:	4603      	mov	r3, r0
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d004      	beq.n	800c21a <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800c210:	6938      	ldr	r0, [r7, #16]
 800c212:	f7fc ffec 	bl	80091ee <tcp_seg_free>
    return NULL;
 800c216:	2300      	movs	r3, #0
 800c218:	e036      	b.n	800c288 <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800c21a:	693b      	ldr	r3, [r7, #16]
 800c21c:	685b      	ldr	r3, [r3, #4]
 800c21e:	685a      	ldr	r2, [r3, #4]
 800c220:	693b      	ldr	r3, [r7, #16]
 800c222:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	8ada      	ldrh	r2, [r3, #22]
 800c228:	693b      	ldr	r3, [r7, #16]
 800c22a:	68dc      	ldr	r4, [r3, #12]
 800c22c:	4610      	mov	r0, r2
 800c22e:	f7f9 ffaf 	bl	8006190 <lwip_htons>
 800c232:	4603      	mov	r3, r0
 800c234:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	8b1a      	ldrh	r2, [r3, #24]
 800c23a:	693b      	ldr	r3, [r7, #16]
 800c23c:	68dc      	ldr	r4, [r3, #12]
 800c23e:	4610      	mov	r0, r2
 800c240:	f7f9 ffa6 	bl	8006190 <lwip_htons>
 800c244:	4603      	mov	r3, r0
 800c246:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800c248:	693b      	ldr	r3, [r7, #16]
 800c24a:	68dc      	ldr	r4, [r3, #12]
 800c24c:	6838      	ldr	r0, [r7, #0]
 800c24e:	f7f9 ffb4 	bl	80061ba <lwip_htonl>
 800c252:	4603      	mov	r3, r0
 800c254:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800c256:	7dfb      	ldrb	r3, [r7, #23]
 800c258:	089b      	lsrs	r3, r3, #2
 800c25a:	b2db      	uxtb	r3, r3
 800c25c:	3305      	adds	r3, #5
 800c25e:	b29b      	uxth	r3, r3
 800c260:	031b      	lsls	r3, r3, #12
 800c262:	b29a      	uxth	r2, r3
 800c264:	79fb      	ldrb	r3, [r7, #7]
 800c266:	b29b      	uxth	r3, r3
 800c268:	4313      	orrs	r3, r2
 800c26a:	b29a      	uxth	r2, r3
 800c26c:	693b      	ldr	r3, [r7, #16]
 800c26e:	68dc      	ldr	r4, [r3, #12]
 800c270:	4610      	mov	r0, r2
 800c272:	f7f9 ff8d 	bl	8006190 <lwip_htons>
 800c276:	4603      	mov	r3, r0
 800c278:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800c27a:	693b      	ldr	r3, [r7, #16]
 800c27c:	68db      	ldr	r3, [r3, #12]
 800c27e:	2200      	movs	r2, #0
 800c280:	749a      	strb	r2, [r3, #18]
 800c282:	2200      	movs	r2, #0
 800c284:	74da      	strb	r2, [r3, #19]
  return seg;
 800c286:	693b      	ldr	r3, [r7, #16]
}
 800c288:	4618      	mov	r0, r3
 800c28a:	371c      	adds	r7, #28
 800c28c:	46bd      	mov	sp, r7
 800c28e:	bd90      	pop	{r4, r7, pc}
 800c290:	08013d5c 	.word	0x08013d5c
 800c294:	08013d90 	.word	0x08013d90
 800c298:	08013db0 	.word	0x08013db0
 800c29c:	08013dd8 	.word	0x08013dd8
 800c2a0:	08013dfc 	.word	0x08013dfc

0800c2a4 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 800c2a4:	b580      	push	{r7, lr}
 800c2a6:	b086      	sub	sp, #24
 800c2a8:	af00      	add	r7, sp, #0
 800c2aa:	607b      	str	r3, [r7, #4]
 800c2ac:	4603      	mov	r3, r0
 800c2ae:	73fb      	strb	r3, [r7, #15]
 800c2b0:	460b      	mov	r3, r1
 800c2b2:	81bb      	strh	r3, [r7, #12]
 800c2b4:	4613      	mov	r3, r2
 800c2b6:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 800c2b8:	89bb      	ldrh	r3, [r7, #12]
 800c2ba:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	d105      	bne.n	800c2ce <tcp_pbuf_prealloc+0x2a>
 800c2c2:	4b30      	ldr	r3, [pc, #192]	@ (800c384 <tcp_pbuf_prealloc+0xe0>)
 800c2c4:	22e8      	movs	r2, #232	@ 0xe8
 800c2c6:	4930      	ldr	r1, [pc, #192]	@ (800c388 <tcp_pbuf_prealloc+0xe4>)
 800c2c8:	4830      	ldr	r0, [pc, #192]	@ (800c38c <tcp_pbuf_prealloc+0xe8>)
 800c2ca:	f005 f859 	bl	8011380 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 800c2ce:	6a3b      	ldr	r3, [r7, #32]
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d105      	bne.n	800c2e0 <tcp_pbuf_prealloc+0x3c>
 800c2d4:	4b2b      	ldr	r3, [pc, #172]	@ (800c384 <tcp_pbuf_prealloc+0xe0>)
 800c2d6:	22e9      	movs	r2, #233	@ 0xe9
 800c2d8:	492d      	ldr	r1, [pc, #180]	@ (800c390 <tcp_pbuf_prealloc+0xec>)
 800c2da:	482c      	ldr	r0, [pc, #176]	@ (800c38c <tcp_pbuf_prealloc+0xe8>)
 800c2dc:	f005 f850 	bl	8011380 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 800c2e0:	89ba      	ldrh	r2, [r7, #12]
 800c2e2:	897b      	ldrh	r3, [r7, #10]
 800c2e4:	429a      	cmp	r2, r3
 800c2e6:	d221      	bcs.n	800c32c <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800c2e8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800c2ec:	f003 0302 	and.w	r3, r3, #2
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d111      	bne.n	800c318 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 800c2f4:	6a3b      	ldr	r3, [r7, #32]
 800c2f6:	8b5b      	ldrh	r3, [r3, #26]
 800c2f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d115      	bne.n	800c32c <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 800c300:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800c304:	2b00      	cmp	r3, #0
 800c306:	d007      	beq.n	800c318 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 800c308:	6a3b      	ldr	r3, [r7, #32]
 800c30a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
         (!first_seg ||
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d103      	bne.n	800c318 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 800c310:	6a3b      	ldr	r3, [r7, #32]
 800c312:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
          pcb->unsent != NULL ||
 800c314:	2b00      	cmp	r3, #0
 800c316:	d009      	beq.n	800c32c <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 800c318:	89bb      	ldrh	r3, [r7, #12]
 800c31a:	f203 231b 	addw	r3, r3, #539	@ 0x21b
 800c31e:	f023 0203 	bic.w	r2, r3, #3
 800c322:	897b      	ldrh	r3, [r7, #10]
 800c324:	4293      	cmp	r3, r2
 800c326:	bf28      	it	cs
 800c328:	4613      	movcs	r3, r2
 800c32a:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 800c32c:	8af9      	ldrh	r1, [r7, #22]
 800c32e:	7bfb      	ldrb	r3, [r7, #15]
 800c330:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800c334:	4618      	mov	r0, r3
 800c336:	f7fa ffa5 	bl	8007284 <pbuf_alloc>
 800c33a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800c33c:	693b      	ldr	r3, [r7, #16]
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d101      	bne.n	800c346 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 800c342:	2300      	movs	r3, #0
 800c344:	e019      	b.n	800c37a <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 800c346:	693b      	ldr	r3, [r7, #16]
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d006      	beq.n	800c35c <tcp_pbuf_prealloc+0xb8>
 800c34e:	4b0d      	ldr	r3, [pc, #52]	@ (800c384 <tcp_pbuf_prealloc+0xe0>)
 800c350:	f240 120b 	movw	r2, #267	@ 0x10b
 800c354:	490f      	ldr	r1, [pc, #60]	@ (800c394 <tcp_pbuf_prealloc+0xf0>)
 800c356:	480d      	ldr	r0, [pc, #52]	@ (800c38c <tcp_pbuf_prealloc+0xe8>)
 800c358:	f005 f812 	bl	8011380 <iprintf>
  *oversize = p->len - length;
 800c35c:	693b      	ldr	r3, [r7, #16]
 800c35e:	895a      	ldrh	r2, [r3, #10]
 800c360:	89bb      	ldrh	r3, [r7, #12]
 800c362:	1ad3      	subs	r3, r2, r3
 800c364:	b29a      	uxth	r2, r3
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 800c36a:	693b      	ldr	r3, [r7, #16]
 800c36c:	89ba      	ldrh	r2, [r7, #12]
 800c36e:	811a      	strh	r2, [r3, #8]
 800c370:	693b      	ldr	r3, [r7, #16]
 800c372:	891a      	ldrh	r2, [r3, #8]
 800c374:	693b      	ldr	r3, [r7, #16]
 800c376:	815a      	strh	r2, [r3, #10]
  return p;
 800c378:	693b      	ldr	r3, [r7, #16]
}
 800c37a:	4618      	mov	r0, r3
 800c37c:	3718      	adds	r7, #24
 800c37e:	46bd      	mov	sp, r7
 800c380:	bd80      	pop	{r7, pc}
 800c382:	bf00      	nop
 800c384:	08013d5c 	.word	0x08013d5c
 800c388:	08013e14 	.word	0x08013e14
 800c38c:	08013db0 	.word	0x08013db0
 800c390:	08013e38 	.word	0x08013e38
 800c394:	08013e58 	.word	0x08013e58

0800c398 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 800c398:	b580      	push	{r7, lr}
 800c39a:	b082      	sub	sp, #8
 800c39c:	af00      	add	r7, sp, #0
 800c39e:	6078      	str	r0, [r7, #4]
 800c3a0:	460b      	mov	r3, r1
 800c3a2:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	d106      	bne.n	800c3b8 <tcp_write_checks+0x20>
 800c3aa:	4b33      	ldr	r3, [pc, #204]	@ (800c478 <tcp_write_checks+0xe0>)
 800c3ac:	f240 1233 	movw	r2, #307	@ 0x133
 800c3b0:	4932      	ldr	r1, [pc, #200]	@ (800c47c <tcp_write_checks+0xe4>)
 800c3b2:	4833      	ldr	r0, [pc, #204]	@ (800c480 <tcp_write_checks+0xe8>)
 800c3b4:	f004 ffe4 	bl	8011380 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	7d1b      	ldrb	r3, [r3, #20]
 800c3bc:	2b04      	cmp	r3, #4
 800c3be:	d00e      	beq.n	800c3de <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 800c3c4:	2b07      	cmp	r3, #7
 800c3c6:	d00a      	beq.n	800c3de <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 800c3cc:	2b02      	cmp	r3, #2
 800c3ce:	d006      	beq.n	800c3de <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 800c3d4:	2b03      	cmp	r3, #3
 800c3d6:	d002      	beq.n	800c3de <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 800c3d8:	f06f 030a 	mvn.w	r3, #10
 800c3dc:	e048      	b.n	800c470 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 800c3de:	887b      	ldrh	r3, [r7, #2]
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	d101      	bne.n	800c3e8 <tcp_write_checks+0x50>
    return ERR_OK;
 800c3e4:	2300      	movs	r3, #0
 800c3e6:	e043      	b.n	800c470 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800c3ee:	887a      	ldrh	r2, [r7, #2]
 800c3f0:	429a      	cmp	r2, r3
 800c3f2:	d909      	bls.n	800c408 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	8b5b      	ldrh	r3, [r3, #26]
 800c3f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c3fc:	b29a      	uxth	r2, r3
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800c402:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c406:	e033      	b.n	800c470 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800c40e:	2b08      	cmp	r3, #8
 800c410:	d909      	bls.n	800c426 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	8b5b      	ldrh	r3, [r3, #26]
 800c416:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c41a:	b29a      	uxth	r2, r3
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800c420:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c424:	e024      	b.n	800c470 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d00f      	beq.n	800c450 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c434:	2b00      	cmp	r3, #0
 800c436:	d11a      	bne.n	800c46e <tcp_write_checks+0xd6>
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d116      	bne.n	800c46e <tcp_write_checks+0xd6>
 800c440:	4b0d      	ldr	r3, [pc, #52]	@ (800c478 <tcp_write_checks+0xe0>)
 800c442:	f240 1255 	movw	r2, #341	@ 0x155
 800c446:	490f      	ldr	r1, [pc, #60]	@ (800c484 <tcp_write_checks+0xec>)
 800c448:	480d      	ldr	r0, [pc, #52]	@ (800c480 <tcp_write_checks+0xe8>)
 800c44a:	f004 ff99 	bl	8011380 <iprintf>
 800c44e:	e00e      	b.n	800c46e <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c454:	2b00      	cmp	r3, #0
 800c456:	d103      	bne.n	800c460 <tcp_write_checks+0xc8>
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	d006      	beq.n	800c46e <tcp_write_checks+0xd6>
 800c460:	4b05      	ldr	r3, [pc, #20]	@ (800c478 <tcp_write_checks+0xe0>)
 800c462:	f44f 72ac 	mov.w	r2, #344	@ 0x158
 800c466:	4908      	ldr	r1, [pc, #32]	@ (800c488 <tcp_write_checks+0xf0>)
 800c468:	4805      	ldr	r0, [pc, #20]	@ (800c480 <tcp_write_checks+0xe8>)
 800c46a:	f004 ff89 	bl	8011380 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 800c46e:	2300      	movs	r3, #0
}
 800c470:	4618      	mov	r0, r3
 800c472:	3708      	adds	r7, #8
 800c474:	46bd      	mov	sp, r7
 800c476:	bd80      	pop	{r7, pc}
 800c478:	08013d5c 	.word	0x08013d5c
 800c47c:	08013e6c 	.word	0x08013e6c
 800c480:	08013db0 	.word	0x08013db0
 800c484:	08013e8c 	.word	0x08013e8c
 800c488:	08013ec8 	.word	0x08013ec8

0800c48c <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 800c48c:	b590      	push	{r4, r7, lr}
 800c48e:	b09b      	sub	sp, #108	@ 0x6c
 800c490:	af04      	add	r7, sp, #16
 800c492:	60f8      	str	r0, [r7, #12]
 800c494:	60b9      	str	r1, [r7, #8]
 800c496:	4611      	mov	r1, r2
 800c498:	461a      	mov	r2, r3
 800c49a:	460b      	mov	r3, r1
 800c49c:	80fb      	strh	r3, [r7, #6]
 800c49e:	4613      	mov	r3, r2
 800c4a0:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 800c4a2:	2300      	movs	r3, #0
 800c4a4:	657b      	str	r3, [r7, #84]	@ 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800c4a6:	2300      	movs	r3, #0
 800c4a8:	653b      	str	r3, [r7, #80]	@ 0x50
 800c4aa:	2300      	movs	r3, #0
 800c4ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c4ae:	2300      	movs	r3, #0
 800c4b0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c4b2:	2300      	movs	r3, #0
 800c4b4:	647b      	str	r3, [r7, #68]	@ 0x44
  u16_t pos = 0; /* position in 'arg' data */
 800c4b6:	2300      	movs	r3, #0
 800c4b8:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 800c4bc:	2300      	movs	r3, #0
 800c4be:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 800c4c2:	2300      	movs	r3, #0
 800c4c4:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 800c4c6:	2300      	movs	r3, #0
 800c4c8:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 800c4ca:	2300      	movs	r3, #0
 800c4cc:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 800c4ce:	68fb      	ldr	r3, [r7, #12]
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d109      	bne.n	800c4e8 <tcp_write+0x5c>
 800c4d4:	4ba4      	ldr	r3, [pc, #656]	@ (800c768 <tcp_write+0x2dc>)
 800c4d6:	f44f 72cf 	mov.w	r2, #414	@ 0x19e
 800c4da:	49a4      	ldr	r1, [pc, #656]	@ (800c76c <tcp_write+0x2e0>)
 800c4dc:	48a4      	ldr	r0, [pc, #656]	@ (800c770 <tcp_write+0x2e4>)
 800c4de:	f004 ff4f 	bl	8011380 <iprintf>
 800c4e2:	f06f 030f 	mvn.w	r3, #15
 800c4e6:	e32a      	b.n	800cb3e <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 800c4e8:	68fb      	ldr	r3, [r7, #12]
 800c4ea:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c4ee:	085b      	lsrs	r3, r3, #1
 800c4f0:	b29a      	uxth	r2, r3
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800c4f6:	4293      	cmp	r3, r2
 800c4f8:	bf28      	it	cs
 800c4fa:	4613      	movcs	r3, r2
 800c4fc:	84bb      	strh	r3, [r7, #36]	@ 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 800c4fe:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c500:	2b00      	cmp	r3, #0
 800c502:	d102      	bne.n	800c50a <tcp_write+0x7e>
 800c504:	68fb      	ldr	r3, [r7, #12]
 800c506:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800c508:	e000      	b.n	800c50c <tcp_write+0x80>
 800c50a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c50c:	84bb      	strh	r3, [r7, #36]	@ 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800c50e:	68bb      	ldr	r3, [r7, #8]
 800c510:	2b00      	cmp	r3, #0
 800c512:	d109      	bne.n	800c528 <tcp_write+0x9c>
 800c514:	4b94      	ldr	r3, [pc, #592]	@ (800c768 <tcp_write+0x2dc>)
 800c516:	f240 12ad 	movw	r2, #429	@ 0x1ad
 800c51a:	4996      	ldr	r1, [pc, #600]	@ (800c774 <tcp_write+0x2e8>)
 800c51c:	4894      	ldr	r0, [pc, #592]	@ (800c770 <tcp_write+0x2e4>)
 800c51e:	f004 ff2f 	bl	8011380 <iprintf>
 800c522:	f06f 030f 	mvn.w	r3, #15
 800c526:	e30a      	b.n	800cb3e <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 800c528:	88fb      	ldrh	r3, [r7, #6]
 800c52a:	4619      	mov	r1, r3
 800c52c:	68f8      	ldr	r0, [r7, #12]
 800c52e:	f7ff ff33 	bl	800c398 <tcp_write_checks>
 800c532:	4603      	mov	r3, r0
 800c534:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (err != ERR_OK) {
 800c538:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d002      	beq.n	800c546 <tcp_write+0xba>
    return err;
 800c540:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 800c544:	e2fb      	b.n	800cb3e <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 800c546:	68fb      	ldr	r3, [r7, #12]
 800c548:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800c54c:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800c550:	2300      	movs	r3, #0
 800c552:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 800c556:	68fb      	ldr	r3, [r7, #12]
 800c558:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	f000 80f6 	beq.w	800c74c <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800c560:	68fb      	ldr	r3, [r7, #12]
 800c562:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c564:	653b      	str	r3, [r7, #80]	@ 0x50
 800c566:	e002      	b.n	800c56e <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 800c568:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	653b      	str	r3, [r7, #80]	@ 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800c56e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	2b00      	cmp	r3, #0
 800c574:	d1f8      	bne.n	800c568 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800c576:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c578:	7a9b      	ldrb	r3, [r3, #10]
 800c57a:	009b      	lsls	r3, r3, #2
 800c57c:	b29b      	uxth	r3, r3
 800c57e:	f003 0304 	and.w	r3, r3, #4
 800c582:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800c584:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800c586:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c588:	891b      	ldrh	r3, [r3, #8]
 800c58a:	4619      	mov	r1, r3
 800c58c:	8c3b      	ldrh	r3, [r7, #32]
 800c58e:	440b      	add	r3, r1
 800c590:	429a      	cmp	r2, r3
 800c592:	da06      	bge.n	800c5a2 <tcp_write+0x116>
 800c594:	4b74      	ldr	r3, [pc, #464]	@ (800c768 <tcp_write+0x2dc>)
 800c596:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 800c59a:	4977      	ldr	r1, [pc, #476]	@ (800c778 <tcp_write+0x2ec>)
 800c59c:	4874      	ldr	r0, [pc, #464]	@ (800c770 <tcp_write+0x2e4>)
 800c59e:	f004 feef 	bl	8011380 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 800c5a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c5a4:	891a      	ldrh	r2, [r3, #8]
 800c5a6:	8c3b      	ldrh	r3, [r7, #32]
 800c5a8:	4413      	add	r3, r2
 800c5aa:	b29b      	uxth	r3, r3
 800c5ac:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800c5ae:	1ad3      	subs	r3, r2, r3
 800c5b0:	877b      	strh	r3, [r7, #58]	@ 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 800c5b2:	68fb      	ldr	r3, [r7, #12]
 800c5b4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800c5b8:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 800c5ba:	8a7b      	ldrh	r3, [r7, #18]
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d026      	beq.n	800c60e <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800c5c0:	8a7b      	ldrh	r3, [r7, #18]
 800c5c2:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800c5c4:	429a      	cmp	r2, r3
 800c5c6:	d206      	bcs.n	800c5d6 <tcp_write+0x14a>
 800c5c8:	4b67      	ldr	r3, [pc, #412]	@ (800c768 <tcp_write+0x2dc>)
 800c5ca:	f44f 72fc 	mov.w	r2, #504	@ 0x1f8
 800c5ce:	496b      	ldr	r1, [pc, #428]	@ (800c77c <tcp_write+0x2f0>)
 800c5d0:	4867      	ldr	r0, [pc, #412]	@ (800c770 <tcp_write+0x2e4>)
 800c5d2:	f004 fed5 	bl	8011380 <iprintf>
      seg = last_unsent;
 800c5d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c5d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800c5da:	8a7b      	ldrh	r3, [r7, #18]
 800c5dc:	88fa      	ldrh	r2, [r7, #6]
 800c5de:	4293      	cmp	r3, r2
 800c5e0:	bf28      	it	cs
 800c5e2:	4613      	movcs	r3, r2
 800c5e4:	b29b      	uxth	r3, r3
 800c5e6:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800c5e8:	4293      	cmp	r3, r2
 800c5ea:	bf28      	it	cs
 800c5ec:	4613      	movcs	r3, r2
 800c5ee:	87fb      	strh	r3, [r7, #62]	@ 0x3e
      pos += oversize_used;
 800c5f0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800c5f4:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800c5f6:	4413      	add	r3, r2
 800c5f8:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      oversize -= oversize_used;
 800c5fc:	8a7a      	ldrh	r2, [r7, #18]
 800c5fe:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800c600:	1ad3      	subs	r3, r2, r3
 800c602:	b29b      	uxth	r3, r3
 800c604:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 800c606:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800c608:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800c60a:	1ad3      	subs	r3, r2, r3
 800c60c:	877b      	strh	r3, [r7, #58]	@ 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800c60e:	8a7b      	ldrh	r3, [r7, #18]
 800c610:	2b00      	cmp	r3, #0
 800c612:	d00b      	beq.n	800c62c <tcp_write+0x1a0>
 800c614:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800c618:	88fb      	ldrh	r3, [r7, #6]
 800c61a:	429a      	cmp	r2, r3
 800c61c:	d006      	beq.n	800c62c <tcp_write+0x1a0>
 800c61e:	4b52      	ldr	r3, [pc, #328]	@ (800c768 <tcp_write+0x2dc>)
 800c620:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c624:	4956      	ldr	r1, [pc, #344]	@ (800c780 <tcp_write+0x2f4>)
 800c626:	4852      	ldr	r0, [pc, #328]	@ (800c770 <tcp_write+0x2e4>)
 800c628:	f004 feaa 	bl	8011380 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800c62c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800c630:	88fb      	ldrh	r3, [r7, #6]
 800c632:	429a      	cmp	r2, r3
 800c634:	f080 8167 	bcs.w	800c906 <tcp_write+0x47a>
 800c638:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	f000 8163 	beq.w	800c906 <tcp_write+0x47a>
 800c640:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c642:	891b      	ldrh	r3, [r3, #8]
 800c644:	2b00      	cmp	r3, #0
 800c646:	f000 815e 	beq.w	800c906 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 800c64a:	88fa      	ldrh	r2, [r7, #6]
 800c64c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800c650:	1ad2      	subs	r2, r2, r3
 800c652:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800c654:	4293      	cmp	r3, r2
 800c656:	bfa8      	it	ge
 800c658:	4613      	movge	r3, r2
 800c65a:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 800c65c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c65e:	64fb      	str	r3, [r7, #76]	@ 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800c660:	797b      	ldrb	r3, [r7, #5]
 800c662:	f003 0301 	and.w	r3, r3, #1
 800c666:	2b00      	cmp	r3, #0
 800c668:	d027      	beq.n	800c6ba <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 800c66a:	f107 0012 	add.w	r0, r7, #18
 800c66e:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800c670:	8bf9      	ldrh	r1, [r7, #30]
 800c672:	2301      	movs	r3, #1
 800c674:	9302      	str	r3, [sp, #8]
 800c676:	797b      	ldrb	r3, [r7, #5]
 800c678:	9301      	str	r3, [sp, #4]
 800c67a:	68fb      	ldr	r3, [r7, #12]
 800c67c:	9300      	str	r3, [sp, #0]
 800c67e:	4603      	mov	r3, r0
 800c680:	2000      	movs	r0, #0
 800c682:	f7ff fe0f 	bl	800c2a4 <tcp_pbuf_prealloc>
 800c686:	6578      	str	r0, [r7, #84]	@ 0x54
 800c688:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	f000 8225 	beq.w	800cada <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 800c690:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c692:	6858      	ldr	r0, [r3, #4]
 800c694:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800c698:	68ba      	ldr	r2, [r7, #8]
 800c69a:	4413      	add	r3, r2
 800c69c:	8bfa      	ldrh	r2, [r7, #30]
 800c69e:	4619      	mov	r1, r3
 800c6a0:	f004 ffc9 	bl	8011636 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 800c6a4:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800c6a6:	f7fb f959 	bl	800795c <pbuf_clen>
 800c6aa:	4603      	mov	r3, r0
 800c6ac:	461a      	mov	r2, r3
 800c6ae:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800c6b2:	4413      	add	r3, r2
 800c6b4:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 800c6b8:	e041      	b.n	800c73e <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 800c6ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c6bc:	685b      	ldr	r3, [r3, #4]
 800c6be:	637b      	str	r3, [r7, #52]	@ 0x34
 800c6c0:	e002      	b.n	800c6c8 <tcp_write+0x23c>
 800c6c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	637b      	str	r3, [r7, #52]	@ 0x34
 800c6c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c6ca:	681b      	ldr	r3, [r3, #0]
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	d1f8      	bne.n	800c6c2 <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800c6d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c6d2:	7b1b      	ldrb	r3, [r3, #12]
 800c6d4:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	d115      	bne.n	800c708 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800c6dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c6de:	685b      	ldr	r3, [r3, #4]
 800c6e0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c6e2:	8952      	ldrh	r2, [r2, #10]
 800c6e4:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800c6e6:	68ba      	ldr	r2, [r7, #8]
 800c6e8:	429a      	cmp	r2, r3
 800c6ea:	d10d      	bne.n	800c708 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800c6ec:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	d006      	beq.n	800c702 <tcp_write+0x276>
 800c6f4:	4b1c      	ldr	r3, [pc, #112]	@ (800c768 <tcp_write+0x2dc>)
 800c6f6:	f240 2231 	movw	r2, #561	@ 0x231
 800c6fa:	4922      	ldr	r1, [pc, #136]	@ (800c784 <tcp_write+0x2f8>)
 800c6fc:	481c      	ldr	r0, [pc, #112]	@ (800c770 <tcp_write+0x2e4>)
 800c6fe:	f004 fe3f 	bl	8011380 <iprintf>
          extendlen = seglen;
 800c702:	8bfb      	ldrh	r3, [r7, #30]
 800c704:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800c706:	e01a      	b.n	800c73e <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 800c708:	8bfb      	ldrh	r3, [r7, #30]
 800c70a:	2201      	movs	r2, #1
 800c70c:	4619      	mov	r1, r3
 800c70e:	2000      	movs	r0, #0
 800c710:	f7fa fdb8 	bl	8007284 <pbuf_alloc>
 800c714:	6578      	str	r0, [r7, #84]	@ 0x54
 800c716:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c718:	2b00      	cmp	r3, #0
 800c71a:	f000 81e0 	beq.w	800cade <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 800c71e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800c722:	68ba      	ldr	r2, [r7, #8]
 800c724:	441a      	add	r2, r3
 800c726:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c728:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 800c72a:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800c72c:	f7fb f916 	bl	800795c <pbuf_clen>
 800c730:	4603      	mov	r3, r0
 800c732:	461a      	mov	r2, r3
 800c734:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800c738:	4413      	add	r3, r2
 800c73a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 800c73e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800c742:	8bfb      	ldrh	r3, [r7, #30]
 800c744:	4413      	add	r3, r2
 800c746:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800c74a:	e0dc      	b.n	800c906 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800c74c:	68fb      	ldr	r3, [r7, #12]
 800c74e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800c752:	2b00      	cmp	r3, #0
 800c754:	f000 80d7 	beq.w	800c906 <tcp_write+0x47a>
 800c758:	4b03      	ldr	r3, [pc, #12]	@ (800c768 <tcp_write+0x2dc>)
 800c75a:	f240 224a 	movw	r2, #586	@ 0x24a
 800c75e:	490a      	ldr	r1, [pc, #40]	@ (800c788 <tcp_write+0x2fc>)
 800c760:	4803      	ldr	r0, [pc, #12]	@ (800c770 <tcp_write+0x2e4>)
 800c762:	f004 fe0d 	bl	8011380 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 800c766:	e0ce      	b.n	800c906 <tcp_write+0x47a>
 800c768:	08013d5c 	.word	0x08013d5c
 800c76c:	08013efc 	.word	0x08013efc
 800c770:	08013db0 	.word	0x08013db0
 800c774:	08013f14 	.word	0x08013f14
 800c778:	08013f48 	.word	0x08013f48
 800c77c:	08013f60 	.word	0x08013f60
 800c780:	08013f80 	.word	0x08013f80
 800c784:	08013fa0 	.word	0x08013fa0
 800c788:	08013fcc 	.word	0x08013fcc
    struct pbuf *p;
    u16_t left = len - pos;
 800c78c:	88fa      	ldrh	r2, [r7, #6]
 800c78e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800c792:	1ad3      	subs	r3, r2, r3
 800c794:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 800c796:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800c79a:	b29b      	uxth	r3, r3
 800c79c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800c79e:	1ad3      	subs	r3, r2, r3
 800c7a0:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 800c7a2:	8b7a      	ldrh	r2, [r7, #26]
 800c7a4:	8bbb      	ldrh	r3, [r7, #28]
 800c7a6:	4293      	cmp	r3, r2
 800c7a8:	bf28      	it	cs
 800c7aa:	4613      	movcs	r3, r2
 800c7ac:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800c7ae:	797b      	ldrb	r3, [r7, #5]
 800c7b0:	f003 0301 	and.w	r3, r3, #1
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	d036      	beq.n	800c826 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 800c7b8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800c7bc:	b29a      	uxth	r2, r3
 800c7be:	8b3b      	ldrh	r3, [r7, #24]
 800c7c0:	4413      	add	r3, r2
 800c7c2:	b299      	uxth	r1, r3
 800c7c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	bf0c      	ite	eq
 800c7ca:	2301      	moveq	r3, #1
 800c7cc:	2300      	movne	r3, #0
 800c7ce:	b2db      	uxtb	r3, r3
 800c7d0:	f107 0012 	add.w	r0, r7, #18
 800c7d4:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800c7d6:	9302      	str	r3, [sp, #8]
 800c7d8:	797b      	ldrb	r3, [r7, #5]
 800c7da:	9301      	str	r3, [sp, #4]
 800c7dc:	68fb      	ldr	r3, [r7, #12]
 800c7de:	9300      	str	r3, [sp, #0]
 800c7e0:	4603      	mov	r3, r0
 800c7e2:	2036      	movs	r0, #54	@ 0x36
 800c7e4:	f7ff fd5e 	bl	800c2a4 <tcp_pbuf_prealloc>
 800c7e8:	6338      	str	r0, [r7, #48]	@ 0x30
 800c7ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	f000 8178 	beq.w	800cae2 <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800c7f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7f4:	895b      	ldrh	r3, [r3, #10]
 800c7f6:	8b3a      	ldrh	r2, [r7, #24]
 800c7f8:	429a      	cmp	r2, r3
 800c7fa:	d906      	bls.n	800c80a <tcp_write+0x37e>
 800c7fc:	4b8c      	ldr	r3, [pc, #560]	@ (800ca30 <tcp_write+0x5a4>)
 800c7fe:	f240 2266 	movw	r2, #614	@ 0x266
 800c802:	498c      	ldr	r1, [pc, #560]	@ (800ca34 <tcp_write+0x5a8>)
 800c804:	488c      	ldr	r0, [pc, #560]	@ (800ca38 <tcp_write+0x5ac>)
 800c806:	f004 fdbb 	bl	8011380 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 800c80a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c80c:	685a      	ldr	r2, [r3, #4]
 800c80e:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800c812:	18d0      	adds	r0, r2, r3
 800c814:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800c818:	68ba      	ldr	r2, [r7, #8]
 800c81a:	4413      	add	r3, r2
 800c81c:	8b3a      	ldrh	r2, [r7, #24]
 800c81e:	4619      	mov	r1, r3
 800c820:	f004 ff09 	bl	8011636 <memcpy>
 800c824:	e02f      	b.n	800c886 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800c826:	8a7b      	ldrh	r3, [r7, #18]
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d006      	beq.n	800c83a <tcp_write+0x3ae>
 800c82c:	4b80      	ldr	r3, [pc, #512]	@ (800ca30 <tcp_write+0x5a4>)
 800c82e:	f240 2271 	movw	r2, #625	@ 0x271
 800c832:	4982      	ldr	r1, [pc, #520]	@ (800ca3c <tcp_write+0x5b0>)
 800c834:	4880      	ldr	r0, [pc, #512]	@ (800ca38 <tcp_write+0x5ac>)
 800c836:	f004 fda3 	bl	8011380 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 800c83a:	8b3b      	ldrh	r3, [r7, #24]
 800c83c:	2201      	movs	r2, #1
 800c83e:	4619      	mov	r1, r3
 800c840:	2036      	movs	r0, #54	@ 0x36
 800c842:	f7fa fd1f 	bl	8007284 <pbuf_alloc>
 800c846:	6178      	str	r0, [r7, #20]
 800c848:	697b      	ldr	r3, [r7, #20]
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	f000 814b 	beq.w	800cae6 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 800c850:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800c854:	68ba      	ldr	r2, [r7, #8]
 800c856:	441a      	add	r2, r3
 800c858:	697b      	ldr	r3, [r7, #20]
 800c85a:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800c85c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800c860:	b29b      	uxth	r3, r3
 800c862:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800c866:	4619      	mov	r1, r3
 800c868:	2036      	movs	r0, #54	@ 0x36
 800c86a:	f7fa fd0b 	bl	8007284 <pbuf_alloc>
 800c86e:	6338      	str	r0, [r7, #48]	@ 0x30
 800c870:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c872:	2b00      	cmp	r3, #0
 800c874:	d103      	bne.n	800c87e <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 800c876:	6978      	ldr	r0, [r7, #20]
 800c878:	f7fa ffe8 	bl	800784c <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 800c87c:	e136      	b.n	800caec <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 800c87e:	6979      	ldr	r1, [r7, #20]
 800c880:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c882:	f7fb f8a5 	bl	80079d0 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 800c886:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c888:	f7fb f868 	bl	800795c <pbuf_clen>
 800c88c:	4603      	mov	r3, r0
 800c88e:	461a      	mov	r2, r3
 800c890:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800c894:	4413      	add	r3, r2
 800c896:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 800c89a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800c89e:	2b09      	cmp	r3, #9
 800c8a0:	d903      	bls.n	800c8aa <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 800c8a2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c8a4:	f7fa ffd2 	bl	800784c <pbuf_free>
      goto memerr;
 800c8a8:	e120      	b.n	800caec <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800c8aa:	68fb      	ldr	r3, [r7, #12]
 800c8ac:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800c8ae:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800c8b2:	441a      	add	r2, r3
 800c8b4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c8b8:	9300      	str	r3, [sp, #0]
 800c8ba:	4613      	mov	r3, r2
 800c8bc:	2200      	movs	r2, #0
 800c8be:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800c8c0:	68f8      	ldr	r0, [r7, #12]
 800c8c2:	f7ff fc53 	bl	800c16c <tcp_create_segment>
 800c8c6:	64f8      	str	r0, [r7, #76]	@ 0x4c
 800c8c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	f000 810d 	beq.w	800caea <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 800c8d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d102      	bne.n	800c8dc <tcp_write+0x450>
      queue = seg;
 800c8d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c8d8:	647b      	str	r3, [r7, #68]	@ 0x44
 800c8da:	e00c      	b.n	800c8f6 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800c8dc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	d106      	bne.n	800c8f0 <tcp_write+0x464>
 800c8e2:	4b53      	ldr	r3, [pc, #332]	@ (800ca30 <tcp_write+0x5a4>)
 800c8e4:	f240 22ab 	movw	r2, #683	@ 0x2ab
 800c8e8:	4955      	ldr	r1, [pc, #340]	@ (800ca40 <tcp_write+0x5b4>)
 800c8ea:	4853      	ldr	r0, [pc, #332]	@ (800ca38 <tcp_write+0x5ac>)
 800c8ec:	f004 fd48 	bl	8011380 <iprintf>
      prev_seg->next = seg;
 800c8f0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c8f2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c8f4:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 800c8f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c8f8:	64bb      	str	r3, [r7, #72]	@ 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 800c8fa:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800c8fe:	8b3b      	ldrh	r3, [r7, #24]
 800c900:	4413      	add	r3, r2
 800c902:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  while (pos < len) {
 800c906:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800c90a:	88fb      	ldrh	r3, [r7, #6]
 800c90c:	429a      	cmp	r2, r3
 800c90e:	f4ff af3d 	bcc.w	800c78c <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 800c912:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800c914:	2b00      	cmp	r3, #0
 800c916:	d02c      	beq.n	800c972 <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 800c918:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c91a:	685b      	ldr	r3, [r3, #4]
 800c91c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c91e:	e01e      	b.n	800c95e <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 800c920:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c922:	891a      	ldrh	r2, [r3, #8]
 800c924:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800c926:	4413      	add	r3, r2
 800c928:	b29a      	uxth	r2, r3
 800c92a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c92c:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 800c92e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c930:	681b      	ldr	r3, [r3, #0]
 800c932:	2b00      	cmp	r3, #0
 800c934:	d110      	bne.n	800c958 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 800c936:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c938:	685b      	ldr	r3, [r3, #4]
 800c93a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c93c:	8952      	ldrh	r2, [r2, #10]
 800c93e:	4413      	add	r3, r2
 800c940:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 800c942:	68b9      	ldr	r1, [r7, #8]
 800c944:	4618      	mov	r0, r3
 800c946:	f004 fe76 	bl	8011636 <memcpy>
        p->len += oversize_used;
 800c94a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c94c:	895a      	ldrh	r2, [r3, #10]
 800c94e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800c950:	4413      	add	r3, r2
 800c952:	b29a      	uxth	r2, r3
 800c954:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c956:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 800c958:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c95e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c960:	2b00      	cmp	r3, #0
 800c962:	d1dd      	bne.n	800c920 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 800c964:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c966:	891a      	ldrh	r2, [r3, #8]
 800c968:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800c96a:	4413      	add	r3, r2
 800c96c:	b29a      	uxth	r2, r3
 800c96e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c970:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 800c972:	8a7a      	ldrh	r2, [r7, #18]
 800c974:	68fb      	ldr	r3, [r7, #12]
 800c976:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 800c97a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d018      	beq.n	800c9b2 <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 800c980:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c982:	2b00      	cmp	r3, #0
 800c984:	d106      	bne.n	800c994 <tcp_write+0x508>
 800c986:	4b2a      	ldr	r3, [pc, #168]	@ (800ca30 <tcp_write+0x5a4>)
 800c988:	f44f 7238 	mov.w	r2, #736	@ 0x2e0
 800c98c:	492d      	ldr	r1, [pc, #180]	@ (800ca44 <tcp_write+0x5b8>)
 800c98e:	482a      	ldr	r0, [pc, #168]	@ (800ca38 <tcp_write+0x5ac>)
 800c990:	f004 fcf6 	bl	8011380 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 800c994:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c996:	685b      	ldr	r3, [r3, #4]
 800c998:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800c99a:	4618      	mov	r0, r3
 800c99c:	f7fb f818 	bl	80079d0 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 800c9a0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c9a2:	891a      	ldrh	r2, [r3, #8]
 800c9a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c9a6:	891b      	ldrh	r3, [r3, #8]
 800c9a8:	4413      	add	r3, r2
 800c9aa:	b29a      	uxth	r2, r3
 800c9ac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c9ae:	811a      	strh	r2, [r3, #8]
 800c9b0:	e037      	b.n	800ca22 <tcp_write+0x596>
  } else if (extendlen > 0) {
 800c9b2:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d034      	beq.n	800ca22 <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800c9b8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	d003      	beq.n	800c9c6 <tcp_write+0x53a>
 800c9be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c9c0:	685b      	ldr	r3, [r3, #4]
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	d106      	bne.n	800c9d4 <tcp_write+0x548>
 800c9c6:	4b1a      	ldr	r3, [pc, #104]	@ (800ca30 <tcp_write+0x5a4>)
 800c9c8:	f240 22e6 	movw	r2, #742	@ 0x2e6
 800c9cc:	491e      	ldr	r1, [pc, #120]	@ (800ca48 <tcp_write+0x5bc>)
 800c9ce:	481a      	ldr	r0, [pc, #104]	@ (800ca38 <tcp_write+0x5ac>)
 800c9d0:	f004 fcd6 	bl	8011380 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800c9d4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c9d6:	685b      	ldr	r3, [r3, #4]
 800c9d8:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c9da:	e009      	b.n	800c9f0 <tcp_write+0x564>
      p->tot_len += extendlen;
 800c9dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c9de:	891a      	ldrh	r2, [r3, #8]
 800c9e0:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800c9e2:	4413      	add	r3, r2
 800c9e4:	b29a      	uxth	r2, r3
 800c9e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c9e8:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800c9ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c9f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c9f2:	681b      	ldr	r3, [r3, #0]
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	d1f1      	bne.n	800c9dc <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 800c9f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c9fa:	891a      	ldrh	r2, [r3, #8]
 800c9fc:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800c9fe:	4413      	add	r3, r2
 800ca00:	b29a      	uxth	r2, r3
 800ca02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca04:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 800ca06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca08:	895a      	ldrh	r2, [r3, #10]
 800ca0a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800ca0c:	4413      	add	r3, r2
 800ca0e:	b29a      	uxth	r2, r3
 800ca10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca12:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 800ca14:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ca16:	891a      	ldrh	r2, [r3, #8]
 800ca18:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800ca1a:	4413      	add	r3, r2
 800ca1c:	b29a      	uxth	r2, r3
 800ca1e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ca20:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 800ca22:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d111      	bne.n	800ca4c <tcp_write+0x5c0>
    pcb->unsent = queue;
 800ca28:	68fb      	ldr	r3, [r7, #12]
 800ca2a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ca2c:	66da      	str	r2, [r3, #108]	@ 0x6c
 800ca2e:	e010      	b.n	800ca52 <tcp_write+0x5c6>
 800ca30:	08013d5c 	.word	0x08013d5c
 800ca34:	08013ffc 	.word	0x08013ffc
 800ca38:	08013db0 	.word	0x08013db0
 800ca3c:	0801403c 	.word	0x0801403c
 800ca40:	0801404c 	.word	0x0801404c
 800ca44:	08014060 	.word	0x08014060
 800ca48:	08014098 	.word	0x08014098
  } else {
    last_unsent->next = queue;
 800ca4c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ca4e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ca50:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 800ca52:	68fb      	ldr	r3, [r7, #12]
 800ca54:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800ca56:	88fb      	ldrh	r3, [r7, #6]
 800ca58:	441a      	add	r2, r3
 800ca5a:	68fb      	ldr	r3, [r7, #12]
 800ca5c:	65da      	str	r2, [r3, #92]	@ 0x5c
  pcb->snd_buf -= len;
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 800ca64:	88fb      	ldrh	r3, [r7, #6]
 800ca66:	1ad3      	subs	r3, r2, r3
 800ca68:	b29a      	uxth	r2, r3
 800ca6a:	68fb      	ldr	r3, [r7, #12]
 800ca6c:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
  pcb->snd_queuelen = queuelen;
 800ca70:	68fb      	ldr	r3, [r7, #12]
 800ca72:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 800ca76:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800ca7a:	68fb      	ldr	r3, [r7, #12]
 800ca7c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800ca80:	2b00      	cmp	r3, #0
 800ca82:	d00e      	beq.n	800caa2 <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 800ca84:	68fb      	ldr	r3, [r7, #12]
 800ca86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	d10a      	bne.n	800caa2 <tcp_write+0x616>
 800ca8c:	68fb      	ldr	r3, [r7, #12]
 800ca8e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d106      	bne.n	800caa2 <tcp_write+0x616>
 800ca94:	4b2c      	ldr	r3, [pc, #176]	@ (800cb48 <tcp_write+0x6bc>)
 800ca96:	f240 3212 	movw	r2, #786	@ 0x312
 800ca9a:	492c      	ldr	r1, [pc, #176]	@ (800cb4c <tcp_write+0x6c0>)
 800ca9c:	482c      	ldr	r0, [pc, #176]	@ (800cb50 <tcp_write+0x6c4>)
 800ca9e:	f004 fc6f 	bl	8011380 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 800caa2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	d016      	beq.n	800cad6 <tcp_write+0x64a>
 800caa8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800caaa:	68db      	ldr	r3, [r3, #12]
 800caac:	2b00      	cmp	r3, #0
 800caae:	d012      	beq.n	800cad6 <tcp_write+0x64a>
 800cab0:	797b      	ldrb	r3, [r7, #5]
 800cab2:	f003 0302 	and.w	r3, r3, #2
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	d10d      	bne.n	800cad6 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 800caba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cabc:	68db      	ldr	r3, [r3, #12]
 800cabe:	899b      	ldrh	r3, [r3, #12]
 800cac0:	b29c      	uxth	r4, r3
 800cac2:	2008      	movs	r0, #8
 800cac4:	f7f9 fb64 	bl	8006190 <lwip_htons>
 800cac8:	4603      	mov	r3, r0
 800caca:	461a      	mov	r2, r3
 800cacc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cace:	68db      	ldr	r3, [r3, #12]
 800cad0:	4322      	orrs	r2, r4
 800cad2:	b292      	uxth	r2, r2
 800cad4:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 800cad6:	2300      	movs	r3, #0
 800cad8:	e031      	b.n	800cb3e <tcp_write+0x6b2>
          goto memerr;
 800cada:	bf00      	nop
 800cadc:	e006      	b.n	800caec <tcp_write+0x660>
            goto memerr;
 800cade:	bf00      	nop
 800cae0:	e004      	b.n	800caec <tcp_write+0x660>
        goto memerr;
 800cae2:	bf00      	nop
 800cae4:	e002      	b.n	800caec <tcp_write+0x660>
        goto memerr;
 800cae6:	bf00      	nop
 800cae8:	e000      	b.n	800caec <tcp_write+0x660>
      goto memerr;
 800caea:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800caec:	68fb      	ldr	r3, [r7, #12]
 800caee:	8b5b      	ldrh	r3, [r3, #26]
 800caf0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800caf4:	b29a      	uxth	r2, r3
 800caf6:	68fb      	ldr	r3, [r7, #12]
 800caf8:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 800cafa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d002      	beq.n	800cb06 <tcp_write+0x67a>
    pbuf_free(concat_p);
 800cb00:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800cb02:	f7fa fea3 	bl	800784c <pbuf_free>
  }
  if (queue != NULL) {
 800cb06:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	d002      	beq.n	800cb12 <tcp_write+0x686>
    tcp_segs_free(queue);
 800cb0c:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800cb0e:	f7fc fb59 	bl	80091c4 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 800cb12:	68fb      	ldr	r3, [r7, #12]
 800cb14:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	d00e      	beq.n	800cb3a <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800cb1c:	68fb      	ldr	r3, [r7, #12]
 800cb1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	d10a      	bne.n	800cb3a <tcp_write+0x6ae>
 800cb24:	68fb      	ldr	r3, [r7, #12]
 800cb26:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	d106      	bne.n	800cb3a <tcp_write+0x6ae>
 800cb2c:	4b06      	ldr	r3, [pc, #24]	@ (800cb48 <tcp_write+0x6bc>)
 800cb2e:	f240 3227 	movw	r2, #807	@ 0x327
 800cb32:	4906      	ldr	r1, [pc, #24]	@ (800cb4c <tcp_write+0x6c0>)
 800cb34:	4806      	ldr	r0, [pc, #24]	@ (800cb50 <tcp_write+0x6c4>)
 800cb36:	f004 fc23 	bl	8011380 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 800cb3a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800cb3e:	4618      	mov	r0, r3
 800cb40:	375c      	adds	r7, #92	@ 0x5c
 800cb42:	46bd      	mov	sp, r7
 800cb44:	bd90      	pop	{r4, r7, pc}
 800cb46:	bf00      	nop
 800cb48:	08013d5c 	.word	0x08013d5c
 800cb4c:	080140d0 	.word	0x080140d0
 800cb50:	08013db0 	.word	0x08013db0

0800cb54 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800cb54:	b590      	push	{r4, r7, lr}
 800cb56:	b08b      	sub	sp, #44	@ 0x2c
 800cb58:	af02      	add	r7, sp, #8
 800cb5a:	6078      	str	r0, [r7, #4]
 800cb5c:	460b      	mov	r3, r1
 800cb5e:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800cb60:	2300      	movs	r3, #0
 800cb62:	61fb      	str	r3, [r7, #28]
 800cb64:	2300      	movs	r3, #0
 800cb66:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800cb68:	2300      	movs	r3, #0
 800cb6a:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	d106      	bne.n	800cb80 <tcp_split_unsent_seg+0x2c>
 800cb72:	4b95      	ldr	r3, [pc, #596]	@ (800cdc8 <tcp_split_unsent_seg+0x274>)
 800cb74:	f240 324b 	movw	r2, #843	@ 0x34b
 800cb78:	4994      	ldr	r1, [pc, #592]	@ (800cdcc <tcp_split_unsent_seg+0x278>)
 800cb7a:	4895      	ldr	r0, [pc, #596]	@ (800cdd0 <tcp_split_unsent_seg+0x27c>)
 800cb7c:	f004 fc00 	bl	8011380 <iprintf>

  useg = pcb->unsent;
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cb84:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800cb86:	697b      	ldr	r3, [r7, #20]
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	d102      	bne.n	800cb92 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800cb8c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800cb90:	e116      	b.n	800cdc0 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800cb92:	887b      	ldrh	r3, [r7, #2]
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d109      	bne.n	800cbac <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800cb98:	4b8b      	ldr	r3, [pc, #556]	@ (800cdc8 <tcp_split_unsent_seg+0x274>)
 800cb9a:	f240 3253 	movw	r2, #851	@ 0x353
 800cb9e:	498d      	ldr	r1, [pc, #564]	@ (800cdd4 <tcp_split_unsent_seg+0x280>)
 800cba0:	488b      	ldr	r0, [pc, #556]	@ (800cdd0 <tcp_split_unsent_seg+0x27c>)
 800cba2:	f004 fbed 	bl	8011380 <iprintf>
    return ERR_VAL;
 800cba6:	f06f 0305 	mvn.w	r3, #5
 800cbaa:	e109      	b.n	800cdc0 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800cbac:	697b      	ldr	r3, [r7, #20]
 800cbae:	891b      	ldrh	r3, [r3, #8]
 800cbb0:	887a      	ldrh	r2, [r7, #2]
 800cbb2:	429a      	cmp	r2, r3
 800cbb4:	d301      	bcc.n	800cbba <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800cbb6:	2300      	movs	r3, #0
 800cbb8:	e102      	b.n	800cdc0 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800cbbe:	887a      	ldrh	r2, [r7, #2]
 800cbc0:	429a      	cmp	r2, r3
 800cbc2:	d906      	bls.n	800cbd2 <tcp_split_unsent_seg+0x7e>
 800cbc4:	4b80      	ldr	r3, [pc, #512]	@ (800cdc8 <tcp_split_unsent_seg+0x274>)
 800cbc6:	f240 325b 	movw	r2, #859	@ 0x35b
 800cbca:	4983      	ldr	r1, [pc, #524]	@ (800cdd8 <tcp_split_unsent_seg+0x284>)
 800cbcc:	4880      	ldr	r0, [pc, #512]	@ (800cdd0 <tcp_split_unsent_seg+0x27c>)
 800cbce:	f004 fbd7 	bl	8011380 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800cbd2:	697b      	ldr	r3, [r7, #20]
 800cbd4:	891b      	ldrh	r3, [r3, #8]
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	d106      	bne.n	800cbe8 <tcp_split_unsent_seg+0x94>
 800cbda:	4b7b      	ldr	r3, [pc, #492]	@ (800cdc8 <tcp_split_unsent_seg+0x274>)
 800cbdc:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 800cbe0:	497e      	ldr	r1, [pc, #504]	@ (800cddc <tcp_split_unsent_seg+0x288>)
 800cbe2:	487b      	ldr	r0, [pc, #492]	@ (800cdd0 <tcp_split_unsent_seg+0x27c>)
 800cbe4:	f004 fbcc 	bl	8011380 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800cbe8:	697b      	ldr	r3, [r7, #20]
 800cbea:	7a9b      	ldrb	r3, [r3, #10]
 800cbec:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800cbee:	7bfb      	ldrb	r3, [r7, #15]
 800cbf0:	009b      	lsls	r3, r3, #2
 800cbf2:	b2db      	uxtb	r3, r3
 800cbf4:	f003 0304 	and.w	r3, r3, #4
 800cbf8:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800cbfa:	697b      	ldr	r3, [r7, #20]
 800cbfc:	891a      	ldrh	r2, [r3, #8]
 800cbfe:	887b      	ldrh	r3, [r7, #2]
 800cc00:	1ad3      	subs	r3, r2, r3
 800cc02:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800cc04:	7bbb      	ldrb	r3, [r7, #14]
 800cc06:	b29a      	uxth	r2, r3
 800cc08:	89bb      	ldrh	r3, [r7, #12]
 800cc0a:	4413      	add	r3, r2
 800cc0c:	b29b      	uxth	r3, r3
 800cc0e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800cc12:	4619      	mov	r1, r3
 800cc14:	2036      	movs	r0, #54	@ 0x36
 800cc16:	f7fa fb35 	bl	8007284 <pbuf_alloc>
 800cc1a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800cc1c:	693b      	ldr	r3, [r7, #16]
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	f000 80b7 	beq.w	800cd92 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800cc24:	697b      	ldr	r3, [r7, #20]
 800cc26:	685b      	ldr	r3, [r3, #4]
 800cc28:	891a      	ldrh	r2, [r3, #8]
 800cc2a:	697b      	ldr	r3, [r7, #20]
 800cc2c:	891b      	ldrh	r3, [r3, #8]
 800cc2e:	1ad3      	subs	r3, r2, r3
 800cc30:	b29a      	uxth	r2, r3
 800cc32:	887b      	ldrh	r3, [r7, #2]
 800cc34:	4413      	add	r3, r2
 800cc36:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800cc38:	697b      	ldr	r3, [r7, #20]
 800cc3a:	6858      	ldr	r0, [r3, #4]
 800cc3c:	693b      	ldr	r3, [r7, #16]
 800cc3e:	685a      	ldr	r2, [r3, #4]
 800cc40:	7bbb      	ldrb	r3, [r7, #14]
 800cc42:	18d1      	adds	r1, r2, r3
 800cc44:	897b      	ldrh	r3, [r7, #10]
 800cc46:	89ba      	ldrh	r2, [r7, #12]
 800cc48:	f7fa fffa 	bl	8007c40 <pbuf_copy_partial>
 800cc4c:	4603      	mov	r3, r0
 800cc4e:	461a      	mov	r2, r3
 800cc50:	89bb      	ldrh	r3, [r7, #12]
 800cc52:	4293      	cmp	r3, r2
 800cc54:	f040 809f 	bne.w	800cd96 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800cc58:	697b      	ldr	r3, [r7, #20]
 800cc5a:	68db      	ldr	r3, [r3, #12]
 800cc5c:	899b      	ldrh	r3, [r3, #12]
 800cc5e:	b29b      	uxth	r3, r3
 800cc60:	4618      	mov	r0, r3
 800cc62:	f7f9 fa95 	bl	8006190 <lwip_htons>
 800cc66:	4603      	mov	r3, r0
 800cc68:	b2db      	uxtb	r3, r3
 800cc6a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800cc6e:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800cc70:	2300      	movs	r3, #0
 800cc72:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800cc74:	7efb      	ldrb	r3, [r7, #27]
 800cc76:	f003 0308 	and.w	r3, r3, #8
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	d007      	beq.n	800cc8e <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800cc7e:	7efb      	ldrb	r3, [r7, #27]
 800cc80:	f023 0308 	bic.w	r3, r3, #8
 800cc84:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800cc86:	7ebb      	ldrb	r3, [r7, #26]
 800cc88:	f043 0308 	orr.w	r3, r3, #8
 800cc8c:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800cc8e:	7efb      	ldrb	r3, [r7, #27]
 800cc90:	f003 0301 	and.w	r3, r3, #1
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	d007      	beq.n	800cca8 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800cc98:	7efb      	ldrb	r3, [r7, #27]
 800cc9a:	f023 0301 	bic.w	r3, r3, #1
 800cc9e:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800cca0:	7ebb      	ldrb	r3, [r7, #26]
 800cca2:	f043 0301 	orr.w	r3, r3, #1
 800cca6:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800cca8:	697b      	ldr	r3, [r7, #20]
 800ccaa:	68db      	ldr	r3, [r3, #12]
 800ccac:	685b      	ldr	r3, [r3, #4]
 800ccae:	4618      	mov	r0, r3
 800ccb0:	f7f9 fa83 	bl	80061ba <lwip_htonl>
 800ccb4:	4602      	mov	r2, r0
 800ccb6:	887b      	ldrh	r3, [r7, #2]
 800ccb8:	18d1      	adds	r1, r2, r3
 800ccba:	7eba      	ldrb	r2, [r7, #26]
 800ccbc:	7bfb      	ldrb	r3, [r7, #15]
 800ccbe:	9300      	str	r3, [sp, #0]
 800ccc0:	460b      	mov	r3, r1
 800ccc2:	6939      	ldr	r1, [r7, #16]
 800ccc4:	6878      	ldr	r0, [r7, #4]
 800ccc6:	f7ff fa51 	bl	800c16c <tcp_create_segment>
 800ccca:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800cccc:	69fb      	ldr	r3, [r7, #28]
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	d063      	beq.n	800cd9a <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800ccd2:	697b      	ldr	r3, [r7, #20]
 800ccd4:	685b      	ldr	r3, [r3, #4]
 800ccd6:	4618      	mov	r0, r3
 800ccd8:	f7fa fe40 	bl	800795c <pbuf_clen>
 800ccdc:	4603      	mov	r3, r0
 800ccde:	461a      	mov	r2, r3
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800cce6:	1a9b      	subs	r3, r3, r2
 800cce8:	b29a      	uxth	r2, r3
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800ccf0:	697b      	ldr	r3, [r7, #20]
 800ccf2:	6858      	ldr	r0, [r3, #4]
 800ccf4:	697b      	ldr	r3, [r7, #20]
 800ccf6:	685b      	ldr	r3, [r3, #4]
 800ccf8:	891a      	ldrh	r2, [r3, #8]
 800ccfa:	89bb      	ldrh	r3, [r7, #12]
 800ccfc:	1ad3      	subs	r3, r2, r3
 800ccfe:	b29b      	uxth	r3, r3
 800cd00:	4619      	mov	r1, r3
 800cd02:	f7fa fc1d 	bl	8007540 <pbuf_realloc>
  useg->len -= remainder;
 800cd06:	697b      	ldr	r3, [r7, #20]
 800cd08:	891a      	ldrh	r2, [r3, #8]
 800cd0a:	89bb      	ldrh	r3, [r7, #12]
 800cd0c:	1ad3      	subs	r3, r2, r3
 800cd0e:	b29a      	uxth	r2, r3
 800cd10:	697b      	ldr	r3, [r7, #20]
 800cd12:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800cd14:	697b      	ldr	r3, [r7, #20]
 800cd16:	68db      	ldr	r3, [r3, #12]
 800cd18:	899b      	ldrh	r3, [r3, #12]
 800cd1a:	b29c      	uxth	r4, r3
 800cd1c:	7efb      	ldrb	r3, [r7, #27]
 800cd1e:	b29b      	uxth	r3, r3
 800cd20:	4618      	mov	r0, r3
 800cd22:	f7f9 fa35 	bl	8006190 <lwip_htons>
 800cd26:	4603      	mov	r3, r0
 800cd28:	461a      	mov	r2, r3
 800cd2a:	697b      	ldr	r3, [r7, #20]
 800cd2c:	68db      	ldr	r3, [r3, #12]
 800cd2e:	4322      	orrs	r2, r4
 800cd30:	b292      	uxth	r2, r2
 800cd32:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800cd34:	697b      	ldr	r3, [r7, #20]
 800cd36:	685b      	ldr	r3, [r3, #4]
 800cd38:	4618      	mov	r0, r3
 800cd3a:	f7fa fe0f 	bl	800795c <pbuf_clen>
 800cd3e:	4603      	mov	r3, r0
 800cd40:	461a      	mov	r2, r3
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800cd48:	4413      	add	r3, r2
 800cd4a:	b29a      	uxth	r2, r3
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800cd52:	69fb      	ldr	r3, [r7, #28]
 800cd54:	685b      	ldr	r3, [r3, #4]
 800cd56:	4618      	mov	r0, r3
 800cd58:	f7fa fe00 	bl	800795c <pbuf_clen>
 800cd5c:	4603      	mov	r3, r0
 800cd5e:	461a      	mov	r2, r3
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800cd66:	4413      	add	r3, r2
 800cd68:	b29a      	uxth	r2, r3
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800cd70:	697b      	ldr	r3, [r7, #20]
 800cd72:	681a      	ldr	r2, [r3, #0]
 800cd74:	69fb      	ldr	r3, [r7, #28]
 800cd76:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800cd78:	697b      	ldr	r3, [r7, #20]
 800cd7a:	69fa      	ldr	r2, [r7, #28]
 800cd7c:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800cd7e:	69fb      	ldr	r3, [r7, #28]
 800cd80:	681b      	ldr	r3, [r3, #0]
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	d103      	bne.n	800cd8e <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	2200      	movs	r2, #0
 800cd8a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800cd8e:	2300      	movs	r3, #0
 800cd90:	e016      	b.n	800cdc0 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800cd92:	bf00      	nop
 800cd94:	e002      	b.n	800cd9c <tcp_split_unsent_seg+0x248>
    goto memerr;
 800cd96:	bf00      	nop
 800cd98:	e000      	b.n	800cd9c <tcp_split_unsent_seg+0x248>
    goto memerr;
 800cd9a:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800cd9c:	69fb      	ldr	r3, [r7, #28]
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d006      	beq.n	800cdb0 <tcp_split_unsent_seg+0x25c>
 800cda2:	4b09      	ldr	r3, [pc, #36]	@ (800cdc8 <tcp_split_unsent_seg+0x274>)
 800cda4:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 800cda8:	490d      	ldr	r1, [pc, #52]	@ (800cde0 <tcp_split_unsent_seg+0x28c>)
 800cdaa:	4809      	ldr	r0, [pc, #36]	@ (800cdd0 <tcp_split_unsent_seg+0x27c>)
 800cdac:	f004 fae8 	bl	8011380 <iprintf>
  if (p != NULL) {
 800cdb0:	693b      	ldr	r3, [r7, #16]
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	d002      	beq.n	800cdbc <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800cdb6:	6938      	ldr	r0, [r7, #16]
 800cdb8:	f7fa fd48 	bl	800784c <pbuf_free>
  }

  return ERR_MEM;
 800cdbc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800cdc0:	4618      	mov	r0, r3
 800cdc2:	3724      	adds	r7, #36	@ 0x24
 800cdc4:	46bd      	mov	sp, r7
 800cdc6:	bd90      	pop	{r4, r7, pc}
 800cdc8:	08013d5c 	.word	0x08013d5c
 800cdcc:	080140f0 	.word	0x080140f0
 800cdd0:	08013db0 	.word	0x08013db0
 800cdd4:	08014114 	.word	0x08014114
 800cdd8:	08014138 	.word	0x08014138
 800cddc:	08014148 	.word	0x08014148
 800cde0:	08014158 	.word	0x08014158

0800cde4 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800cde4:	b590      	push	{r4, r7, lr}
 800cde6:	b085      	sub	sp, #20
 800cde8:	af00      	add	r7, sp, #0
 800cdea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	d106      	bne.n	800ce00 <tcp_send_fin+0x1c>
 800cdf2:	4b21      	ldr	r3, [pc, #132]	@ (800ce78 <tcp_send_fin+0x94>)
 800cdf4:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 800cdf8:	4920      	ldr	r1, [pc, #128]	@ (800ce7c <tcp_send_fin+0x98>)
 800cdfa:	4821      	ldr	r0, [pc, #132]	@ (800ce80 <tcp_send_fin+0x9c>)
 800cdfc:	f004 fac0 	bl	8011380 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d02e      	beq.n	800ce66 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ce0c:	60fb      	str	r3, [r7, #12]
 800ce0e:	e002      	b.n	800ce16 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800ce10:	68fb      	ldr	r3, [r7, #12]
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800ce16:	68fb      	ldr	r3, [r7, #12]
 800ce18:	681b      	ldr	r3, [r3, #0]
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d1f8      	bne.n	800ce10 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800ce1e:	68fb      	ldr	r3, [r7, #12]
 800ce20:	68db      	ldr	r3, [r3, #12]
 800ce22:	899b      	ldrh	r3, [r3, #12]
 800ce24:	b29b      	uxth	r3, r3
 800ce26:	4618      	mov	r0, r3
 800ce28:	f7f9 f9b2 	bl	8006190 <lwip_htons>
 800ce2c:	4603      	mov	r3, r0
 800ce2e:	b2db      	uxtb	r3, r3
 800ce30:	f003 0307 	and.w	r3, r3, #7
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	d116      	bne.n	800ce66 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800ce38:	68fb      	ldr	r3, [r7, #12]
 800ce3a:	68db      	ldr	r3, [r3, #12]
 800ce3c:	899b      	ldrh	r3, [r3, #12]
 800ce3e:	b29c      	uxth	r4, r3
 800ce40:	2001      	movs	r0, #1
 800ce42:	f7f9 f9a5 	bl	8006190 <lwip_htons>
 800ce46:	4603      	mov	r3, r0
 800ce48:	461a      	mov	r2, r3
 800ce4a:	68fb      	ldr	r3, [r7, #12]
 800ce4c:	68db      	ldr	r3, [r3, #12]
 800ce4e:	4322      	orrs	r2, r4
 800ce50:	b292      	uxth	r2, r2
 800ce52:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	8b5b      	ldrh	r3, [r3, #26]
 800ce58:	f043 0320 	orr.w	r3, r3, #32
 800ce5c:	b29a      	uxth	r2, r3
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800ce62:	2300      	movs	r3, #0
 800ce64:	e004      	b.n	800ce70 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800ce66:	2101      	movs	r1, #1
 800ce68:	6878      	ldr	r0, [r7, #4]
 800ce6a:	f000 f80b 	bl	800ce84 <tcp_enqueue_flags>
 800ce6e:	4603      	mov	r3, r0
}
 800ce70:	4618      	mov	r0, r3
 800ce72:	3714      	adds	r7, #20
 800ce74:	46bd      	mov	sp, r7
 800ce76:	bd90      	pop	{r4, r7, pc}
 800ce78:	08013d5c 	.word	0x08013d5c
 800ce7c:	08014164 	.word	0x08014164
 800ce80:	08013db0 	.word	0x08013db0

0800ce84 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800ce84:	b580      	push	{r7, lr}
 800ce86:	b08a      	sub	sp, #40	@ 0x28
 800ce88:	af02      	add	r7, sp, #8
 800ce8a:	6078      	str	r0, [r7, #4]
 800ce8c:	460b      	mov	r3, r1
 800ce8e:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800ce90:	2300      	movs	r3, #0
 800ce92:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800ce94:	2300      	movs	r3, #0
 800ce96:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800ce98:	78fb      	ldrb	r3, [r7, #3]
 800ce9a:	f003 0303 	and.w	r3, r3, #3
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	d106      	bne.n	800ceb0 <tcp_enqueue_flags+0x2c>
 800cea2:	4b67      	ldr	r3, [pc, #412]	@ (800d040 <tcp_enqueue_flags+0x1bc>)
 800cea4:	f240 4211 	movw	r2, #1041	@ 0x411
 800cea8:	4966      	ldr	r1, [pc, #408]	@ (800d044 <tcp_enqueue_flags+0x1c0>)
 800ceaa:	4867      	ldr	r0, [pc, #412]	@ (800d048 <tcp_enqueue_flags+0x1c4>)
 800ceac:	f004 fa68 	bl	8011380 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	d106      	bne.n	800cec4 <tcp_enqueue_flags+0x40>
 800ceb6:	4b62      	ldr	r3, [pc, #392]	@ (800d040 <tcp_enqueue_flags+0x1bc>)
 800ceb8:	f240 4213 	movw	r2, #1043	@ 0x413
 800cebc:	4963      	ldr	r1, [pc, #396]	@ (800d04c <tcp_enqueue_flags+0x1c8>)
 800cebe:	4862      	ldr	r0, [pc, #392]	@ (800d048 <tcp_enqueue_flags+0x1c4>)
 800cec0:	f004 fa5e 	bl	8011380 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800cec4:	78fb      	ldrb	r3, [r7, #3]
 800cec6:	f003 0302 	and.w	r3, r3, #2
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	d001      	beq.n	800ced2 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800cece:	2301      	movs	r3, #1
 800ced0:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800ced2:	7ffb      	ldrb	r3, [r7, #31]
 800ced4:	009b      	lsls	r3, r3, #2
 800ced6:	b2db      	uxtb	r3, r3
 800ced8:	f003 0304 	and.w	r3, r3, #4
 800cedc:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800cede:	7dfb      	ldrb	r3, [r7, #23]
 800cee0:	b29b      	uxth	r3, r3
 800cee2:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800cee6:	4619      	mov	r1, r3
 800cee8:	2036      	movs	r0, #54	@ 0x36
 800ceea:	f7fa f9cb 	bl	8007284 <pbuf_alloc>
 800ceee:	6138      	str	r0, [r7, #16]
 800cef0:	693b      	ldr	r3, [r7, #16]
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	d109      	bne.n	800cf0a <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	8b5b      	ldrh	r3, [r3, #26]
 800cefa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cefe:	b29a      	uxth	r2, r3
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800cf04:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800cf08:	e095      	b.n	800d036 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800cf0a:	693b      	ldr	r3, [r7, #16]
 800cf0c:	895a      	ldrh	r2, [r3, #10]
 800cf0e:	7dfb      	ldrb	r3, [r7, #23]
 800cf10:	b29b      	uxth	r3, r3
 800cf12:	429a      	cmp	r2, r3
 800cf14:	d206      	bcs.n	800cf24 <tcp_enqueue_flags+0xa0>
 800cf16:	4b4a      	ldr	r3, [pc, #296]	@ (800d040 <tcp_enqueue_flags+0x1bc>)
 800cf18:	f240 4239 	movw	r2, #1081	@ 0x439
 800cf1c:	494c      	ldr	r1, [pc, #304]	@ (800d050 <tcp_enqueue_flags+0x1cc>)
 800cf1e:	484a      	ldr	r0, [pc, #296]	@ (800d048 <tcp_enqueue_flags+0x1c4>)
 800cf20:	f004 fa2e 	bl	8011380 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 800cf28:	78fa      	ldrb	r2, [r7, #3]
 800cf2a:	7ffb      	ldrb	r3, [r7, #31]
 800cf2c:	9300      	str	r3, [sp, #0]
 800cf2e:	460b      	mov	r3, r1
 800cf30:	6939      	ldr	r1, [r7, #16]
 800cf32:	6878      	ldr	r0, [r7, #4]
 800cf34:	f7ff f91a 	bl	800c16c <tcp_create_segment>
 800cf38:	60f8      	str	r0, [r7, #12]
 800cf3a:	68fb      	ldr	r3, [r7, #12]
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	d109      	bne.n	800cf54 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	8b5b      	ldrh	r3, [r3, #26]
 800cf44:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cf48:	b29a      	uxth	r2, r3
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800cf4e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800cf52:	e070      	b.n	800d036 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800cf54:	68fb      	ldr	r3, [r7, #12]
 800cf56:	68db      	ldr	r3, [r3, #12]
 800cf58:	f003 0303 	and.w	r3, r3, #3
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	d006      	beq.n	800cf6e <tcp_enqueue_flags+0xea>
 800cf60:	4b37      	ldr	r3, [pc, #220]	@ (800d040 <tcp_enqueue_flags+0x1bc>)
 800cf62:	f240 4242 	movw	r2, #1090	@ 0x442
 800cf66:	493b      	ldr	r1, [pc, #236]	@ (800d054 <tcp_enqueue_flags+0x1d0>)
 800cf68:	4837      	ldr	r0, [pc, #220]	@ (800d048 <tcp_enqueue_flags+0x1c4>)
 800cf6a:	f004 fa09 	bl	8011380 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800cf6e:	68fb      	ldr	r3, [r7, #12]
 800cf70:	891b      	ldrh	r3, [r3, #8]
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	d006      	beq.n	800cf84 <tcp_enqueue_flags+0x100>
 800cf76:	4b32      	ldr	r3, [pc, #200]	@ (800d040 <tcp_enqueue_flags+0x1bc>)
 800cf78:	f240 4243 	movw	r2, #1091	@ 0x443
 800cf7c:	4936      	ldr	r1, [pc, #216]	@ (800d058 <tcp_enqueue_flags+0x1d4>)
 800cf7e:	4832      	ldr	r0, [pc, #200]	@ (800d048 <tcp_enqueue_flags+0x1c4>)
 800cf80:	f004 f9fe 	bl	8011380 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	d103      	bne.n	800cf94 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	68fa      	ldr	r2, [r7, #12]
 800cf90:	66da      	str	r2, [r3, #108]	@ 0x6c
 800cf92:	e00d      	b.n	800cfb0 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cf98:	61bb      	str	r3, [r7, #24]
 800cf9a:	e002      	b.n	800cfa2 <tcp_enqueue_flags+0x11e>
 800cf9c:	69bb      	ldr	r3, [r7, #24]
 800cf9e:	681b      	ldr	r3, [r3, #0]
 800cfa0:	61bb      	str	r3, [r7, #24]
 800cfa2:	69bb      	ldr	r3, [r7, #24]
 800cfa4:	681b      	ldr	r3, [r3, #0]
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	d1f8      	bne.n	800cf9c <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800cfaa:	69bb      	ldr	r3, [r7, #24]
 800cfac:	68fa      	ldr	r2, [r7, #12]
 800cfae:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	2200      	movs	r2, #0
 800cfb4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800cfb8:	78fb      	ldrb	r3, [r7, #3]
 800cfba:	f003 0302 	and.w	r3, r3, #2
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	d104      	bne.n	800cfcc <tcp_enqueue_flags+0x148>
 800cfc2:	78fb      	ldrb	r3, [r7, #3]
 800cfc4:	f003 0301 	and.w	r3, r3, #1
 800cfc8:	2b00      	cmp	r3, #0
 800cfca:	d004      	beq.n	800cfd6 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cfd0:	1c5a      	adds	r2, r3, #1
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800cfd6:	78fb      	ldrb	r3, [r7, #3]
 800cfd8:	f003 0301 	and.w	r3, r3, #1
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	d006      	beq.n	800cfee <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	8b5b      	ldrh	r3, [r3, #26]
 800cfe4:	f043 0320 	orr.w	r3, r3, #32
 800cfe8:	b29a      	uxth	r2, r3
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800cfee:	68fb      	ldr	r3, [r7, #12]
 800cff0:	685b      	ldr	r3, [r3, #4]
 800cff2:	4618      	mov	r0, r3
 800cff4:	f7fa fcb2 	bl	800795c <pbuf_clen>
 800cff8:	4603      	mov	r3, r0
 800cffa:	461a      	mov	r2, r3
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800d002:	4413      	add	r3, r2
 800d004:	b29a      	uxth	r2, r3
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800d012:	2b00      	cmp	r3, #0
 800d014:	d00e      	beq.n	800d034 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	d10a      	bne.n	800d034 <tcp_enqueue_flags+0x1b0>
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d022:	2b00      	cmp	r3, #0
 800d024:	d106      	bne.n	800d034 <tcp_enqueue_flags+0x1b0>
 800d026:	4b06      	ldr	r3, [pc, #24]	@ (800d040 <tcp_enqueue_flags+0x1bc>)
 800d028:	f240 4265 	movw	r2, #1125	@ 0x465
 800d02c:	490b      	ldr	r1, [pc, #44]	@ (800d05c <tcp_enqueue_flags+0x1d8>)
 800d02e:	4806      	ldr	r0, [pc, #24]	@ (800d048 <tcp_enqueue_flags+0x1c4>)
 800d030:	f004 f9a6 	bl	8011380 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800d034:	2300      	movs	r3, #0
}
 800d036:	4618      	mov	r0, r3
 800d038:	3720      	adds	r7, #32
 800d03a:	46bd      	mov	sp, r7
 800d03c:	bd80      	pop	{r7, pc}
 800d03e:	bf00      	nop
 800d040:	08013d5c 	.word	0x08013d5c
 800d044:	08014180 	.word	0x08014180
 800d048:	08013db0 	.word	0x08013db0
 800d04c:	080141d8 	.word	0x080141d8
 800d050:	080141f8 	.word	0x080141f8
 800d054:	08014234 	.word	0x08014234
 800d058:	0801424c 	.word	0x0801424c
 800d05c:	08014278 	.word	0x08014278

0800d060 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800d060:	b5b0      	push	{r4, r5, r7, lr}
 800d062:	b08a      	sub	sp, #40	@ 0x28
 800d064:	af00      	add	r7, sp, #0
 800d066:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	d106      	bne.n	800d07c <tcp_output+0x1c>
 800d06e:	4b8a      	ldr	r3, [pc, #552]	@ (800d298 <tcp_output+0x238>)
 800d070:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 800d074:	4989      	ldr	r1, [pc, #548]	@ (800d29c <tcp_output+0x23c>)
 800d076:	488a      	ldr	r0, [pc, #552]	@ (800d2a0 <tcp_output+0x240>)
 800d078:	f004 f982 	bl	8011380 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	7d1b      	ldrb	r3, [r3, #20]
 800d080:	2b01      	cmp	r3, #1
 800d082:	d106      	bne.n	800d092 <tcp_output+0x32>
 800d084:	4b84      	ldr	r3, [pc, #528]	@ (800d298 <tcp_output+0x238>)
 800d086:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 800d08a:	4986      	ldr	r1, [pc, #536]	@ (800d2a4 <tcp_output+0x244>)
 800d08c:	4884      	ldr	r0, [pc, #528]	@ (800d2a0 <tcp_output+0x240>)
 800d08e:	f004 f977 	bl	8011380 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800d092:	4b85      	ldr	r3, [pc, #532]	@ (800d2a8 <tcp_output+0x248>)
 800d094:	681b      	ldr	r3, [r3, #0]
 800d096:	687a      	ldr	r2, [r7, #4]
 800d098:	429a      	cmp	r2, r3
 800d09a:	d101      	bne.n	800d0a0 <tcp_output+0x40>
    return ERR_OK;
 800d09c:	2300      	movs	r3, #0
 800d09e:	e1ce      	b.n	800d43e <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800d0ac:	4293      	cmp	r3, r2
 800d0ae:	bf28      	it	cs
 800d0b0:	4613      	movcs	r3, r2
 800d0b2:	b29b      	uxth	r3, r3
 800d0b4:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d0ba:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 800d0bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0be:	2b00      	cmp	r3, #0
 800d0c0:	d10b      	bne.n	800d0da <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	8b5b      	ldrh	r3, [r3, #26]
 800d0c6:	f003 0302 	and.w	r3, r3, #2
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	f000 81aa 	beq.w	800d424 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800d0d0:	6878      	ldr	r0, [r7, #4]
 800d0d2:	f000 fdcb 	bl	800dc6c <tcp_send_empty_ack>
 800d0d6:	4603      	mov	r3, r0
 800d0d8:	e1b1      	b.n	800d43e <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800d0da:	6879      	ldr	r1, [r7, #4]
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	3304      	adds	r3, #4
 800d0e0:	461a      	mov	r2, r3
 800d0e2:	6878      	ldr	r0, [r7, #4]
 800d0e4:	f7ff f826 	bl	800c134 <tcp_route>
 800d0e8:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800d0ea:	697b      	ldr	r3, [r7, #20]
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	d102      	bne.n	800d0f6 <tcp_output+0x96>
    return ERR_RTE;
 800d0f0:	f06f 0303 	mvn.w	r3, #3
 800d0f4:	e1a3      	b.n	800d43e <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	d003      	beq.n	800d104 <tcp_output+0xa4>
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	2b00      	cmp	r3, #0
 800d102:	d111      	bne.n	800d128 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800d104:	697b      	ldr	r3, [r7, #20]
 800d106:	2b00      	cmp	r3, #0
 800d108:	d002      	beq.n	800d110 <tcp_output+0xb0>
 800d10a:	697b      	ldr	r3, [r7, #20]
 800d10c:	3304      	adds	r3, #4
 800d10e:	e000      	b.n	800d112 <tcp_output+0xb2>
 800d110:	2300      	movs	r3, #0
 800d112:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800d114:	693b      	ldr	r3, [r7, #16]
 800d116:	2b00      	cmp	r3, #0
 800d118:	d102      	bne.n	800d120 <tcp_output+0xc0>
      return ERR_RTE;
 800d11a:	f06f 0303 	mvn.w	r3, #3
 800d11e:	e18e      	b.n	800d43e <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800d120:	693b      	ldr	r3, [r7, #16]
 800d122:	681a      	ldr	r2, [r3, #0]
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800d128:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d12a:	68db      	ldr	r3, [r3, #12]
 800d12c:	685b      	ldr	r3, [r3, #4]
 800d12e:	4618      	mov	r0, r3
 800d130:	f7f9 f843 	bl	80061ba <lwip_htonl>
 800d134:	4602      	mov	r2, r0
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d13a:	1ad3      	subs	r3, r2, r3
 800d13c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d13e:	8912      	ldrh	r2, [r2, #8]
 800d140:	4413      	add	r3, r2
 800d142:	69ba      	ldr	r2, [r7, #24]
 800d144:	429a      	cmp	r2, r3
 800d146:	d227      	bcs.n	800d198 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800d14e:	461a      	mov	r2, r3
 800d150:	69bb      	ldr	r3, [r7, #24]
 800d152:	4293      	cmp	r3, r2
 800d154:	d114      	bne.n	800d180 <tcp_output+0x120>
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	d110      	bne.n	800d180 <tcp_output+0x120>
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800d164:	2b00      	cmp	r3, #0
 800d166:	d10b      	bne.n	800d180 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	2200      	movs	r2, #0
 800d16c:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	2201      	movs	r2, #1
 800d174:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	2200      	movs	r2, #0
 800d17c:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	8b5b      	ldrh	r3, [r3, #26]
 800d184:	f003 0302 	and.w	r3, r3, #2
 800d188:	2b00      	cmp	r3, #0
 800d18a:	f000 814d 	beq.w	800d428 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800d18e:	6878      	ldr	r0, [r7, #4]
 800d190:	f000 fd6c 	bl	800dc6c <tcp_send_empty_ack>
 800d194:	4603      	mov	r3, r0
 800d196:	e152      	b.n	800d43e <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	2200      	movs	r2, #0
 800d19c:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d1a4:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800d1a6:	6a3b      	ldr	r3, [r7, #32]
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	f000 811c 	beq.w	800d3e6 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800d1ae:	e002      	b.n	800d1b6 <tcp_output+0x156>
 800d1b0:	6a3b      	ldr	r3, [r7, #32]
 800d1b2:	681b      	ldr	r3, [r3, #0]
 800d1b4:	623b      	str	r3, [r7, #32]
 800d1b6:	6a3b      	ldr	r3, [r7, #32]
 800d1b8:	681b      	ldr	r3, [r3, #0]
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	d1f8      	bne.n	800d1b0 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800d1be:	e112      	b.n	800d3e6 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800d1c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1c2:	68db      	ldr	r3, [r3, #12]
 800d1c4:	899b      	ldrh	r3, [r3, #12]
 800d1c6:	b29b      	uxth	r3, r3
 800d1c8:	4618      	mov	r0, r3
 800d1ca:	f7f8 ffe1 	bl	8006190 <lwip_htons>
 800d1ce:	4603      	mov	r3, r0
 800d1d0:	b2db      	uxtb	r3, r3
 800d1d2:	f003 0304 	and.w	r3, r3, #4
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d006      	beq.n	800d1e8 <tcp_output+0x188>
 800d1da:	4b2f      	ldr	r3, [pc, #188]	@ (800d298 <tcp_output+0x238>)
 800d1dc:	f240 5236 	movw	r2, #1334	@ 0x536
 800d1e0:	4932      	ldr	r1, [pc, #200]	@ (800d2ac <tcp_output+0x24c>)
 800d1e2:	482f      	ldr	r0, [pc, #188]	@ (800d2a0 <tcp_output+0x240>)
 800d1e4:	f004 f8cc 	bl	8011380 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	d01f      	beq.n	800d230 <tcp_output+0x1d0>
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	8b5b      	ldrh	r3, [r3, #26]
 800d1f4:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	d119      	bne.n	800d230 <tcp_output+0x1d0>
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d200:	2b00      	cmp	r3, #0
 800d202:	d00b      	beq.n	800d21c <tcp_output+0x1bc>
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d208:	681b      	ldr	r3, [r3, #0]
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	d110      	bne.n	800d230 <tcp_output+0x1d0>
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d212:	891a      	ldrh	r2, [r3, #8]
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800d218:	429a      	cmp	r2, r3
 800d21a:	d209      	bcs.n	800d230 <tcp_output+0x1d0>
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800d222:	2b00      	cmp	r3, #0
 800d224:	d004      	beq.n	800d230 <tcp_output+0x1d0>
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800d22c:	2b08      	cmp	r3, #8
 800d22e:	d901      	bls.n	800d234 <tcp_output+0x1d4>
 800d230:	2301      	movs	r3, #1
 800d232:	e000      	b.n	800d236 <tcp_output+0x1d6>
 800d234:	2300      	movs	r3, #0
 800d236:	2b00      	cmp	r3, #0
 800d238:	d106      	bne.n	800d248 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	8b5b      	ldrh	r3, [r3, #26]
 800d23e:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800d242:	2b00      	cmp	r3, #0
 800d244:	f000 80e4 	beq.w	800d410 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	7d1b      	ldrb	r3, [r3, #20]
 800d24c:	2b02      	cmp	r3, #2
 800d24e:	d00d      	beq.n	800d26c <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800d250:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d252:	68db      	ldr	r3, [r3, #12]
 800d254:	899b      	ldrh	r3, [r3, #12]
 800d256:	b29c      	uxth	r4, r3
 800d258:	2010      	movs	r0, #16
 800d25a:	f7f8 ff99 	bl	8006190 <lwip_htons>
 800d25e:	4603      	mov	r3, r0
 800d260:	461a      	mov	r2, r3
 800d262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d264:	68db      	ldr	r3, [r3, #12]
 800d266:	4322      	orrs	r2, r4
 800d268:	b292      	uxth	r2, r2
 800d26a:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800d26c:	697a      	ldr	r2, [r7, #20]
 800d26e:	6879      	ldr	r1, [r7, #4]
 800d270:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d272:	f000 f909 	bl	800d488 <tcp_output_segment>
 800d276:	4603      	mov	r3, r0
 800d278:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800d27a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d27e:	2b00      	cmp	r3, #0
 800d280:	d016      	beq.n	800d2b0 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	8b5b      	ldrh	r3, [r3, #26]
 800d286:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d28a:	b29a      	uxth	r2, r3
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	835a      	strh	r2, [r3, #26]
      return err;
 800d290:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d294:	e0d3      	b.n	800d43e <tcp_output+0x3de>
 800d296:	bf00      	nop
 800d298:	08013d5c 	.word	0x08013d5c
 800d29c:	080142a0 	.word	0x080142a0
 800d2a0:	08013db0 	.word	0x08013db0
 800d2a4:	080142b8 	.word	0x080142b8
 800d2a8:	2000a834 	.word	0x2000a834
 800d2ac:	080142e0 	.word	0x080142e0
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800d2b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2b2:	681a      	ldr	r2, [r3, #0]
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	7d1b      	ldrb	r3, [r3, #20]
 800d2bc:	2b02      	cmp	r3, #2
 800d2be:	d006      	beq.n	800d2ce <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	8b5b      	ldrh	r3, [r3, #26]
 800d2c4:	f023 0303 	bic.w	r3, r3, #3
 800d2c8:	b29a      	uxth	r2, r3
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800d2ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2d0:	68db      	ldr	r3, [r3, #12]
 800d2d2:	685b      	ldr	r3, [r3, #4]
 800d2d4:	4618      	mov	r0, r3
 800d2d6:	f7f8 ff70 	bl	80061ba <lwip_htonl>
 800d2da:	4604      	mov	r4, r0
 800d2dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2de:	891b      	ldrh	r3, [r3, #8]
 800d2e0:	461d      	mov	r5, r3
 800d2e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2e4:	68db      	ldr	r3, [r3, #12]
 800d2e6:	899b      	ldrh	r3, [r3, #12]
 800d2e8:	b29b      	uxth	r3, r3
 800d2ea:	4618      	mov	r0, r3
 800d2ec:	f7f8 ff50 	bl	8006190 <lwip_htons>
 800d2f0:	4603      	mov	r3, r0
 800d2f2:	b2db      	uxtb	r3, r3
 800d2f4:	f003 0303 	and.w	r3, r3, #3
 800d2f8:	2b00      	cmp	r3, #0
 800d2fa:	d001      	beq.n	800d300 <tcp_output+0x2a0>
 800d2fc:	2301      	movs	r3, #1
 800d2fe:	e000      	b.n	800d302 <tcp_output+0x2a2>
 800d300:	2300      	movs	r3, #0
 800d302:	442b      	add	r3, r5
 800d304:	4423      	add	r3, r4
 800d306:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800d30c:	68bb      	ldr	r3, [r7, #8]
 800d30e:	1ad3      	subs	r3, r2, r3
 800d310:	2b00      	cmp	r3, #0
 800d312:	da02      	bge.n	800d31a <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	68ba      	ldr	r2, [r7, #8]
 800d318:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800d31a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d31c:	891b      	ldrh	r3, [r3, #8]
 800d31e:	461c      	mov	r4, r3
 800d320:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d322:	68db      	ldr	r3, [r3, #12]
 800d324:	899b      	ldrh	r3, [r3, #12]
 800d326:	b29b      	uxth	r3, r3
 800d328:	4618      	mov	r0, r3
 800d32a:	f7f8 ff31 	bl	8006190 <lwip_htons>
 800d32e:	4603      	mov	r3, r0
 800d330:	b2db      	uxtb	r3, r3
 800d332:	f003 0303 	and.w	r3, r3, #3
 800d336:	2b00      	cmp	r3, #0
 800d338:	d001      	beq.n	800d33e <tcp_output+0x2de>
 800d33a:	2301      	movs	r3, #1
 800d33c:	e000      	b.n	800d340 <tcp_output+0x2e0>
 800d33e:	2300      	movs	r3, #0
 800d340:	4423      	add	r3, r4
 800d342:	2b00      	cmp	r3, #0
 800d344:	d049      	beq.n	800d3da <tcp_output+0x37a>
      seg->next = NULL;
 800d346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d348:	2200      	movs	r2, #0
 800d34a:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d350:	2b00      	cmp	r3, #0
 800d352:	d105      	bne.n	800d360 <tcp_output+0x300>
        pcb->unacked = seg;
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d358:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 800d35a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d35c:	623b      	str	r3, [r7, #32]
 800d35e:	e03f      	b.n	800d3e0 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800d360:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d362:	68db      	ldr	r3, [r3, #12]
 800d364:	685b      	ldr	r3, [r3, #4]
 800d366:	4618      	mov	r0, r3
 800d368:	f7f8 ff27 	bl	80061ba <lwip_htonl>
 800d36c:	4604      	mov	r4, r0
 800d36e:	6a3b      	ldr	r3, [r7, #32]
 800d370:	68db      	ldr	r3, [r3, #12]
 800d372:	685b      	ldr	r3, [r3, #4]
 800d374:	4618      	mov	r0, r3
 800d376:	f7f8 ff20 	bl	80061ba <lwip_htonl>
 800d37a:	4603      	mov	r3, r0
 800d37c:	1ae3      	subs	r3, r4, r3
 800d37e:	2b00      	cmp	r3, #0
 800d380:	da24      	bge.n	800d3cc <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	3370      	adds	r3, #112	@ 0x70
 800d386:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800d388:	e002      	b.n	800d390 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800d38a:	69fb      	ldr	r3, [r7, #28]
 800d38c:	681b      	ldr	r3, [r3, #0]
 800d38e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800d390:	69fb      	ldr	r3, [r7, #28]
 800d392:	681b      	ldr	r3, [r3, #0]
 800d394:	2b00      	cmp	r3, #0
 800d396:	d011      	beq.n	800d3bc <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800d398:	69fb      	ldr	r3, [r7, #28]
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	68db      	ldr	r3, [r3, #12]
 800d39e:	685b      	ldr	r3, [r3, #4]
 800d3a0:	4618      	mov	r0, r3
 800d3a2:	f7f8 ff0a 	bl	80061ba <lwip_htonl>
 800d3a6:	4604      	mov	r4, r0
 800d3a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3aa:	68db      	ldr	r3, [r3, #12]
 800d3ac:	685b      	ldr	r3, [r3, #4]
 800d3ae:	4618      	mov	r0, r3
 800d3b0:	f7f8 ff03 	bl	80061ba <lwip_htonl>
 800d3b4:	4603      	mov	r3, r0
 800d3b6:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	dbe6      	blt.n	800d38a <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800d3bc:	69fb      	ldr	r3, [r7, #28]
 800d3be:	681a      	ldr	r2, [r3, #0]
 800d3c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3c2:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800d3c4:	69fb      	ldr	r3, [r7, #28]
 800d3c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d3c8:	601a      	str	r2, [r3, #0]
 800d3ca:	e009      	b.n	800d3e0 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800d3cc:	6a3b      	ldr	r3, [r7, #32]
 800d3ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d3d0:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800d3d2:	6a3b      	ldr	r3, [r7, #32]
 800d3d4:	681b      	ldr	r3, [r3, #0]
 800d3d6:	623b      	str	r3, [r7, #32]
 800d3d8:	e002      	b.n	800d3e0 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800d3da:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d3dc:	f7fb ff07 	bl	80091ee <tcp_seg_free>
    }
    seg = pcb->unsent;
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d3e4:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 800d3e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	d012      	beq.n	800d412 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800d3ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3ee:	68db      	ldr	r3, [r3, #12]
 800d3f0:	685b      	ldr	r3, [r3, #4]
 800d3f2:	4618      	mov	r0, r3
 800d3f4:	f7f8 fee1 	bl	80061ba <lwip_htonl>
 800d3f8:	4602      	mov	r2, r0
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d3fe:	1ad3      	subs	r3, r2, r3
 800d400:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d402:	8912      	ldrh	r2, [r2, #8]
 800d404:	4413      	add	r3, r2
  while (seg != NULL &&
 800d406:	69ba      	ldr	r2, [r7, #24]
 800d408:	429a      	cmp	r2, r3
 800d40a:	f4bf aed9 	bcs.w	800d1c0 <tcp_output+0x160>
 800d40e:	e000      	b.n	800d412 <tcp_output+0x3b2>
      break;
 800d410:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d416:	2b00      	cmp	r3, #0
 800d418:	d108      	bne.n	800d42c <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	2200      	movs	r2, #0
 800d41e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 800d422:	e004      	b.n	800d42e <tcp_output+0x3ce>
    goto output_done;
 800d424:	bf00      	nop
 800d426:	e002      	b.n	800d42e <tcp_output+0x3ce>
    goto output_done;
 800d428:	bf00      	nop
 800d42a:	e000      	b.n	800d42e <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800d42c:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	8b5b      	ldrh	r3, [r3, #26]
 800d432:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d436:	b29a      	uxth	r2, r3
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800d43c:	2300      	movs	r3, #0
}
 800d43e:	4618      	mov	r0, r3
 800d440:	3728      	adds	r7, #40	@ 0x28
 800d442:	46bd      	mov	sp, r7
 800d444:	bdb0      	pop	{r4, r5, r7, pc}
 800d446:	bf00      	nop

0800d448 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800d448:	b580      	push	{r7, lr}
 800d44a:	b082      	sub	sp, #8
 800d44c:	af00      	add	r7, sp, #0
 800d44e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	2b00      	cmp	r3, #0
 800d454:	d106      	bne.n	800d464 <tcp_output_segment_busy+0x1c>
 800d456:	4b09      	ldr	r3, [pc, #36]	@ (800d47c <tcp_output_segment_busy+0x34>)
 800d458:	f240 529a 	movw	r2, #1434	@ 0x59a
 800d45c:	4908      	ldr	r1, [pc, #32]	@ (800d480 <tcp_output_segment_busy+0x38>)
 800d45e:	4809      	ldr	r0, [pc, #36]	@ (800d484 <tcp_output_segment_busy+0x3c>)
 800d460:	f003 ff8e 	bl	8011380 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	685b      	ldr	r3, [r3, #4]
 800d468:	7b9b      	ldrb	r3, [r3, #14]
 800d46a:	2b01      	cmp	r3, #1
 800d46c:	d001      	beq.n	800d472 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800d46e:	2301      	movs	r3, #1
 800d470:	e000      	b.n	800d474 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800d472:	2300      	movs	r3, #0
}
 800d474:	4618      	mov	r0, r3
 800d476:	3708      	adds	r7, #8
 800d478:	46bd      	mov	sp, r7
 800d47a:	bd80      	pop	{r7, pc}
 800d47c:	08013d5c 	.word	0x08013d5c
 800d480:	080142f8 	.word	0x080142f8
 800d484:	08013db0 	.word	0x08013db0

0800d488 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800d488:	b5b0      	push	{r4, r5, r7, lr}
 800d48a:	b08c      	sub	sp, #48	@ 0x30
 800d48c:	af04      	add	r7, sp, #16
 800d48e:	60f8      	str	r0, [r7, #12]
 800d490:	60b9      	str	r1, [r7, #8]
 800d492:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800d494:	68fb      	ldr	r3, [r7, #12]
 800d496:	2b00      	cmp	r3, #0
 800d498:	d106      	bne.n	800d4a8 <tcp_output_segment+0x20>
 800d49a:	4b64      	ldr	r3, [pc, #400]	@ (800d62c <tcp_output_segment+0x1a4>)
 800d49c:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 800d4a0:	4963      	ldr	r1, [pc, #396]	@ (800d630 <tcp_output_segment+0x1a8>)
 800d4a2:	4864      	ldr	r0, [pc, #400]	@ (800d634 <tcp_output_segment+0x1ac>)
 800d4a4:	f003 ff6c 	bl	8011380 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800d4a8:	68bb      	ldr	r3, [r7, #8]
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d106      	bne.n	800d4bc <tcp_output_segment+0x34>
 800d4ae:	4b5f      	ldr	r3, [pc, #380]	@ (800d62c <tcp_output_segment+0x1a4>)
 800d4b0:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 800d4b4:	4960      	ldr	r1, [pc, #384]	@ (800d638 <tcp_output_segment+0x1b0>)
 800d4b6:	485f      	ldr	r0, [pc, #380]	@ (800d634 <tcp_output_segment+0x1ac>)
 800d4b8:	f003 ff62 	bl	8011380 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	2b00      	cmp	r3, #0
 800d4c0:	d106      	bne.n	800d4d0 <tcp_output_segment+0x48>
 800d4c2:	4b5a      	ldr	r3, [pc, #360]	@ (800d62c <tcp_output_segment+0x1a4>)
 800d4c4:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 800d4c8:	495c      	ldr	r1, [pc, #368]	@ (800d63c <tcp_output_segment+0x1b4>)
 800d4ca:	485a      	ldr	r0, [pc, #360]	@ (800d634 <tcp_output_segment+0x1ac>)
 800d4cc:	f003 ff58 	bl	8011380 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800d4d0:	68f8      	ldr	r0, [r7, #12]
 800d4d2:	f7ff ffb9 	bl	800d448 <tcp_output_segment_busy>
 800d4d6:	4603      	mov	r3, r0
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	d001      	beq.n	800d4e0 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800d4dc:	2300      	movs	r3, #0
 800d4de:	e0a1      	b.n	800d624 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800d4e0:	68bb      	ldr	r3, [r7, #8]
 800d4e2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d4e4:	68fb      	ldr	r3, [r7, #12]
 800d4e6:	68dc      	ldr	r4, [r3, #12]
 800d4e8:	4610      	mov	r0, r2
 800d4ea:	f7f8 fe66 	bl	80061ba <lwip_htonl>
 800d4ee:	4603      	mov	r3, r0
 800d4f0:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800d4f2:	68bb      	ldr	r3, [r7, #8]
 800d4f4:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800d4f6:	68fb      	ldr	r3, [r7, #12]
 800d4f8:	68dc      	ldr	r4, [r3, #12]
 800d4fa:	4610      	mov	r0, r2
 800d4fc:	f7f8 fe48 	bl	8006190 <lwip_htons>
 800d500:	4603      	mov	r3, r0
 800d502:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800d504:	68bb      	ldr	r3, [r7, #8]
 800d506:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d508:	68ba      	ldr	r2, [r7, #8]
 800d50a:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 800d50c:	441a      	add	r2, r3
 800d50e:	68bb      	ldr	r3, [r7, #8]
 800d510:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800d512:	68fb      	ldr	r3, [r7, #12]
 800d514:	68db      	ldr	r3, [r3, #12]
 800d516:	3314      	adds	r3, #20
 800d518:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800d51a:	68fb      	ldr	r3, [r7, #12]
 800d51c:	7a9b      	ldrb	r3, [r3, #10]
 800d51e:	f003 0301 	and.w	r3, r3, #1
 800d522:	2b00      	cmp	r3, #0
 800d524:	d015      	beq.n	800d552 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800d526:	68bb      	ldr	r3, [r7, #8]
 800d528:	3304      	adds	r3, #4
 800d52a:	461a      	mov	r2, r3
 800d52c:	6879      	ldr	r1, [r7, #4]
 800d52e:	f44f 7006 	mov.w	r0, #536	@ 0x218
 800d532:	f7fc fa39 	bl	80099a8 <tcp_eff_send_mss_netif>
 800d536:	4603      	mov	r3, r0
 800d538:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800d53a:	8b7b      	ldrh	r3, [r7, #26]
 800d53c:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 800d540:	4618      	mov	r0, r3
 800d542:	f7f8 fe3a 	bl	80061ba <lwip_htonl>
 800d546:	4602      	mov	r2, r0
 800d548:	69fb      	ldr	r3, [r7, #28]
 800d54a:	601a      	str	r2, [r3, #0]
    opts += 1;
 800d54c:	69fb      	ldr	r3, [r7, #28]
 800d54e:	3304      	adds	r3, #4
 800d550:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800d552:	68bb      	ldr	r3, [r7, #8]
 800d554:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800d558:	2b00      	cmp	r3, #0
 800d55a:	da02      	bge.n	800d562 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800d55c:	68bb      	ldr	r3, [r7, #8]
 800d55e:	2200      	movs	r2, #0
 800d560:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 800d562:	68bb      	ldr	r3, [r7, #8]
 800d564:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d566:	2b00      	cmp	r3, #0
 800d568:	d10c      	bne.n	800d584 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800d56a:	4b35      	ldr	r3, [pc, #212]	@ (800d640 <tcp_output_segment+0x1b8>)
 800d56c:	681a      	ldr	r2, [r3, #0]
 800d56e:	68bb      	ldr	r3, [r7, #8]
 800d570:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800d572:	68fb      	ldr	r3, [r7, #12]
 800d574:	68db      	ldr	r3, [r3, #12]
 800d576:	685b      	ldr	r3, [r3, #4]
 800d578:	4618      	mov	r0, r3
 800d57a:	f7f8 fe1e 	bl	80061ba <lwip_htonl>
 800d57e:	4602      	mov	r2, r0
 800d580:	68bb      	ldr	r3, [r7, #8]
 800d582:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800d584:	68fb      	ldr	r3, [r7, #12]
 800d586:	68da      	ldr	r2, [r3, #12]
 800d588:	68fb      	ldr	r3, [r7, #12]
 800d58a:	685b      	ldr	r3, [r3, #4]
 800d58c:	685b      	ldr	r3, [r3, #4]
 800d58e:	1ad3      	subs	r3, r2, r3
 800d590:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800d592:	68fb      	ldr	r3, [r7, #12]
 800d594:	685b      	ldr	r3, [r3, #4]
 800d596:	8959      	ldrh	r1, [r3, #10]
 800d598:	68fb      	ldr	r3, [r7, #12]
 800d59a:	685b      	ldr	r3, [r3, #4]
 800d59c:	8b3a      	ldrh	r2, [r7, #24]
 800d59e:	1a8a      	subs	r2, r1, r2
 800d5a0:	b292      	uxth	r2, r2
 800d5a2:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800d5a4:	68fb      	ldr	r3, [r7, #12]
 800d5a6:	685b      	ldr	r3, [r3, #4]
 800d5a8:	8919      	ldrh	r1, [r3, #8]
 800d5aa:	68fb      	ldr	r3, [r7, #12]
 800d5ac:	685b      	ldr	r3, [r3, #4]
 800d5ae:	8b3a      	ldrh	r2, [r7, #24]
 800d5b0:	1a8a      	subs	r2, r1, r2
 800d5b2:	b292      	uxth	r2, r2
 800d5b4:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800d5b6:	68fb      	ldr	r3, [r7, #12]
 800d5b8:	685b      	ldr	r3, [r3, #4]
 800d5ba:	68fa      	ldr	r2, [r7, #12]
 800d5bc:	68d2      	ldr	r2, [r2, #12]
 800d5be:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800d5c0:	68fb      	ldr	r3, [r7, #12]
 800d5c2:	68db      	ldr	r3, [r3, #12]
 800d5c4:	2200      	movs	r2, #0
 800d5c6:	741a      	strb	r2, [r3, #16]
 800d5c8:	2200      	movs	r2, #0
 800d5ca:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800d5cc:	68fb      	ldr	r3, [r7, #12]
 800d5ce:	68da      	ldr	r2, [r3, #12]
 800d5d0:	68fb      	ldr	r3, [r7, #12]
 800d5d2:	7a9b      	ldrb	r3, [r3, #10]
 800d5d4:	f003 0301 	and.w	r3, r3, #1
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	d001      	beq.n	800d5e0 <tcp_output_segment+0x158>
 800d5dc:	2318      	movs	r3, #24
 800d5de:	e000      	b.n	800d5e2 <tcp_output_segment+0x15a>
 800d5e0:	2314      	movs	r3, #20
 800d5e2:	4413      	add	r3, r2
 800d5e4:	69fa      	ldr	r2, [r7, #28]
 800d5e6:	429a      	cmp	r2, r3
 800d5e8:	d006      	beq.n	800d5f8 <tcp_output_segment+0x170>
 800d5ea:	4b10      	ldr	r3, [pc, #64]	@ (800d62c <tcp_output_segment+0x1a4>)
 800d5ec:	f240 621c 	movw	r2, #1564	@ 0x61c
 800d5f0:	4914      	ldr	r1, [pc, #80]	@ (800d644 <tcp_output_segment+0x1bc>)
 800d5f2:	4810      	ldr	r0, [pc, #64]	@ (800d634 <tcp_output_segment+0x1ac>)
 800d5f4:	f003 fec4 	bl	8011380 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800d5f8:	68fb      	ldr	r3, [r7, #12]
 800d5fa:	6858      	ldr	r0, [r3, #4]
 800d5fc:	68b9      	ldr	r1, [r7, #8]
 800d5fe:	68bb      	ldr	r3, [r7, #8]
 800d600:	1d1c      	adds	r4, r3, #4
 800d602:	68bb      	ldr	r3, [r7, #8]
 800d604:	7add      	ldrb	r5, [r3, #11]
 800d606:	68bb      	ldr	r3, [r7, #8]
 800d608:	7a9b      	ldrb	r3, [r3, #10]
 800d60a:	687a      	ldr	r2, [r7, #4]
 800d60c:	9202      	str	r2, [sp, #8]
 800d60e:	2206      	movs	r2, #6
 800d610:	9201      	str	r2, [sp, #4]
 800d612:	9300      	str	r3, [sp, #0]
 800d614:	462b      	mov	r3, r5
 800d616:	4622      	mov	r2, r4
 800d618:	f002 fd84 	bl	8010124 <ip4_output_if>
 800d61c:	4603      	mov	r3, r0
 800d61e:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800d620:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d624:	4618      	mov	r0, r3
 800d626:	3720      	adds	r7, #32
 800d628:	46bd      	mov	sp, r7
 800d62a:	bdb0      	pop	{r4, r5, r7, pc}
 800d62c:	08013d5c 	.word	0x08013d5c
 800d630:	08014320 	.word	0x08014320
 800d634:	08013db0 	.word	0x08013db0
 800d638:	08014340 	.word	0x08014340
 800d63c:	08014360 	.word	0x08014360
 800d640:	2000a7e8 	.word	0x2000a7e8
 800d644:	08014384 	.word	0x08014384

0800d648 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800d648:	b5b0      	push	{r4, r5, r7, lr}
 800d64a:	b084      	sub	sp, #16
 800d64c:	af00      	add	r7, sp, #0
 800d64e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	2b00      	cmp	r3, #0
 800d654:	d106      	bne.n	800d664 <tcp_rexmit_rto_prepare+0x1c>
 800d656:	4b31      	ldr	r3, [pc, #196]	@ (800d71c <tcp_rexmit_rto_prepare+0xd4>)
 800d658:	f240 6263 	movw	r2, #1635	@ 0x663
 800d65c:	4930      	ldr	r1, [pc, #192]	@ (800d720 <tcp_rexmit_rto_prepare+0xd8>)
 800d65e:	4831      	ldr	r0, [pc, #196]	@ (800d724 <tcp_rexmit_rto_prepare+0xdc>)
 800d660:	f003 fe8e 	bl	8011380 <iprintf>

  if (pcb->unacked == NULL) {
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d668:	2b00      	cmp	r3, #0
 800d66a:	d102      	bne.n	800d672 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800d66c:	f06f 0305 	mvn.w	r3, #5
 800d670:	e050      	b.n	800d714 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d676:	60fb      	str	r3, [r7, #12]
 800d678:	e00b      	b.n	800d692 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800d67a:	68f8      	ldr	r0, [r7, #12]
 800d67c:	f7ff fee4 	bl	800d448 <tcp_output_segment_busy>
 800d680:	4603      	mov	r3, r0
 800d682:	2b00      	cmp	r3, #0
 800d684:	d002      	beq.n	800d68c <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800d686:	f06f 0305 	mvn.w	r3, #5
 800d68a:	e043      	b.n	800d714 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800d68c:	68fb      	ldr	r3, [r7, #12]
 800d68e:	681b      	ldr	r3, [r3, #0]
 800d690:	60fb      	str	r3, [r7, #12]
 800d692:	68fb      	ldr	r3, [r7, #12]
 800d694:	681b      	ldr	r3, [r3, #0]
 800d696:	2b00      	cmp	r3, #0
 800d698:	d1ef      	bne.n	800d67a <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800d69a:	68f8      	ldr	r0, [r7, #12]
 800d69c:	f7ff fed4 	bl	800d448 <tcp_output_segment_busy>
 800d6a0:	4603      	mov	r3, r0
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	d002      	beq.n	800d6ac <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800d6a6:	f06f 0305 	mvn.w	r3, #5
 800d6aa:	e033      	b.n	800d714 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800d6b0:	68fb      	ldr	r3, [r7, #12]
 800d6b2:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	2200      	movs	r2, #0
 800d6c0:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	8b5b      	ldrh	r3, [r3, #26]
 800d6c6:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800d6ca:	b29a      	uxth	r2, r3
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800d6d0:	68fb      	ldr	r3, [r7, #12]
 800d6d2:	68db      	ldr	r3, [r3, #12]
 800d6d4:	685b      	ldr	r3, [r3, #4]
 800d6d6:	4618      	mov	r0, r3
 800d6d8:	f7f8 fd6f 	bl	80061ba <lwip_htonl>
 800d6dc:	4604      	mov	r4, r0
 800d6de:	68fb      	ldr	r3, [r7, #12]
 800d6e0:	891b      	ldrh	r3, [r3, #8]
 800d6e2:	461d      	mov	r5, r3
 800d6e4:	68fb      	ldr	r3, [r7, #12]
 800d6e6:	68db      	ldr	r3, [r3, #12]
 800d6e8:	899b      	ldrh	r3, [r3, #12]
 800d6ea:	b29b      	uxth	r3, r3
 800d6ec:	4618      	mov	r0, r3
 800d6ee:	f7f8 fd4f 	bl	8006190 <lwip_htons>
 800d6f2:	4603      	mov	r3, r0
 800d6f4:	b2db      	uxtb	r3, r3
 800d6f6:	f003 0303 	and.w	r3, r3, #3
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	d001      	beq.n	800d702 <tcp_rexmit_rto_prepare+0xba>
 800d6fe:	2301      	movs	r3, #1
 800d700:	e000      	b.n	800d704 <tcp_rexmit_rto_prepare+0xbc>
 800d702:	2300      	movs	r3, #0
 800d704:	442b      	add	r3, r5
 800d706:	18e2      	adds	r2, r4, r3
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	2200      	movs	r2, #0
 800d710:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 800d712:	2300      	movs	r3, #0
}
 800d714:	4618      	mov	r0, r3
 800d716:	3710      	adds	r7, #16
 800d718:	46bd      	mov	sp, r7
 800d71a:	bdb0      	pop	{r4, r5, r7, pc}
 800d71c:	08013d5c 	.word	0x08013d5c
 800d720:	08014398 	.word	0x08014398
 800d724:	08013db0 	.word	0x08013db0

0800d728 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800d728:	b580      	push	{r7, lr}
 800d72a:	b082      	sub	sp, #8
 800d72c:	af00      	add	r7, sp, #0
 800d72e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	2b00      	cmp	r3, #0
 800d734:	d106      	bne.n	800d744 <tcp_rexmit_rto_commit+0x1c>
 800d736:	4b0d      	ldr	r3, [pc, #52]	@ (800d76c <tcp_rexmit_rto_commit+0x44>)
 800d738:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 800d73c:	490c      	ldr	r1, [pc, #48]	@ (800d770 <tcp_rexmit_rto_commit+0x48>)
 800d73e:	480d      	ldr	r0, [pc, #52]	@ (800d774 <tcp_rexmit_rto_commit+0x4c>)
 800d740:	f003 fe1e 	bl	8011380 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d74a:	2bff      	cmp	r3, #255	@ 0xff
 800d74c:	d007      	beq.n	800d75e <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d754:	3301      	adds	r3, #1
 800d756:	b2da      	uxtb	r2, r3
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800d75e:	6878      	ldr	r0, [r7, #4]
 800d760:	f7ff fc7e 	bl	800d060 <tcp_output>
}
 800d764:	bf00      	nop
 800d766:	3708      	adds	r7, #8
 800d768:	46bd      	mov	sp, r7
 800d76a:	bd80      	pop	{r7, pc}
 800d76c:	08013d5c 	.word	0x08013d5c
 800d770:	080143bc 	.word	0x080143bc
 800d774:	08013db0 	.word	0x08013db0

0800d778 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800d778:	b580      	push	{r7, lr}
 800d77a:	b082      	sub	sp, #8
 800d77c:	af00      	add	r7, sp, #0
 800d77e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	2b00      	cmp	r3, #0
 800d784:	d106      	bne.n	800d794 <tcp_rexmit_rto+0x1c>
 800d786:	4b0a      	ldr	r3, [pc, #40]	@ (800d7b0 <tcp_rexmit_rto+0x38>)
 800d788:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 800d78c:	4909      	ldr	r1, [pc, #36]	@ (800d7b4 <tcp_rexmit_rto+0x3c>)
 800d78e:	480a      	ldr	r0, [pc, #40]	@ (800d7b8 <tcp_rexmit_rto+0x40>)
 800d790:	f003 fdf6 	bl	8011380 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800d794:	6878      	ldr	r0, [r7, #4]
 800d796:	f7ff ff57 	bl	800d648 <tcp_rexmit_rto_prepare>
 800d79a:	4603      	mov	r3, r0
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	d102      	bne.n	800d7a6 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800d7a0:	6878      	ldr	r0, [r7, #4]
 800d7a2:	f7ff ffc1 	bl	800d728 <tcp_rexmit_rto_commit>
  }
}
 800d7a6:	bf00      	nop
 800d7a8:	3708      	adds	r7, #8
 800d7aa:	46bd      	mov	sp, r7
 800d7ac:	bd80      	pop	{r7, pc}
 800d7ae:	bf00      	nop
 800d7b0:	08013d5c 	.word	0x08013d5c
 800d7b4:	080143e0 	.word	0x080143e0
 800d7b8:	08013db0 	.word	0x08013db0

0800d7bc <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800d7bc:	b590      	push	{r4, r7, lr}
 800d7be:	b085      	sub	sp, #20
 800d7c0:	af00      	add	r7, sp, #0
 800d7c2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	d106      	bne.n	800d7d8 <tcp_rexmit+0x1c>
 800d7ca:	4b2f      	ldr	r3, [pc, #188]	@ (800d888 <tcp_rexmit+0xcc>)
 800d7cc:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 800d7d0:	492e      	ldr	r1, [pc, #184]	@ (800d88c <tcp_rexmit+0xd0>)
 800d7d2:	482f      	ldr	r0, [pc, #188]	@ (800d890 <tcp_rexmit+0xd4>)
 800d7d4:	f003 fdd4 	bl	8011380 <iprintf>

  if (pcb->unacked == NULL) {
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	d102      	bne.n	800d7e6 <tcp_rexmit+0x2a>
    return ERR_VAL;
 800d7e0:	f06f 0305 	mvn.w	r3, #5
 800d7e4:	e04c      	b.n	800d880 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d7ea:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800d7ec:	68b8      	ldr	r0, [r7, #8]
 800d7ee:	f7ff fe2b 	bl	800d448 <tcp_output_segment_busy>
 800d7f2:	4603      	mov	r3, r0
 800d7f4:	2b00      	cmp	r3, #0
 800d7f6:	d002      	beq.n	800d7fe <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800d7f8:	f06f 0305 	mvn.w	r3, #5
 800d7fc:	e040      	b.n	800d880 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800d7fe:	68bb      	ldr	r3, [r7, #8]
 800d800:	681a      	ldr	r2, [r3, #0]
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	336c      	adds	r3, #108	@ 0x6c
 800d80a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800d80c:	e002      	b.n	800d814 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800d80e:	68fb      	ldr	r3, [r7, #12]
 800d810:	681b      	ldr	r3, [r3, #0]
 800d812:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800d814:	68fb      	ldr	r3, [r7, #12]
 800d816:	681b      	ldr	r3, [r3, #0]
 800d818:	2b00      	cmp	r3, #0
 800d81a:	d011      	beq.n	800d840 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800d81c:	68fb      	ldr	r3, [r7, #12]
 800d81e:	681b      	ldr	r3, [r3, #0]
 800d820:	68db      	ldr	r3, [r3, #12]
 800d822:	685b      	ldr	r3, [r3, #4]
 800d824:	4618      	mov	r0, r3
 800d826:	f7f8 fcc8 	bl	80061ba <lwip_htonl>
 800d82a:	4604      	mov	r4, r0
 800d82c:	68bb      	ldr	r3, [r7, #8]
 800d82e:	68db      	ldr	r3, [r3, #12]
 800d830:	685b      	ldr	r3, [r3, #4]
 800d832:	4618      	mov	r0, r3
 800d834:	f7f8 fcc1 	bl	80061ba <lwip_htonl>
 800d838:	4603      	mov	r3, r0
 800d83a:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	dbe6      	blt.n	800d80e <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800d840:	68fb      	ldr	r3, [r7, #12]
 800d842:	681a      	ldr	r2, [r3, #0]
 800d844:	68bb      	ldr	r3, [r7, #8]
 800d846:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800d848:	68fb      	ldr	r3, [r7, #12]
 800d84a:	68ba      	ldr	r2, [r7, #8]
 800d84c:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800d84e:	68bb      	ldr	r3, [r7, #8]
 800d850:	681b      	ldr	r3, [r3, #0]
 800d852:	2b00      	cmp	r3, #0
 800d854:	d103      	bne.n	800d85e <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	2200      	movs	r2, #0
 800d85a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d864:	2bff      	cmp	r3, #255	@ 0xff
 800d866:	d007      	beq.n	800d878 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d86e:	3301      	adds	r3, #1
 800d870:	b2da      	uxtb	r2, r3
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	2200      	movs	r2, #0
 800d87c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800d87e:	2300      	movs	r3, #0
}
 800d880:	4618      	mov	r0, r3
 800d882:	3714      	adds	r7, #20
 800d884:	46bd      	mov	sp, r7
 800d886:	bd90      	pop	{r4, r7, pc}
 800d888:	08013d5c 	.word	0x08013d5c
 800d88c:	080143fc 	.word	0x080143fc
 800d890:	08013db0 	.word	0x08013db0

0800d894 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800d894:	b580      	push	{r7, lr}
 800d896:	b082      	sub	sp, #8
 800d898:	af00      	add	r7, sp, #0
 800d89a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	d106      	bne.n	800d8b0 <tcp_rexmit_fast+0x1c>
 800d8a2:	4b2a      	ldr	r3, [pc, #168]	@ (800d94c <tcp_rexmit_fast+0xb8>)
 800d8a4:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 800d8a8:	4929      	ldr	r1, [pc, #164]	@ (800d950 <tcp_rexmit_fast+0xbc>)
 800d8aa:	482a      	ldr	r0, [pc, #168]	@ (800d954 <tcp_rexmit_fast+0xc0>)
 800d8ac:	f003 fd68 	bl	8011380 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	d045      	beq.n	800d944 <tcp_rexmit_fast+0xb0>
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	8b5b      	ldrh	r3, [r3, #26]
 800d8bc:	f003 0304 	and.w	r3, r3, #4
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	d13f      	bne.n	800d944 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800d8c4:	6878      	ldr	r0, [r7, #4]
 800d8c6:	f7ff ff79 	bl	800d7bc <tcp_rexmit>
 800d8ca:	4603      	mov	r3, r0
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	d139      	bne.n	800d944 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800d8dc:	4293      	cmp	r3, r2
 800d8de:	bf28      	it	cs
 800d8e0:	4613      	movcs	r3, r2
 800d8e2:	b29b      	uxth	r3, r3
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	da00      	bge.n	800d8ea <tcp_rexmit_fast+0x56>
 800d8e8:	3301      	adds	r3, #1
 800d8ea:	105b      	asrs	r3, r3, #1
 800d8ec:	b29a      	uxth	r2, r3
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 800d8fa:	461a      	mov	r2, r3
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800d900:	005b      	lsls	r3, r3, #1
 800d902:	429a      	cmp	r2, r3
 800d904:	d206      	bcs.n	800d914 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800d90a:	005b      	lsls	r3, r3, #1
 800d90c:	b29a      	uxth	r2, r3
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800d91e:	4619      	mov	r1, r3
 800d920:	0049      	lsls	r1, r1, #1
 800d922:	440b      	add	r3, r1
 800d924:	b29b      	uxth	r3, r3
 800d926:	4413      	add	r3, r2
 800d928:	b29a      	uxth	r2, r3
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	8b5b      	ldrh	r3, [r3, #26]
 800d934:	f043 0304 	orr.w	r3, r3, #4
 800d938:	b29a      	uxth	r2, r3
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	2200      	movs	r2, #0
 800d942:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 800d944:	bf00      	nop
 800d946:	3708      	adds	r7, #8
 800d948:	46bd      	mov	sp, r7
 800d94a:	bd80      	pop	{r7, pc}
 800d94c:	08013d5c 	.word	0x08013d5c
 800d950:	08014414 	.word	0x08014414
 800d954:	08013db0 	.word	0x08013db0

0800d958 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800d958:	b580      	push	{r7, lr}
 800d95a:	b086      	sub	sp, #24
 800d95c:	af00      	add	r7, sp, #0
 800d95e:	60f8      	str	r0, [r7, #12]
 800d960:	607b      	str	r3, [r7, #4]
 800d962:	460b      	mov	r3, r1
 800d964:	817b      	strh	r3, [r7, #10]
 800d966:	4613      	mov	r3, r2
 800d968:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800d96a:	897a      	ldrh	r2, [r7, #10]
 800d96c:	893b      	ldrh	r3, [r7, #8]
 800d96e:	4413      	add	r3, r2
 800d970:	b29b      	uxth	r3, r3
 800d972:	3314      	adds	r3, #20
 800d974:	b29b      	uxth	r3, r3
 800d976:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800d97a:	4619      	mov	r1, r3
 800d97c:	2022      	movs	r0, #34	@ 0x22
 800d97e:	f7f9 fc81 	bl	8007284 <pbuf_alloc>
 800d982:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800d984:	697b      	ldr	r3, [r7, #20]
 800d986:	2b00      	cmp	r3, #0
 800d988:	d04d      	beq.n	800da26 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800d98a:	897b      	ldrh	r3, [r7, #10]
 800d98c:	3313      	adds	r3, #19
 800d98e:	697a      	ldr	r2, [r7, #20]
 800d990:	8952      	ldrh	r2, [r2, #10]
 800d992:	4293      	cmp	r3, r2
 800d994:	db06      	blt.n	800d9a4 <tcp_output_alloc_header_common+0x4c>
 800d996:	4b26      	ldr	r3, [pc, #152]	@ (800da30 <tcp_output_alloc_header_common+0xd8>)
 800d998:	f240 7223 	movw	r2, #1827	@ 0x723
 800d99c:	4925      	ldr	r1, [pc, #148]	@ (800da34 <tcp_output_alloc_header_common+0xdc>)
 800d99e:	4826      	ldr	r0, [pc, #152]	@ (800da38 <tcp_output_alloc_header_common+0xe0>)
 800d9a0:	f003 fcee 	bl	8011380 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800d9a4:	697b      	ldr	r3, [r7, #20]
 800d9a6:	685b      	ldr	r3, [r3, #4]
 800d9a8:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800d9aa:	8c3b      	ldrh	r3, [r7, #32]
 800d9ac:	4618      	mov	r0, r3
 800d9ae:	f7f8 fbef 	bl	8006190 <lwip_htons>
 800d9b2:	4603      	mov	r3, r0
 800d9b4:	461a      	mov	r2, r3
 800d9b6:	693b      	ldr	r3, [r7, #16]
 800d9b8:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800d9ba:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d9bc:	4618      	mov	r0, r3
 800d9be:	f7f8 fbe7 	bl	8006190 <lwip_htons>
 800d9c2:	4603      	mov	r3, r0
 800d9c4:	461a      	mov	r2, r3
 800d9c6:	693b      	ldr	r3, [r7, #16]
 800d9c8:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800d9ca:	693b      	ldr	r3, [r7, #16]
 800d9cc:	687a      	ldr	r2, [r7, #4]
 800d9ce:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800d9d0:	68f8      	ldr	r0, [r7, #12]
 800d9d2:	f7f8 fbf2 	bl	80061ba <lwip_htonl>
 800d9d6:	4602      	mov	r2, r0
 800d9d8:	693b      	ldr	r3, [r7, #16]
 800d9da:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800d9dc:	897b      	ldrh	r3, [r7, #10]
 800d9de:	089b      	lsrs	r3, r3, #2
 800d9e0:	b29b      	uxth	r3, r3
 800d9e2:	3305      	adds	r3, #5
 800d9e4:	b29b      	uxth	r3, r3
 800d9e6:	031b      	lsls	r3, r3, #12
 800d9e8:	b29a      	uxth	r2, r3
 800d9ea:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800d9ee:	b29b      	uxth	r3, r3
 800d9f0:	4313      	orrs	r3, r2
 800d9f2:	b29b      	uxth	r3, r3
 800d9f4:	4618      	mov	r0, r3
 800d9f6:	f7f8 fbcb 	bl	8006190 <lwip_htons>
 800d9fa:	4603      	mov	r3, r0
 800d9fc:	461a      	mov	r2, r3
 800d9fe:	693b      	ldr	r3, [r7, #16]
 800da00:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800da02:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800da04:	4618      	mov	r0, r3
 800da06:	f7f8 fbc3 	bl	8006190 <lwip_htons>
 800da0a:	4603      	mov	r3, r0
 800da0c:	461a      	mov	r2, r3
 800da0e:	693b      	ldr	r3, [r7, #16]
 800da10:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800da12:	693b      	ldr	r3, [r7, #16]
 800da14:	2200      	movs	r2, #0
 800da16:	741a      	strb	r2, [r3, #16]
 800da18:	2200      	movs	r2, #0
 800da1a:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800da1c:	693b      	ldr	r3, [r7, #16]
 800da1e:	2200      	movs	r2, #0
 800da20:	749a      	strb	r2, [r3, #18]
 800da22:	2200      	movs	r2, #0
 800da24:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800da26:	697b      	ldr	r3, [r7, #20]
}
 800da28:	4618      	mov	r0, r3
 800da2a:	3718      	adds	r7, #24
 800da2c:	46bd      	mov	sp, r7
 800da2e:	bd80      	pop	{r7, pc}
 800da30:	08013d5c 	.word	0x08013d5c
 800da34:	08014434 	.word	0x08014434
 800da38:	08013db0 	.word	0x08013db0

0800da3c <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800da3c:	b5b0      	push	{r4, r5, r7, lr}
 800da3e:	b08a      	sub	sp, #40	@ 0x28
 800da40:	af04      	add	r7, sp, #16
 800da42:	60f8      	str	r0, [r7, #12]
 800da44:	607b      	str	r3, [r7, #4]
 800da46:	460b      	mov	r3, r1
 800da48:	817b      	strh	r3, [r7, #10]
 800da4a:	4613      	mov	r3, r2
 800da4c:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800da4e:	68fb      	ldr	r3, [r7, #12]
 800da50:	2b00      	cmp	r3, #0
 800da52:	d106      	bne.n	800da62 <tcp_output_alloc_header+0x26>
 800da54:	4b15      	ldr	r3, [pc, #84]	@ (800daac <tcp_output_alloc_header+0x70>)
 800da56:	f240 7242 	movw	r2, #1858	@ 0x742
 800da5a:	4915      	ldr	r1, [pc, #84]	@ (800dab0 <tcp_output_alloc_header+0x74>)
 800da5c:	4815      	ldr	r0, [pc, #84]	@ (800dab4 <tcp_output_alloc_header+0x78>)
 800da5e:	f003 fc8f 	bl	8011380 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800da62:	68fb      	ldr	r3, [r7, #12]
 800da64:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800da66:	68fb      	ldr	r3, [r7, #12]
 800da68:	8adb      	ldrh	r3, [r3, #22]
 800da6a:	68fa      	ldr	r2, [r7, #12]
 800da6c:	8b12      	ldrh	r2, [r2, #24]
 800da6e:	68f9      	ldr	r1, [r7, #12]
 800da70:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 800da72:	893d      	ldrh	r5, [r7, #8]
 800da74:	897c      	ldrh	r4, [r7, #10]
 800da76:	9103      	str	r1, [sp, #12]
 800da78:	2110      	movs	r1, #16
 800da7a:	9102      	str	r1, [sp, #8]
 800da7c:	9201      	str	r2, [sp, #4]
 800da7e:	9300      	str	r3, [sp, #0]
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	462a      	mov	r2, r5
 800da84:	4621      	mov	r1, r4
 800da86:	f7ff ff67 	bl	800d958 <tcp_output_alloc_header_common>
 800da8a:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800da8c:	697b      	ldr	r3, [r7, #20]
 800da8e:	2b00      	cmp	r3, #0
 800da90:	d006      	beq.n	800daa0 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800da92:	68fb      	ldr	r3, [r7, #12]
 800da94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800da96:	68fa      	ldr	r2, [r7, #12]
 800da98:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 800da9a:	441a      	add	r2, r3
 800da9c:	68fb      	ldr	r3, [r7, #12]
 800da9e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 800daa0:	697b      	ldr	r3, [r7, #20]
}
 800daa2:	4618      	mov	r0, r3
 800daa4:	3718      	adds	r7, #24
 800daa6:	46bd      	mov	sp, r7
 800daa8:	bdb0      	pop	{r4, r5, r7, pc}
 800daaa:	bf00      	nop
 800daac:	08013d5c 	.word	0x08013d5c
 800dab0:	08014464 	.word	0x08014464
 800dab4:	08013db0 	.word	0x08013db0

0800dab8 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800dab8:	b580      	push	{r7, lr}
 800daba:	b088      	sub	sp, #32
 800dabc:	af00      	add	r7, sp, #0
 800dabe:	60f8      	str	r0, [r7, #12]
 800dac0:	60b9      	str	r1, [r7, #8]
 800dac2:	4611      	mov	r1, r2
 800dac4:	461a      	mov	r2, r3
 800dac6:	460b      	mov	r3, r1
 800dac8:	71fb      	strb	r3, [r7, #7]
 800daca:	4613      	mov	r3, r2
 800dacc:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800dace:	2300      	movs	r3, #0
 800dad0:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800dad2:	68bb      	ldr	r3, [r7, #8]
 800dad4:	2b00      	cmp	r3, #0
 800dad6:	d106      	bne.n	800dae6 <tcp_output_fill_options+0x2e>
 800dad8:	4b12      	ldr	r3, [pc, #72]	@ (800db24 <tcp_output_fill_options+0x6c>)
 800dada:	f240 7256 	movw	r2, #1878	@ 0x756
 800dade:	4912      	ldr	r1, [pc, #72]	@ (800db28 <tcp_output_fill_options+0x70>)
 800dae0:	4812      	ldr	r0, [pc, #72]	@ (800db2c <tcp_output_fill_options+0x74>)
 800dae2:	f003 fc4d 	bl	8011380 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800dae6:	68bb      	ldr	r3, [r7, #8]
 800dae8:	685b      	ldr	r3, [r3, #4]
 800daea:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800daec:	69bb      	ldr	r3, [r7, #24]
 800daee:	3314      	adds	r3, #20
 800daf0:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800daf2:	8bfb      	ldrh	r3, [r7, #30]
 800daf4:	009b      	lsls	r3, r3, #2
 800daf6:	461a      	mov	r2, r3
 800daf8:	79fb      	ldrb	r3, [r7, #7]
 800dafa:	009b      	lsls	r3, r3, #2
 800dafc:	f003 0304 	and.w	r3, r3, #4
 800db00:	4413      	add	r3, r2
 800db02:	3314      	adds	r3, #20
 800db04:	69ba      	ldr	r2, [r7, #24]
 800db06:	4413      	add	r3, r2
 800db08:	697a      	ldr	r2, [r7, #20]
 800db0a:	429a      	cmp	r2, r3
 800db0c:	d006      	beq.n	800db1c <tcp_output_fill_options+0x64>
 800db0e:	4b05      	ldr	r3, [pc, #20]	@ (800db24 <tcp_output_fill_options+0x6c>)
 800db10:	f240 7275 	movw	r2, #1909	@ 0x775
 800db14:	4906      	ldr	r1, [pc, #24]	@ (800db30 <tcp_output_fill_options+0x78>)
 800db16:	4805      	ldr	r0, [pc, #20]	@ (800db2c <tcp_output_fill_options+0x74>)
 800db18:	f003 fc32 	bl	8011380 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800db1c:	bf00      	nop
 800db1e:	3720      	adds	r7, #32
 800db20:	46bd      	mov	sp, r7
 800db22:	bd80      	pop	{r7, pc}
 800db24:	08013d5c 	.word	0x08013d5c
 800db28:	0801448c 	.word	0x0801448c
 800db2c:	08013db0 	.word	0x08013db0
 800db30:	08014384 	.word	0x08014384

0800db34 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800db34:	b580      	push	{r7, lr}
 800db36:	b08a      	sub	sp, #40	@ 0x28
 800db38:	af04      	add	r7, sp, #16
 800db3a:	60f8      	str	r0, [r7, #12]
 800db3c:	60b9      	str	r1, [r7, #8]
 800db3e:	607a      	str	r2, [r7, #4]
 800db40:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800db42:	68bb      	ldr	r3, [r7, #8]
 800db44:	2b00      	cmp	r3, #0
 800db46:	d106      	bne.n	800db56 <tcp_output_control_segment+0x22>
 800db48:	4b1c      	ldr	r3, [pc, #112]	@ (800dbbc <tcp_output_control_segment+0x88>)
 800db4a:	f240 7287 	movw	r2, #1927	@ 0x787
 800db4e:	491c      	ldr	r1, [pc, #112]	@ (800dbc0 <tcp_output_control_segment+0x8c>)
 800db50:	481c      	ldr	r0, [pc, #112]	@ (800dbc4 <tcp_output_control_segment+0x90>)
 800db52:	f003 fc15 	bl	8011380 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800db56:	683a      	ldr	r2, [r7, #0]
 800db58:	6879      	ldr	r1, [r7, #4]
 800db5a:	68f8      	ldr	r0, [r7, #12]
 800db5c:	f7fe faea 	bl	800c134 <tcp_route>
 800db60:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800db62:	693b      	ldr	r3, [r7, #16]
 800db64:	2b00      	cmp	r3, #0
 800db66:	d102      	bne.n	800db6e <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800db68:	23fc      	movs	r3, #252	@ 0xfc
 800db6a:	75fb      	strb	r3, [r7, #23]
 800db6c:	e01c      	b.n	800dba8 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800db6e:	68fb      	ldr	r3, [r7, #12]
 800db70:	2b00      	cmp	r3, #0
 800db72:	d006      	beq.n	800db82 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800db74:	68fb      	ldr	r3, [r7, #12]
 800db76:	7adb      	ldrb	r3, [r3, #11]
 800db78:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800db7a:	68fb      	ldr	r3, [r7, #12]
 800db7c:	7a9b      	ldrb	r3, [r3, #10]
 800db7e:	757b      	strb	r3, [r7, #21]
 800db80:	e003      	b.n	800db8a <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800db82:	23ff      	movs	r3, #255	@ 0xff
 800db84:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800db86:	2300      	movs	r3, #0
 800db88:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800db8a:	7dba      	ldrb	r2, [r7, #22]
 800db8c:	693b      	ldr	r3, [r7, #16]
 800db8e:	9302      	str	r3, [sp, #8]
 800db90:	2306      	movs	r3, #6
 800db92:	9301      	str	r3, [sp, #4]
 800db94:	7d7b      	ldrb	r3, [r7, #21]
 800db96:	9300      	str	r3, [sp, #0]
 800db98:	4613      	mov	r3, r2
 800db9a:	683a      	ldr	r2, [r7, #0]
 800db9c:	6879      	ldr	r1, [r7, #4]
 800db9e:	68b8      	ldr	r0, [r7, #8]
 800dba0:	f002 fac0 	bl	8010124 <ip4_output_if>
 800dba4:	4603      	mov	r3, r0
 800dba6:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800dba8:	68b8      	ldr	r0, [r7, #8]
 800dbaa:	f7f9 fe4f 	bl	800784c <pbuf_free>
  return err;
 800dbae:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800dbb2:	4618      	mov	r0, r3
 800dbb4:	3718      	adds	r7, #24
 800dbb6:	46bd      	mov	sp, r7
 800dbb8:	bd80      	pop	{r7, pc}
 800dbba:	bf00      	nop
 800dbbc:	08013d5c 	.word	0x08013d5c
 800dbc0:	080144b4 	.word	0x080144b4
 800dbc4:	08013db0 	.word	0x08013db0

0800dbc8 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800dbc8:	b590      	push	{r4, r7, lr}
 800dbca:	b08b      	sub	sp, #44	@ 0x2c
 800dbcc:	af04      	add	r7, sp, #16
 800dbce:	60f8      	str	r0, [r7, #12]
 800dbd0:	60b9      	str	r1, [r7, #8]
 800dbd2:	607a      	str	r2, [r7, #4]
 800dbd4:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800dbd6:	683b      	ldr	r3, [r7, #0]
 800dbd8:	2b00      	cmp	r3, #0
 800dbda:	d106      	bne.n	800dbea <tcp_rst+0x22>
 800dbdc:	4b1f      	ldr	r3, [pc, #124]	@ (800dc5c <tcp_rst+0x94>)
 800dbde:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 800dbe2:	491f      	ldr	r1, [pc, #124]	@ (800dc60 <tcp_rst+0x98>)
 800dbe4:	481f      	ldr	r0, [pc, #124]	@ (800dc64 <tcp_rst+0x9c>)
 800dbe6:	f003 fbcb 	bl	8011380 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800dbea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dbec:	2b00      	cmp	r3, #0
 800dbee:	d106      	bne.n	800dbfe <tcp_rst+0x36>
 800dbf0:	4b1a      	ldr	r3, [pc, #104]	@ (800dc5c <tcp_rst+0x94>)
 800dbf2:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 800dbf6:	491c      	ldr	r1, [pc, #112]	@ (800dc68 <tcp_rst+0xa0>)
 800dbf8:	481a      	ldr	r0, [pc, #104]	@ (800dc64 <tcp_rst+0x9c>)
 800dbfa:	f003 fbc1 	bl	8011380 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800dbfe:	2300      	movs	r3, #0
 800dc00:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800dc02:	f246 0308 	movw	r3, #24584	@ 0x6008
 800dc06:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800dc08:	7dfb      	ldrb	r3, [r7, #23]
 800dc0a:	b29c      	uxth	r4, r3
 800dc0c:	68b8      	ldr	r0, [r7, #8]
 800dc0e:	f7f8 fad4 	bl	80061ba <lwip_htonl>
 800dc12:	4602      	mov	r2, r0
 800dc14:	8abb      	ldrh	r3, [r7, #20]
 800dc16:	9303      	str	r3, [sp, #12]
 800dc18:	2314      	movs	r3, #20
 800dc1a:	9302      	str	r3, [sp, #8]
 800dc1c:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800dc1e:	9301      	str	r3, [sp, #4]
 800dc20:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800dc22:	9300      	str	r3, [sp, #0]
 800dc24:	4613      	mov	r3, r2
 800dc26:	2200      	movs	r2, #0
 800dc28:	4621      	mov	r1, r4
 800dc2a:	6878      	ldr	r0, [r7, #4]
 800dc2c:	f7ff fe94 	bl	800d958 <tcp_output_alloc_header_common>
 800dc30:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800dc32:	693b      	ldr	r3, [r7, #16]
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	d00c      	beq.n	800dc52 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800dc38:	7dfb      	ldrb	r3, [r7, #23]
 800dc3a:	2200      	movs	r2, #0
 800dc3c:	6939      	ldr	r1, [r7, #16]
 800dc3e:	68f8      	ldr	r0, [r7, #12]
 800dc40:	f7ff ff3a 	bl	800dab8 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800dc44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc46:	683a      	ldr	r2, [r7, #0]
 800dc48:	6939      	ldr	r1, [r7, #16]
 800dc4a:	68f8      	ldr	r0, [r7, #12]
 800dc4c:	f7ff ff72 	bl	800db34 <tcp_output_control_segment>
 800dc50:	e000      	b.n	800dc54 <tcp_rst+0x8c>
    return;
 800dc52:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800dc54:	371c      	adds	r7, #28
 800dc56:	46bd      	mov	sp, r7
 800dc58:	bd90      	pop	{r4, r7, pc}
 800dc5a:	bf00      	nop
 800dc5c:	08013d5c 	.word	0x08013d5c
 800dc60:	080144e0 	.word	0x080144e0
 800dc64:	08013db0 	.word	0x08013db0
 800dc68:	080144fc 	.word	0x080144fc

0800dc6c <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800dc6c:	b590      	push	{r4, r7, lr}
 800dc6e:	b087      	sub	sp, #28
 800dc70:	af00      	add	r7, sp, #0
 800dc72:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800dc74:	2300      	movs	r3, #0
 800dc76:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800dc78:	2300      	movs	r3, #0
 800dc7a:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	2b00      	cmp	r3, #0
 800dc80:	d106      	bne.n	800dc90 <tcp_send_empty_ack+0x24>
 800dc82:	4b28      	ldr	r3, [pc, #160]	@ (800dd24 <tcp_send_empty_ack+0xb8>)
 800dc84:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 800dc88:	4927      	ldr	r1, [pc, #156]	@ (800dd28 <tcp_send_empty_ack+0xbc>)
 800dc8a:	4828      	ldr	r0, [pc, #160]	@ (800dd2c <tcp_send_empty_ack+0xc0>)
 800dc8c:	f003 fb78 	bl	8011380 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800dc90:	7dfb      	ldrb	r3, [r7, #23]
 800dc92:	009b      	lsls	r3, r3, #2
 800dc94:	b2db      	uxtb	r3, r3
 800dc96:	f003 0304 	and.w	r3, r3, #4
 800dc9a:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800dc9c:	7d7b      	ldrb	r3, [r7, #21]
 800dc9e:	b29c      	uxth	r4, r3
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dca4:	4618      	mov	r0, r3
 800dca6:	f7f8 fa88 	bl	80061ba <lwip_htonl>
 800dcaa:	4603      	mov	r3, r0
 800dcac:	2200      	movs	r2, #0
 800dcae:	4621      	mov	r1, r4
 800dcb0:	6878      	ldr	r0, [r7, #4]
 800dcb2:	f7ff fec3 	bl	800da3c <tcp_output_alloc_header>
 800dcb6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800dcb8:	693b      	ldr	r3, [r7, #16]
 800dcba:	2b00      	cmp	r3, #0
 800dcbc:	d109      	bne.n	800dcd2 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	8b5b      	ldrh	r3, [r3, #26]
 800dcc2:	f043 0303 	orr.w	r3, r3, #3
 800dcc6:	b29a      	uxth	r2, r3
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800dccc:	f06f 0301 	mvn.w	r3, #1
 800dcd0:	e023      	b.n	800dd1a <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800dcd2:	7dbb      	ldrb	r3, [r7, #22]
 800dcd4:	7dfa      	ldrb	r2, [r7, #23]
 800dcd6:	6939      	ldr	r1, [r7, #16]
 800dcd8:	6878      	ldr	r0, [r7, #4]
 800dcda:	f7ff feed 	bl	800dab8 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800dcde:	687a      	ldr	r2, [r7, #4]
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	3304      	adds	r3, #4
 800dce4:	6939      	ldr	r1, [r7, #16]
 800dce6:	6878      	ldr	r0, [r7, #4]
 800dce8:	f7ff ff24 	bl	800db34 <tcp_output_control_segment>
 800dcec:	4603      	mov	r3, r0
 800dcee:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800dcf0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dcf4:	2b00      	cmp	r3, #0
 800dcf6:	d007      	beq.n	800dd08 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	8b5b      	ldrh	r3, [r3, #26]
 800dcfc:	f043 0303 	orr.w	r3, r3, #3
 800dd00:	b29a      	uxth	r2, r3
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	835a      	strh	r2, [r3, #26]
 800dd06:	e006      	b.n	800dd16 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	8b5b      	ldrh	r3, [r3, #26]
 800dd0c:	f023 0303 	bic.w	r3, r3, #3
 800dd10:	b29a      	uxth	r2, r3
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800dd16:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800dd1a:	4618      	mov	r0, r3
 800dd1c:	371c      	adds	r7, #28
 800dd1e:	46bd      	mov	sp, r7
 800dd20:	bd90      	pop	{r4, r7, pc}
 800dd22:	bf00      	nop
 800dd24:	08013d5c 	.word	0x08013d5c
 800dd28:	08014518 	.word	0x08014518
 800dd2c:	08013db0 	.word	0x08013db0

0800dd30 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800dd30:	b590      	push	{r4, r7, lr}
 800dd32:	b087      	sub	sp, #28
 800dd34:	af00      	add	r7, sp, #0
 800dd36:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800dd38:	2300      	movs	r3, #0
 800dd3a:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	2b00      	cmp	r3, #0
 800dd40:	d106      	bne.n	800dd50 <tcp_keepalive+0x20>
 800dd42:	4b18      	ldr	r3, [pc, #96]	@ (800dda4 <tcp_keepalive+0x74>)
 800dd44:	f640 0224 	movw	r2, #2084	@ 0x824
 800dd48:	4917      	ldr	r1, [pc, #92]	@ (800dda8 <tcp_keepalive+0x78>)
 800dd4a:	4818      	ldr	r0, [pc, #96]	@ (800ddac <tcp_keepalive+0x7c>)
 800dd4c:	f003 fb18 	bl	8011380 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800dd50:	7dfb      	ldrb	r3, [r7, #23]
 800dd52:	b29c      	uxth	r4, r3
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dd58:	3b01      	subs	r3, #1
 800dd5a:	4618      	mov	r0, r3
 800dd5c:	f7f8 fa2d 	bl	80061ba <lwip_htonl>
 800dd60:	4603      	mov	r3, r0
 800dd62:	2200      	movs	r2, #0
 800dd64:	4621      	mov	r1, r4
 800dd66:	6878      	ldr	r0, [r7, #4]
 800dd68:	f7ff fe68 	bl	800da3c <tcp_output_alloc_header>
 800dd6c:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800dd6e:	693b      	ldr	r3, [r7, #16]
 800dd70:	2b00      	cmp	r3, #0
 800dd72:	d102      	bne.n	800dd7a <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800dd74:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800dd78:	e010      	b.n	800dd9c <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800dd7a:	7dfb      	ldrb	r3, [r7, #23]
 800dd7c:	2200      	movs	r2, #0
 800dd7e:	6939      	ldr	r1, [r7, #16]
 800dd80:	6878      	ldr	r0, [r7, #4]
 800dd82:	f7ff fe99 	bl	800dab8 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800dd86:	687a      	ldr	r2, [r7, #4]
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	3304      	adds	r3, #4
 800dd8c:	6939      	ldr	r1, [r7, #16]
 800dd8e:	6878      	ldr	r0, [r7, #4]
 800dd90:	f7ff fed0 	bl	800db34 <tcp_output_control_segment>
 800dd94:	4603      	mov	r3, r0
 800dd96:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800dd98:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800dd9c:	4618      	mov	r0, r3
 800dd9e:	371c      	adds	r7, #28
 800dda0:	46bd      	mov	sp, r7
 800dda2:	bd90      	pop	{r4, r7, pc}
 800dda4:	08013d5c 	.word	0x08013d5c
 800dda8:	08014538 	.word	0x08014538
 800ddac:	08013db0 	.word	0x08013db0

0800ddb0 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800ddb0:	b590      	push	{r4, r7, lr}
 800ddb2:	b08b      	sub	sp, #44	@ 0x2c
 800ddb4:	af00      	add	r7, sp, #0
 800ddb6:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800ddb8:	2300      	movs	r3, #0
 800ddba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	2b00      	cmp	r3, #0
 800ddc2:	d106      	bne.n	800ddd2 <tcp_zero_window_probe+0x22>
 800ddc4:	4b4c      	ldr	r3, [pc, #304]	@ (800def8 <tcp_zero_window_probe+0x148>)
 800ddc6:	f640 024f 	movw	r2, #2127	@ 0x84f
 800ddca:	494c      	ldr	r1, [pc, #304]	@ (800defc <tcp_zero_window_probe+0x14c>)
 800ddcc:	484c      	ldr	r0, [pc, #304]	@ (800df00 <tcp_zero_window_probe+0x150>)
 800ddce:	f003 fad7 	bl	8011380 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ddd6:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800ddd8:	6a3b      	ldr	r3, [r7, #32]
 800ddda:	2b00      	cmp	r3, #0
 800dddc:	d101      	bne.n	800dde2 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800ddde:	2300      	movs	r3, #0
 800dde0:	e086      	b.n	800def0 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800dde8:	2bff      	cmp	r3, #255	@ 0xff
 800ddea:	d007      	beq.n	800ddfc <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800ddf2:	3301      	adds	r3, #1
 800ddf4:	b2da      	uxtb	r2, r3
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800ddfc:	6a3b      	ldr	r3, [r7, #32]
 800ddfe:	68db      	ldr	r3, [r3, #12]
 800de00:	899b      	ldrh	r3, [r3, #12]
 800de02:	b29b      	uxth	r3, r3
 800de04:	4618      	mov	r0, r3
 800de06:	f7f8 f9c3 	bl	8006190 <lwip_htons>
 800de0a:	4603      	mov	r3, r0
 800de0c:	b2db      	uxtb	r3, r3
 800de0e:	f003 0301 	and.w	r3, r3, #1
 800de12:	2b00      	cmp	r3, #0
 800de14:	d005      	beq.n	800de22 <tcp_zero_window_probe+0x72>
 800de16:	6a3b      	ldr	r3, [r7, #32]
 800de18:	891b      	ldrh	r3, [r3, #8]
 800de1a:	2b00      	cmp	r3, #0
 800de1c:	d101      	bne.n	800de22 <tcp_zero_window_probe+0x72>
 800de1e:	2301      	movs	r3, #1
 800de20:	e000      	b.n	800de24 <tcp_zero_window_probe+0x74>
 800de22:	2300      	movs	r3, #0
 800de24:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800de26:	7ffb      	ldrb	r3, [r7, #31]
 800de28:	2b00      	cmp	r3, #0
 800de2a:	bf0c      	ite	eq
 800de2c:	2301      	moveq	r3, #1
 800de2e:	2300      	movne	r3, #0
 800de30:	b2db      	uxtb	r3, r3
 800de32:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800de34:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800de38:	b299      	uxth	r1, r3
 800de3a:	6a3b      	ldr	r3, [r7, #32]
 800de3c:	68db      	ldr	r3, [r3, #12]
 800de3e:	685b      	ldr	r3, [r3, #4]
 800de40:	8bba      	ldrh	r2, [r7, #28]
 800de42:	6878      	ldr	r0, [r7, #4]
 800de44:	f7ff fdfa 	bl	800da3c <tcp_output_alloc_header>
 800de48:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800de4a:	69bb      	ldr	r3, [r7, #24]
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	d102      	bne.n	800de56 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800de50:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800de54:	e04c      	b.n	800def0 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800de56:	69bb      	ldr	r3, [r7, #24]
 800de58:	685b      	ldr	r3, [r3, #4]
 800de5a:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800de5c:	7ffb      	ldrb	r3, [r7, #31]
 800de5e:	2b00      	cmp	r3, #0
 800de60:	d011      	beq.n	800de86 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800de62:	697b      	ldr	r3, [r7, #20]
 800de64:	899b      	ldrh	r3, [r3, #12]
 800de66:	b29b      	uxth	r3, r3
 800de68:	b21b      	sxth	r3, r3
 800de6a:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800de6e:	b21c      	sxth	r4, r3
 800de70:	2011      	movs	r0, #17
 800de72:	f7f8 f98d 	bl	8006190 <lwip_htons>
 800de76:	4603      	mov	r3, r0
 800de78:	b21b      	sxth	r3, r3
 800de7a:	4323      	orrs	r3, r4
 800de7c:	b21b      	sxth	r3, r3
 800de7e:	b29a      	uxth	r2, r3
 800de80:	697b      	ldr	r3, [r7, #20]
 800de82:	819a      	strh	r2, [r3, #12]
 800de84:	e010      	b.n	800dea8 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800de86:	69bb      	ldr	r3, [r7, #24]
 800de88:	685b      	ldr	r3, [r3, #4]
 800de8a:	3314      	adds	r3, #20
 800de8c:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800de8e:	6a3b      	ldr	r3, [r7, #32]
 800de90:	6858      	ldr	r0, [r3, #4]
 800de92:	6a3b      	ldr	r3, [r7, #32]
 800de94:	685b      	ldr	r3, [r3, #4]
 800de96:	891a      	ldrh	r2, [r3, #8]
 800de98:	6a3b      	ldr	r3, [r7, #32]
 800de9a:	891b      	ldrh	r3, [r3, #8]
 800de9c:	1ad3      	subs	r3, r2, r3
 800de9e:	b29b      	uxth	r3, r3
 800dea0:	2201      	movs	r2, #1
 800dea2:	6939      	ldr	r1, [r7, #16]
 800dea4:	f7f9 fecc 	bl	8007c40 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800dea8:	6a3b      	ldr	r3, [r7, #32]
 800deaa:	68db      	ldr	r3, [r3, #12]
 800deac:	685b      	ldr	r3, [r3, #4]
 800deae:	4618      	mov	r0, r3
 800deb0:	f7f8 f983 	bl	80061ba <lwip_htonl>
 800deb4:	4603      	mov	r3, r0
 800deb6:	3301      	adds	r3, #1
 800deb8:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800debe:	68fb      	ldr	r3, [r7, #12]
 800dec0:	1ad3      	subs	r3, r2, r3
 800dec2:	2b00      	cmp	r3, #0
 800dec4:	da02      	bge.n	800decc <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	68fa      	ldr	r2, [r7, #12]
 800deca:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800decc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ded0:	2200      	movs	r2, #0
 800ded2:	69b9      	ldr	r1, [r7, #24]
 800ded4:	6878      	ldr	r0, [r7, #4]
 800ded6:	f7ff fdef 	bl	800dab8 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800deda:	687a      	ldr	r2, [r7, #4]
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	3304      	adds	r3, #4
 800dee0:	69b9      	ldr	r1, [r7, #24]
 800dee2:	6878      	ldr	r0, [r7, #4]
 800dee4:	f7ff fe26 	bl	800db34 <tcp_output_control_segment>
 800dee8:	4603      	mov	r3, r0
 800deea:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800deec:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800def0:	4618      	mov	r0, r3
 800def2:	372c      	adds	r7, #44	@ 0x2c
 800def4:	46bd      	mov	sp, r7
 800def6:	bd90      	pop	{r4, r7, pc}
 800def8:	08013d5c 	.word	0x08013d5c
 800defc:	08014554 	.word	0x08014554
 800df00:	08013db0 	.word	0x08013db0

0800df04 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800df04:	b580      	push	{r7, lr}
 800df06:	b082      	sub	sp, #8
 800df08:	af00      	add	r7, sp, #0
 800df0a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800df0c:	f7fa f818 	bl	8007f40 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800df10:	4b0a      	ldr	r3, [pc, #40]	@ (800df3c <tcpip_tcp_timer+0x38>)
 800df12:	681b      	ldr	r3, [r3, #0]
 800df14:	2b00      	cmp	r3, #0
 800df16:	d103      	bne.n	800df20 <tcpip_tcp_timer+0x1c>
 800df18:	4b09      	ldr	r3, [pc, #36]	@ (800df40 <tcpip_tcp_timer+0x3c>)
 800df1a:	681b      	ldr	r3, [r3, #0]
 800df1c:	2b00      	cmp	r3, #0
 800df1e:	d005      	beq.n	800df2c <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800df20:	2200      	movs	r2, #0
 800df22:	4908      	ldr	r1, [pc, #32]	@ (800df44 <tcpip_tcp_timer+0x40>)
 800df24:	20fa      	movs	r0, #250	@ 0xfa
 800df26:	f000 f8f3 	bl	800e110 <sys_timeout>
 800df2a:	e003      	b.n	800df34 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800df2c:	4b06      	ldr	r3, [pc, #24]	@ (800df48 <tcpip_tcp_timer+0x44>)
 800df2e:	2200      	movs	r2, #0
 800df30:	601a      	str	r2, [r3, #0]
  }
}
 800df32:	bf00      	nop
 800df34:	bf00      	nop
 800df36:	3708      	adds	r7, #8
 800df38:	46bd      	mov	sp, r7
 800df3a:	bd80      	pop	{r7, pc}
 800df3c:	2000a7f4 	.word	0x2000a7f4
 800df40:	2000a7f8 	.word	0x2000a7f8
 800df44:	0800df05 	.word	0x0800df05
 800df48:	2000a840 	.word	0x2000a840

0800df4c <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800df4c:	b580      	push	{r7, lr}
 800df4e:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800df50:	4b0a      	ldr	r3, [pc, #40]	@ (800df7c <tcp_timer_needed+0x30>)
 800df52:	681b      	ldr	r3, [r3, #0]
 800df54:	2b00      	cmp	r3, #0
 800df56:	d10f      	bne.n	800df78 <tcp_timer_needed+0x2c>
 800df58:	4b09      	ldr	r3, [pc, #36]	@ (800df80 <tcp_timer_needed+0x34>)
 800df5a:	681b      	ldr	r3, [r3, #0]
 800df5c:	2b00      	cmp	r3, #0
 800df5e:	d103      	bne.n	800df68 <tcp_timer_needed+0x1c>
 800df60:	4b08      	ldr	r3, [pc, #32]	@ (800df84 <tcp_timer_needed+0x38>)
 800df62:	681b      	ldr	r3, [r3, #0]
 800df64:	2b00      	cmp	r3, #0
 800df66:	d007      	beq.n	800df78 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800df68:	4b04      	ldr	r3, [pc, #16]	@ (800df7c <tcp_timer_needed+0x30>)
 800df6a:	2201      	movs	r2, #1
 800df6c:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800df6e:	2200      	movs	r2, #0
 800df70:	4905      	ldr	r1, [pc, #20]	@ (800df88 <tcp_timer_needed+0x3c>)
 800df72:	20fa      	movs	r0, #250	@ 0xfa
 800df74:	f000 f8cc 	bl	800e110 <sys_timeout>
  }
}
 800df78:	bf00      	nop
 800df7a:	bd80      	pop	{r7, pc}
 800df7c:	2000a840 	.word	0x2000a840
 800df80:	2000a7f4 	.word	0x2000a7f4
 800df84:	2000a7f8 	.word	0x2000a7f8
 800df88:	0800df05 	.word	0x0800df05

0800df8c <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800df8c:	b580      	push	{r7, lr}
 800df8e:	b086      	sub	sp, #24
 800df90:	af00      	add	r7, sp, #0
 800df92:	60f8      	str	r0, [r7, #12]
 800df94:	60b9      	str	r1, [r7, #8]
 800df96:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800df98:	2006      	movs	r0, #6
 800df9a:	f7f8 fd71 	bl	8006a80 <memp_malloc>
 800df9e:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800dfa0:	693b      	ldr	r3, [r7, #16]
 800dfa2:	2b00      	cmp	r3, #0
 800dfa4:	d109      	bne.n	800dfba <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800dfa6:	693b      	ldr	r3, [r7, #16]
 800dfa8:	2b00      	cmp	r3, #0
 800dfaa:	d151      	bne.n	800e050 <sys_timeout_abs+0xc4>
 800dfac:	4b2a      	ldr	r3, [pc, #168]	@ (800e058 <sys_timeout_abs+0xcc>)
 800dfae:	22be      	movs	r2, #190	@ 0xbe
 800dfb0:	492a      	ldr	r1, [pc, #168]	@ (800e05c <sys_timeout_abs+0xd0>)
 800dfb2:	482b      	ldr	r0, [pc, #172]	@ (800e060 <sys_timeout_abs+0xd4>)
 800dfb4:	f003 f9e4 	bl	8011380 <iprintf>
    return;
 800dfb8:	e04a      	b.n	800e050 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800dfba:	693b      	ldr	r3, [r7, #16]
 800dfbc:	2200      	movs	r2, #0
 800dfbe:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800dfc0:	693b      	ldr	r3, [r7, #16]
 800dfc2:	68ba      	ldr	r2, [r7, #8]
 800dfc4:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800dfc6:	693b      	ldr	r3, [r7, #16]
 800dfc8:	687a      	ldr	r2, [r7, #4]
 800dfca:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800dfcc:	693b      	ldr	r3, [r7, #16]
 800dfce:	68fa      	ldr	r2, [r7, #12]
 800dfd0:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800dfd2:	4b24      	ldr	r3, [pc, #144]	@ (800e064 <sys_timeout_abs+0xd8>)
 800dfd4:	681b      	ldr	r3, [r3, #0]
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	d103      	bne.n	800dfe2 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800dfda:	4a22      	ldr	r2, [pc, #136]	@ (800e064 <sys_timeout_abs+0xd8>)
 800dfdc:	693b      	ldr	r3, [r7, #16]
 800dfde:	6013      	str	r3, [r2, #0]
    return;
 800dfe0:	e037      	b.n	800e052 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800dfe2:	693b      	ldr	r3, [r7, #16]
 800dfe4:	685a      	ldr	r2, [r3, #4]
 800dfe6:	4b1f      	ldr	r3, [pc, #124]	@ (800e064 <sys_timeout_abs+0xd8>)
 800dfe8:	681b      	ldr	r3, [r3, #0]
 800dfea:	685b      	ldr	r3, [r3, #4]
 800dfec:	1ad3      	subs	r3, r2, r3
 800dfee:	0fdb      	lsrs	r3, r3, #31
 800dff0:	f003 0301 	and.w	r3, r3, #1
 800dff4:	b2db      	uxtb	r3, r3
 800dff6:	2b00      	cmp	r3, #0
 800dff8:	d007      	beq.n	800e00a <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800dffa:	4b1a      	ldr	r3, [pc, #104]	@ (800e064 <sys_timeout_abs+0xd8>)
 800dffc:	681a      	ldr	r2, [r3, #0]
 800dffe:	693b      	ldr	r3, [r7, #16]
 800e000:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800e002:	4a18      	ldr	r2, [pc, #96]	@ (800e064 <sys_timeout_abs+0xd8>)
 800e004:	693b      	ldr	r3, [r7, #16]
 800e006:	6013      	str	r3, [r2, #0]
 800e008:	e023      	b.n	800e052 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800e00a:	4b16      	ldr	r3, [pc, #88]	@ (800e064 <sys_timeout_abs+0xd8>)
 800e00c:	681b      	ldr	r3, [r3, #0]
 800e00e:	617b      	str	r3, [r7, #20]
 800e010:	e01a      	b.n	800e048 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800e012:	697b      	ldr	r3, [r7, #20]
 800e014:	681b      	ldr	r3, [r3, #0]
 800e016:	2b00      	cmp	r3, #0
 800e018:	d00b      	beq.n	800e032 <sys_timeout_abs+0xa6>
 800e01a:	693b      	ldr	r3, [r7, #16]
 800e01c:	685a      	ldr	r2, [r3, #4]
 800e01e:	697b      	ldr	r3, [r7, #20]
 800e020:	681b      	ldr	r3, [r3, #0]
 800e022:	685b      	ldr	r3, [r3, #4]
 800e024:	1ad3      	subs	r3, r2, r3
 800e026:	0fdb      	lsrs	r3, r3, #31
 800e028:	f003 0301 	and.w	r3, r3, #1
 800e02c:	b2db      	uxtb	r3, r3
 800e02e:	2b00      	cmp	r3, #0
 800e030:	d007      	beq.n	800e042 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800e032:	697b      	ldr	r3, [r7, #20]
 800e034:	681a      	ldr	r2, [r3, #0]
 800e036:	693b      	ldr	r3, [r7, #16]
 800e038:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800e03a:	697b      	ldr	r3, [r7, #20]
 800e03c:	693a      	ldr	r2, [r7, #16]
 800e03e:	601a      	str	r2, [r3, #0]
        break;
 800e040:	e007      	b.n	800e052 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800e042:	697b      	ldr	r3, [r7, #20]
 800e044:	681b      	ldr	r3, [r3, #0]
 800e046:	617b      	str	r3, [r7, #20]
 800e048:	697b      	ldr	r3, [r7, #20]
 800e04a:	2b00      	cmp	r3, #0
 800e04c:	d1e1      	bne.n	800e012 <sys_timeout_abs+0x86>
 800e04e:	e000      	b.n	800e052 <sys_timeout_abs+0xc6>
    return;
 800e050:	bf00      	nop
      }
    }
  }
}
 800e052:	3718      	adds	r7, #24
 800e054:	46bd      	mov	sp, r7
 800e056:	bd80      	pop	{r7, pc}
 800e058:	08014578 	.word	0x08014578
 800e05c:	080145ac 	.word	0x080145ac
 800e060:	080145ec 	.word	0x080145ec
 800e064:	2000a838 	.word	0x2000a838

0800e068 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800e068:	b580      	push	{r7, lr}
 800e06a:	b086      	sub	sp, #24
 800e06c:	af00      	add	r7, sp, #0
 800e06e:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800e074:	697b      	ldr	r3, [r7, #20]
 800e076:	685b      	ldr	r3, [r3, #4]
 800e078:	4798      	blx	r3

  now = sys_now();
 800e07a:	f7f7 fe75 	bl	8005d68 <sys_now>
 800e07e:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800e080:	697b      	ldr	r3, [r7, #20]
 800e082:	681a      	ldr	r2, [r3, #0]
 800e084:	4b0f      	ldr	r3, [pc, #60]	@ (800e0c4 <lwip_cyclic_timer+0x5c>)
 800e086:	681b      	ldr	r3, [r3, #0]
 800e088:	4413      	add	r3, r2
 800e08a:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800e08c:	68fa      	ldr	r2, [r7, #12]
 800e08e:	693b      	ldr	r3, [r7, #16]
 800e090:	1ad3      	subs	r3, r2, r3
 800e092:	0fdb      	lsrs	r3, r3, #31
 800e094:	f003 0301 	and.w	r3, r3, #1
 800e098:	b2db      	uxtb	r3, r3
 800e09a:	2b00      	cmp	r3, #0
 800e09c:	d009      	beq.n	800e0b2 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800e09e:	697b      	ldr	r3, [r7, #20]
 800e0a0:	681a      	ldr	r2, [r3, #0]
 800e0a2:	693b      	ldr	r3, [r7, #16]
 800e0a4:	4413      	add	r3, r2
 800e0a6:	687a      	ldr	r2, [r7, #4]
 800e0a8:	4907      	ldr	r1, [pc, #28]	@ (800e0c8 <lwip_cyclic_timer+0x60>)
 800e0aa:	4618      	mov	r0, r3
 800e0ac:	f7ff ff6e 	bl	800df8c <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800e0b0:	e004      	b.n	800e0bc <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800e0b2:	687a      	ldr	r2, [r7, #4]
 800e0b4:	4904      	ldr	r1, [pc, #16]	@ (800e0c8 <lwip_cyclic_timer+0x60>)
 800e0b6:	68f8      	ldr	r0, [r7, #12]
 800e0b8:	f7ff ff68 	bl	800df8c <sys_timeout_abs>
}
 800e0bc:	bf00      	nop
 800e0be:	3718      	adds	r7, #24
 800e0c0:	46bd      	mov	sp, r7
 800e0c2:	bd80      	pop	{r7, pc}
 800e0c4:	2000a83c 	.word	0x2000a83c
 800e0c8:	0800e069 	.word	0x0800e069

0800e0cc <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800e0cc:	b580      	push	{r7, lr}
 800e0ce:	b082      	sub	sp, #8
 800e0d0:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800e0d2:	2301      	movs	r3, #1
 800e0d4:	607b      	str	r3, [r7, #4]
 800e0d6:	e00e      	b.n	800e0f6 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800e0d8:	4a0b      	ldr	r2, [pc, #44]	@ (800e108 <sys_timeouts_init+0x3c>)
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	00db      	lsls	r3, r3, #3
 800e0e4:	4a08      	ldr	r2, [pc, #32]	@ (800e108 <sys_timeouts_init+0x3c>)
 800e0e6:	4413      	add	r3, r2
 800e0e8:	461a      	mov	r2, r3
 800e0ea:	4908      	ldr	r1, [pc, #32]	@ (800e10c <sys_timeouts_init+0x40>)
 800e0ec:	f000 f810 	bl	800e110 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	3301      	adds	r3, #1
 800e0f4:	607b      	str	r3, [r7, #4]
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	2b02      	cmp	r3, #2
 800e0fa:	d9ed      	bls.n	800e0d8 <sys_timeouts_init+0xc>
  }
}
 800e0fc:	bf00      	nop
 800e0fe:	bf00      	nop
 800e100:	3708      	adds	r7, #8
 800e102:	46bd      	mov	sp, r7
 800e104:	bd80      	pop	{r7, pc}
 800e106:	bf00      	nop
 800e108:	08015164 	.word	0x08015164
 800e10c:	0800e069 	.word	0x0800e069

0800e110 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800e110:	b580      	push	{r7, lr}
 800e112:	b086      	sub	sp, #24
 800e114:	af00      	add	r7, sp, #0
 800e116:	60f8      	str	r0, [r7, #12]
 800e118:	60b9      	str	r1, [r7, #8]
 800e11a:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800e11c:	68fb      	ldr	r3, [r7, #12]
 800e11e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e122:	d306      	bcc.n	800e132 <sys_timeout+0x22>
 800e124:	4b0a      	ldr	r3, [pc, #40]	@ (800e150 <sys_timeout+0x40>)
 800e126:	f240 1229 	movw	r2, #297	@ 0x129
 800e12a:	490a      	ldr	r1, [pc, #40]	@ (800e154 <sys_timeout+0x44>)
 800e12c:	480a      	ldr	r0, [pc, #40]	@ (800e158 <sys_timeout+0x48>)
 800e12e:	f003 f927 	bl	8011380 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800e132:	f7f7 fe19 	bl	8005d68 <sys_now>
 800e136:	4602      	mov	r2, r0
 800e138:	68fb      	ldr	r3, [r7, #12]
 800e13a:	4413      	add	r3, r2
 800e13c:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800e13e:	687a      	ldr	r2, [r7, #4]
 800e140:	68b9      	ldr	r1, [r7, #8]
 800e142:	6978      	ldr	r0, [r7, #20]
 800e144:	f7ff ff22 	bl	800df8c <sys_timeout_abs>
#endif
}
 800e148:	bf00      	nop
 800e14a:	3718      	adds	r7, #24
 800e14c:	46bd      	mov	sp, r7
 800e14e:	bd80      	pop	{r7, pc}
 800e150:	08014578 	.word	0x08014578
 800e154:	08014614 	.word	0x08014614
 800e158:	080145ec 	.word	0x080145ec

0800e15c <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800e15c:	b580      	push	{r7, lr}
 800e15e:	b084      	sub	sp, #16
 800e160:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800e162:	f7f7 fe01 	bl	8005d68 <sys_now>
 800e166:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800e168:	4b1a      	ldr	r3, [pc, #104]	@ (800e1d4 <sys_check_timeouts+0x78>)
 800e16a:	781b      	ldrb	r3, [r3, #0]
 800e16c:	b2db      	uxtb	r3, r3
 800e16e:	2b00      	cmp	r3, #0
 800e170:	d001      	beq.n	800e176 <sys_check_timeouts+0x1a>
 800e172:	f7f9 f831 	bl	80071d8 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800e176:	4b18      	ldr	r3, [pc, #96]	@ (800e1d8 <sys_check_timeouts+0x7c>)
 800e178:	681b      	ldr	r3, [r3, #0]
 800e17a:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800e17c:	68bb      	ldr	r3, [r7, #8]
 800e17e:	2b00      	cmp	r3, #0
 800e180:	d022      	beq.n	800e1c8 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800e182:	68bb      	ldr	r3, [r7, #8]
 800e184:	685b      	ldr	r3, [r3, #4]
 800e186:	68fa      	ldr	r2, [r7, #12]
 800e188:	1ad3      	subs	r3, r2, r3
 800e18a:	0fdb      	lsrs	r3, r3, #31
 800e18c:	f003 0301 	and.w	r3, r3, #1
 800e190:	b2db      	uxtb	r3, r3
 800e192:	2b00      	cmp	r3, #0
 800e194:	d11a      	bne.n	800e1cc <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800e196:	68bb      	ldr	r3, [r7, #8]
 800e198:	681b      	ldr	r3, [r3, #0]
 800e19a:	4a0f      	ldr	r2, [pc, #60]	@ (800e1d8 <sys_check_timeouts+0x7c>)
 800e19c:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800e19e:	68bb      	ldr	r3, [r7, #8]
 800e1a0:	689b      	ldr	r3, [r3, #8]
 800e1a2:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800e1a4:	68bb      	ldr	r3, [r7, #8]
 800e1a6:	68db      	ldr	r3, [r3, #12]
 800e1a8:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800e1aa:	68bb      	ldr	r3, [r7, #8]
 800e1ac:	685b      	ldr	r3, [r3, #4]
 800e1ae:	4a0b      	ldr	r2, [pc, #44]	@ (800e1dc <sys_check_timeouts+0x80>)
 800e1b0:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800e1b2:	68b9      	ldr	r1, [r7, #8]
 800e1b4:	2006      	movs	r0, #6
 800e1b6:	f7f8 fcd3 	bl	8006b60 <memp_free>
    if (handler != NULL) {
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	2b00      	cmp	r3, #0
 800e1be:	d0d3      	beq.n	800e168 <sys_check_timeouts+0xc>
      handler(arg);
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	6838      	ldr	r0, [r7, #0]
 800e1c4:	4798      	blx	r3
  do {
 800e1c6:	e7cf      	b.n	800e168 <sys_check_timeouts+0xc>
      return;
 800e1c8:	bf00      	nop
 800e1ca:	e000      	b.n	800e1ce <sys_check_timeouts+0x72>
      return;
 800e1cc:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800e1ce:	3710      	adds	r7, #16
 800e1d0:	46bd      	mov	sp, r7
 800e1d2:	bd80      	pop	{r7, pc}
 800e1d4:	2000a7e5 	.word	0x2000a7e5
 800e1d8:	2000a838 	.word	0x2000a838
 800e1dc:	2000a83c 	.word	0x2000a83c

0800e1e0 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800e1e0:	b580      	push	{r7, lr}
 800e1e2:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800e1e4:	f002 ffcc 	bl	8011180 <rand>
 800e1e8:	4603      	mov	r3, r0
 800e1ea:	b29b      	uxth	r3, r3
 800e1ec:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800e1f0:	b29b      	uxth	r3, r3
 800e1f2:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800e1f6:	b29a      	uxth	r2, r3
 800e1f8:	4b01      	ldr	r3, [pc, #4]	@ (800e200 <udp_init+0x20>)
 800e1fa:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800e1fc:	bf00      	nop
 800e1fe:	bd80      	pop	{r7, pc}
 800e200:	20000068 	.word	0x20000068

0800e204 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 800e204:	b480      	push	{r7}
 800e206:	b083      	sub	sp, #12
 800e208:	af00      	add	r7, sp, #0
  u16_t n = 0;
 800e20a:	2300      	movs	r3, #0
 800e20c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800e20e:	4b17      	ldr	r3, [pc, #92]	@ (800e26c <udp_new_port+0x68>)
 800e210:	881b      	ldrh	r3, [r3, #0]
 800e212:	1c5a      	adds	r2, r3, #1
 800e214:	b291      	uxth	r1, r2
 800e216:	4a15      	ldr	r2, [pc, #84]	@ (800e26c <udp_new_port+0x68>)
 800e218:	8011      	strh	r1, [r2, #0]
 800e21a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e21e:	4293      	cmp	r3, r2
 800e220:	d103      	bne.n	800e22a <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800e222:	4b12      	ldr	r3, [pc, #72]	@ (800e26c <udp_new_port+0x68>)
 800e224:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 800e228:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800e22a:	4b11      	ldr	r3, [pc, #68]	@ (800e270 <udp_new_port+0x6c>)
 800e22c:	681b      	ldr	r3, [r3, #0]
 800e22e:	603b      	str	r3, [r7, #0]
 800e230:	e011      	b.n	800e256 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 800e232:	683b      	ldr	r3, [r7, #0]
 800e234:	8a5a      	ldrh	r2, [r3, #18]
 800e236:	4b0d      	ldr	r3, [pc, #52]	@ (800e26c <udp_new_port+0x68>)
 800e238:	881b      	ldrh	r3, [r3, #0]
 800e23a:	429a      	cmp	r2, r3
 800e23c:	d108      	bne.n	800e250 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800e23e:	88fb      	ldrh	r3, [r7, #6]
 800e240:	3301      	adds	r3, #1
 800e242:	80fb      	strh	r3, [r7, #6]
 800e244:	88fb      	ldrh	r3, [r7, #6]
 800e246:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800e24a:	d3e0      	bcc.n	800e20e <udp_new_port+0xa>
        return 0;
 800e24c:	2300      	movs	r3, #0
 800e24e:	e007      	b.n	800e260 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800e250:	683b      	ldr	r3, [r7, #0]
 800e252:	68db      	ldr	r3, [r3, #12]
 800e254:	603b      	str	r3, [r7, #0]
 800e256:	683b      	ldr	r3, [r7, #0]
 800e258:	2b00      	cmp	r3, #0
 800e25a:	d1ea      	bne.n	800e232 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 800e25c:	4b03      	ldr	r3, [pc, #12]	@ (800e26c <udp_new_port+0x68>)
 800e25e:	881b      	ldrh	r3, [r3, #0]
}
 800e260:	4618      	mov	r0, r3
 800e262:	370c      	adds	r7, #12
 800e264:	46bd      	mov	sp, r7
 800e266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e26a:	4770      	bx	lr
 800e26c:	20000068 	.word	0x20000068
 800e270:	2000a844 	.word	0x2000a844

0800e274 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800e274:	b580      	push	{r7, lr}
 800e276:	b084      	sub	sp, #16
 800e278:	af00      	add	r7, sp, #0
 800e27a:	60f8      	str	r0, [r7, #12]
 800e27c:	60b9      	str	r1, [r7, #8]
 800e27e:	4613      	mov	r3, r2
 800e280:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800e282:	68fb      	ldr	r3, [r7, #12]
 800e284:	2b00      	cmp	r3, #0
 800e286:	d105      	bne.n	800e294 <udp_input_local_match+0x20>
 800e288:	4b27      	ldr	r3, [pc, #156]	@ (800e328 <udp_input_local_match+0xb4>)
 800e28a:	2287      	movs	r2, #135	@ 0x87
 800e28c:	4927      	ldr	r1, [pc, #156]	@ (800e32c <udp_input_local_match+0xb8>)
 800e28e:	4828      	ldr	r0, [pc, #160]	@ (800e330 <udp_input_local_match+0xbc>)
 800e290:	f003 f876 	bl	8011380 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800e294:	68bb      	ldr	r3, [r7, #8]
 800e296:	2b00      	cmp	r3, #0
 800e298:	d105      	bne.n	800e2a6 <udp_input_local_match+0x32>
 800e29a:	4b23      	ldr	r3, [pc, #140]	@ (800e328 <udp_input_local_match+0xb4>)
 800e29c:	2288      	movs	r2, #136	@ 0x88
 800e29e:	4925      	ldr	r1, [pc, #148]	@ (800e334 <udp_input_local_match+0xc0>)
 800e2a0:	4823      	ldr	r0, [pc, #140]	@ (800e330 <udp_input_local_match+0xbc>)
 800e2a2:	f003 f86d 	bl	8011380 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e2a6:	68fb      	ldr	r3, [r7, #12]
 800e2a8:	7a1b      	ldrb	r3, [r3, #8]
 800e2aa:	2b00      	cmp	r3, #0
 800e2ac:	d00b      	beq.n	800e2c6 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800e2ae:	68fb      	ldr	r3, [r7, #12]
 800e2b0:	7a1a      	ldrb	r2, [r3, #8]
 800e2b2:	4b21      	ldr	r3, [pc, #132]	@ (800e338 <udp_input_local_match+0xc4>)
 800e2b4:	685b      	ldr	r3, [r3, #4]
 800e2b6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e2ba:	3301      	adds	r3, #1
 800e2bc:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e2be:	429a      	cmp	r2, r3
 800e2c0:	d001      	beq.n	800e2c6 <udp_input_local_match+0x52>
    return 0;
 800e2c2:	2300      	movs	r3, #0
 800e2c4:	e02b      	b.n	800e31e <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800e2c6:	79fb      	ldrb	r3, [r7, #7]
 800e2c8:	2b00      	cmp	r3, #0
 800e2ca:	d018      	beq.n	800e2fe <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800e2cc:	68fb      	ldr	r3, [r7, #12]
 800e2ce:	2b00      	cmp	r3, #0
 800e2d0:	d013      	beq.n	800e2fa <udp_input_local_match+0x86>
 800e2d2:	68fb      	ldr	r3, [r7, #12]
 800e2d4:	681b      	ldr	r3, [r3, #0]
 800e2d6:	2b00      	cmp	r3, #0
 800e2d8:	d00f      	beq.n	800e2fa <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800e2da:	4b17      	ldr	r3, [pc, #92]	@ (800e338 <udp_input_local_match+0xc4>)
 800e2dc:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800e2de:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e2e2:	d00a      	beq.n	800e2fa <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800e2e4:	68fb      	ldr	r3, [r7, #12]
 800e2e6:	681a      	ldr	r2, [r3, #0]
 800e2e8:	4b13      	ldr	r3, [pc, #76]	@ (800e338 <udp_input_local_match+0xc4>)
 800e2ea:	695b      	ldr	r3, [r3, #20]
 800e2ec:	405a      	eors	r2, r3
 800e2ee:	68bb      	ldr	r3, [r7, #8]
 800e2f0:	3308      	adds	r3, #8
 800e2f2:	681b      	ldr	r3, [r3, #0]
 800e2f4:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800e2f6:	2b00      	cmp	r3, #0
 800e2f8:	d110      	bne.n	800e31c <udp_input_local_match+0xa8>
          return 1;
 800e2fa:	2301      	movs	r3, #1
 800e2fc:	e00f      	b.n	800e31e <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800e2fe:	68fb      	ldr	r3, [r7, #12]
 800e300:	2b00      	cmp	r3, #0
 800e302:	d009      	beq.n	800e318 <udp_input_local_match+0xa4>
 800e304:	68fb      	ldr	r3, [r7, #12]
 800e306:	681b      	ldr	r3, [r3, #0]
 800e308:	2b00      	cmp	r3, #0
 800e30a:	d005      	beq.n	800e318 <udp_input_local_match+0xa4>
 800e30c:	68fb      	ldr	r3, [r7, #12]
 800e30e:	681a      	ldr	r2, [r3, #0]
 800e310:	4b09      	ldr	r3, [pc, #36]	@ (800e338 <udp_input_local_match+0xc4>)
 800e312:	695b      	ldr	r3, [r3, #20]
 800e314:	429a      	cmp	r2, r3
 800e316:	d101      	bne.n	800e31c <udp_input_local_match+0xa8>
        return 1;
 800e318:	2301      	movs	r3, #1
 800e31a:	e000      	b.n	800e31e <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800e31c:	2300      	movs	r3, #0
}
 800e31e:	4618      	mov	r0, r3
 800e320:	3710      	adds	r7, #16
 800e322:	46bd      	mov	sp, r7
 800e324:	bd80      	pop	{r7, pc}
 800e326:	bf00      	nop
 800e328:	08014660 	.word	0x08014660
 800e32c:	08014690 	.word	0x08014690
 800e330:	080146b4 	.word	0x080146b4
 800e334:	080146dc 	.word	0x080146dc
 800e338:	200050b8 	.word	0x200050b8

0800e33c <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800e33c:	b590      	push	{r4, r7, lr}
 800e33e:	b08d      	sub	sp, #52	@ 0x34
 800e340:	af02      	add	r7, sp, #8
 800e342:	6078      	str	r0, [r7, #4]
 800e344:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800e346:	2300      	movs	r3, #0
 800e348:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	d105      	bne.n	800e35c <udp_input+0x20>
 800e350:	4b7c      	ldr	r3, [pc, #496]	@ (800e544 <udp_input+0x208>)
 800e352:	22cf      	movs	r2, #207	@ 0xcf
 800e354:	497c      	ldr	r1, [pc, #496]	@ (800e548 <udp_input+0x20c>)
 800e356:	487d      	ldr	r0, [pc, #500]	@ (800e54c <udp_input+0x210>)
 800e358:	f003 f812 	bl	8011380 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800e35c:	683b      	ldr	r3, [r7, #0]
 800e35e:	2b00      	cmp	r3, #0
 800e360:	d105      	bne.n	800e36e <udp_input+0x32>
 800e362:	4b78      	ldr	r3, [pc, #480]	@ (800e544 <udp_input+0x208>)
 800e364:	22d0      	movs	r2, #208	@ 0xd0
 800e366:	497a      	ldr	r1, [pc, #488]	@ (800e550 <udp_input+0x214>)
 800e368:	4878      	ldr	r0, [pc, #480]	@ (800e54c <udp_input+0x210>)
 800e36a:	f003 f809 	bl	8011380 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	895b      	ldrh	r3, [r3, #10]
 800e372:	2b07      	cmp	r3, #7
 800e374:	d803      	bhi.n	800e37e <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800e376:	6878      	ldr	r0, [r7, #4]
 800e378:	f7f9 fa68 	bl	800784c <pbuf_free>
    goto end;
 800e37c:	e0de      	b.n	800e53c <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	685b      	ldr	r3, [r3, #4]
 800e382:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800e384:	4b73      	ldr	r3, [pc, #460]	@ (800e554 <udp_input+0x218>)
 800e386:	695b      	ldr	r3, [r3, #20]
 800e388:	4a72      	ldr	r2, [pc, #456]	@ (800e554 <udp_input+0x218>)
 800e38a:	6812      	ldr	r2, [r2, #0]
 800e38c:	4611      	mov	r1, r2
 800e38e:	4618      	mov	r0, r3
 800e390:	f001 ffa0 	bl	80102d4 <ip4_addr_isbroadcast_u32>
 800e394:	4603      	mov	r3, r0
 800e396:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800e398:	697b      	ldr	r3, [r7, #20]
 800e39a:	881b      	ldrh	r3, [r3, #0]
 800e39c:	b29b      	uxth	r3, r3
 800e39e:	4618      	mov	r0, r3
 800e3a0:	f7f7 fef6 	bl	8006190 <lwip_htons>
 800e3a4:	4603      	mov	r3, r0
 800e3a6:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800e3a8:	697b      	ldr	r3, [r7, #20]
 800e3aa:	885b      	ldrh	r3, [r3, #2]
 800e3ac:	b29b      	uxth	r3, r3
 800e3ae:	4618      	mov	r0, r3
 800e3b0:	f7f7 feee 	bl	8006190 <lwip_htons>
 800e3b4:	4603      	mov	r3, r0
 800e3b6:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800e3b8:	2300      	movs	r3, #0
 800e3ba:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 800e3bc:	2300      	movs	r3, #0
 800e3be:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800e3c0:	2300      	movs	r3, #0
 800e3c2:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800e3c4:	4b64      	ldr	r3, [pc, #400]	@ (800e558 <udp_input+0x21c>)
 800e3c6:	681b      	ldr	r3, [r3, #0]
 800e3c8:	627b      	str	r3, [r7, #36]	@ 0x24
 800e3ca:	e054      	b.n	800e476 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800e3cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e3ce:	8a5b      	ldrh	r3, [r3, #18]
 800e3d0:	89fa      	ldrh	r2, [r7, #14]
 800e3d2:	429a      	cmp	r2, r3
 800e3d4:	d14a      	bne.n	800e46c <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800e3d6:	7cfb      	ldrb	r3, [r7, #19]
 800e3d8:	461a      	mov	r2, r3
 800e3da:	6839      	ldr	r1, [r7, #0]
 800e3dc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800e3de:	f7ff ff49 	bl	800e274 <udp_input_local_match>
 800e3e2:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800e3e4:	2b00      	cmp	r3, #0
 800e3e6:	d041      	beq.n	800e46c <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800e3e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e3ea:	7c1b      	ldrb	r3, [r3, #16]
 800e3ec:	f003 0304 	and.w	r3, r3, #4
 800e3f0:	2b00      	cmp	r3, #0
 800e3f2:	d11d      	bne.n	800e430 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800e3f4:	69fb      	ldr	r3, [r7, #28]
 800e3f6:	2b00      	cmp	r3, #0
 800e3f8:	d102      	bne.n	800e400 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800e3fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e3fc:	61fb      	str	r3, [r7, #28]
 800e3fe:	e017      	b.n	800e430 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800e400:	7cfb      	ldrb	r3, [r7, #19]
 800e402:	2b00      	cmp	r3, #0
 800e404:	d014      	beq.n	800e430 <udp_input+0xf4>
 800e406:	4b53      	ldr	r3, [pc, #332]	@ (800e554 <udp_input+0x218>)
 800e408:	695b      	ldr	r3, [r3, #20]
 800e40a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e40e:	d10f      	bne.n	800e430 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800e410:	69fb      	ldr	r3, [r7, #28]
 800e412:	681a      	ldr	r2, [r3, #0]
 800e414:	683b      	ldr	r3, [r7, #0]
 800e416:	3304      	adds	r3, #4
 800e418:	681b      	ldr	r3, [r3, #0]
 800e41a:	429a      	cmp	r2, r3
 800e41c:	d008      	beq.n	800e430 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800e41e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e420:	681a      	ldr	r2, [r3, #0]
 800e422:	683b      	ldr	r3, [r7, #0]
 800e424:	3304      	adds	r3, #4
 800e426:	681b      	ldr	r3, [r3, #0]
 800e428:	429a      	cmp	r2, r3
 800e42a:	d101      	bne.n	800e430 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800e42c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e42e:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800e430:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e432:	8a9b      	ldrh	r3, [r3, #20]
 800e434:	8a3a      	ldrh	r2, [r7, #16]
 800e436:	429a      	cmp	r2, r3
 800e438:	d118      	bne.n	800e46c <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800e43a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e43c:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800e43e:	2b00      	cmp	r3, #0
 800e440:	d005      	beq.n	800e44e <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800e442:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e444:	685a      	ldr	r2, [r3, #4]
 800e446:	4b43      	ldr	r3, [pc, #268]	@ (800e554 <udp_input+0x218>)
 800e448:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800e44a:	429a      	cmp	r2, r3
 800e44c:	d10e      	bne.n	800e46c <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800e44e:	6a3b      	ldr	r3, [r7, #32]
 800e450:	2b00      	cmp	r3, #0
 800e452:	d014      	beq.n	800e47e <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800e454:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e456:	68da      	ldr	r2, [r3, #12]
 800e458:	6a3b      	ldr	r3, [r7, #32]
 800e45a:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800e45c:	4b3e      	ldr	r3, [pc, #248]	@ (800e558 <udp_input+0x21c>)
 800e45e:	681a      	ldr	r2, [r3, #0]
 800e460:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e462:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800e464:	4a3c      	ldr	r2, [pc, #240]	@ (800e558 <udp_input+0x21c>)
 800e466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e468:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800e46a:	e008      	b.n	800e47e <udp_input+0x142>
      }
    }

    prev = pcb;
 800e46c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e46e:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800e470:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e472:	68db      	ldr	r3, [r3, #12]
 800e474:	627b      	str	r3, [r7, #36]	@ 0x24
 800e476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e478:	2b00      	cmp	r3, #0
 800e47a:	d1a7      	bne.n	800e3cc <udp_input+0x90>
 800e47c:	e000      	b.n	800e480 <udp_input+0x144>
        break;
 800e47e:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800e480:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e482:	2b00      	cmp	r3, #0
 800e484:	d101      	bne.n	800e48a <udp_input+0x14e>
    pcb = uncon_pcb;
 800e486:	69fb      	ldr	r3, [r7, #28]
 800e488:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800e48a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e48c:	2b00      	cmp	r3, #0
 800e48e:	d002      	beq.n	800e496 <udp_input+0x15a>
    for_us = 1;
 800e490:	2301      	movs	r3, #1
 800e492:	76fb      	strb	r3, [r7, #27]
 800e494:	e00a      	b.n	800e4ac <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800e496:	683b      	ldr	r3, [r7, #0]
 800e498:	3304      	adds	r3, #4
 800e49a:	681a      	ldr	r2, [r3, #0]
 800e49c:	4b2d      	ldr	r3, [pc, #180]	@ (800e554 <udp_input+0x218>)
 800e49e:	695b      	ldr	r3, [r3, #20]
 800e4a0:	429a      	cmp	r2, r3
 800e4a2:	bf0c      	ite	eq
 800e4a4:	2301      	moveq	r3, #1
 800e4a6:	2300      	movne	r3, #0
 800e4a8:	b2db      	uxtb	r3, r3
 800e4aa:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800e4ac:	7efb      	ldrb	r3, [r7, #27]
 800e4ae:	2b00      	cmp	r3, #0
 800e4b0:	d041      	beq.n	800e536 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800e4b2:	2108      	movs	r1, #8
 800e4b4:	6878      	ldr	r0, [r7, #4]
 800e4b6:	f7f9 f943 	bl	8007740 <pbuf_remove_header>
 800e4ba:	4603      	mov	r3, r0
 800e4bc:	2b00      	cmp	r3, #0
 800e4be:	d00a      	beq.n	800e4d6 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800e4c0:	4b20      	ldr	r3, [pc, #128]	@ (800e544 <udp_input+0x208>)
 800e4c2:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 800e4c6:	4925      	ldr	r1, [pc, #148]	@ (800e55c <udp_input+0x220>)
 800e4c8:	4820      	ldr	r0, [pc, #128]	@ (800e54c <udp_input+0x210>)
 800e4ca:	f002 ff59 	bl	8011380 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800e4ce:	6878      	ldr	r0, [r7, #4]
 800e4d0:	f7f9 f9bc 	bl	800784c <pbuf_free>
      goto end;
 800e4d4:	e032      	b.n	800e53c <udp_input+0x200>
    }

    if (pcb != NULL) {
 800e4d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e4d8:	2b00      	cmp	r3, #0
 800e4da:	d012      	beq.n	800e502 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800e4dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e4de:	699b      	ldr	r3, [r3, #24]
 800e4e0:	2b00      	cmp	r3, #0
 800e4e2:	d00a      	beq.n	800e4fa <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800e4e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e4e6:	699c      	ldr	r4, [r3, #24]
 800e4e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e4ea:	69d8      	ldr	r0, [r3, #28]
 800e4ec:	8a3b      	ldrh	r3, [r7, #16]
 800e4ee:	9300      	str	r3, [sp, #0]
 800e4f0:	4b1b      	ldr	r3, [pc, #108]	@ (800e560 <udp_input+0x224>)
 800e4f2:	687a      	ldr	r2, [r7, #4]
 800e4f4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800e4f6:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800e4f8:	e021      	b.n	800e53e <udp_input+0x202>
        pbuf_free(p);
 800e4fa:	6878      	ldr	r0, [r7, #4]
 800e4fc:	f7f9 f9a6 	bl	800784c <pbuf_free>
        goto end;
 800e500:	e01c      	b.n	800e53c <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800e502:	7cfb      	ldrb	r3, [r7, #19]
 800e504:	2b00      	cmp	r3, #0
 800e506:	d112      	bne.n	800e52e <udp_input+0x1f2>
 800e508:	4b12      	ldr	r3, [pc, #72]	@ (800e554 <udp_input+0x218>)
 800e50a:	695b      	ldr	r3, [r3, #20]
 800e50c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800e510:	2be0      	cmp	r3, #224	@ 0xe0
 800e512:	d00c      	beq.n	800e52e <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800e514:	4b0f      	ldr	r3, [pc, #60]	@ (800e554 <udp_input+0x218>)
 800e516:	899b      	ldrh	r3, [r3, #12]
 800e518:	3308      	adds	r3, #8
 800e51a:	b29b      	uxth	r3, r3
 800e51c:	b21b      	sxth	r3, r3
 800e51e:	4619      	mov	r1, r3
 800e520:	6878      	ldr	r0, [r7, #4]
 800e522:	f7f9 f980 	bl	8007826 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800e526:	2103      	movs	r1, #3
 800e528:	6878      	ldr	r0, [r7, #4]
 800e52a:	f001 fbb3 	bl	800fc94 <icmp_dest_unreach>
      pbuf_free(p);
 800e52e:	6878      	ldr	r0, [r7, #4]
 800e530:	f7f9 f98c 	bl	800784c <pbuf_free>
  return;
 800e534:	e003      	b.n	800e53e <udp_input+0x202>
    pbuf_free(p);
 800e536:	6878      	ldr	r0, [r7, #4]
 800e538:	f7f9 f988 	bl	800784c <pbuf_free>
  return;
 800e53c:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800e53e:	372c      	adds	r7, #44	@ 0x2c
 800e540:	46bd      	mov	sp, r7
 800e542:	bd90      	pop	{r4, r7, pc}
 800e544:	08014660 	.word	0x08014660
 800e548:	08014704 	.word	0x08014704
 800e54c:	080146b4 	.word	0x080146b4
 800e550:	0801471c 	.word	0x0801471c
 800e554:	200050b8 	.word	0x200050b8
 800e558:	2000a844 	.word	0x2000a844
 800e55c:	08014738 	.word	0x08014738
 800e560:	200050c8 	.word	0x200050c8

0800e564 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 800e564:	b580      	push	{r7, lr}
 800e566:	b082      	sub	sp, #8
 800e568:	af00      	add	r7, sp, #0
 800e56a:	6078      	str	r0, [r7, #4]
 800e56c:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	2b00      	cmp	r3, #0
 800e572:	d109      	bne.n	800e588 <udp_send+0x24>
 800e574:	4b11      	ldr	r3, [pc, #68]	@ (800e5bc <udp_send+0x58>)
 800e576:	f240 12d5 	movw	r2, #469	@ 0x1d5
 800e57a:	4911      	ldr	r1, [pc, #68]	@ (800e5c0 <udp_send+0x5c>)
 800e57c:	4811      	ldr	r0, [pc, #68]	@ (800e5c4 <udp_send+0x60>)
 800e57e:	f002 feff 	bl	8011380 <iprintf>
 800e582:	f06f 030f 	mvn.w	r3, #15
 800e586:	e015      	b.n	800e5b4 <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 800e588:	683b      	ldr	r3, [r7, #0]
 800e58a:	2b00      	cmp	r3, #0
 800e58c:	d109      	bne.n	800e5a2 <udp_send+0x3e>
 800e58e:	4b0b      	ldr	r3, [pc, #44]	@ (800e5bc <udp_send+0x58>)
 800e590:	f44f 72eb 	mov.w	r2, #470	@ 0x1d6
 800e594:	490c      	ldr	r1, [pc, #48]	@ (800e5c8 <udp_send+0x64>)
 800e596:	480b      	ldr	r0, [pc, #44]	@ (800e5c4 <udp_send+0x60>)
 800e598:	f002 fef2 	bl	8011380 <iprintf>
 800e59c:	f06f 030f 	mvn.w	r3, #15
 800e5a0:	e008      	b.n	800e5b4 <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	1d1a      	adds	r2, r3, #4
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	8a9b      	ldrh	r3, [r3, #20]
 800e5aa:	6839      	ldr	r1, [r7, #0]
 800e5ac:	6878      	ldr	r0, [r7, #4]
 800e5ae:	f000 f80d 	bl	800e5cc <udp_sendto>
 800e5b2:	4603      	mov	r3, r0
}
 800e5b4:	4618      	mov	r0, r3
 800e5b6:	3708      	adds	r7, #8
 800e5b8:	46bd      	mov	sp, r7
 800e5ba:	bd80      	pop	{r7, pc}
 800e5bc:	08014660 	.word	0x08014660
 800e5c0:	08014754 	.word	0x08014754
 800e5c4:	080146b4 	.word	0x080146b4
 800e5c8:	0801476c 	.word	0x0801476c

0800e5cc <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 800e5cc:	b580      	push	{r7, lr}
 800e5ce:	b088      	sub	sp, #32
 800e5d0:	af02      	add	r7, sp, #8
 800e5d2:	60f8      	str	r0, [r7, #12]
 800e5d4:	60b9      	str	r1, [r7, #8]
 800e5d6:	607a      	str	r2, [r7, #4]
 800e5d8:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 800e5da:	68fb      	ldr	r3, [r7, #12]
 800e5dc:	2b00      	cmp	r3, #0
 800e5de:	d109      	bne.n	800e5f4 <udp_sendto+0x28>
 800e5e0:	4b23      	ldr	r3, [pc, #140]	@ (800e670 <udp_sendto+0xa4>)
 800e5e2:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800e5e6:	4923      	ldr	r1, [pc, #140]	@ (800e674 <udp_sendto+0xa8>)
 800e5e8:	4823      	ldr	r0, [pc, #140]	@ (800e678 <udp_sendto+0xac>)
 800e5ea:	f002 fec9 	bl	8011380 <iprintf>
 800e5ee:	f06f 030f 	mvn.w	r3, #15
 800e5f2:	e038      	b.n	800e666 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 800e5f4:	68bb      	ldr	r3, [r7, #8]
 800e5f6:	2b00      	cmp	r3, #0
 800e5f8:	d109      	bne.n	800e60e <udp_sendto+0x42>
 800e5fa:	4b1d      	ldr	r3, [pc, #116]	@ (800e670 <udp_sendto+0xa4>)
 800e5fc:	f240 2219 	movw	r2, #537	@ 0x219
 800e600:	491e      	ldr	r1, [pc, #120]	@ (800e67c <udp_sendto+0xb0>)
 800e602:	481d      	ldr	r0, [pc, #116]	@ (800e678 <udp_sendto+0xac>)
 800e604:	f002 febc 	bl	8011380 <iprintf>
 800e608:	f06f 030f 	mvn.w	r3, #15
 800e60c:	e02b      	b.n	800e666 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	2b00      	cmp	r3, #0
 800e612:	d109      	bne.n	800e628 <udp_sendto+0x5c>
 800e614:	4b16      	ldr	r3, [pc, #88]	@ (800e670 <udp_sendto+0xa4>)
 800e616:	f240 221a 	movw	r2, #538	@ 0x21a
 800e61a:	4919      	ldr	r1, [pc, #100]	@ (800e680 <udp_sendto+0xb4>)
 800e61c:	4816      	ldr	r0, [pc, #88]	@ (800e678 <udp_sendto+0xac>)
 800e61e:	f002 feaf 	bl	8011380 <iprintf>
 800e622:	f06f 030f 	mvn.w	r3, #15
 800e626:	e01e      	b.n	800e666 <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800e628:	68fb      	ldr	r3, [r7, #12]
 800e62a:	7a1b      	ldrb	r3, [r3, #8]
 800e62c:	2b00      	cmp	r3, #0
 800e62e:	d006      	beq.n	800e63e <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 800e630:	68fb      	ldr	r3, [r7, #12]
 800e632:	7a1b      	ldrb	r3, [r3, #8]
 800e634:	4618      	mov	r0, r3
 800e636:	f7f8 fda9 	bl	800718c <netif_get_by_index>
 800e63a:	6178      	str	r0, [r7, #20]
 800e63c:	e003      	b.n	800e646 <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 800e63e:	6878      	ldr	r0, [r7, #4]
 800e640:	f001 fbb2 	bl	800fda8 <ip4_route>
 800e644:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 800e646:	697b      	ldr	r3, [r7, #20]
 800e648:	2b00      	cmp	r3, #0
 800e64a:	d102      	bne.n	800e652 <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 800e64c:	f06f 0303 	mvn.w	r3, #3
 800e650:	e009      	b.n	800e666 <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 800e652:	887a      	ldrh	r2, [r7, #2]
 800e654:	697b      	ldr	r3, [r7, #20]
 800e656:	9300      	str	r3, [sp, #0]
 800e658:	4613      	mov	r3, r2
 800e65a:	687a      	ldr	r2, [r7, #4]
 800e65c:	68b9      	ldr	r1, [r7, #8]
 800e65e:	68f8      	ldr	r0, [r7, #12]
 800e660:	f000 f810 	bl	800e684 <udp_sendto_if>
 800e664:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800e666:	4618      	mov	r0, r3
 800e668:	3718      	adds	r7, #24
 800e66a:	46bd      	mov	sp, r7
 800e66c:	bd80      	pop	{r7, pc}
 800e66e:	bf00      	nop
 800e670:	08014660 	.word	0x08014660
 800e674:	08014784 	.word	0x08014784
 800e678:	080146b4 	.word	0x080146b4
 800e67c:	0801479c 	.word	0x0801479c
 800e680:	080147b8 	.word	0x080147b8

0800e684 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 800e684:	b580      	push	{r7, lr}
 800e686:	b088      	sub	sp, #32
 800e688:	af02      	add	r7, sp, #8
 800e68a:	60f8      	str	r0, [r7, #12]
 800e68c:	60b9      	str	r1, [r7, #8]
 800e68e:	607a      	str	r2, [r7, #4]
 800e690:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 800e692:	68fb      	ldr	r3, [r7, #12]
 800e694:	2b00      	cmp	r3, #0
 800e696:	d109      	bne.n	800e6ac <udp_sendto_if+0x28>
 800e698:	4b2e      	ldr	r3, [pc, #184]	@ (800e754 <udp_sendto_if+0xd0>)
 800e69a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800e69e:	492e      	ldr	r1, [pc, #184]	@ (800e758 <udp_sendto_if+0xd4>)
 800e6a0:	482e      	ldr	r0, [pc, #184]	@ (800e75c <udp_sendto_if+0xd8>)
 800e6a2:	f002 fe6d 	bl	8011380 <iprintf>
 800e6a6:	f06f 030f 	mvn.w	r3, #15
 800e6aa:	e04f      	b.n	800e74c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 800e6ac:	68bb      	ldr	r3, [r7, #8]
 800e6ae:	2b00      	cmp	r3, #0
 800e6b0:	d109      	bne.n	800e6c6 <udp_sendto_if+0x42>
 800e6b2:	4b28      	ldr	r3, [pc, #160]	@ (800e754 <udp_sendto_if+0xd0>)
 800e6b4:	f240 2281 	movw	r2, #641	@ 0x281
 800e6b8:	4929      	ldr	r1, [pc, #164]	@ (800e760 <udp_sendto_if+0xdc>)
 800e6ba:	4828      	ldr	r0, [pc, #160]	@ (800e75c <udp_sendto_if+0xd8>)
 800e6bc:	f002 fe60 	bl	8011380 <iprintf>
 800e6c0:	f06f 030f 	mvn.w	r3, #15
 800e6c4:	e042      	b.n	800e74c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	d109      	bne.n	800e6e0 <udp_sendto_if+0x5c>
 800e6cc:	4b21      	ldr	r3, [pc, #132]	@ (800e754 <udp_sendto_if+0xd0>)
 800e6ce:	f240 2282 	movw	r2, #642	@ 0x282
 800e6d2:	4924      	ldr	r1, [pc, #144]	@ (800e764 <udp_sendto_if+0xe0>)
 800e6d4:	4821      	ldr	r0, [pc, #132]	@ (800e75c <udp_sendto_if+0xd8>)
 800e6d6:	f002 fe53 	bl	8011380 <iprintf>
 800e6da:	f06f 030f 	mvn.w	r3, #15
 800e6de:	e035      	b.n	800e74c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 800e6e0:	6a3b      	ldr	r3, [r7, #32]
 800e6e2:	2b00      	cmp	r3, #0
 800e6e4:	d109      	bne.n	800e6fa <udp_sendto_if+0x76>
 800e6e6:	4b1b      	ldr	r3, [pc, #108]	@ (800e754 <udp_sendto_if+0xd0>)
 800e6e8:	f240 2283 	movw	r2, #643	@ 0x283
 800e6ec:	491e      	ldr	r1, [pc, #120]	@ (800e768 <udp_sendto_if+0xe4>)
 800e6ee:	481b      	ldr	r0, [pc, #108]	@ (800e75c <udp_sendto_if+0xd8>)
 800e6f0:	f002 fe46 	bl	8011380 <iprintf>
 800e6f4:	f06f 030f 	mvn.w	r3, #15
 800e6f8:	e028      	b.n	800e74c <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800e6fa:	68fb      	ldr	r3, [r7, #12]
 800e6fc:	2b00      	cmp	r3, #0
 800e6fe:	d009      	beq.n	800e714 <udp_sendto_if+0x90>
 800e700:	68fb      	ldr	r3, [r7, #12]
 800e702:	681b      	ldr	r3, [r3, #0]
 800e704:	2b00      	cmp	r3, #0
 800e706:	d005      	beq.n	800e714 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 800e708:	68fb      	ldr	r3, [r7, #12]
 800e70a:	681b      	ldr	r3, [r3, #0]
 800e70c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800e710:	2be0      	cmp	r3, #224	@ 0xe0
 800e712:	d103      	bne.n	800e71c <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 800e714:	6a3b      	ldr	r3, [r7, #32]
 800e716:	3304      	adds	r3, #4
 800e718:	617b      	str	r3, [r7, #20]
 800e71a:	e00b      	b.n	800e734 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 800e71c:	68fb      	ldr	r3, [r7, #12]
 800e71e:	681a      	ldr	r2, [r3, #0]
 800e720:	6a3b      	ldr	r3, [r7, #32]
 800e722:	3304      	adds	r3, #4
 800e724:	681b      	ldr	r3, [r3, #0]
 800e726:	429a      	cmp	r2, r3
 800e728:	d002      	beq.n	800e730 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 800e72a:	f06f 0303 	mvn.w	r3, #3
 800e72e:	e00d      	b.n	800e74c <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 800e730:	68fb      	ldr	r3, [r7, #12]
 800e732:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 800e734:	887a      	ldrh	r2, [r7, #2]
 800e736:	697b      	ldr	r3, [r7, #20]
 800e738:	9301      	str	r3, [sp, #4]
 800e73a:	6a3b      	ldr	r3, [r7, #32]
 800e73c:	9300      	str	r3, [sp, #0]
 800e73e:	4613      	mov	r3, r2
 800e740:	687a      	ldr	r2, [r7, #4]
 800e742:	68b9      	ldr	r1, [r7, #8]
 800e744:	68f8      	ldr	r0, [r7, #12]
 800e746:	f000 f811 	bl	800e76c <udp_sendto_if_src>
 800e74a:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800e74c:	4618      	mov	r0, r3
 800e74e:	3718      	adds	r7, #24
 800e750:	46bd      	mov	sp, r7
 800e752:	bd80      	pop	{r7, pc}
 800e754:	08014660 	.word	0x08014660
 800e758:	080147d4 	.word	0x080147d4
 800e75c:	080146b4 	.word	0x080146b4
 800e760:	080147f0 	.word	0x080147f0
 800e764:	0801480c 	.word	0x0801480c
 800e768:	0801482c 	.word	0x0801482c

0800e76c <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 800e76c:	b580      	push	{r7, lr}
 800e76e:	b08c      	sub	sp, #48	@ 0x30
 800e770:	af04      	add	r7, sp, #16
 800e772:	60f8      	str	r0, [r7, #12]
 800e774:	60b9      	str	r1, [r7, #8]
 800e776:	607a      	str	r2, [r7, #4]
 800e778:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 800e77a:	68fb      	ldr	r3, [r7, #12]
 800e77c:	2b00      	cmp	r3, #0
 800e77e:	d109      	bne.n	800e794 <udp_sendto_if_src+0x28>
 800e780:	4b65      	ldr	r3, [pc, #404]	@ (800e918 <udp_sendto_if_src+0x1ac>)
 800e782:	f240 22d1 	movw	r2, #721	@ 0x2d1
 800e786:	4965      	ldr	r1, [pc, #404]	@ (800e91c <udp_sendto_if_src+0x1b0>)
 800e788:	4865      	ldr	r0, [pc, #404]	@ (800e920 <udp_sendto_if_src+0x1b4>)
 800e78a:	f002 fdf9 	bl	8011380 <iprintf>
 800e78e:	f06f 030f 	mvn.w	r3, #15
 800e792:	e0bc      	b.n	800e90e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 800e794:	68bb      	ldr	r3, [r7, #8]
 800e796:	2b00      	cmp	r3, #0
 800e798:	d109      	bne.n	800e7ae <udp_sendto_if_src+0x42>
 800e79a:	4b5f      	ldr	r3, [pc, #380]	@ (800e918 <udp_sendto_if_src+0x1ac>)
 800e79c:	f240 22d2 	movw	r2, #722	@ 0x2d2
 800e7a0:	4960      	ldr	r1, [pc, #384]	@ (800e924 <udp_sendto_if_src+0x1b8>)
 800e7a2:	485f      	ldr	r0, [pc, #380]	@ (800e920 <udp_sendto_if_src+0x1b4>)
 800e7a4:	f002 fdec 	bl	8011380 <iprintf>
 800e7a8:	f06f 030f 	mvn.w	r3, #15
 800e7ac:	e0af      	b.n	800e90e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	2b00      	cmp	r3, #0
 800e7b2:	d109      	bne.n	800e7c8 <udp_sendto_if_src+0x5c>
 800e7b4:	4b58      	ldr	r3, [pc, #352]	@ (800e918 <udp_sendto_if_src+0x1ac>)
 800e7b6:	f240 22d3 	movw	r2, #723	@ 0x2d3
 800e7ba:	495b      	ldr	r1, [pc, #364]	@ (800e928 <udp_sendto_if_src+0x1bc>)
 800e7bc:	4858      	ldr	r0, [pc, #352]	@ (800e920 <udp_sendto_if_src+0x1b4>)
 800e7be:	f002 fddf 	bl	8011380 <iprintf>
 800e7c2:	f06f 030f 	mvn.w	r3, #15
 800e7c6:	e0a2      	b.n	800e90e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 800e7c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e7ca:	2b00      	cmp	r3, #0
 800e7cc:	d109      	bne.n	800e7e2 <udp_sendto_if_src+0x76>
 800e7ce:	4b52      	ldr	r3, [pc, #328]	@ (800e918 <udp_sendto_if_src+0x1ac>)
 800e7d0:	f44f 7235 	mov.w	r2, #724	@ 0x2d4
 800e7d4:	4955      	ldr	r1, [pc, #340]	@ (800e92c <udp_sendto_if_src+0x1c0>)
 800e7d6:	4852      	ldr	r0, [pc, #328]	@ (800e920 <udp_sendto_if_src+0x1b4>)
 800e7d8:	f002 fdd2 	bl	8011380 <iprintf>
 800e7dc:	f06f 030f 	mvn.w	r3, #15
 800e7e0:	e095      	b.n	800e90e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 800e7e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e7e4:	2b00      	cmp	r3, #0
 800e7e6:	d109      	bne.n	800e7fc <udp_sendto_if_src+0x90>
 800e7e8:	4b4b      	ldr	r3, [pc, #300]	@ (800e918 <udp_sendto_if_src+0x1ac>)
 800e7ea:	f240 22d5 	movw	r2, #725	@ 0x2d5
 800e7ee:	4950      	ldr	r1, [pc, #320]	@ (800e930 <udp_sendto_if_src+0x1c4>)
 800e7f0:	484b      	ldr	r0, [pc, #300]	@ (800e920 <udp_sendto_if_src+0x1b4>)
 800e7f2:	f002 fdc5 	bl	8011380 <iprintf>
 800e7f6:	f06f 030f 	mvn.w	r3, #15
 800e7fa:	e088      	b.n	800e90e <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 800e7fc:	68fb      	ldr	r3, [r7, #12]
 800e7fe:	8a5b      	ldrh	r3, [r3, #18]
 800e800:	2b00      	cmp	r3, #0
 800e802:	d10f      	bne.n	800e824 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800e804:	68f9      	ldr	r1, [r7, #12]
 800e806:	68fb      	ldr	r3, [r7, #12]
 800e808:	8a5b      	ldrh	r3, [r3, #18]
 800e80a:	461a      	mov	r2, r3
 800e80c:	68f8      	ldr	r0, [r7, #12]
 800e80e:	f000 f893 	bl	800e938 <udp_bind>
 800e812:	4603      	mov	r3, r0
 800e814:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 800e816:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800e81a:	2b00      	cmp	r3, #0
 800e81c:	d002      	beq.n	800e824 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 800e81e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800e822:	e074      	b.n	800e90e <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 800e824:	68bb      	ldr	r3, [r7, #8]
 800e826:	891b      	ldrh	r3, [r3, #8]
 800e828:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 800e82c:	4293      	cmp	r3, r2
 800e82e:	d902      	bls.n	800e836 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 800e830:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e834:	e06b      	b.n	800e90e <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 800e836:	2108      	movs	r1, #8
 800e838:	68b8      	ldr	r0, [r7, #8]
 800e83a:	f7f8 ff71 	bl	8007720 <pbuf_add_header>
 800e83e:	4603      	mov	r3, r0
 800e840:	2b00      	cmp	r3, #0
 800e842:	d015      	beq.n	800e870 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 800e844:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800e848:	2108      	movs	r1, #8
 800e84a:	2022      	movs	r0, #34	@ 0x22
 800e84c:	f7f8 fd1a 	bl	8007284 <pbuf_alloc>
 800e850:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 800e852:	69fb      	ldr	r3, [r7, #28]
 800e854:	2b00      	cmp	r3, #0
 800e856:	d102      	bne.n	800e85e <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 800e858:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e85c:	e057      	b.n	800e90e <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 800e85e:	68bb      	ldr	r3, [r7, #8]
 800e860:	891b      	ldrh	r3, [r3, #8]
 800e862:	2b00      	cmp	r3, #0
 800e864:	d006      	beq.n	800e874 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 800e866:	68b9      	ldr	r1, [r7, #8]
 800e868:	69f8      	ldr	r0, [r7, #28]
 800e86a:	f7f9 f907 	bl	8007a7c <pbuf_chain>
 800e86e:	e001      	b.n	800e874 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 800e870:	68bb      	ldr	r3, [r7, #8]
 800e872:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800e874:	69fb      	ldr	r3, [r7, #28]
 800e876:	895b      	ldrh	r3, [r3, #10]
 800e878:	2b07      	cmp	r3, #7
 800e87a:	d806      	bhi.n	800e88a <udp_sendto_if_src+0x11e>
 800e87c:	4b26      	ldr	r3, [pc, #152]	@ (800e918 <udp_sendto_if_src+0x1ac>)
 800e87e:	f240 320d 	movw	r2, #781	@ 0x30d
 800e882:	492c      	ldr	r1, [pc, #176]	@ (800e934 <udp_sendto_if_src+0x1c8>)
 800e884:	4826      	ldr	r0, [pc, #152]	@ (800e920 <udp_sendto_if_src+0x1b4>)
 800e886:	f002 fd7b 	bl	8011380 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 800e88a:	69fb      	ldr	r3, [r7, #28]
 800e88c:	685b      	ldr	r3, [r3, #4]
 800e88e:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 800e890:	68fb      	ldr	r3, [r7, #12]
 800e892:	8a5b      	ldrh	r3, [r3, #18]
 800e894:	4618      	mov	r0, r3
 800e896:	f7f7 fc7b 	bl	8006190 <lwip_htons>
 800e89a:	4603      	mov	r3, r0
 800e89c:	461a      	mov	r2, r3
 800e89e:	697b      	ldr	r3, [r7, #20]
 800e8a0:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 800e8a2:	887b      	ldrh	r3, [r7, #2]
 800e8a4:	4618      	mov	r0, r3
 800e8a6:	f7f7 fc73 	bl	8006190 <lwip_htons>
 800e8aa:	4603      	mov	r3, r0
 800e8ac:	461a      	mov	r2, r3
 800e8ae:	697b      	ldr	r3, [r7, #20]
 800e8b0:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 800e8b2:	697b      	ldr	r3, [r7, #20]
 800e8b4:	2200      	movs	r2, #0
 800e8b6:	719a      	strb	r2, [r3, #6]
 800e8b8:	2200      	movs	r2, #0
 800e8ba:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 800e8bc:	69fb      	ldr	r3, [r7, #28]
 800e8be:	891b      	ldrh	r3, [r3, #8]
 800e8c0:	4618      	mov	r0, r3
 800e8c2:	f7f7 fc65 	bl	8006190 <lwip_htons>
 800e8c6:	4603      	mov	r3, r0
 800e8c8:	461a      	mov	r2, r3
 800e8ca:	697b      	ldr	r3, [r7, #20]
 800e8cc:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 800e8ce:	2311      	movs	r3, #17
 800e8d0:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 800e8d2:	68fb      	ldr	r3, [r7, #12]
 800e8d4:	7adb      	ldrb	r3, [r3, #11]
 800e8d6:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800e8d8:	68fb      	ldr	r3, [r7, #12]
 800e8da:	7a9b      	ldrb	r3, [r3, #10]
 800e8dc:	7cb9      	ldrb	r1, [r7, #18]
 800e8de:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e8e0:	9202      	str	r2, [sp, #8]
 800e8e2:	7cfa      	ldrb	r2, [r7, #19]
 800e8e4:	9201      	str	r2, [sp, #4]
 800e8e6:	9300      	str	r3, [sp, #0]
 800e8e8:	460b      	mov	r3, r1
 800e8ea:	687a      	ldr	r2, [r7, #4]
 800e8ec:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e8ee:	69f8      	ldr	r0, [r7, #28]
 800e8f0:	f001 fc42 	bl	8010178 <ip4_output_if_src>
 800e8f4:	4603      	mov	r3, r0
 800e8f6:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 800e8f8:	69fa      	ldr	r2, [r7, #28]
 800e8fa:	68bb      	ldr	r3, [r7, #8]
 800e8fc:	429a      	cmp	r2, r3
 800e8fe:	d004      	beq.n	800e90a <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 800e900:	69f8      	ldr	r0, [r7, #28]
 800e902:	f7f8 ffa3 	bl	800784c <pbuf_free>
    q = NULL;
 800e906:	2300      	movs	r3, #0
 800e908:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 800e90a:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 800e90e:	4618      	mov	r0, r3
 800e910:	3720      	adds	r7, #32
 800e912:	46bd      	mov	sp, r7
 800e914:	bd80      	pop	{r7, pc}
 800e916:	bf00      	nop
 800e918:	08014660 	.word	0x08014660
 800e91c:	0801484c 	.word	0x0801484c
 800e920:	080146b4 	.word	0x080146b4
 800e924:	0801486c 	.word	0x0801486c
 800e928:	0801488c 	.word	0x0801488c
 800e92c:	080148b0 	.word	0x080148b0
 800e930:	080148d4 	.word	0x080148d4
 800e934:	080148f8 	.word	0x080148f8

0800e938 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800e938:	b580      	push	{r7, lr}
 800e93a:	b086      	sub	sp, #24
 800e93c:	af00      	add	r7, sp, #0
 800e93e:	60f8      	str	r0, [r7, #12]
 800e940:	60b9      	str	r1, [r7, #8]
 800e942:	4613      	mov	r3, r2
 800e944:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800e946:	68bb      	ldr	r3, [r7, #8]
 800e948:	2b00      	cmp	r3, #0
 800e94a:	d101      	bne.n	800e950 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 800e94c:	4b39      	ldr	r3, [pc, #228]	@ (800ea34 <udp_bind+0xfc>)
 800e94e:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800e950:	68fb      	ldr	r3, [r7, #12]
 800e952:	2b00      	cmp	r3, #0
 800e954:	d109      	bne.n	800e96a <udp_bind+0x32>
 800e956:	4b38      	ldr	r3, [pc, #224]	@ (800ea38 <udp_bind+0x100>)
 800e958:	f240 32b7 	movw	r2, #951	@ 0x3b7
 800e95c:	4937      	ldr	r1, [pc, #220]	@ (800ea3c <udp_bind+0x104>)
 800e95e:	4838      	ldr	r0, [pc, #224]	@ (800ea40 <udp_bind+0x108>)
 800e960:	f002 fd0e 	bl	8011380 <iprintf>
 800e964:	f06f 030f 	mvn.w	r3, #15
 800e968:	e060      	b.n	800ea2c <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 800e96a:	2300      	movs	r3, #0
 800e96c:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800e96e:	4b35      	ldr	r3, [pc, #212]	@ (800ea44 <udp_bind+0x10c>)
 800e970:	681b      	ldr	r3, [r3, #0]
 800e972:	617b      	str	r3, [r7, #20]
 800e974:	e009      	b.n	800e98a <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 800e976:	68fa      	ldr	r2, [r7, #12]
 800e978:	697b      	ldr	r3, [r7, #20]
 800e97a:	429a      	cmp	r2, r3
 800e97c:	d102      	bne.n	800e984 <udp_bind+0x4c>
      rebind = 1;
 800e97e:	2301      	movs	r3, #1
 800e980:	74fb      	strb	r3, [r7, #19]
      break;
 800e982:	e005      	b.n	800e990 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800e984:	697b      	ldr	r3, [r7, #20]
 800e986:	68db      	ldr	r3, [r3, #12]
 800e988:	617b      	str	r3, [r7, #20]
 800e98a:	697b      	ldr	r3, [r7, #20]
 800e98c:	2b00      	cmp	r3, #0
 800e98e:	d1f2      	bne.n	800e976 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 800e990:	88fb      	ldrh	r3, [r7, #6]
 800e992:	2b00      	cmp	r3, #0
 800e994:	d109      	bne.n	800e9aa <udp_bind+0x72>
    port = udp_new_port();
 800e996:	f7ff fc35 	bl	800e204 <udp_new_port>
 800e99a:	4603      	mov	r3, r0
 800e99c:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800e99e:	88fb      	ldrh	r3, [r7, #6]
 800e9a0:	2b00      	cmp	r3, #0
 800e9a2:	d12c      	bne.n	800e9fe <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 800e9a4:	f06f 0307 	mvn.w	r3, #7
 800e9a8:	e040      	b.n	800ea2c <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800e9aa:	4b26      	ldr	r3, [pc, #152]	@ (800ea44 <udp_bind+0x10c>)
 800e9ac:	681b      	ldr	r3, [r3, #0]
 800e9ae:	617b      	str	r3, [r7, #20]
 800e9b0:	e022      	b.n	800e9f8 <udp_bind+0xc0>
      if (pcb != ipcb) {
 800e9b2:	68fa      	ldr	r2, [r7, #12]
 800e9b4:	697b      	ldr	r3, [r7, #20]
 800e9b6:	429a      	cmp	r2, r3
 800e9b8:	d01b      	beq.n	800e9f2 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 800e9ba:	697b      	ldr	r3, [r7, #20]
 800e9bc:	8a5b      	ldrh	r3, [r3, #18]
 800e9be:	88fa      	ldrh	r2, [r7, #6]
 800e9c0:	429a      	cmp	r2, r3
 800e9c2:	d116      	bne.n	800e9f2 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800e9c4:	697b      	ldr	r3, [r7, #20]
 800e9c6:	681a      	ldr	r2, [r3, #0]
 800e9c8:	68bb      	ldr	r3, [r7, #8]
 800e9ca:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 800e9cc:	429a      	cmp	r2, r3
 800e9ce:	d00d      	beq.n	800e9ec <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800e9d0:	68bb      	ldr	r3, [r7, #8]
 800e9d2:	2b00      	cmp	r3, #0
 800e9d4:	d00a      	beq.n	800e9ec <udp_bind+0xb4>
 800e9d6:	68bb      	ldr	r3, [r7, #8]
 800e9d8:	681b      	ldr	r3, [r3, #0]
 800e9da:	2b00      	cmp	r3, #0
 800e9dc:	d006      	beq.n	800e9ec <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800e9de:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800e9e0:	2b00      	cmp	r3, #0
 800e9e2:	d003      	beq.n	800e9ec <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800e9e4:	697b      	ldr	r3, [r7, #20]
 800e9e6:	681b      	ldr	r3, [r3, #0]
 800e9e8:	2b00      	cmp	r3, #0
 800e9ea:	d102      	bne.n	800e9f2 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 800e9ec:	f06f 0307 	mvn.w	r3, #7
 800e9f0:	e01c      	b.n	800ea2c <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800e9f2:	697b      	ldr	r3, [r7, #20]
 800e9f4:	68db      	ldr	r3, [r3, #12]
 800e9f6:	617b      	str	r3, [r7, #20]
 800e9f8:	697b      	ldr	r3, [r7, #20]
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	d1d9      	bne.n	800e9b2 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800e9fe:	68bb      	ldr	r3, [r7, #8]
 800ea00:	2b00      	cmp	r3, #0
 800ea02:	d002      	beq.n	800ea0a <udp_bind+0xd2>
 800ea04:	68bb      	ldr	r3, [r7, #8]
 800ea06:	681b      	ldr	r3, [r3, #0]
 800ea08:	e000      	b.n	800ea0c <udp_bind+0xd4>
 800ea0a:	2300      	movs	r3, #0
 800ea0c:	68fa      	ldr	r2, [r7, #12]
 800ea0e:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 800ea10:	68fb      	ldr	r3, [r7, #12]
 800ea12:	88fa      	ldrh	r2, [r7, #6]
 800ea14:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 800ea16:	7cfb      	ldrb	r3, [r7, #19]
 800ea18:	2b00      	cmp	r3, #0
 800ea1a:	d106      	bne.n	800ea2a <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 800ea1c:	4b09      	ldr	r3, [pc, #36]	@ (800ea44 <udp_bind+0x10c>)
 800ea1e:	681a      	ldr	r2, [r3, #0]
 800ea20:	68fb      	ldr	r3, [r7, #12]
 800ea22:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 800ea24:	4a07      	ldr	r2, [pc, #28]	@ (800ea44 <udp_bind+0x10c>)
 800ea26:	68fb      	ldr	r3, [r7, #12]
 800ea28:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 800ea2a:	2300      	movs	r3, #0
}
 800ea2c:	4618      	mov	r0, r3
 800ea2e:	3718      	adds	r7, #24
 800ea30:	46bd      	mov	sp, r7
 800ea32:	bd80      	pop	{r7, pc}
 800ea34:	0801517c 	.word	0x0801517c
 800ea38:	08014660 	.word	0x08014660
 800ea3c:	08014928 	.word	0x08014928
 800ea40:	080146b4 	.word	0x080146b4
 800ea44:	2000a844 	.word	0x2000a844

0800ea48 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800ea48:	b580      	push	{r7, lr}
 800ea4a:	b086      	sub	sp, #24
 800ea4c:	af00      	add	r7, sp, #0
 800ea4e:	60f8      	str	r0, [r7, #12]
 800ea50:	60b9      	str	r1, [r7, #8]
 800ea52:	4613      	mov	r3, r2
 800ea54:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800ea56:	68fb      	ldr	r3, [r7, #12]
 800ea58:	2b00      	cmp	r3, #0
 800ea5a:	d109      	bne.n	800ea70 <udp_connect+0x28>
 800ea5c:	4b2c      	ldr	r3, [pc, #176]	@ (800eb10 <udp_connect+0xc8>)
 800ea5e:	f240 4235 	movw	r2, #1077	@ 0x435
 800ea62:	492c      	ldr	r1, [pc, #176]	@ (800eb14 <udp_connect+0xcc>)
 800ea64:	482c      	ldr	r0, [pc, #176]	@ (800eb18 <udp_connect+0xd0>)
 800ea66:	f002 fc8b 	bl	8011380 <iprintf>
 800ea6a:	f06f 030f 	mvn.w	r3, #15
 800ea6e:	e04b      	b.n	800eb08 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800ea70:	68bb      	ldr	r3, [r7, #8]
 800ea72:	2b00      	cmp	r3, #0
 800ea74:	d109      	bne.n	800ea8a <udp_connect+0x42>
 800ea76:	4b26      	ldr	r3, [pc, #152]	@ (800eb10 <udp_connect+0xc8>)
 800ea78:	f240 4236 	movw	r2, #1078	@ 0x436
 800ea7c:	4927      	ldr	r1, [pc, #156]	@ (800eb1c <udp_connect+0xd4>)
 800ea7e:	4826      	ldr	r0, [pc, #152]	@ (800eb18 <udp_connect+0xd0>)
 800ea80:	f002 fc7e 	bl	8011380 <iprintf>
 800ea84:	f06f 030f 	mvn.w	r3, #15
 800ea88:	e03e      	b.n	800eb08 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 800ea8a:	68fb      	ldr	r3, [r7, #12]
 800ea8c:	8a5b      	ldrh	r3, [r3, #18]
 800ea8e:	2b00      	cmp	r3, #0
 800ea90:	d10f      	bne.n	800eab2 <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800ea92:	68f9      	ldr	r1, [r7, #12]
 800ea94:	68fb      	ldr	r3, [r7, #12]
 800ea96:	8a5b      	ldrh	r3, [r3, #18]
 800ea98:	461a      	mov	r2, r3
 800ea9a:	68f8      	ldr	r0, [r7, #12]
 800ea9c:	f7ff ff4c 	bl	800e938 <udp_bind>
 800eaa0:	4603      	mov	r3, r0
 800eaa2:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800eaa4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800eaa8:	2b00      	cmp	r3, #0
 800eaaa:	d002      	beq.n	800eab2 <udp_connect+0x6a>
      return err;
 800eaac:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800eab0:	e02a      	b.n	800eb08 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 800eab2:	68bb      	ldr	r3, [r7, #8]
 800eab4:	2b00      	cmp	r3, #0
 800eab6:	d002      	beq.n	800eabe <udp_connect+0x76>
 800eab8:	68bb      	ldr	r3, [r7, #8]
 800eaba:	681b      	ldr	r3, [r3, #0]
 800eabc:	e000      	b.n	800eac0 <udp_connect+0x78>
 800eabe:	2300      	movs	r3, #0
 800eac0:	68fa      	ldr	r2, [r7, #12]
 800eac2:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 800eac4:	68fb      	ldr	r3, [r7, #12]
 800eac6:	88fa      	ldrh	r2, [r7, #6]
 800eac8:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 800eaca:	68fb      	ldr	r3, [r7, #12]
 800eacc:	7c1b      	ldrb	r3, [r3, #16]
 800eace:	f043 0304 	orr.w	r3, r3, #4
 800ead2:	b2da      	uxtb	r2, r3
 800ead4:	68fb      	ldr	r3, [r7, #12]
 800ead6:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800ead8:	4b11      	ldr	r3, [pc, #68]	@ (800eb20 <udp_connect+0xd8>)
 800eada:	681b      	ldr	r3, [r3, #0]
 800eadc:	617b      	str	r3, [r7, #20]
 800eade:	e008      	b.n	800eaf2 <udp_connect+0xaa>
    if (pcb == ipcb) {
 800eae0:	68fa      	ldr	r2, [r7, #12]
 800eae2:	697b      	ldr	r3, [r7, #20]
 800eae4:	429a      	cmp	r2, r3
 800eae6:	d101      	bne.n	800eaec <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 800eae8:	2300      	movs	r3, #0
 800eaea:	e00d      	b.n	800eb08 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800eaec:	697b      	ldr	r3, [r7, #20]
 800eaee:	68db      	ldr	r3, [r3, #12]
 800eaf0:	617b      	str	r3, [r7, #20]
 800eaf2:	697b      	ldr	r3, [r7, #20]
 800eaf4:	2b00      	cmp	r3, #0
 800eaf6:	d1f3      	bne.n	800eae0 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 800eaf8:	4b09      	ldr	r3, [pc, #36]	@ (800eb20 <udp_connect+0xd8>)
 800eafa:	681a      	ldr	r2, [r3, #0]
 800eafc:	68fb      	ldr	r3, [r7, #12]
 800eafe:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 800eb00:	4a07      	ldr	r2, [pc, #28]	@ (800eb20 <udp_connect+0xd8>)
 800eb02:	68fb      	ldr	r3, [r7, #12]
 800eb04:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 800eb06:	2300      	movs	r3, #0
}
 800eb08:	4618      	mov	r0, r3
 800eb0a:	3718      	adds	r7, #24
 800eb0c:	46bd      	mov	sp, r7
 800eb0e:	bd80      	pop	{r7, pc}
 800eb10:	08014660 	.word	0x08014660
 800eb14:	08014940 	.word	0x08014940
 800eb18:	080146b4 	.word	0x080146b4
 800eb1c:	0801495c 	.word	0x0801495c
 800eb20:	2000a844 	.word	0x2000a844

0800eb24 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 800eb24:	b580      	push	{r7, lr}
 800eb26:	b084      	sub	sp, #16
 800eb28:	af00      	add	r7, sp, #0
 800eb2a:	60f8      	str	r0, [r7, #12]
 800eb2c:	60b9      	str	r1, [r7, #8]
 800eb2e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 800eb30:	68fb      	ldr	r3, [r7, #12]
 800eb32:	2b00      	cmp	r3, #0
 800eb34:	d107      	bne.n	800eb46 <udp_recv+0x22>
 800eb36:	4b08      	ldr	r3, [pc, #32]	@ (800eb58 <udp_recv+0x34>)
 800eb38:	f240 428a 	movw	r2, #1162	@ 0x48a
 800eb3c:	4907      	ldr	r1, [pc, #28]	@ (800eb5c <udp_recv+0x38>)
 800eb3e:	4808      	ldr	r0, [pc, #32]	@ (800eb60 <udp_recv+0x3c>)
 800eb40:	f002 fc1e 	bl	8011380 <iprintf>
 800eb44:	e005      	b.n	800eb52 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 800eb46:	68fb      	ldr	r3, [r7, #12]
 800eb48:	68ba      	ldr	r2, [r7, #8]
 800eb4a:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 800eb4c:	68fb      	ldr	r3, [r7, #12]
 800eb4e:	687a      	ldr	r2, [r7, #4]
 800eb50:	61da      	str	r2, [r3, #28]
}
 800eb52:	3710      	adds	r7, #16
 800eb54:	46bd      	mov	sp, r7
 800eb56:	bd80      	pop	{r7, pc}
 800eb58:	08014660 	.word	0x08014660
 800eb5c:	08014994 	.word	0x08014994
 800eb60:	080146b4 	.word	0x080146b4

0800eb64 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 800eb64:	b580      	push	{r7, lr}
 800eb66:	b082      	sub	sp, #8
 800eb68:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800eb6a:	2000      	movs	r0, #0
 800eb6c:	f7f7 ff88 	bl	8006a80 <memp_malloc>
 800eb70:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	2b00      	cmp	r3, #0
 800eb76:	d007      	beq.n	800eb88 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 800eb78:	2220      	movs	r2, #32
 800eb7a:	2100      	movs	r1, #0
 800eb7c:	6878      	ldr	r0, [r7, #4]
 800eb7e:	f002 fcd2 	bl	8011526 <memset>
    pcb->ttl = UDP_TTL;
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	22ff      	movs	r2, #255	@ 0xff
 800eb86:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 800eb88:	687b      	ldr	r3, [r7, #4]
}
 800eb8a:	4618      	mov	r0, r3
 800eb8c:	3708      	adds	r7, #8
 800eb8e:	46bd      	mov	sp, r7
 800eb90:	bd80      	pop	{r7, pc}
	...

0800eb94 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800eb94:	b480      	push	{r7}
 800eb96:	b085      	sub	sp, #20
 800eb98:	af00      	add	r7, sp, #0
 800eb9a:	6078      	str	r0, [r7, #4]
 800eb9c:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	2b00      	cmp	r3, #0
 800eba2:	d01e      	beq.n	800ebe2 <udp_netif_ip_addr_changed+0x4e>
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	681b      	ldr	r3, [r3, #0]
 800eba8:	2b00      	cmp	r3, #0
 800ebaa:	d01a      	beq.n	800ebe2 <udp_netif_ip_addr_changed+0x4e>
 800ebac:	683b      	ldr	r3, [r7, #0]
 800ebae:	2b00      	cmp	r3, #0
 800ebb0:	d017      	beq.n	800ebe2 <udp_netif_ip_addr_changed+0x4e>
 800ebb2:	683b      	ldr	r3, [r7, #0]
 800ebb4:	681b      	ldr	r3, [r3, #0]
 800ebb6:	2b00      	cmp	r3, #0
 800ebb8:	d013      	beq.n	800ebe2 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800ebba:	4b0d      	ldr	r3, [pc, #52]	@ (800ebf0 <udp_netif_ip_addr_changed+0x5c>)
 800ebbc:	681b      	ldr	r3, [r3, #0]
 800ebbe:	60fb      	str	r3, [r7, #12]
 800ebc0:	e00c      	b.n	800ebdc <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800ebc2:	68fb      	ldr	r3, [r7, #12]
 800ebc4:	681a      	ldr	r2, [r3, #0]
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	681b      	ldr	r3, [r3, #0]
 800ebca:	429a      	cmp	r2, r3
 800ebcc:	d103      	bne.n	800ebd6 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800ebce:	683b      	ldr	r3, [r7, #0]
 800ebd0:	681a      	ldr	r2, [r3, #0]
 800ebd2:	68fb      	ldr	r3, [r7, #12]
 800ebd4:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800ebd6:	68fb      	ldr	r3, [r7, #12]
 800ebd8:	68db      	ldr	r3, [r3, #12]
 800ebda:	60fb      	str	r3, [r7, #12]
 800ebdc:	68fb      	ldr	r3, [r7, #12]
 800ebde:	2b00      	cmp	r3, #0
 800ebe0:	d1ef      	bne.n	800ebc2 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800ebe2:	bf00      	nop
 800ebe4:	3714      	adds	r7, #20
 800ebe6:	46bd      	mov	sp, r7
 800ebe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebec:	4770      	bx	lr
 800ebee:	bf00      	nop
 800ebf0:	2000a844 	.word	0x2000a844

0800ebf4 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800ebf4:	b580      	push	{r7, lr}
 800ebf6:	b082      	sub	sp, #8
 800ebf8:	af00      	add	r7, sp, #0
 800ebfa:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800ebfc:	4915      	ldr	r1, [pc, #84]	@ (800ec54 <etharp_free_entry+0x60>)
 800ebfe:	687a      	ldr	r2, [r7, #4]
 800ec00:	4613      	mov	r3, r2
 800ec02:	005b      	lsls	r3, r3, #1
 800ec04:	4413      	add	r3, r2
 800ec06:	00db      	lsls	r3, r3, #3
 800ec08:	440b      	add	r3, r1
 800ec0a:	681b      	ldr	r3, [r3, #0]
 800ec0c:	2b00      	cmp	r3, #0
 800ec0e:	d013      	beq.n	800ec38 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800ec10:	4910      	ldr	r1, [pc, #64]	@ (800ec54 <etharp_free_entry+0x60>)
 800ec12:	687a      	ldr	r2, [r7, #4]
 800ec14:	4613      	mov	r3, r2
 800ec16:	005b      	lsls	r3, r3, #1
 800ec18:	4413      	add	r3, r2
 800ec1a:	00db      	lsls	r3, r3, #3
 800ec1c:	440b      	add	r3, r1
 800ec1e:	681b      	ldr	r3, [r3, #0]
 800ec20:	4618      	mov	r0, r3
 800ec22:	f7f8 fe13 	bl	800784c <pbuf_free>
    arp_table[i].q = NULL;
 800ec26:	490b      	ldr	r1, [pc, #44]	@ (800ec54 <etharp_free_entry+0x60>)
 800ec28:	687a      	ldr	r2, [r7, #4]
 800ec2a:	4613      	mov	r3, r2
 800ec2c:	005b      	lsls	r3, r3, #1
 800ec2e:	4413      	add	r3, r2
 800ec30:	00db      	lsls	r3, r3, #3
 800ec32:	440b      	add	r3, r1
 800ec34:	2200      	movs	r2, #0
 800ec36:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800ec38:	4906      	ldr	r1, [pc, #24]	@ (800ec54 <etharp_free_entry+0x60>)
 800ec3a:	687a      	ldr	r2, [r7, #4]
 800ec3c:	4613      	mov	r3, r2
 800ec3e:	005b      	lsls	r3, r3, #1
 800ec40:	4413      	add	r3, r2
 800ec42:	00db      	lsls	r3, r3, #3
 800ec44:	440b      	add	r3, r1
 800ec46:	3314      	adds	r3, #20
 800ec48:	2200      	movs	r2, #0
 800ec4a:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800ec4c:	bf00      	nop
 800ec4e:	3708      	adds	r7, #8
 800ec50:	46bd      	mov	sp, r7
 800ec52:	bd80      	pop	{r7, pc}
 800ec54:	2000a848 	.word	0x2000a848

0800ec58 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800ec58:	b580      	push	{r7, lr}
 800ec5a:	b082      	sub	sp, #8
 800ec5c:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800ec5e:	2300      	movs	r3, #0
 800ec60:	607b      	str	r3, [r7, #4]
 800ec62:	e096      	b.n	800ed92 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800ec64:	494f      	ldr	r1, [pc, #316]	@ (800eda4 <etharp_tmr+0x14c>)
 800ec66:	687a      	ldr	r2, [r7, #4]
 800ec68:	4613      	mov	r3, r2
 800ec6a:	005b      	lsls	r3, r3, #1
 800ec6c:	4413      	add	r3, r2
 800ec6e:	00db      	lsls	r3, r3, #3
 800ec70:	440b      	add	r3, r1
 800ec72:	3314      	adds	r3, #20
 800ec74:	781b      	ldrb	r3, [r3, #0]
 800ec76:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800ec78:	78fb      	ldrb	r3, [r7, #3]
 800ec7a:	2b00      	cmp	r3, #0
 800ec7c:	f000 8086 	beq.w	800ed8c <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800ec80:	4948      	ldr	r1, [pc, #288]	@ (800eda4 <etharp_tmr+0x14c>)
 800ec82:	687a      	ldr	r2, [r7, #4]
 800ec84:	4613      	mov	r3, r2
 800ec86:	005b      	lsls	r3, r3, #1
 800ec88:	4413      	add	r3, r2
 800ec8a:	00db      	lsls	r3, r3, #3
 800ec8c:	440b      	add	r3, r1
 800ec8e:	3312      	adds	r3, #18
 800ec90:	881b      	ldrh	r3, [r3, #0]
 800ec92:	3301      	adds	r3, #1
 800ec94:	b298      	uxth	r0, r3
 800ec96:	4943      	ldr	r1, [pc, #268]	@ (800eda4 <etharp_tmr+0x14c>)
 800ec98:	687a      	ldr	r2, [r7, #4]
 800ec9a:	4613      	mov	r3, r2
 800ec9c:	005b      	lsls	r3, r3, #1
 800ec9e:	4413      	add	r3, r2
 800eca0:	00db      	lsls	r3, r3, #3
 800eca2:	440b      	add	r3, r1
 800eca4:	3312      	adds	r3, #18
 800eca6:	4602      	mov	r2, r0
 800eca8:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800ecaa:	493e      	ldr	r1, [pc, #248]	@ (800eda4 <etharp_tmr+0x14c>)
 800ecac:	687a      	ldr	r2, [r7, #4]
 800ecae:	4613      	mov	r3, r2
 800ecb0:	005b      	lsls	r3, r3, #1
 800ecb2:	4413      	add	r3, r2
 800ecb4:	00db      	lsls	r3, r3, #3
 800ecb6:	440b      	add	r3, r1
 800ecb8:	3312      	adds	r3, #18
 800ecba:	881b      	ldrh	r3, [r3, #0]
 800ecbc:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 800ecc0:	d215      	bcs.n	800ecee <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800ecc2:	4938      	ldr	r1, [pc, #224]	@ (800eda4 <etharp_tmr+0x14c>)
 800ecc4:	687a      	ldr	r2, [r7, #4]
 800ecc6:	4613      	mov	r3, r2
 800ecc8:	005b      	lsls	r3, r3, #1
 800ecca:	4413      	add	r3, r2
 800eccc:	00db      	lsls	r3, r3, #3
 800ecce:	440b      	add	r3, r1
 800ecd0:	3314      	adds	r3, #20
 800ecd2:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800ecd4:	2b01      	cmp	r3, #1
 800ecd6:	d10e      	bne.n	800ecf6 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800ecd8:	4932      	ldr	r1, [pc, #200]	@ (800eda4 <etharp_tmr+0x14c>)
 800ecda:	687a      	ldr	r2, [r7, #4]
 800ecdc:	4613      	mov	r3, r2
 800ecde:	005b      	lsls	r3, r3, #1
 800ece0:	4413      	add	r3, r2
 800ece2:	00db      	lsls	r3, r3, #3
 800ece4:	440b      	add	r3, r1
 800ece6:	3312      	adds	r3, #18
 800ece8:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800ecea:	2b04      	cmp	r3, #4
 800ecec:	d903      	bls.n	800ecf6 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800ecee:	6878      	ldr	r0, [r7, #4]
 800ecf0:	f7ff ff80 	bl	800ebf4 <etharp_free_entry>
 800ecf4:	e04a      	b.n	800ed8c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800ecf6:	492b      	ldr	r1, [pc, #172]	@ (800eda4 <etharp_tmr+0x14c>)
 800ecf8:	687a      	ldr	r2, [r7, #4]
 800ecfa:	4613      	mov	r3, r2
 800ecfc:	005b      	lsls	r3, r3, #1
 800ecfe:	4413      	add	r3, r2
 800ed00:	00db      	lsls	r3, r3, #3
 800ed02:	440b      	add	r3, r1
 800ed04:	3314      	adds	r3, #20
 800ed06:	781b      	ldrb	r3, [r3, #0]
 800ed08:	2b03      	cmp	r3, #3
 800ed0a:	d10a      	bne.n	800ed22 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800ed0c:	4925      	ldr	r1, [pc, #148]	@ (800eda4 <etharp_tmr+0x14c>)
 800ed0e:	687a      	ldr	r2, [r7, #4]
 800ed10:	4613      	mov	r3, r2
 800ed12:	005b      	lsls	r3, r3, #1
 800ed14:	4413      	add	r3, r2
 800ed16:	00db      	lsls	r3, r3, #3
 800ed18:	440b      	add	r3, r1
 800ed1a:	3314      	adds	r3, #20
 800ed1c:	2204      	movs	r2, #4
 800ed1e:	701a      	strb	r2, [r3, #0]
 800ed20:	e034      	b.n	800ed8c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800ed22:	4920      	ldr	r1, [pc, #128]	@ (800eda4 <etharp_tmr+0x14c>)
 800ed24:	687a      	ldr	r2, [r7, #4]
 800ed26:	4613      	mov	r3, r2
 800ed28:	005b      	lsls	r3, r3, #1
 800ed2a:	4413      	add	r3, r2
 800ed2c:	00db      	lsls	r3, r3, #3
 800ed2e:	440b      	add	r3, r1
 800ed30:	3314      	adds	r3, #20
 800ed32:	781b      	ldrb	r3, [r3, #0]
 800ed34:	2b04      	cmp	r3, #4
 800ed36:	d10a      	bne.n	800ed4e <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800ed38:	491a      	ldr	r1, [pc, #104]	@ (800eda4 <etharp_tmr+0x14c>)
 800ed3a:	687a      	ldr	r2, [r7, #4]
 800ed3c:	4613      	mov	r3, r2
 800ed3e:	005b      	lsls	r3, r3, #1
 800ed40:	4413      	add	r3, r2
 800ed42:	00db      	lsls	r3, r3, #3
 800ed44:	440b      	add	r3, r1
 800ed46:	3314      	adds	r3, #20
 800ed48:	2202      	movs	r2, #2
 800ed4a:	701a      	strb	r2, [r3, #0]
 800ed4c:	e01e      	b.n	800ed8c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800ed4e:	4915      	ldr	r1, [pc, #84]	@ (800eda4 <etharp_tmr+0x14c>)
 800ed50:	687a      	ldr	r2, [r7, #4]
 800ed52:	4613      	mov	r3, r2
 800ed54:	005b      	lsls	r3, r3, #1
 800ed56:	4413      	add	r3, r2
 800ed58:	00db      	lsls	r3, r3, #3
 800ed5a:	440b      	add	r3, r1
 800ed5c:	3314      	adds	r3, #20
 800ed5e:	781b      	ldrb	r3, [r3, #0]
 800ed60:	2b01      	cmp	r3, #1
 800ed62:	d113      	bne.n	800ed8c <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800ed64:	490f      	ldr	r1, [pc, #60]	@ (800eda4 <etharp_tmr+0x14c>)
 800ed66:	687a      	ldr	r2, [r7, #4]
 800ed68:	4613      	mov	r3, r2
 800ed6a:	005b      	lsls	r3, r3, #1
 800ed6c:	4413      	add	r3, r2
 800ed6e:	00db      	lsls	r3, r3, #3
 800ed70:	440b      	add	r3, r1
 800ed72:	3308      	adds	r3, #8
 800ed74:	6818      	ldr	r0, [r3, #0]
 800ed76:	687a      	ldr	r2, [r7, #4]
 800ed78:	4613      	mov	r3, r2
 800ed7a:	005b      	lsls	r3, r3, #1
 800ed7c:	4413      	add	r3, r2
 800ed7e:	00db      	lsls	r3, r3, #3
 800ed80:	4a08      	ldr	r2, [pc, #32]	@ (800eda4 <etharp_tmr+0x14c>)
 800ed82:	4413      	add	r3, r2
 800ed84:	3304      	adds	r3, #4
 800ed86:	4619      	mov	r1, r3
 800ed88:	f000 fe6e 	bl	800fa68 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	3301      	adds	r3, #1
 800ed90:	607b      	str	r3, [r7, #4]
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	2b09      	cmp	r3, #9
 800ed96:	f77f af65 	ble.w	800ec64 <etharp_tmr+0xc>
      }
    }
  }
}
 800ed9a:	bf00      	nop
 800ed9c:	bf00      	nop
 800ed9e:	3708      	adds	r7, #8
 800eda0:	46bd      	mov	sp, r7
 800eda2:	bd80      	pop	{r7, pc}
 800eda4:	2000a848 	.word	0x2000a848

0800eda8 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800eda8:	b580      	push	{r7, lr}
 800edaa:	b08a      	sub	sp, #40	@ 0x28
 800edac:	af00      	add	r7, sp, #0
 800edae:	60f8      	str	r0, [r7, #12]
 800edb0:	460b      	mov	r3, r1
 800edb2:	607a      	str	r2, [r7, #4]
 800edb4:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800edb6:	230a      	movs	r3, #10
 800edb8:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800edba:	230a      	movs	r3, #10
 800edbc:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800edbe:	230a      	movs	r3, #10
 800edc0:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 800edc2:	2300      	movs	r3, #0
 800edc4:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800edc6:	230a      	movs	r3, #10
 800edc8:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800edca:	2300      	movs	r3, #0
 800edcc:	83bb      	strh	r3, [r7, #28]
 800edce:	2300      	movs	r3, #0
 800edd0:	837b      	strh	r3, [r7, #26]
 800edd2:	2300      	movs	r3, #0
 800edd4:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800edd6:	2300      	movs	r3, #0
 800edd8:	843b      	strh	r3, [r7, #32]
 800edda:	e0ae      	b.n	800ef3a <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800eddc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ede0:	49a6      	ldr	r1, [pc, #664]	@ (800f07c <etharp_find_entry+0x2d4>)
 800ede2:	4613      	mov	r3, r2
 800ede4:	005b      	lsls	r3, r3, #1
 800ede6:	4413      	add	r3, r2
 800ede8:	00db      	lsls	r3, r3, #3
 800edea:	440b      	add	r3, r1
 800edec:	3314      	adds	r3, #20
 800edee:	781b      	ldrb	r3, [r3, #0]
 800edf0:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800edf2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800edf6:	2b0a      	cmp	r3, #10
 800edf8:	d105      	bne.n	800ee06 <etharp_find_entry+0x5e>
 800edfa:	7dfb      	ldrb	r3, [r7, #23]
 800edfc:	2b00      	cmp	r3, #0
 800edfe:	d102      	bne.n	800ee06 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800ee00:	8c3b      	ldrh	r3, [r7, #32]
 800ee02:	847b      	strh	r3, [r7, #34]	@ 0x22
 800ee04:	e095      	b.n	800ef32 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800ee06:	7dfb      	ldrb	r3, [r7, #23]
 800ee08:	2b00      	cmp	r3, #0
 800ee0a:	f000 8092 	beq.w	800ef32 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800ee0e:	7dfb      	ldrb	r3, [r7, #23]
 800ee10:	2b01      	cmp	r3, #1
 800ee12:	d009      	beq.n	800ee28 <etharp_find_entry+0x80>
 800ee14:	7dfb      	ldrb	r3, [r7, #23]
 800ee16:	2b01      	cmp	r3, #1
 800ee18:	d806      	bhi.n	800ee28 <etharp_find_entry+0x80>
 800ee1a:	4b99      	ldr	r3, [pc, #612]	@ (800f080 <etharp_find_entry+0x2d8>)
 800ee1c:	f240 1223 	movw	r2, #291	@ 0x123
 800ee20:	4998      	ldr	r1, [pc, #608]	@ (800f084 <etharp_find_entry+0x2dc>)
 800ee22:	4899      	ldr	r0, [pc, #612]	@ (800f088 <etharp_find_entry+0x2e0>)
 800ee24:	f002 faac 	bl	8011380 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800ee28:	68fb      	ldr	r3, [r7, #12]
 800ee2a:	2b00      	cmp	r3, #0
 800ee2c:	d020      	beq.n	800ee70 <etharp_find_entry+0xc8>
 800ee2e:	68fb      	ldr	r3, [r7, #12]
 800ee30:	6819      	ldr	r1, [r3, #0]
 800ee32:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ee36:	4891      	ldr	r0, [pc, #580]	@ (800f07c <etharp_find_entry+0x2d4>)
 800ee38:	4613      	mov	r3, r2
 800ee3a:	005b      	lsls	r3, r3, #1
 800ee3c:	4413      	add	r3, r2
 800ee3e:	00db      	lsls	r3, r3, #3
 800ee40:	4403      	add	r3, r0
 800ee42:	3304      	adds	r3, #4
 800ee44:	681b      	ldr	r3, [r3, #0]
 800ee46:	4299      	cmp	r1, r3
 800ee48:	d112      	bne.n	800ee70 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800ee4a:	687b      	ldr	r3, [r7, #4]
 800ee4c:	2b00      	cmp	r3, #0
 800ee4e:	d00c      	beq.n	800ee6a <etharp_find_entry+0xc2>
 800ee50:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ee54:	4989      	ldr	r1, [pc, #548]	@ (800f07c <etharp_find_entry+0x2d4>)
 800ee56:	4613      	mov	r3, r2
 800ee58:	005b      	lsls	r3, r3, #1
 800ee5a:	4413      	add	r3, r2
 800ee5c:	00db      	lsls	r3, r3, #3
 800ee5e:	440b      	add	r3, r1
 800ee60:	3308      	adds	r3, #8
 800ee62:	681b      	ldr	r3, [r3, #0]
 800ee64:	687a      	ldr	r2, [r7, #4]
 800ee66:	429a      	cmp	r2, r3
 800ee68:	d102      	bne.n	800ee70 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800ee6a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800ee6e:	e100      	b.n	800f072 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800ee70:	7dfb      	ldrb	r3, [r7, #23]
 800ee72:	2b01      	cmp	r3, #1
 800ee74:	d140      	bne.n	800eef8 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800ee76:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ee7a:	4980      	ldr	r1, [pc, #512]	@ (800f07c <etharp_find_entry+0x2d4>)
 800ee7c:	4613      	mov	r3, r2
 800ee7e:	005b      	lsls	r3, r3, #1
 800ee80:	4413      	add	r3, r2
 800ee82:	00db      	lsls	r3, r3, #3
 800ee84:	440b      	add	r3, r1
 800ee86:	681b      	ldr	r3, [r3, #0]
 800ee88:	2b00      	cmp	r3, #0
 800ee8a:	d01a      	beq.n	800eec2 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800ee8c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ee90:	497a      	ldr	r1, [pc, #488]	@ (800f07c <etharp_find_entry+0x2d4>)
 800ee92:	4613      	mov	r3, r2
 800ee94:	005b      	lsls	r3, r3, #1
 800ee96:	4413      	add	r3, r2
 800ee98:	00db      	lsls	r3, r3, #3
 800ee9a:	440b      	add	r3, r1
 800ee9c:	3312      	adds	r3, #18
 800ee9e:	881b      	ldrh	r3, [r3, #0]
 800eea0:	8bba      	ldrh	r2, [r7, #28]
 800eea2:	429a      	cmp	r2, r3
 800eea4:	d845      	bhi.n	800ef32 <etharp_find_entry+0x18a>
            old_queue = i;
 800eea6:	8c3b      	ldrh	r3, [r7, #32]
 800eea8:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800eeaa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800eeae:	4973      	ldr	r1, [pc, #460]	@ (800f07c <etharp_find_entry+0x2d4>)
 800eeb0:	4613      	mov	r3, r2
 800eeb2:	005b      	lsls	r3, r3, #1
 800eeb4:	4413      	add	r3, r2
 800eeb6:	00db      	lsls	r3, r3, #3
 800eeb8:	440b      	add	r3, r1
 800eeba:	3312      	adds	r3, #18
 800eebc:	881b      	ldrh	r3, [r3, #0]
 800eebe:	83bb      	strh	r3, [r7, #28]
 800eec0:	e037      	b.n	800ef32 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800eec2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800eec6:	496d      	ldr	r1, [pc, #436]	@ (800f07c <etharp_find_entry+0x2d4>)
 800eec8:	4613      	mov	r3, r2
 800eeca:	005b      	lsls	r3, r3, #1
 800eecc:	4413      	add	r3, r2
 800eece:	00db      	lsls	r3, r3, #3
 800eed0:	440b      	add	r3, r1
 800eed2:	3312      	adds	r3, #18
 800eed4:	881b      	ldrh	r3, [r3, #0]
 800eed6:	8b7a      	ldrh	r2, [r7, #26]
 800eed8:	429a      	cmp	r2, r3
 800eeda:	d82a      	bhi.n	800ef32 <etharp_find_entry+0x18a>
            old_pending = i;
 800eedc:	8c3b      	ldrh	r3, [r7, #32]
 800eede:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 800eee0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800eee4:	4965      	ldr	r1, [pc, #404]	@ (800f07c <etharp_find_entry+0x2d4>)
 800eee6:	4613      	mov	r3, r2
 800eee8:	005b      	lsls	r3, r3, #1
 800eeea:	4413      	add	r3, r2
 800eeec:	00db      	lsls	r3, r3, #3
 800eeee:	440b      	add	r3, r1
 800eef0:	3312      	adds	r3, #18
 800eef2:	881b      	ldrh	r3, [r3, #0]
 800eef4:	837b      	strh	r3, [r7, #26]
 800eef6:	e01c      	b.n	800ef32 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800eef8:	7dfb      	ldrb	r3, [r7, #23]
 800eefa:	2b01      	cmp	r3, #1
 800eefc:	d919      	bls.n	800ef32 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800eefe:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ef02:	495e      	ldr	r1, [pc, #376]	@ (800f07c <etharp_find_entry+0x2d4>)
 800ef04:	4613      	mov	r3, r2
 800ef06:	005b      	lsls	r3, r3, #1
 800ef08:	4413      	add	r3, r2
 800ef0a:	00db      	lsls	r3, r3, #3
 800ef0c:	440b      	add	r3, r1
 800ef0e:	3312      	adds	r3, #18
 800ef10:	881b      	ldrh	r3, [r3, #0]
 800ef12:	8b3a      	ldrh	r2, [r7, #24]
 800ef14:	429a      	cmp	r2, r3
 800ef16:	d80c      	bhi.n	800ef32 <etharp_find_entry+0x18a>
            old_stable = i;
 800ef18:	8c3b      	ldrh	r3, [r7, #32]
 800ef1a:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 800ef1c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ef20:	4956      	ldr	r1, [pc, #344]	@ (800f07c <etharp_find_entry+0x2d4>)
 800ef22:	4613      	mov	r3, r2
 800ef24:	005b      	lsls	r3, r3, #1
 800ef26:	4413      	add	r3, r2
 800ef28:	00db      	lsls	r3, r3, #3
 800ef2a:	440b      	add	r3, r1
 800ef2c:	3312      	adds	r3, #18
 800ef2e:	881b      	ldrh	r3, [r3, #0]
 800ef30:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800ef32:	8c3b      	ldrh	r3, [r7, #32]
 800ef34:	3301      	adds	r3, #1
 800ef36:	b29b      	uxth	r3, r3
 800ef38:	843b      	strh	r3, [r7, #32]
 800ef3a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800ef3e:	2b09      	cmp	r3, #9
 800ef40:	f77f af4c 	ble.w	800eddc <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800ef44:	7afb      	ldrb	r3, [r7, #11]
 800ef46:	f003 0302 	and.w	r3, r3, #2
 800ef4a:	2b00      	cmp	r3, #0
 800ef4c:	d108      	bne.n	800ef60 <etharp_find_entry+0x1b8>
 800ef4e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800ef52:	2b0a      	cmp	r3, #10
 800ef54:	d107      	bne.n	800ef66 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800ef56:	7afb      	ldrb	r3, [r7, #11]
 800ef58:	f003 0301 	and.w	r3, r3, #1
 800ef5c:	2b00      	cmp	r3, #0
 800ef5e:	d102      	bne.n	800ef66 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800ef60:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ef64:	e085      	b.n	800f072 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800ef66:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800ef6a:	2b09      	cmp	r3, #9
 800ef6c:	dc02      	bgt.n	800ef74 <etharp_find_entry+0x1cc>
    i = empty;
 800ef6e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800ef70:	843b      	strh	r3, [r7, #32]
 800ef72:	e039      	b.n	800efe8 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800ef74:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 800ef78:	2b09      	cmp	r3, #9
 800ef7a:	dc14      	bgt.n	800efa6 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800ef7c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ef7e:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800ef80:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ef84:	493d      	ldr	r1, [pc, #244]	@ (800f07c <etharp_find_entry+0x2d4>)
 800ef86:	4613      	mov	r3, r2
 800ef88:	005b      	lsls	r3, r3, #1
 800ef8a:	4413      	add	r3, r2
 800ef8c:	00db      	lsls	r3, r3, #3
 800ef8e:	440b      	add	r3, r1
 800ef90:	681b      	ldr	r3, [r3, #0]
 800ef92:	2b00      	cmp	r3, #0
 800ef94:	d018      	beq.n	800efc8 <etharp_find_entry+0x220>
 800ef96:	4b3a      	ldr	r3, [pc, #232]	@ (800f080 <etharp_find_entry+0x2d8>)
 800ef98:	f240 126d 	movw	r2, #365	@ 0x16d
 800ef9c:	493b      	ldr	r1, [pc, #236]	@ (800f08c <etharp_find_entry+0x2e4>)
 800ef9e:	483a      	ldr	r0, [pc, #232]	@ (800f088 <etharp_find_entry+0x2e0>)
 800efa0:	f002 f9ee 	bl	8011380 <iprintf>
 800efa4:	e010      	b.n	800efc8 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800efa6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 800efaa:	2b09      	cmp	r3, #9
 800efac:	dc02      	bgt.n	800efb4 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800efae:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800efb0:	843b      	strh	r3, [r7, #32]
 800efb2:	e009      	b.n	800efc8 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800efb4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800efb8:	2b09      	cmp	r3, #9
 800efba:	dc02      	bgt.n	800efc2 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800efbc:	8bfb      	ldrh	r3, [r7, #30]
 800efbe:	843b      	strh	r3, [r7, #32]
 800efc0:	e002      	b.n	800efc8 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800efc2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800efc6:	e054      	b.n	800f072 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800efc8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800efcc:	2b09      	cmp	r3, #9
 800efce:	dd06      	ble.n	800efde <etharp_find_entry+0x236>
 800efd0:	4b2b      	ldr	r3, [pc, #172]	@ (800f080 <etharp_find_entry+0x2d8>)
 800efd2:	f240 127f 	movw	r2, #383	@ 0x17f
 800efd6:	492e      	ldr	r1, [pc, #184]	@ (800f090 <etharp_find_entry+0x2e8>)
 800efd8:	482b      	ldr	r0, [pc, #172]	@ (800f088 <etharp_find_entry+0x2e0>)
 800efda:	f002 f9d1 	bl	8011380 <iprintf>
    etharp_free_entry(i);
 800efde:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800efe2:	4618      	mov	r0, r3
 800efe4:	f7ff fe06 	bl	800ebf4 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800efe8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800efec:	2b09      	cmp	r3, #9
 800efee:	dd06      	ble.n	800effe <etharp_find_entry+0x256>
 800eff0:	4b23      	ldr	r3, [pc, #140]	@ (800f080 <etharp_find_entry+0x2d8>)
 800eff2:	f240 1283 	movw	r2, #387	@ 0x183
 800eff6:	4926      	ldr	r1, [pc, #152]	@ (800f090 <etharp_find_entry+0x2e8>)
 800eff8:	4823      	ldr	r0, [pc, #140]	@ (800f088 <etharp_find_entry+0x2e0>)
 800effa:	f002 f9c1 	bl	8011380 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800effe:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f002:	491e      	ldr	r1, [pc, #120]	@ (800f07c <etharp_find_entry+0x2d4>)
 800f004:	4613      	mov	r3, r2
 800f006:	005b      	lsls	r3, r3, #1
 800f008:	4413      	add	r3, r2
 800f00a:	00db      	lsls	r3, r3, #3
 800f00c:	440b      	add	r3, r1
 800f00e:	3314      	adds	r3, #20
 800f010:	781b      	ldrb	r3, [r3, #0]
 800f012:	2b00      	cmp	r3, #0
 800f014:	d006      	beq.n	800f024 <etharp_find_entry+0x27c>
 800f016:	4b1a      	ldr	r3, [pc, #104]	@ (800f080 <etharp_find_entry+0x2d8>)
 800f018:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 800f01c:	491d      	ldr	r1, [pc, #116]	@ (800f094 <etharp_find_entry+0x2ec>)
 800f01e:	481a      	ldr	r0, [pc, #104]	@ (800f088 <etharp_find_entry+0x2e0>)
 800f020:	f002 f9ae 	bl	8011380 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800f024:	68fb      	ldr	r3, [r7, #12]
 800f026:	2b00      	cmp	r3, #0
 800f028:	d00b      	beq.n	800f042 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800f02a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f02e:	68fb      	ldr	r3, [r7, #12]
 800f030:	6819      	ldr	r1, [r3, #0]
 800f032:	4812      	ldr	r0, [pc, #72]	@ (800f07c <etharp_find_entry+0x2d4>)
 800f034:	4613      	mov	r3, r2
 800f036:	005b      	lsls	r3, r3, #1
 800f038:	4413      	add	r3, r2
 800f03a:	00db      	lsls	r3, r3, #3
 800f03c:	4403      	add	r3, r0
 800f03e:	3304      	adds	r3, #4
 800f040:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800f042:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f046:	490d      	ldr	r1, [pc, #52]	@ (800f07c <etharp_find_entry+0x2d4>)
 800f048:	4613      	mov	r3, r2
 800f04a:	005b      	lsls	r3, r3, #1
 800f04c:	4413      	add	r3, r2
 800f04e:	00db      	lsls	r3, r3, #3
 800f050:	440b      	add	r3, r1
 800f052:	3312      	adds	r3, #18
 800f054:	2200      	movs	r2, #0
 800f056:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800f058:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f05c:	4907      	ldr	r1, [pc, #28]	@ (800f07c <etharp_find_entry+0x2d4>)
 800f05e:	4613      	mov	r3, r2
 800f060:	005b      	lsls	r3, r3, #1
 800f062:	4413      	add	r3, r2
 800f064:	00db      	lsls	r3, r3, #3
 800f066:	440b      	add	r3, r1
 800f068:	3308      	adds	r3, #8
 800f06a:	687a      	ldr	r2, [r7, #4]
 800f06c:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800f06e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800f072:	4618      	mov	r0, r3
 800f074:	3728      	adds	r7, #40	@ 0x28
 800f076:	46bd      	mov	sp, r7
 800f078:	bd80      	pop	{r7, pc}
 800f07a:	bf00      	nop
 800f07c:	2000a848 	.word	0x2000a848
 800f080:	080149c4 	.word	0x080149c4
 800f084:	080149fc 	.word	0x080149fc
 800f088:	08014a3c 	.word	0x08014a3c
 800f08c:	08014a64 	.word	0x08014a64
 800f090:	08014a7c 	.word	0x08014a7c
 800f094:	08014a90 	.word	0x08014a90

0800f098 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800f098:	b580      	push	{r7, lr}
 800f09a:	b088      	sub	sp, #32
 800f09c:	af02      	add	r7, sp, #8
 800f09e:	60f8      	str	r0, [r7, #12]
 800f0a0:	60b9      	str	r1, [r7, #8]
 800f0a2:	607a      	str	r2, [r7, #4]
 800f0a4:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800f0a6:	68fb      	ldr	r3, [r7, #12]
 800f0a8:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800f0ac:	2b06      	cmp	r3, #6
 800f0ae:	d006      	beq.n	800f0be <etharp_update_arp_entry+0x26>
 800f0b0:	4b48      	ldr	r3, [pc, #288]	@ (800f1d4 <etharp_update_arp_entry+0x13c>)
 800f0b2:	f240 12a9 	movw	r2, #425	@ 0x1a9
 800f0b6:	4948      	ldr	r1, [pc, #288]	@ (800f1d8 <etharp_update_arp_entry+0x140>)
 800f0b8:	4848      	ldr	r0, [pc, #288]	@ (800f1dc <etharp_update_arp_entry+0x144>)
 800f0ba:	f002 f961 	bl	8011380 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800f0be:	68bb      	ldr	r3, [r7, #8]
 800f0c0:	2b00      	cmp	r3, #0
 800f0c2:	d012      	beq.n	800f0ea <etharp_update_arp_entry+0x52>
 800f0c4:	68bb      	ldr	r3, [r7, #8]
 800f0c6:	681b      	ldr	r3, [r3, #0]
 800f0c8:	2b00      	cmp	r3, #0
 800f0ca:	d00e      	beq.n	800f0ea <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800f0cc:	68bb      	ldr	r3, [r7, #8]
 800f0ce:	681b      	ldr	r3, [r3, #0]
 800f0d0:	68f9      	ldr	r1, [r7, #12]
 800f0d2:	4618      	mov	r0, r3
 800f0d4:	f001 f8fe 	bl	80102d4 <ip4_addr_isbroadcast_u32>
 800f0d8:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800f0da:	2b00      	cmp	r3, #0
 800f0dc:	d105      	bne.n	800f0ea <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800f0de:	68bb      	ldr	r3, [r7, #8]
 800f0e0:	681b      	ldr	r3, [r3, #0]
 800f0e2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800f0e6:	2be0      	cmp	r3, #224	@ 0xe0
 800f0e8:	d102      	bne.n	800f0f0 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800f0ea:	f06f 030f 	mvn.w	r3, #15
 800f0ee:	e06c      	b.n	800f1ca <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800f0f0:	78fb      	ldrb	r3, [r7, #3]
 800f0f2:	68fa      	ldr	r2, [r7, #12]
 800f0f4:	4619      	mov	r1, r3
 800f0f6:	68b8      	ldr	r0, [r7, #8]
 800f0f8:	f7ff fe56 	bl	800eda8 <etharp_find_entry>
 800f0fc:	4603      	mov	r3, r0
 800f0fe:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800f100:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800f104:	2b00      	cmp	r3, #0
 800f106:	da02      	bge.n	800f10e <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800f108:	8afb      	ldrh	r3, [r7, #22]
 800f10a:	b25b      	sxtb	r3, r3
 800f10c:	e05d      	b.n	800f1ca <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800f10e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800f112:	4933      	ldr	r1, [pc, #204]	@ (800f1e0 <etharp_update_arp_entry+0x148>)
 800f114:	4613      	mov	r3, r2
 800f116:	005b      	lsls	r3, r3, #1
 800f118:	4413      	add	r3, r2
 800f11a:	00db      	lsls	r3, r3, #3
 800f11c:	440b      	add	r3, r1
 800f11e:	3314      	adds	r3, #20
 800f120:	2202      	movs	r2, #2
 800f122:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800f124:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800f128:	492d      	ldr	r1, [pc, #180]	@ (800f1e0 <etharp_update_arp_entry+0x148>)
 800f12a:	4613      	mov	r3, r2
 800f12c:	005b      	lsls	r3, r3, #1
 800f12e:	4413      	add	r3, r2
 800f130:	00db      	lsls	r3, r3, #3
 800f132:	440b      	add	r3, r1
 800f134:	3308      	adds	r3, #8
 800f136:	68fa      	ldr	r2, [r7, #12]
 800f138:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800f13a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800f13e:	4613      	mov	r3, r2
 800f140:	005b      	lsls	r3, r3, #1
 800f142:	4413      	add	r3, r2
 800f144:	00db      	lsls	r3, r3, #3
 800f146:	3308      	adds	r3, #8
 800f148:	4a25      	ldr	r2, [pc, #148]	@ (800f1e0 <etharp_update_arp_entry+0x148>)
 800f14a:	4413      	add	r3, r2
 800f14c:	3304      	adds	r3, #4
 800f14e:	2206      	movs	r2, #6
 800f150:	6879      	ldr	r1, [r7, #4]
 800f152:	4618      	mov	r0, r3
 800f154:	f002 fa6f 	bl	8011636 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800f158:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800f15c:	4920      	ldr	r1, [pc, #128]	@ (800f1e0 <etharp_update_arp_entry+0x148>)
 800f15e:	4613      	mov	r3, r2
 800f160:	005b      	lsls	r3, r3, #1
 800f162:	4413      	add	r3, r2
 800f164:	00db      	lsls	r3, r3, #3
 800f166:	440b      	add	r3, r1
 800f168:	3312      	adds	r3, #18
 800f16a:	2200      	movs	r2, #0
 800f16c:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800f16e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800f172:	491b      	ldr	r1, [pc, #108]	@ (800f1e0 <etharp_update_arp_entry+0x148>)
 800f174:	4613      	mov	r3, r2
 800f176:	005b      	lsls	r3, r3, #1
 800f178:	4413      	add	r3, r2
 800f17a:	00db      	lsls	r3, r3, #3
 800f17c:	440b      	add	r3, r1
 800f17e:	681b      	ldr	r3, [r3, #0]
 800f180:	2b00      	cmp	r3, #0
 800f182:	d021      	beq.n	800f1c8 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800f184:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800f188:	4915      	ldr	r1, [pc, #84]	@ (800f1e0 <etharp_update_arp_entry+0x148>)
 800f18a:	4613      	mov	r3, r2
 800f18c:	005b      	lsls	r3, r3, #1
 800f18e:	4413      	add	r3, r2
 800f190:	00db      	lsls	r3, r3, #3
 800f192:	440b      	add	r3, r1
 800f194:	681b      	ldr	r3, [r3, #0]
 800f196:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800f198:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800f19c:	4910      	ldr	r1, [pc, #64]	@ (800f1e0 <etharp_update_arp_entry+0x148>)
 800f19e:	4613      	mov	r3, r2
 800f1a0:	005b      	lsls	r3, r3, #1
 800f1a2:	4413      	add	r3, r2
 800f1a4:	00db      	lsls	r3, r3, #3
 800f1a6:	440b      	add	r3, r1
 800f1a8:	2200      	movs	r2, #0
 800f1aa:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800f1ac:	68fb      	ldr	r3, [r7, #12]
 800f1ae:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 800f1b2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800f1b6:	9300      	str	r3, [sp, #0]
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	6939      	ldr	r1, [r7, #16]
 800f1bc:	68f8      	ldr	r0, [r7, #12]
 800f1be:	f001 ff97 	bl	80110f0 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800f1c2:	6938      	ldr	r0, [r7, #16]
 800f1c4:	f7f8 fb42 	bl	800784c <pbuf_free>
  }
  return ERR_OK;
 800f1c8:	2300      	movs	r3, #0
}
 800f1ca:	4618      	mov	r0, r3
 800f1cc:	3718      	adds	r7, #24
 800f1ce:	46bd      	mov	sp, r7
 800f1d0:	bd80      	pop	{r7, pc}
 800f1d2:	bf00      	nop
 800f1d4:	080149c4 	.word	0x080149c4
 800f1d8:	08014abc 	.word	0x08014abc
 800f1dc:	08014a3c 	.word	0x08014a3c
 800f1e0:	2000a848 	.word	0x2000a848

0800f1e4 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800f1e4:	b580      	push	{r7, lr}
 800f1e6:	b084      	sub	sp, #16
 800f1e8:	af00      	add	r7, sp, #0
 800f1ea:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800f1ec:	2300      	movs	r3, #0
 800f1ee:	60fb      	str	r3, [r7, #12]
 800f1f0:	e01e      	b.n	800f230 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800f1f2:	4913      	ldr	r1, [pc, #76]	@ (800f240 <etharp_cleanup_netif+0x5c>)
 800f1f4:	68fa      	ldr	r2, [r7, #12]
 800f1f6:	4613      	mov	r3, r2
 800f1f8:	005b      	lsls	r3, r3, #1
 800f1fa:	4413      	add	r3, r2
 800f1fc:	00db      	lsls	r3, r3, #3
 800f1fe:	440b      	add	r3, r1
 800f200:	3314      	adds	r3, #20
 800f202:	781b      	ldrb	r3, [r3, #0]
 800f204:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800f206:	7afb      	ldrb	r3, [r7, #11]
 800f208:	2b00      	cmp	r3, #0
 800f20a:	d00e      	beq.n	800f22a <etharp_cleanup_netif+0x46>
 800f20c:	490c      	ldr	r1, [pc, #48]	@ (800f240 <etharp_cleanup_netif+0x5c>)
 800f20e:	68fa      	ldr	r2, [r7, #12]
 800f210:	4613      	mov	r3, r2
 800f212:	005b      	lsls	r3, r3, #1
 800f214:	4413      	add	r3, r2
 800f216:	00db      	lsls	r3, r3, #3
 800f218:	440b      	add	r3, r1
 800f21a:	3308      	adds	r3, #8
 800f21c:	681b      	ldr	r3, [r3, #0]
 800f21e:	687a      	ldr	r2, [r7, #4]
 800f220:	429a      	cmp	r2, r3
 800f222:	d102      	bne.n	800f22a <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800f224:	68f8      	ldr	r0, [r7, #12]
 800f226:	f7ff fce5 	bl	800ebf4 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800f22a:	68fb      	ldr	r3, [r7, #12]
 800f22c:	3301      	adds	r3, #1
 800f22e:	60fb      	str	r3, [r7, #12]
 800f230:	68fb      	ldr	r3, [r7, #12]
 800f232:	2b09      	cmp	r3, #9
 800f234:	dddd      	ble.n	800f1f2 <etharp_cleanup_netif+0xe>
    }
  }
}
 800f236:	bf00      	nop
 800f238:	bf00      	nop
 800f23a:	3710      	adds	r7, #16
 800f23c:	46bd      	mov	sp, r7
 800f23e:	bd80      	pop	{r7, pc}
 800f240:	2000a848 	.word	0x2000a848

0800f244 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800f244:	b5b0      	push	{r4, r5, r7, lr}
 800f246:	b08a      	sub	sp, #40	@ 0x28
 800f248:	af04      	add	r7, sp, #16
 800f24a:	6078      	str	r0, [r7, #4]
 800f24c:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800f24e:	683b      	ldr	r3, [r7, #0]
 800f250:	2b00      	cmp	r3, #0
 800f252:	d107      	bne.n	800f264 <etharp_input+0x20>
 800f254:	4b3d      	ldr	r3, [pc, #244]	@ (800f34c <etharp_input+0x108>)
 800f256:	f240 228a 	movw	r2, #650	@ 0x28a
 800f25a:	493d      	ldr	r1, [pc, #244]	@ (800f350 <etharp_input+0x10c>)
 800f25c:	483d      	ldr	r0, [pc, #244]	@ (800f354 <etharp_input+0x110>)
 800f25e:	f002 f88f 	bl	8011380 <iprintf>
 800f262:	e06f      	b.n	800f344 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	685b      	ldr	r3, [r3, #4]
 800f268:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800f26a:	693b      	ldr	r3, [r7, #16]
 800f26c:	881b      	ldrh	r3, [r3, #0]
 800f26e:	b29b      	uxth	r3, r3
 800f270:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f274:	d10c      	bne.n	800f290 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800f276:	693b      	ldr	r3, [r7, #16]
 800f278:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800f27a:	2b06      	cmp	r3, #6
 800f27c:	d108      	bne.n	800f290 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800f27e:	693b      	ldr	r3, [r7, #16]
 800f280:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800f282:	2b04      	cmp	r3, #4
 800f284:	d104      	bne.n	800f290 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800f286:	693b      	ldr	r3, [r7, #16]
 800f288:	885b      	ldrh	r3, [r3, #2]
 800f28a:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800f28c:	2b08      	cmp	r3, #8
 800f28e:	d003      	beq.n	800f298 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800f290:	6878      	ldr	r0, [r7, #4]
 800f292:	f7f8 fadb 	bl	800784c <pbuf_free>
    return;
 800f296:	e055      	b.n	800f344 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800f298:	693b      	ldr	r3, [r7, #16]
 800f29a:	330e      	adds	r3, #14
 800f29c:	681b      	ldr	r3, [r3, #0]
 800f29e:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800f2a0:	693b      	ldr	r3, [r7, #16]
 800f2a2:	3318      	adds	r3, #24
 800f2a4:	681b      	ldr	r3, [r3, #0]
 800f2a6:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800f2a8:	683b      	ldr	r3, [r7, #0]
 800f2aa:	3304      	adds	r3, #4
 800f2ac:	681b      	ldr	r3, [r3, #0]
 800f2ae:	2b00      	cmp	r3, #0
 800f2b0:	d102      	bne.n	800f2b8 <etharp_input+0x74>
    for_us = 0;
 800f2b2:	2300      	movs	r3, #0
 800f2b4:	75fb      	strb	r3, [r7, #23]
 800f2b6:	e009      	b.n	800f2cc <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800f2b8:	68ba      	ldr	r2, [r7, #8]
 800f2ba:	683b      	ldr	r3, [r7, #0]
 800f2bc:	3304      	adds	r3, #4
 800f2be:	681b      	ldr	r3, [r3, #0]
 800f2c0:	429a      	cmp	r2, r3
 800f2c2:	bf0c      	ite	eq
 800f2c4:	2301      	moveq	r3, #1
 800f2c6:	2300      	movne	r3, #0
 800f2c8:	b2db      	uxtb	r3, r3
 800f2ca:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800f2cc:	693b      	ldr	r3, [r7, #16]
 800f2ce:	f103 0208 	add.w	r2, r3, #8
 800f2d2:	7dfb      	ldrb	r3, [r7, #23]
 800f2d4:	2b00      	cmp	r3, #0
 800f2d6:	d001      	beq.n	800f2dc <etharp_input+0x98>
 800f2d8:	2301      	movs	r3, #1
 800f2da:	e000      	b.n	800f2de <etharp_input+0x9a>
 800f2dc:	2302      	movs	r3, #2
 800f2de:	f107 010c 	add.w	r1, r7, #12
 800f2e2:	6838      	ldr	r0, [r7, #0]
 800f2e4:	f7ff fed8 	bl	800f098 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800f2e8:	693b      	ldr	r3, [r7, #16]
 800f2ea:	88db      	ldrh	r3, [r3, #6]
 800f2ec:	b29b      	uxth	r3, r3
 800f2ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f2f2:	d003      	beq.n	800f2fc <etharp_input+0xb8>
 800f2f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f2f8:	d01e      	beq.n	800f338 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800f2fa:	e020      	b.n	800f33e <etharp_input+0xfa>
      if (for_us) {
 800f2fc:	7dfb      	ldrb	r3, [r7, #23]
 800f2fe:	2b00      	cmp	r3, #0
 800f300:	d01c      	beq.n	800f33c <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800f302:	683b      	ldr	r3, [r7, #0]
 800f304:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 800f308:	693b      	ldr	r3, [r7, #16]
 800f30a:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800f30e:	683b      	ldr	r3, [r7, #0]
 800f310:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 800f314:	683b      	ldr	r3, [r7, #0]
 800f316:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800f318:	693a      	ldr	r2, [r7, #16]
 800f31a:	3208      	adds	r2, #8
        etharp_raw(netif,
 800f31c:	2102      	movs	r1, #2
 800f31e:	9103      	str	r1, [sp, #12]
 800f320:	f107 010c 	add.w	r1, r7, #12
 800f324:	9102      	str	r1, [sp, #8]
 800f326:	9201      	str	r2, [sp, #4]
 800f328:	9300      	str	r3, [sp, #0]
 800f32a:	462b      	mov	r3, r5
 800f32c:	4622      	mov	r2, r4
 800f32e:	4601      	mov	r1, r0
 800f330:	6838      	ldr	r0, [r7, #0]
 800f332:	f000 faeb 	bl	800f90c <etharp_raw>
      break;
 800f336:	e001      	b.n	800f33c <etharp_input+0xf8>
      break;
 800f338:	bf00      	nop
 800f33a:	e000      	b.n	800f33e <etharp_input+0xfa>
      break;
 800f33c:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800f33e:	6878      	ldr	r0, [r7, #4]
 800f340:	f7f8 fa84 	bl	800784c <pbuf_free>
}
 800f344:	3718      	adds	r7, #24
 800f346:	46bd      	mov	sp, r7
 800f348:	bdb0      	pop	{r4, r5, r7, pc}
 800f34a:	bf00      	nop
 800f34c:	080149c4 	.word	0x080149c4
 800f350:	08014b14 	.word	0x08014b14
 800f354:	08014a3c 	.word	0x08014a3c

0800f358 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800f358:	b580      	push	{r7, lr}
 800f35a:	b086      	sub	sp, #24
 800f35c:	af02      	add	r7, sp, #8
 800f35e:	60f8      	str	r0, [r7, #12]
 800f360:	60b9      	str	r1, [r7, #8]
 800f362:	4613      	mov	r3, r2
 800f364:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800f366:	79fa      	ldrb	r2, [r7, #7]
 800f368:	4944      	ldr	r1, [pc, #272]	@ (800f47c <etharp_output_to_arp_index+0x124>)
 800f36a:	4613      	mov	r3, r2
 800f36c:	005b      	lsls	r3, r3, #1
 800f36e:	4413      	add	r3, r2
 800f370:	00db      	lsls	r3, r3, #3
 800f372:	440b      	add	r3, r1
 800f374:	3314      	adds	r3, #20
 800f376:	781b      	ldrb	r3, [r3, #0]
 800f378:	2b01      	cmp	r3, #1
 800f37a:	d806      	bhi.n	800f38a <etharp_output_to_arp_index+0x32>
 800f37c:	4b40      	ldr	r3, [pc, #256]	@ (800f480 <etharp_output_to_arp_index+0x128>)
 800f37e:	f240 22ee 	movw	r2, #750	@ 0x2ee
 800f382:	4940      	ldr	r1, [pc, #256]	@ (800f484 <etharp_output_to_arp_index+0x12c>)
 800f384:	4840      	ldr	r0, [pc, #256]	@ (800f488 <etharp_output_to_arp_index+0x130>)
 800f386:	f001 fffb 	bl	8011380 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800f38a:	79fa      	ldrb	r2, [r7, #7]
 800f38c:	493b      	ldr	r1, [pc, #236]	@ (800f47c <etharp_output_to_arp_index+0x124>)
 800f38e:	4613      	mov	r3, r2
 800f390:	005b      	lsls	r3, r3, #1
 800f392:	4413      	add	r3, r2
 800f394:	00db      	lsls	r3, r3, #3
 800f396:	440b      	add	r3, r1
 800f398:	3314      	adds	r3, #20
 800f39a:	781b      	ldrb	r3, [r3, #0]
 800f39c:	2b02      	cmp	r3, #2
 800f39e:	d153      	bne.n	800f448 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800f3a0:	79fa      	ldrb	r2, [r7, #7]
 800f3a2:	4936      	ldr	r1, [pc, #216]	@ (800f47c <etharp_output_to_arp_index+0x124>)
 800f3a4:	4613      	mov	r3, r2
 800f3a6:	005b      	lsls	r3, r3, #1
 800f3a8:	4413      	add	r3, r2
 800f3aa:	00db      	lsls	r3, r3, #3
 800f3ac:	440b      	add	r3, r1
 800f3ae:	3312      	adds	r3, #18
 800f3b0:	881b      	ldrh	r3, [r3, #0]
 800f3b2:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 800f3b6:	d919      	bls.n	800f3ec <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800f3b8:	79fa      	ldrb	r2, [r7, #7]
 800f3ba:	4613      	mov	r3, r2
 800f3bc:	005b      	lsls	r3, r3, #1
 800f3be:	4413      	add	r3, r2
 800f3c0:	00db      	lsls	r3, r3, #3
 800f3c2:	4a2e      	ldr	r2, [pc, #184]	@ (800f47c <etharp_output_to_arp_index+0x124>)
 800f3c4:	4413      	add	r3, r2
 800f3c6:	3304      	adds	r3, #4
 800f3c8:	4619      	mov	r1, r3
 800f3ca:	68f8      	ldr	r0, [r7, #12]
 800f3cc:	f000 fb4c 	bl	800fa68 <etharp_request>
 800f3d0:	4603      	mov	r3, r0
 800f3d2:	2b00      	cmp	r3, #0
 800f3d4:	d138      	bne.n	800f448 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800f3d6:	79fa      	ldrb	r2, [r7, #7]
 800f3d8:	4928      	ldr	r1, [pc, #160]	@ (800f47c <etharp_output_to_arp_index+0x124>)
 800f3da:	4613      	mov	r3, r2
 800f3dc:	005b      	lsls	r3, r3, #1
 800f3de:	4413      	add	r3, r2
 800f3e0:	00db      	lsls	r3, r3, #3
 800f3e2:	440b      	add	r3, r1
 800f3e4:	3314      	adds	r3, #20
 800f3e6:	2203      	movs	r2, #3
 800f3e8:	701a      	strb	r2, [r3, #0]
 800f3ea:	e02d      	b.n	800f448 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800f3ec:	79fa      	ldrb	r2, [r7, #7]
 800f3ee:	4923      	ldr	r1, [pc, #140]	@ (800f47c <etharp_output_to_arp_index+0x124>)
 800f3f0:	4613      	mov	r3, r2
 800f3f2:	005b      	lsls	r3, r3, #1
 800f3f4:	4413      	add	r3, r2
 800f3f6:	00db      	lsls	r3, r3, #3
 800f3f8:	440b      	add	r3, r1
 800f3fa:	3312      	adds	r3, #18
 800f3fc:	881b      	ldrh	r3, [r3, #0]
 800f3fe:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 800f402:	d321      	bcc.n	800f448 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800f404:	79fa      	ldrb	r2, [r7, #7]
 800f406:	4613      	mov	r3, r2
 800f408:	005b      	lsls	r3, r3, #1
 800f40a:	4413      	add	r3, r2
 800f40c:	00db      	lsls	r3, r3, #3
 800f40e:	4a1b      	ldr	r2, [pc, #108]	@ (800f47c <etharp_output_to_arp_index+0x124>)
 800f410:	4413      	add	r3, r2
 800f412:	1d19      	adds	r1, r3, #4
 800f414:	79fa      	ldrb	r2, [r7, #7]
 800f416:	4613      	mov	r3, r2
 800f418:	005b      	lsls	r3, r3, #1
 800f41a:	4413      	add	r3, r2
 800f41c:	00db      	lsls	r3, r3, #3
 800f41e:	3308      	adds	r3, #8
 800f420:	4a16      	ldr	r2, [pc, #88]	@ (800f47c <etharp_output_to_arp_index+0x124>)
 800f422:	4413      	add	r3, r2
 800f424:	3304      	adds	r3, #4
 800f426:	461a      	mov	r2, r3
 800f428:	68f8      	ldr	r0, [r7, #12]
 800f42a:	f000 fafb 	bl	800fa24 <etharp_request_dst>
 800f42e:	4603      	mov	r3, r0
 800f430:	2b00      	cmp	r3, #0
 800f432:	d109      	bne.n	800f448 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800f434:	79fa      	ldrb	r2, [r7, #7]
 800f436:	4911      	ldr	r1, [pc, #68]	@ (800f47c <etharp_output_to_arp_index+0x124>)
 800f438:	4613      	mov	r3, r2
 800f43a:	005b      	lsls	r3, r3, #1
 800f43c:	4413      	add	r3, r2
 800f43e:	00db      	lsls	r3, r3, #3
 800f440:	440b      	add	r3, r1
 800f442:	3314      	adds	r3, #20
 800f444:	2203      	movs	r2, #3
 800f446:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800f448:	68fb      	ldr	r3, [r7, #12]
 800f44a:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 800f44e:	79fa      	ldrb	r2, [r7, #7]
 800f450:	4613      	mov	r3, r2
 800f452:	005b      	lsls	r3, r3, #1
 800f454:	4413      	add	r3, r2
 800f456:	00db      	lsls	r3, r3, #3
 800f458:	3308      	adds	r3, #8
 800f45a:	4a08      	ldr	r2, [pc, #32]	@ (800f47c <etharp_output_to_arp_index+0x124>)
 800f45c:	4413      	add	r3, r2
 800f45e:	3304      	adds	r3, #4
 800f460:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800f464:	9200      	str	r2, [sp, #0]
 800f466:	460a      	mov	r2, r1
 800f468:	68b9      	ldr	r1, [r7, #8]
 800f46a:	68f8      	ldr	r0, [r7, #12]
 800f46c:	f001 fe40 	bl	80110f0 <ethernet_output>
 800f470:	4603      	mov	r3, r0
}
 800f472:	4618      	mov	r0, r3
 800f474:	3710      	adds	r7, #16
 800f476:	46bd      	mov	sp, r7
 800f478:	bd80      	pop	{r7, pc}
 800f47a:	bf00      	nop
 800f47c:	2000a848 	.word	0x2000a848
 800f480:	080149c4 	.word	0x080149c4
 800f484:	08014b34 	.word	0x08014b34
 800f488:	08014a3c 	.word	0x08014a3c

0800f48c <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800f48c:	b580      	push	{r7, lr}
 800f48e:	b08a      	sub	sp, #40	@ 0x28
 800f490:	af02      	add	r7, sp, #8
 800f492:	60f8      	str	r0, [r7, #12]
 800f494:	60b9      	str	r1, [r7, #8]
 800f496:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800f49c:	68fb      	ldr	r3, [r7, #12]
 800f49e:	2b00      	cmp	r3, #0
 800f4a0:	d106      	bne.n	800f4b0 <etharp_output+0x24>
 800f4a2:	4b73      	ldr	r3, [pc, #460]	@ (800f670 <etharp_output+0x1e4>)
 800f4a4:	f240 321e 	movw	r2, #798	@ 0x31e
 800f4a8:	4972      	ldr	r1, [pc, #456]	@ (800f674 <etharp_output+0x1e8>)
 800f4aa:	4873      	ldr	r0, [pc, #460]	@ (800f678 <etharp_output+0x1ec>)
 800f4ac:	f001 ff68 	bl	8011380 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800f4b0:	68bb      	ldr	r3, [r7, #8]
 800f4b2:	2b00      	cmp	r3, #0
 800f4b4:	d106      	bne.n	800f4c4 <etharp_output+0x38>
 800f4b6:	4b6e      	ldr	r3, [pc, #440]	@ (800f670 <etharp_output+0x1e4>)
 800f4b8:	f240 321f 	movw	r2, #799	@ 0x31f
 800f4bc:	496f      	ldr	r1, [pc, #444]	@ (800f67c <etharp_output+0x1f0>)
 800f4be:	486e      	ldr	r0, [pc, #440]	@ (800f678 <etharp_output+0x1ec>)
 800f4c0:	f001 ff5e 	bl	8011380 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	2b00      	cmp	r3, #0
 800f4c8:	d106      	bne.n	800f4d8 <etharp_output+0x4c>
 800f4ca:	4b69      	ldr	r3, [pc, #420]	@ (800f670 <etharp_output+0x1e4>)
 800f4cc:	f44f 7248 	mov.w	r2, #800	@ 0x320
 800f4d0:	496b      	ldr	r1, [pc, #428]	@ (800f680 <etharp_output+0x1f4>)
 800f4d2:	4869      	ldr	r0, [pc, #420]	@ (800f678 <etharp_output+0x1ec>)
 800f4d4:	f001 ff54 	bl	8011380 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	681b      	ldr	r3, [r3, #0]
 800f4dc:	68f9      	ldr	r1, [r7, #12]
 800f4de:	4618      	mov	r0, r3
 800f4e0:	f000 fef8 	bl	80102d4 <ip4_addr_isbroadcast_u32>
 800f4e4:	4603      	mov	r3, r0
 800f4e6:	2b00      	cmp	r3, #0
 800f4e8:	d002      	beq.n	800f4f0 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800f4ea:	4b66      	ldr	r3, [pc, #408]	@ (800f684 <etharp_output+0x1f8>)
 800f4ec:	61fb      	str	r3, [r7, #28]
 800f4ee:	e0af      	b.n	800f650 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	681b      	ldr	r3, [r3, #0]
 800f4f4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800f4f8:	2be0      	cmp	r3, #224	@ 0xe0
 800f4fa:	d118      	bne.n	800f52e <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800f4fc:	2301      	movs	r3, #1
 800f4fe:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800f500:	2300      	movs	r3, #0
 800f502:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800f504:	235e      	movs	r3, #94	@ 0x5e
 800f506:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	3301      	adds	r3, #1
 800f50c:	781b      	ldrb	r3, [r3, #0]
 800f50e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f512:	b2db      	uxtb	r3, r3
 800f514:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800f516:	687b      	ldr	r3, [r7, #4]
 800f518:	3302      	adds	r3, #2
 800f51a:	781b      	ldrb	r3, [r3, #0]
 800f51c:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800f51e:	687b      	ldr	r3, [r7, #4]
 800f520:	3303      	adds	r3, #3
 800f522:	781b      	ldrb	r3, [r3, #0]
 800f524:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800f526:	f107 0310 	add.w	r3, r7, #16
 800f52a:	61fb      	str	r3, [r7, #28]
 800f52c:	e090      	b.n	800f650 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	681a      	ldr	r2, [r3, #0]
 800f532:	68fb      	ldr	r3, [r7, #12]
 800f534:	3304      	adds	r3, #4
 800f536:	681b      	ldr	r3, [r3, #0]
 800f538:	405a      	eors	r2, r3
 800f53a:	68fb      	ldr	r3, [r7, #12]
 800f53c:	3308      	adds	r3, #8
 800f53e:	681b      	ldr	r3, [r3, #0]
 800f540:	4013      	ands	r3, r2
 800f542:	2b00      	cmp	r3, #0
 800f544:	d012      	beq.n	800f56c <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	681b      	ldr	r3, [r3, #0]
 800f54a:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800f54c:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 800f550:	4293      	cmp	r3, r2
 800f552:	d00b      	beq.n	800f56c <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800f554:	68fb      	ldr	r3, [r7, #12]
 800f556:	330c      	adds	r3, #12
 800f558:	681b      	ldr	r3, [r3, #0]
 800f55a:	2b00      	cmp	r3, #0
 800f55c:	d003      	beq.n	800f566 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800f55e:	68fb      	ldr	r3, [r7, #12]
 800f560:	330c      	adds	r3, #12
 800f562:	61bb      	str	r3, [r7, #24]
 800f564:	e002      	b.n	800f56c <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800f566:	f06f 0303 	mvn.w	r3, #3
 800f56a:	e07d      	b.n	800f668 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800f56c:	4b46      	ldr	r3, [pc, #280]	@ (800f688 <etharp_output+0x1fc>)
 800f56e:	781b      	ldrb	r3, [r3, #0]
 800f570:	4619      	mov	r1, r3
 800f572:	4a46      	ldr	r2, [pc, #280]	@ (800f68c <etharp_output+0x200>)
 800f574:	460b      	mov	r3, r1
 800f576:	005b      	lsls	r3, r3, #1
 800f578:	440b      	add	r3, r1
 800f57a:	00db      	lsls	r3, r3, #3
 800f57c:	4413      	add	r3, r2
 800f57e:	3314      	adds	r3, #20
 800f580:	781b      	ldrb	r3, [r3, #0]
 800f582:	2b01      	cmp	r3, #1
 800f584:	d925      	bls.n	800f5d2 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800f586:	4b40      	ldr	r3, [pc, #256]	@ (800f688 <etharp_output+0x1fc>)
 800f588:	781b      	ldrb	r3, [r3, #0]
 800f58a:	4619      	mov	r1, r3
 800f58c:	4a3f      	ldr	r2, [pc, #252]	@ (800f68c <etharp_output+0x200>)
 800f58e:	460b      	mov	r3, r1
 800f590:	005b      	lsls	r3, r3, #1
 800f592:	440b      	add	r3, r1
 800f594:	00db      	lsls	r3, r3, #3
 800f596:	4413      	add	r3, r2
 800f598:	3308      	adds	r3, #8
 800f59a:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800f59c:	68fa      	ldr	r2, [r7, #12]
 800f59e:	429a      	cmp	r2, r3
 800f5a0:	d117      	bne.n	800f5d2 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800f5a2:	69bb      	ldr	r3, [r7, #24]
 800f5a4:	681a      	ldr	r2, [r3, #0]
 800f5a6:	4b38      	ldr	r3, [pc, #224]	@ (800f688 <etharp_output+0x1fc>)
 800f5a8:	781b      	ldrb	r3, [r3, #0]
 800f5aa:	4618      	mov	r0, r3
 800f5ac:	4937      	ldr	r1, [pc, #220]	@ (800f68c <etharp_output+0x200>)
 800f5ae:	4603      	mov	r3, r0
 800f5b0:	005b      	lsls	r3, r3, #1
 800f5b2:	4403      	add	r3, r0
 800f5b4:	00db      	lsls	r3, r3, #3
 800f5b6:	440b      	add	r3, r1
 800f5b8:	3304      	adds	r3, #4
 800f5ba:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800f5bc:	429a      	cmp	r2, r3
 800f5be:	d108      	bne.n	800f5d2 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800f5c0:	4b31      	ldr	r3, [pc, #196]	@ (800f688 <etharp_output+0x1fc>)
 800f5c2:	781b      	ldrb	r3, [r3, #0]
 800f5c4:	461a      	mov	r2, r3
 800f5c6:	68b9      	ldr	r1, [r7, #8]
 800f5c8:	68f8      	ldr	r0, [r7, #12]
 800f5ca:	f7ff fec5 	bl	800f358 <etharp_output_to_arp_index>
 800f5ce:	4603      	mov	r3, r0
 800f5d0:	e04a      	b.n	800f668 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800f5d2:	2300      	movs	r3, #0
 800f5d4:	75fb      	strb	r3, [r7, #23]
 800f5d6:	e031      	b.n	800f63c <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800f5d8:	7dfa      	ldrb	r2, [r7, #23]
 800f5da:	492c      	ldr	r1, [pc, #176]	@ (800f68c <etharp_output+0x200>)
 800f5dc:	4613      	mov	r3, r2
 800f5de:	005b      	lsls	r3, r3, #1
 800f5e0:	4413      	add	r3, r2
 800f5e2:	00db      	lsls	r3, r3, #3
 800f5e4:	440b      	add	r3, r1
 800f5e6:	3314      	adds	r3, #20
 800f5e8:	781b      	ldrb	r3, [r3, #0]
 800f5ea:	2b01      	cmp	r3, #1
 800f5ec:	d923      	bls.n	800f636 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800f5ee:	7dfa      	ldrb	r2, [r7, #23]
 800f5f0:	4926      	ldr	r1, [pc, #152]	@ (800f68c <etharp_output+0x200>)
 800f5f2:	4613      	mov	r3, r2
 800f5f4:	005b      	lsls	r3, r3, #1
 800f5f6:	4413      	add	r3, r2
 800f5f8:	00db      	lsls	r3, r3, #3
 800f5fa:	440b      	add	r3, r1
 800f5fc:	3308      	adds	r3, #8
 800f5fe:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800f600:	68fa      	ldr	r2, [r7, #12]
 800f602:	429a      	cmp	r2, r3
 800f604:	d117      	bne.n	800f636 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800f606:	69bb      	ldr	r3, [r7, #24]
 800f608:	6819      	ldr	r1, [r3, #0]
 800f60a:	7dfa      	ldrb	r2, [r7, #23]
 800f60c:	481f      	ldr	r0, [pc, #124]	@ (800f68c <etharp_output+0x200>)
 800f60e:	4613      	mov	r3, r2
 800f610:	005b      	lsls	r3, r3, #1
 800f612:	4413      	add	r3, r2
 800f614:	00db      	lsls	r3, r3, #3
 800f616:	4403      	add	r3, r0
 800f618:	3304      	adds	r3, #4
 800f61a:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800f61c:	4299      	cmp	r1, r3
 800f61e:	d10a      	bne.n	800f636 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800f620:	4a19      	ldr	r2, [pc, #100]	@ (800f688 <etharp_output+0x1fc>)
 800f622:	7dfb      	ldrb	r3, [r7, #23]
 800f624:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800f626:	7dfb      	ldrb	r3, [r7, #23]
 800f628:	461a      	mov	r2, r3
 800f62a:	68b9      	ldr	r1, [r7, #8]
 800f62c:	68f8      	ldr	r0, [r7, #12]
 800f62e:	f7ff fe93 	bl	800f358 <etharp_output_to_arp_index>
 800f632:	4603      	mov	r3, r0
 800f634:	e018      	b.n	800f668 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800f636:	7dfb      	ldrb	r3, [r7, #23]
 800f638:	3301      	adds	r3, #1
 800f63a:	75fb      	strb	r3, [r7, #23]
 800f63c:	7dfb      	ldrb	r3, [r7, #23]
 800f63e:	2b09      	cmp	r3, #9
 800f640:	d9ca      	bls.n	800f5d8 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800f642:	68ba      	ldr	r2, [r7, #8]
 800f644:	69b9      	ldr	r1, [r7, #24]
 800f646:	68f8      	ldr	r0, [r7, #12]
 800f648:	f000 f822 	bl	800f690 <etharp_query>
 800f64c:	4603      	mov	r3, r0
 800f64e:	e00b      	b.n	800f668 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800f650:	68fb      	ldr	r3, [r7, #12]
 800f652:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 800f656:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800f65a:	9300      	str	r3, [sp, #0]
 800f65c:	69fb      	ldr	r3, [r7, #28]
 800f65e:	68b9      	ldr	r1, [r7, #8]
 800f660:	68f8      	ldr	r0, [r7, #12]
 800f662:	f001 fd45 	bl	80110f0 <ethernet_output>
 800f666:	4603      	mov	r3, r0
}
 800f668:	4618      	mov	r0, r3
 800f66a:	3720      	adds	r7, #32
 800f66c:	46bd      	mov	sp, r7
 800f66e:	bd80      	pop	{r7, pc}
 800f670:	080149c4 	.word	0x080149c4
 800f674:	08014b14 	.word	0x08014b14
 800f678:	08014a3c 	.word	0x08014a3c
 800f67c:	08014b64 	.word	0x08014b64
 800f680:	08014b04 	.word	0x08014b04
 800f684:	08015180 	.word	0x08015180
 800f688:	2000a938 	.word	0x2000a938
 800f68c:	2000a848 	.word	0x2000a848

0800f690 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800f690:	b580      	push	{r7, lr}
 800f692:	b08c      	sub	sp, #48	@ 0x30
 800f694:	af02      	add	r7, sp, #8
 800f696:	60f8      	str	r0, [r7, #12]
 800f698:	60b9      	str	r1, [r7, #8]
 800f69a:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800f69c:	68fb      	ldr	r3, [r7, #12]
 800f69e:	3326      	adds	r3, #38	@ 0x26
 800f6a0:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800f6a2:	23ff      	movs	r3, #255	@ 0xff
 800f6a4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 800f6a8:	2300      	movs	r3, #0
 800f6aa:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800f6ac:	68bb      	ldr	r3, [r7, #8]
 800f6ae:	681b      	ldr	r3, [r3, #0]
 800f6b0:	68f9      	ldr	r1, [r7, #12]
 800f6b2:	4618      	mov	r0, r3
 800f6b4:	f000 fe0e 	bl	80102d4 <ip4_addr_isbroadcast_u32>
 800f6b8:	4603      	mov	r3, r0
 800f6ba:	2b00      	cmp	r3, #0
 800f6bc:	d10c      	bne.n	800f6d8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800f6be:	68bb      	ldr	r3, [r7, #8]
 800f6c0:	681b      	ldr	r3, [r3, #0]
 800f6c2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800f6c6:	2be0      	cmp	r3, #224	@ 0xe0
 800f6c8:	d006      	beq.n	800f6d8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800f6ca:	68bb      	ldr	r3, [r7, #8]
 800f6cc:	2b00      	cmp	r3, #0
 800f6ce:	d003      	beq.n	800f6d8 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800f6d0:	68bb      	ldr	r3, [r7, #8]
 800f6d2:	681b      	ldr	r3, [r3, #0]
 800f6d4:	2b00      	cmp	r3, #0
 800f6d6:	d102      	bne.n	800f6de <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800f6d8:	f06f 030f 	mvn.w	r3, #15
 800f6dc:	e101      	b.n	800f8e2 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800f6de:	68fa      	ldr	r2, [r7, #12]
 800f6e0:	2101      	movs	r1, #1
 800f6e2:	68b8      	ldr	r0, [r7, #8]
 800f6e4:	f7ff fb60 	bl	800eda8 <etharp_find_entry>
 800f6e8:	4603      	mov	r3, r0
 800f6ea:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800f6ec:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f6f0:	2b00      	cmp	r3, #0
 800f6f2:	da02      	bge.n	800f6fa <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800f6f4:	8a7b      	ldrh	r3, [r7, #18]
 800f6f6:	b25b      	sxtb	r3, r3
 800f6f8:	e0f3      	b.n	800f8e2 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800f6fa:	8a7b      	ldrh	r3, [r7, #18]
 800f6fc:	2b7e      	cmp	r3, #126	@ 0x7e
 800f6fe:	d906      	bls.n	800f70e <etharp_query+0x7e>
 800f700:	4b7a      	ldr	r3, [pc, #488]	@ (800f8ec <etharp_query+0x25c>)
 800f702:	f240 32c1 	movw	r2, #961	@ 0x3c1
 800f706:	497a      	ldr	r1, [pc, #488]	@ (800f8f0 <etharp_query+0x260>)
 800f708:	487a      	ldr	r0, [pc, #488]	@ (800f8f4 <etharp_query+0x264>)
 800f70a:	f001 fe39 	bl	8011380 <iprintf>
  i = (netif_addr_idx_t)i_err;
 800f70e:	8a7b      	ldrh	r3, [r7, #18]
 800f710:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800f712:	7c7a      	ldrb	r2, [r7, #17]
 800f714:	4978      	ldr	r1, [pc, #480]	@ (800f8f8 <etharp_query+0x268>)
 800f716:	4613      	mov	r3, r2
 800f718:	005b      	lsls	r3, r3, #1
 800f71a:	4413      	add	r3, r2
 800f71c:	00db      	lsls	r3, r3, #3
 800f71e:	440b      	add	r3, r1
 800f720:	3314      	adds	r3, #20
 800f722:	781b      	ldrb	r3, [r3, #0]
 800f724:	2b00      	cmp	r3, #0
 800f726:	d115      	bne.n	800f754 <etharp_query+0xc4>
    is_new_entry = 1;
 800f728:	2301      	movs	r3, #1
 800f72a:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800f72c:	7c7a      	ldrb	r2, [r7, #17]
 800f72e:	4972      	ldr	r1, [pc, #456]	@ (800f8f8 <etharp_query+0x268>)
 800f730:	4613      	mov	r3, r2
 800f732:	005b      	lsls	r3, r3, #1
 800f734:	4413      	add	r3, r2
 800f736:	00db      	lsls	r3, r3, #3
 800f738:	440b      	add	r3, r1
 800f73a:	3314      	adds	r3, #20
 800f73c:	2201      	movs	r2, #1
 800f73e:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800f740:	7c7a      	ldrb	r2, [r7, #17]
 800f742:	496d      	ldr	r1, [pc, #436]	@ (800f8f8 <etharp_query+0x268>)
 800f744:	4613      	mov	r3, r2
 800f746:	005b      	lsls	r3, r3, #1
 800f748:	4413      	add	r3, r2
 800f74a:	00db      	lsls	r3, r3, #3
 800f74c:	440b      	add	r3, r1
 800f74e:	3308      	adds	r3, #8
 800f750:	68fa      	ldr	r2, [r7, #12]
 800f752:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800f754:	7c7a      	ldrb	r2, [r7, #17]
 800f756:	4968      	ldr	r1, [pc, #416]	@ (800f8f8 <etharp_query+0x268>)
 800f758:	4613      	mov	r3, r2
 800f75a:	005b      	lsls	r3, r3, #1
 800f75c:	4413      	add	r3, r2
 800f75e:	00db      	lsls	r3, r3, #3
 800f760:	440b      	add	r3, r1
 800f762:	3314      	adds	r3, #20
 800f764:	781b      	ldrb	r3, [r3, #0]
 800f766:	2b01      	cmp	r3, #1
 800f768:	d011      	beq.n	800f78e <etharp_query+0xfe>
 800f76a:	7c7a      	ldrb	r2, [r7, #17]
 800f76c:	4962      	ldr	r1, [pc, #392]	@ (800f8f8 <etharp_query+0x268>)
 800f76e:	4613      	mov	r3, r2
 800f770:	005b      	lsls	r3, r3, #1
 800f772:	4413      	add	r3, r2
 800f774:	00db      	lsls	r3, r3, #3
 800f776:	440b      	add	r3, r1
 800f778:	3314      	adds	r3, #20
 800f77a:	781b      	ldrb	r3, [r3, #0]
 800f77c:	2b01      	cmp	r3, #1
 800f77e:	d806      	bhi.n	800f78e <etharp_query+0xfe>
 800f780:	4b5a      	ldr	r3, [pc, #360]	@ (800f8ec <etharp_query+0x25c>)
 800f782:	f240 32cd 	movw	r2, #973	@ 0x3cd
 800f786:	495d      	ldr	r1, [pc, #372]	@ (800f8fc <etharp_query+0x26c>)
 800f788:	485a      	ldr	r0, [pc, #360]	@ (800f8f4 <etharp_query+0x264>)
 800f78a:	f001 fdf9 	bl	8011380 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800f78e:	6a3b      	ldr	r3, [r7, #32]
 800f790:	2b00      	cmp	r3, #0
 800f792:	d102      	bne.n	800f79a <etharp_query+0x10a>
 800f794:	687b      	ldr	r3, [r7, #4]
 800f796:	2b00      	cmp	r3, #0
 800f798:	d10c      	bne.n	800f7b4 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800f79a:	68b9      	ldr	r1, [r7, #8]
 800f79c:	68f8      	ldr	r0, [r7, #12]
 800f79e:	f000 f963 	bl	800fa68 <etharp_request>
 800f7a2:	4603      	mov	r3, r0
 800f7a4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	2b00      	cmp	r3, #0
 800f7ac:	d102      	bne.n	800f7b4 <etharp_query+0x124>
      return result;
 800f7ae:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800f7b2:	e096      	b.n	800f8e2 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	2b00      	cmp	r3, #0
 800f7b8:	d106      	bne.n	800f7c8 <etharp_query+0x138>
 800f7ba:	4b4c      	ldr	r3, [pc, #304]	@ (800f8ec <etharp_query+0x25c>)
 800f7bc:	f240 32e1 	movw	r2, #993	@ 0x3e1
 800f7c0:	494f      	ldr	r1, [pc, #316]	@ (800f900 <etharp_query+0x270>)
 800f7c2:	484c      	ldr	r0, [pc, #304]	@ (800f8f4 <etharp_query+0x264>)
 800f7c4:	f001 fddc 	bl	8011380 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800f7c8:	7c7a      	ldrb	r2, [r7, #17]
 800f7ca:	494b      	ldr	r1, [pc, #300]	@ (800f8f8 <etharp_query+0x268>)
 800f7cc:	4613      	mov	r3, r2
 800f7ce:	005b      	lsls	r3, r3, #1
 800f7d0:	4413      	add	r3, r2
 800f7d2:	00db      	lsls	r3, r3, #3
 800f7d4:	440b      	add	r3, r1
 800f7d6:	3314      	adds	r3, #20
 800f7d8:	781b      	ldrb	r3, [r3, #0]
 800f7da:	2b01      	cmp	r3, #1
 800f7dc:	d917      	bls.n	800f80e <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800f7de:	4a49      	ldr	r2, [pc, #292]	@ (800f904 <etharp_query+0x274>)
 800f7e0:	7c7b      	ldrb	r3, [r7, #17]
 800f7e2:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800f7e4:	7c7a      	ldrb	r2, [r7, #17]
 800f7e6:	4613      	mov	r3, r2
 800f7e8:	005b      	lsls	r3, r3, #1
 800f7ea:	4413      	add	r3, r2
 800f7ec:	00db      	lsls	r3, r3, #3
 800f7ee:	3308      	adds	r3, #8
 800f7f0:	4a41      	ldr	r2, [pc, #260]	@ (800f8f8 <etharp_query+0x268>)
 800f7f2:	4413      	add	r3, r2
 800f7f4:	3304      	adds	r3, #4
 800f7f6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800f7fa:	9200      	str	r2, [sp, #0]
 800f7fc:	697a      	ldr	r2, [r7, #20]
 800f7fe:	6879      	ldr	r1, [r7, #4]
 800f800:	68f8      	ldr	r0, [r7, #12]
 800f802:	f001 fc75 	bl	80110f0 <ethernet_output>
 800f806:	4603      	mov	r3, r0
 800f808:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800f80c:	e067      	b.n	800f8de <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800f80e:	7c7a      	ldrb	r2, [r7, #17]
 800f810:	4939      	ldr	r1, [pc, #228]	@ (800f8f8 <etharp_query+0x268>)
 800f812:	4613      	mov	r3, r2
 800f814:	005b      	lsls	r3, r3, #1
 800f816:	4413      	add	r3, r2
 800f818:	00db      	lsls	r3, r3, #3
 800f81a:	440b      	add	r3, r1
 800f81c:	3314      	adds	r3, #20
 800f81e:	781b      	ldrb	r3, [r3, #0]
 800f820:	2b01      	cmp	r3, #1
 800f822:	d15c      	bne.n	800f8de <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800f824:	2300      	movs	r3, #0
 800f826:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800f828:	687b      	ldr	r3, [r7, #4]
 800f82a:	61fb      	str	r3, [r7, #28]
    while (p) {
 800f82c:	e01c      	b.n	800f868 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800f82e:	69fb      	ldr	r3, [r7, #28]
 800f830:	895a      	ldrh	r2, [r3, #10]
 800f832:	69fb      	ldr	r3, [r7, #28]
 800f834:	891b      	ldrh	r3, [r3, #8]
 800f836:	429a      	cmp	r2, r3
 800f838:	d10a      	bne.n	800f850 <etharp_query+0x1c0>
 800f83a:	69fb      	ldr	r3, [r7, #28]
 800f83c:	681b      	ldr	r3, [r3, #0]
 800f83e:	2b00      	cmp	r3, #0
 800f840:	d006      	beq.n	800f850 <etharp_query+0x1c0>
 800f842:	4b2a      	ldr	r3, [pc, #168]	@ (800f8ec <etharp_query+0x25c>)
 800f844:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 800f848:	492f      	ldr	r1, [pc, #188]	@ (800f908 <etharp_query+0x278>)
 800f84a:	482a      	ldr	r0, [pc, #168]	@ (800f8f4 <etharp_query+0x264>)
 800f84c:	f001 fd98 	bl	8011380 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800f850:	69fb      	ldr	r3, [r7, #28]
 800f852:	7b1b      	ldrb	r3, [r3, #12]
 800f854:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f858:	2b00      	cmp	r3, #0
 800f85a:	d002      	beq.n	800f862 <etharp_query+0x1d2>
        copy_needed = 1;
 800f85c:	2301      	movs	r3, #1
 800f85e:	61bb      	str	r3, [r7, #24]
        break;
 800f860:	e005      	b.n	800f86e <etharp_query+0x1de>
      }
      p = p->next;
 800f862:	69fb      	ldr	r3, [r7, #28]
 800f864:	681b      	ldr	r3, [r3, #0]
 800f866:	61fb      	str	r3, [r7, #28]
    while (p) {
 800f868:	69fb      	ldr	r3, [r7, #28]
 800f86a:	2b00      	cmp	r3, #0
 800f86c:	d1df      	bne.n	800f82e <etharp_query+0x19e>
    }
    if (copy_needed) {
 800f86e:	69bb      	ldr	r3, [r7, #24]
 800f870:	2b00      	cmp	r3, #0
 800f872:	d007      	beq.n	800f884 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800f874:	687a      	ldr	r2, [r7, #4]
 800f876:	f44f 7120 	mov.w	r1, #640	@ 0x280
 800f87a:	200e      	movs	r0, #14
 800f87c:	f7f8 fae4 	bl	8007e48 <pbuf_clone>
 800f880:	61f8      	str	r0, [r7, #28]
 800f882:	e004      	b.n	800f88e <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800f884:	687b      	ldr	r3, [r7, #4]
 800f886:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800f888:	69f8      	ldr	r0, [r7, #28]
 800f88a:	f7f8 f87f 	bl	800798c <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800f88e:	69fb      	ldr	r3, [r7, #28]
 800f890:	2b00      	cmp	r3, #0
 800f892:	d021      	beq.n	800f8d8 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800f894:	7c7a      	ldrb	r2, [r7, #17]
 800f896:	4918      	ldr	r1, [pc, #96]	@ (800f8f8 <etharp_query+0x268>)
 800f898:	4613      	mov	r3, r2
 800f89a:	005b      	lsls	r3, r3, #1
 800f89c:	4413      	add	r3, r2
 800f89e:	00db      	lsls	r3, r3, #3
 800f8a0:	440b      	add	r3, r1
 800f8a2:	681b      	ldr	r3, [r3, #0]
 800f8a4:	2b00      	cmp	r3, #0
 800f8a6:	d00a      	beq.n	800f8be <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800f8a8:	7c7a      	ldrb	r2, [r7, #17]
 800f8aa:	4913      	ldr	r1, [pc, #76]	@ (800f8f8 <etharp_query+0x268>)
 800f8ac:	4613      	mov	r3, r2
 800f8ae:	005b      	lsls	r3, r3, #1
 800f8b0:	4413      	add	r3, r2
 800f8b2:	00db      	lsls	r3, r3, #3
 800f8b4:	440b      	add	r3, r1
 800f8b6:	681b      	ldr	r3, [r3, #0]
 800f8b8:	4618      	mov	r0, r3
 800f8ba:	f7f7 ffc7 	bl	800784c <pbuf_free>
      }
      arp_table[i].q = p;
 800f8be:	7c7a      	ldrb	r2, [r7, #17]
 800f8c0:	490d      	ldr	r1, [pc, #52]	@ (800f8f8 <etharp_query+0x268>)
 800f8c2:	4613      	mov	r3, r2
 800f8c4:	005b      	lsls	r3, r3, #1
 800f8c6:	4413      	add	r3, r2
 800f8c8:	00db      	lsls	r3, r3, #3
 800f8ca:	440b      	add	r3, r1
 800f8cc:	69fa      	ldr	r2, [r7, #28]
 800f8ce:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800f8d0:	2300      	movs	r3, #0
 800f8d2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800f8d6:	e002      	b.n	800f8de <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800f8d8:	23ff      	movs	r3, #255	@ 0xff
 800f8da:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 800f8de:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800f8e2:	4618      	mov	r0, r3
 800f8e4:	3728      	adds	r7, #40	@ 0x28
 800f8e6:	46bd      	mov	sp, r7
 800f8e8:	bd80      	pop	{r7, pc}
 800f8ea:	bf00      	nop
 800f8ec:	080149c4 	.word	0x080149c4
 800f8f0:	08014b70 	.word	0x08014b70
 800f8f4:	08014a3c 	.word	0x08014a3c
 800f8f8:	2000a848 	.word	0x2000a848
 800f8fc:	08014b80 	.word	0x08014b80
 800f900:	08014b64 	.word	0x08014b64
 800f904:	2000a938 	.word	0x2000a938
 800f908:	08014ba8 	.word	0x08014ba8

0800f90c <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800f90c:	b580      	push	{r7, lr}
 800f90e:	b08a      	sub	sp, #40	@ 0x28
 800f910:	af02      	add	r7, sp, #8
 800f912:	60f8      	str	r0, [r7, #12]
 800f914:	60b9      	str	r1, [r7, #8]
 800f916:	607a      	str	r2, [r7, #4]
 800f918:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800f91a:	2300      	movs	r3, #0
 800f91c:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800f91e:	68fb      	ldr	r3, [r7, #12]
 800f920:	2b00      	cmp	r3, #0
 800f922:	d106      	bne.n	800f932 <etharp_raw+0x26>
 800f924:	4b3a      	ldr	r3, [pc, #232]	@ (800fa10 <etharp_raw+0x104>)
 800f926:	f240 4257 	movw	r2, #1111	@ 0x457
 800f92a:	493a      	ldr	r1, [pc, #232]	@ (800fa14 <etharp_raw+0x108>)
 800f92c:	483a      	ldr	r0, [pc, #232]	@ (800fa18 <etharp_raw+0x10c>)
 800f92e:	f001 fd27 	bl	8011380 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800f932:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800f936:	211c      	movs	r1, #28
 800f938:	200e      	movs	r0, #14
 800f93a:	f7f7 fca3 	bl	8007284 <pbuf_alloc>
 800f93e:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800f940:	69bb      	ldr	r3, [r7, #24]
 800f942:	2b00      	cmp	r3, #0
 800f944:	d102      	bne.n	800f94c <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800f946:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800f94a:	e05d      	b.n	800fa08 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800f94c:	69bb      	ldr	r3, [r7, #24]
 800f94e:	895b      	ldrh	r3, [r3, #10]
 800f950:	2b1b      	cmp	r3, #27
 800f952:	d806      	bhi.n	800f962 <etharp_raw+0x56>
 800f954:	4b2e      	ldr	r3, [pc, #184]	@ (800fa10 <etharp_raw+0x104>)
 800f956:	f240 4262 	movw	r2, #1122	@ 0x462
 800f95a:	4930      	ldr	r1, [pc, #192]	@ (800fa1c <etharp_raw+0x110>)
 800f95c:	482e      	ldr	r0, [pc, #184]	@ (800fa18 <etharp_raw+0x10c>)
 800f95e:	f001 fd0f 	bl	8011380 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800f962:	69bb      	ldr	r3, [r7, #24]
 800f964:	685b      	ldr	r3, [r3, #4]
 800f966:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800f968:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800f96a:	4618      	mov	r0, r3
 800f96c:	f7f6 fc10 	bl	8006190 <lwip_htons>
 800f970:	4603      	mov	r3, r0
 800f972:	461a      	mov	r2, r3
 800f974:	697b      	ldr	r3, [r7, #20]
 800f976:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800f978:	68fb      	ldr	r3, [r7, #12]
 800f97a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800f97e:	2b06      	cmp	r3, #6
 800f980:	d006      	beq.n	800f990 <etharp_raw+0x84>
 800f982:	4b23      	ldr	r3, [pc, #140]	@ (800fa10 <etharp_raw+0x104>)
 800f984:	f240 4269 	movw	r2, #1129	@ 0x469
 800f988:	4925      	ldr	r1, [pc, #148]	@ (800fa20 <etharp_raw+0x114>)
 800f98a:	4823      	ldr	r0, [pc, #140]	@ (800fa18 <etharp_raw+0x10c>)
 800f98c:	f001 fcf8 	bl	8011380 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800f990:	697b      	ldr	r3, [r7, #20]
 800f992:	3308      	adds	r3, #8
 800f994:	2206      	movs	r2, #6
 800f996:	6839      	ldr	r1, [r7, #0]
 800f998:	4618      	mov	r0, r3
 800f99a:	f001 fe4c 	bl	8011636 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800f99e:	697b      	ldr	r3, [r7, #20]
 800f9a0:	3312      	adds	r3, #18
 800f9a2:	2206      	movs	r2, #6
 800f9a4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f9a6:	4618      	mov	r0, r3
 800f9a8:	f001 fe45 	bl	8011636 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800f9ac:	697b      	ldr	r3, [r7, #20]
 800f9ae:	330e      	adds	r3, #14
 800f9b0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f9b2:	6812      	ldr	r2, [r2, #0]
 800f9b4:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800f9b6:	697b      	ldr	r3, [r7, #20]
 800f9b8:	3318      	adds	r3, #24
 800f9ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f9bc:	6812      	ldr	r2, [r2, #0]
 800f9be:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800f9c0:	697b      	ldr	r3, [r7, #20]
 800f9c2:	2200      	movs	r2, #0
 800f9c4:	701a      	strb	r2, [r3, #0]
 800f9c6:	2200      	movs	r2, #0
 800f9c8:	f042 0201 	orr.w	r2, r2, #1
 800f9cc:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800f9ce:	697b      	ldr	r3, [r7, #20]
 800f9d0:	2200      	movs	r2, #0
 800f9d2:	f042 0208 	orr.w	r2, r2, #8
 800f9d6:	709a      	strb	r2, [r3, #2]
 800f9d8:	2200      	movs	r2, #0
 800f9da:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800f9dc:	697b      	ldr	r3, [r7, #20]
 800f9de:	2206      	movs	r2, #6
 800f9e0:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800f9e2:	697b      	ldr	r3, [r7, #20]
 800f9e4:	2204      	movs	r2, #4
 800f9e6:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800f9e8:	f640 0306 	movw	r3, #2054	@ 0x806
 800f9ec:	9300      	str	r3, [sp, #0]
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	68ba      	ldr	r2, [r7, #8]
 800f9f2:	69b9      	ldr	r1, [r7, #24]
 800f9f4:	68f8      	ldr	r0, [r7, #12]
 800f9f6:	f001 fb7b 	bl	80110f0 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800f9fa:	69b8      	ldr	r0, [r7, #24]
 800f9fc:	f7f7 ff26 	bl	800784c <pbuf_free>
  p = NULL;
 800fa00:	2300      	movs	r3, #0
 800fa02:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800fa04:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800fa08:	4618      	mov	r0, r3
 800fa0a:	3720      	adds	r7, #32
 800fa0c:	46bd      	mov	sp, r7
 800fa0e:	bd80      	pop	{r7, pc}
 800fa10:	080149c4 	.word	0x080149c4
 800fa14:	08014b14 	.word	0x08014b14
 800fa18:	08014a3c 	.word	0x08014a3c
 800fa1c:	08014bc4 	.word	0x08014bc4
 800fa20:	08014bf8 	.word	0x08014bf8

0800fa24 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800fa24:	b580      	push	{r7, lr}
 800fa26:	b088      	sub	sp, #32
 800fa28:	af04      	add	r7, sp, #16
 800fa2a:	60f8      	str	r0, [r7, #12]
 800fa2c:	60b9      	str	r1, [r7, #8]
 800fa2e:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800fa30:	68fb      	ldr	r3, [r7, #12]
 800fa32:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800fa36:	68fb      	ldr	r3, [r7, #12]
 800fa38:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 800fa3c:	68fb      	ldr	r3, [r7, #12]
 800fa3e:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800fa40:	2201      	movs	r2, #1
 800fa42:	9203      	str	r2, [sp, #12]
 800fa44:	68ba      	ldr	r2, [r7, #8]
 800fa46:	9202      	str	r2, [sp, #8]
 800fa48:	4a06      	ldr	r2, [pc, #24]	@ (800fa64 <etharp_request_dst+0x40>)
 800fa4a:	9201      	str	r2, [sp, #4]
 800fa4c:	9300      	str	r3, [sp, #0]
 800fa4e:	4603      	mov	r3, r0
 800fa50:	687a      	ldr	r2, [r7, #4]
 800fa52:	68f8      	ldr	r0, [r7, #12]
 800fa54:	f7ff ff5a 	bl	800f90c <etharp_raw>
 800fa58:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800fa5a:	4618      	mov	r0, r3
 800fa5c:	3710      	adds	r7, #16
 800fa5e:	46bd      	mov	sp, r7
 800fa60:	bd80      	pop	{r7, pc}
 800fa62:	bf00      	nop
 800fa64:	08015188 	.word	0x08015188

0800fa68 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800fa68:	b580      	push	{r7, lr}
 800fa6a:	b082      	sub	sp, #8
 800fa6c:	af00      	add	r7, sp, #0
 800fa6e:	6078      	str	r0, [r7, #4]
 800fa70:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800fa72:	4a05      	ldr	r2, [pc, #20]	@ (800fa88 <etharp_request+0x20>)
 800fa74:	6839      	ldr	r1, [r7, #0]
 800fa76:	6878      	ldr	r0, [r7, #4]
 800fa78:	f7ff ffd4 	bl	800fa24 <etharp_request_dst>
 800fa7c:	4603      	mov	r3, r0
}
 800fa7e:	4618      	mov	r0, r3
 800fa80:	3708      	adds	r7, #8
 800fa82:	46bd      	mov	sp, r7
 800fa84:	bd80      	pop	{r7, pc}
 800fa86:	bf00      	nop
 800fa88:	08015180 	.word	0x08015180

0800fa8c <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800fa8c:	b580      	push	{r7, lr}
 800fa8e:	b08e      	sub	sp, #56	@ 0x38
 800fa90:	af04      	add	r7, sp, #16
 800fa92:	6078      	str	r0, [r7, #4]
 800fa94:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800fa96:	4b79      	ldr	r3, [pc, #484]	@ (800fc7c <icmp_input+0x1f0>)
 800fa98:	689b      	ldr	r3, [r3, #8]
 800fa9a:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800fa9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fa9e:	781b      	ldrb	r3, [r3, #0]
 800faa0:	f003 030f 	and.w	r3, r3, #15
 800faa4:	b2db      	uxtb	r3, r3
 800faa6:	009b      	lsls	r3, r3, #2
 800faa8:	b2db      	uxtb	r3, r3
 800faaa:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 800faac:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800faae:	2b13      	cmp	r3, #19
 800fab0:	f240 80cd 	bls.w	800fc4e <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800fab4:	687b      	ldr	r3, [r7, #4]
 800fab6:	895b      	ldrh	r3, [r3, #10]
 800fab8:	2b03      	cmp	r3, #3
 800faba:	f240 80ca 	bls.w	800fc52 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	685b      	ldr	r3, [r3, #4]
 800fac2:	781b      	ldrb	r3, [r3, #0]
 800fac4:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800fac8:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800facc:	2b00      	cmp	r3, #0
 800face:	f000 80b7 	beq.w	800fc40 <icmp_input+0x1b4>
 800fad2:	2b08      	cmp	r3, #8
 800fad4:	f040 80b7 	bne.w	800fc46 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800fad8:	4b69      	ldr	r3, [pc, #420]	@ (800fc80 <icmp_input+0x1f4>)
 800fada:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800fadc:	4b67      	ldr	r3, [pc, #412]	@ (800fc7c <icmp_input+0x1f0>)
 800fade:	695b      	ldr	r3, [r3, #20]
 800fae0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800fae4:	2be0      	cmp	r3, #224	@ 0xe0
 800fae6:	f000 80bb 	beq.w	800fc60 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800faea:	4b64      	ldr	r3, [pc, #400]	@ (800fc7c <icmp_input+0x1f0>)
 800faec:	695b      	ldr	r3, [r3, #20]
 800faee:	4a63      	ldr	r2, [pc, #396]	@ (800fc7c <icmp_input+0x1f0>)
 800faf0:	6812      	ldr	r2, [r2, #0]
 800faf2:	4611      	mov	r1, r2
 800faf4:	4618      	mov	r0, r3
 800faf6:	f000 fbed 	bl	80102d4 <ip4_addr_isbroadcast_u32>
 800fafa:	4603      	mov	r3, r0
 800fafc:	2b00      	cmp	r3, #0
 800fafe:	f040 80b1 	bne.w	800fc64 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800fb02:	687b      	ldr	r3, [r7, #4]
 800fb04:	891b      	ldrh	r3, [r3, #8]
 800fb06:	2b07      	cmp	r3, #7
 800fb08:	f240 80a5 	bls.w	800fc56 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800fb0c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800fb0e:	330e      	adds	r3, #14
 800fb10:	4619      	mov	r1, r3
 800fb12:	6878      	ldr	r0, [r7, #4]
 800fb14:	f7f7 fe04 	bl	8007720 <pbuf_add_header>
 800fb18:	4603      	mov	r3, r0
 800fb1a:	2b00      	cmp	r3, #0
 800fb1c:	d04b      	beq.n	800fbb6 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800fb1e:	687b      	ldr	r3, [r7, #4]
 800fb20:	891a      	ldrh	r2, [r3, #8]
 800fb22:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800fb24:	4413      	add	r3, r2
 800fb26:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800fb28:	687b      	ldr	r3, [r7, #4]
 800fb2a:	891b      	ldrh	r3, [r3, #8]
 800fb2c:	8b7a      	ldrh	r2, [r7, #26]
 800fb2e:	429a      	cmp	r2, r3
 800fb30:	f0c0 809a 	bcc.w	800fc68 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800fb34:	8b7b      	ldrh	r3, [r7, #26]
 800fb36:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800fb3a:	4619      	mov	r1, r3
 800fb3c:	200e      	movs	r0, #14
 800fb3e:	f7f7 fba1 	bl	8007284 <pbuf_alloc>
 800fb42:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800fb44:	697b      	ldr	r3, [r7, #20]
 800fb46:	2b00      	cmp	r3, #0
 800fb48:	f000 8090 	beq.w	800fc6c <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800fb4c:	697b      	ldr	r3, [r7, #20]
 800fb4e:	895b      	ldrh	r3, [r3, #10]
 800fb50:	461a      	mov	r2, r3
 800fb52:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800fb54:	3308      	adds	r3, #8
 800fb56:	429a      	cmp	r2, r3
 800fb58:	d203      	bcs.n	800fb62 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800fb5a:	6978      	ldr	r0, [r7, #20]
 800fb5c:	f7f7 fe76 	bl	800784c <pbuf_free>
          goto icmperr;
 800fb60:	e085      	b.n	800fc6e <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800fb62:	697b      	ldr	r3, [r7, #20]
 800fb64:	685b      	ldr	r3, [r3, #4]
 800fb66:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800fb68:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800fb6a:	4618      	mov	r0, r3
 800fb6c:	f001 fd63 	bl	8011636 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800fb70:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800fb72:	4619      	mov	r1, r3
 800fb74:	6978      	ldr	r0, [r7, #20]
 800fb76:	f7f7 fde3 	bl	8007740 <pbuf_remove_header>
 800fb7a:	4603      	mov	r3, r0
 800fb7c:	2b00      	cmp	r3, #0
 800fb7e:	d009      	beq.n	800fb94 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800fb80:	4b40      	ldr	r3, [pc, #256]	@ (800fc84 <icmp_input+0x1f8>)
 800fb82:	22b6      	movs	r2, #182	@ 0xb6
 800fb84:	4940      	ldr	r1, [pc, #256]	@ (800fc88 <icmp_input+0x1fc>)
 800fb86:	4841      	ldr	r0, [pc, #260]	@ (800fc8c <icmp_input+0x200>)
 800fb88:	f001 fbfa 	bl	8011380 <iprintf>
          pbuf_free(r);
 800fb8c:	6978      	ldr	r0, [r7, #20]
 800fb8e:	f7f7 fe5d 	bl	800784c <pbuf_free>
          goto icmperr;
 800fb92:	e06c      	b.n	800fc6e <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800fb94:	6879      	ldr	r1, [r7, #4]
 800fb96:	6978      	ldr	r0, [r7, #20]
 800fb98:	f7f7 ff80 	bl	8007a9c <pbuf_copy>
 800fb9c:	4603      	mov	r3, r0
 800fb9e:	2b00      	cmp	r3, #0
 800fba0:	d003      	beq.n	800fbaa <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800fba2:	6978      	ldr	r0, [r7, #20]
 800fba4:	f7f7 fe52 	bl	800784c <pbuf_free>
          goto icmperr;
 800fba8:	e061      	b.n	800fc6e <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 800fbaa:	6878      	ldr	r0, [r7, #4]
 800fbac:	f7f7 fe4e 	bl	800784c <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800fbb0:	697b      	ldr	r3, [r7, #20]
 800fbb2:	607b      	str	r3, [r7, #4]
 800fbb4:	e00f      	b.n	800fbd6 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800fbb6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800fbb8:	330e      	adds	r3, #14
 800fbba:	4619      	mov	r1, r3
 800fbbc:	6878      	ldr	r0, [r7, #4]
 800fbbe:	f7f7 fdbf 	bl	8007740 <pbuf_remove_header>
 800fbc2:	4603      	mov	r3, r0
 800fbc4:	2b00      	cmp	r3, #0
 800fbc6:	d006      	beq.n	800fbd6 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800fbc8:	4b2e      	ldr	r3, [pc, #184]	@ (800fc84 <icmp_input+0x1f8>)
 800fbca:	22c7      	movs	r2, #199	@ 0xc7
 800fbcc:	4930      	ldr	r1, [pc, #192]	@ (800fc90 <icmp_input+0x204>)
 800fbce:	482f      	ldr	r0, [pc, #188]	@ (800fc8c <icmp_input+0x200>)
 800fbd0:	f001 fbd6 	bl	8011380 <iprintf>
          goto icmperr;
 800fbd4:	e04b      	b.n	800fc6e <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	685b      	ldr	r3, [r3, #4]
 800fbda:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800fbdc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800fbde:	4619      	mov	r1, r3
 800fbe0:	6878      	ldr	r0, [r7, #4]
 800fbe2:	f7f7 fd9d 	bl	8007720 <pbuf_add_header>
 800fbe6:	4603      	mov	r3, r0
 800fbe8:	2b00      	cmp	r3, #0
 800fbea:	d12b      	bne.n	800fc44 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	685b      	ldr	r3, [r3, #4]
 800fbf0:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800fbf2:	69fb      	ldr	r3, [r7, #28]
 800fbf4:	681a      	ldr	r2, [r3, #0]
 800fbf6:	68fb      	ldr	r3, [r7, #12]
 800fbf8:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800fbfa:	4b20      	ldr	r3, [pc, #128]	@ (800fc7c <icmp_input+0x1f0>)
 800fbfc:	691a      	ldr	r2, [r3, #16]
 800fbfe:	68fb      	ldr	r3, [r7, #12]
 800fc00:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800fc02:	693b      	ldr	r3, [r7, #16]
 800fc04:	2200      	movs	r2, #0
 800fc06:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 800fc08:	693b      	ldr	r3, [r7, #16]
 800fc0a:	2200      	movs	r2, #0
 800fc0c:	709a      	strb	r2, [r3, #2]
 800fc0e:	2200      	movs	r2, #0
 800fc10:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800fc12:	68fb      	ldr	r3, [r7, #12]
 800fc14:	22ff      	movs	r2, #255	@ 0xff
 800fc16:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800fc18:	68fb      	ldr	r3, [r7, #12]
 800fc1a:	2200      	movs	r2, #0
 800fc1c:	729a      	strb	r2, [r3, #10]
 800fc1e:	2200      	movs	r2, #0
 800fc20:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800fc22:	683b      	ldr	r3, [r7, #0]
 800fc24:	9302      	str	r3, [sp, #8]
 800fc26:	2301      	movs	r3, #1
 800fc28:	9301      	str	r3, [sp, #4]
 800fc2a:	2300      	movs	r3, #0
 800fc2c:	9300      	str	r3, [sp, #0]
 800fc2e:	23ff      	movs	r3, #255	@ 0xff
 800fc30:	2200      	movs	r2, #0
 800fc32:	69f9      	ldr	r1, [r7, #28]
 800fc34:	6878      	ldr	r0, [r7, #4]
 800fc36:	f000 fa75 	bl	8010124 <ip4_output_if>
 800fc3a:	4603      	mov	r3, r0
 800fc3c:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800fc3e:	e001      	b.n	800fc44 <icmp_input+0x1b8>
      break;
 800fc40:	bf00      	nop
 800fc42:	e000      	b.n	800fc46 <icmp_input+0x1ba>
      break;
 800fc44:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800fc46:	6878      	ldr	r0, [r7, #4]
 800fc48:	f7f7 fe00 	bl	800784c <pbuf_free>
  return;
 800fc4c:	e013      	b.n	800fc76 <icmp_input+0x1ea>
    goto lenerr;
 800fc4e:	bf00      	nop
 800fc50:	e002      	b.n	800fc58 <icmp_input+0x1cc>
    goto lenerr;
 800fc52:	bf00      	nop
 800fc54:	e000      	b.n	800fc58 <icmp_input+0x1cc>
        goto lenerr;
 800fc56:	bf00      	nop
lenerr:
  pbuf_free(p);
 800fc58:	6878      	ldr	r0, [r7, #4]
 800fc5a:	f7f7 fdf7 	bl	800784c <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800fc5e:	e00a      	b.n	800fc76 <icmp_input+0x1ea>
        goto icmperr;
 800fc60:	bf00      	nop
 800fc62:	e004      	b.n	800fc6e <icmp_input+0x1e2>
        goto icmperr;
 800fc64:	bf00      	nop
 800fc66:	e002      	b.n	800fc6e <icmp_input+0x1e2>
          goto icmperr;
 800fc68:	bf00      	nop
 800fc6a:	e000      	b.n	800fc6e <icmp_input+0x1e2>
          goto icmperr;
 800fc6c:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800fc6e:	6878      	ldr	r0, [r7, #4]
 800fc70:	f7f7 fdec 	bl	800784c <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800fc74:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800fc76:	3728      	adds	r7, #40	@ 0x28
 800fc78:	46bd      	mov	sp, r7
 800fc7a:	bd80      	pop	{r7, pc}
 800fc7c:	200050b8 	.word	0x200050b8
 800fc80:	200050cc 	.word	0x200050cc
 800fc84:	08014c3c 	.word	0x08014c3c
 800fc88:	08014c74 	.word	0x08014c74
 800fc8c:	08014cac 	.word	0x08014cac
 800fc90:	08014cd4 	.word	0x08014cd4

0800fc94 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800fc94:	b580      	push	{r7, lr}
 800fc96:	b082      	sub	sp, #8
 800fc98:	af00      	add	r7, sp, #0
 800fc9a:	6078      	str	r0, [r7, #4]
 800fc9c:	460b      	mov	r3, r1
 800fc9e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800fca0:	78fb      	ldrb	r3, [r7, #3]
 800fca2:	461a      	mov	r2, r3
 800fca4:	2103      	movs	r1, #3
 800fca6:	6878      	ldr	r0, [r7, #4]
 800fca8:	f000 f814 	bl	800fcd4 <icmp_send_response>
}
 800fcac:	bf00      	nop
 800fcae:	3708      	adds	r7, #8
 800fcb0:	46bd      	mov	sp, r7
 800fcb2:	bd80      	pop	{r7, pc}

0800fcb4 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800fcb4:	b580      	push	{r7, lr}
 800fcb6:	b082      	sub	sp, #8
 800fcb8:	af00      	add	r7, sp, #0
 800fcba:	6078      	str	r0, [r7, #4]
 800fcbc:	460b      	mov	r3, r1
 800fcbe:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800fcc0:	78fb      	ldrb	r3, [r7, #3]
 800fcc2:	461a      	mov	r2, r3
 800fcc4:	210b      	movs	r1, #11
 800fcc6:	6878      	ldr	r0, [r7, #4]
 800fcc8:	f000 f804 	bl	800fcd4 <icmp_send_response>
}
 800fccc:	bf00      	nop
 800fcce:	3708      	adds	r7, #8
 800fcd0:	46bd      	mov	sp, r7
 800fcd2:	bd80      	pop	{r7, pc}

0800fcd4 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800fcd4:	b580      	push	{r7, lr}
 800fcd6:	b08c      	sub	sp, #48	@ 0x30
 800fcd8:	af04      	add	r7, sp, #16
 800fcda:	6078      	str	r0, [r7, #4]
 800fcdc:	460b      	mov	r3, r1
 800fcde:	70fb      	strb	r3, [r7, #3]
 800fce0:	4613      	mov	r3, r2
 800fce2:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800fce4:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800fce8:	2124      	movs	r1, #36	@ 0x24
 800fcea:	2022      	movs	r0, #34	@ 0x22
 800fcec:	f7f7 faca 	bl	8007284 <pbuf_alloc>
 800fcf0:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800fcf2:	69fb      	ldr	r3, [r7, #28]
 800fcf4:	2b00      	cmp	r3, #0
 800fcf6:	d04c      	beq.n	800fd92 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800fcf8:	69fb      	ldr	r3, [r7, #28]
 800fcfa:	895b      	ldrh	r3, [r3, #10]
 800fcfc:	2b23      	cmp	r3, #35	@ 0x23
 800fcfe:	d806      	bhi.n	800fd0e <icmp_send_response+0x3a>
 800fd00:	4b26      	ldr	r3, [pc, #152]	@ (800fd9c <icmp_send_response+0xc8>)
 800fd02:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 800fd06:	4926      	ldr	r1, [pc, #152]	@ (800fda0 <icmp_send_response+0xcc>)
 800fd08:	4826      	ldr	r0, [pc, #152]	@ (800fda4 <icmp_send_response+0xd0>)
 800fd0a:	f001 fb39 	bl	8011380 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800fd0e:	687b      	ldr	r3, [r7, #4]
 800fd10:	685b      	ldr	r3, [r3, #4]
 800fd12:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800fd14:	69fb      	ldr	r3, [r7, #28]
 800fd16:	685b      	ldr	r3, [r3, #4]
 800fd18:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800fd1a:	697b      	ldr	r3, [r7, #20]
 800fd1c:	78fa      	ldrb	r2, [r7, #3]
 800fd1e:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800fd20:	697b      	ldr	r3, [r7, #20]
 800fd22:	78ba      	ldrb	r2, [r7, #2]
 800fd24:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800fd26:	697b      	ldr	r3, [r7, #20]
 800fd28:	2200      	movs	r2, #0
 800fd2a:	711a      	strb	r2, [r3, #4]
 800fd2c:	2200      	movs	r2, #0
 800fd2e:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800fd30:	697b      	ldr	r3, [r7, #20]
 800fd32:	2200      	movs	r2, #0
 800fd34:	719a      	strb	r2, [r3, #6]
 800fd36:	2200      	movs	r2, #0
 800fd38:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800fd3a:	69fb      	ldr	r3, [r7, #28]
 800fd3c:	685b      	ldr	r3, [r3, #4]
 800fd3e:	f103 0008 	add.w	r0, r3, #8
 800fd42:	687b      	ldr	r3, [r7, #4]
 800fd44:	685b      	ldr	r3, [r3, #4]
 800fd46:	221c      	movs	r2, #28
 800fd48:	4619      	mov	r1, r3
 800fd4a:	f001 fc74 	bl	8011636 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800fd4e:	69bb      	ldr	r3, [r7, #24]
 800fd50:	68db      	ldr	r3, [r3, #12]
 800fd52:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800fd54:	f107 030c 	add.w	r3, r7, #12
 800fd58:	4618      	mov	r0, r3
 800fd5a:	f000 f825 	bl	800fda8 <ip4_route>
 800fd5e:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800fd60:	693b      	ldr	r3, [r7, #16]
 800fd62:	2b00      	cmp	r3, #0
 800fd64:	d011      	beq.n	800fd8a <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800fd66:	697b      	ldr	r3, [r7, #20]
 800fd68:	2200      	movs	r2, #0
 800fd6a:	709a      	strb	r2, [r3, #2]
 800fd6c:	2200      	movs	r2, #0
 800fd6e:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800fd70:	f107 020c 	add.w	r2, r7, #12
 800fd74:	693b      	ldr	r3, [r7, #16]
 800fd76:	9302      	str	r3, [sp, #8]
 800fd78:	2301      	movs	r3, #1
 800fd7a:	9301      	str	r3, [sp, #4]
 800fd7c:	2300      	movs	r3, #0
 800fd7e:	9300      	str	r3, [sp, #0]
 800fd80:	23ff      	movs	r3, #255	@ 0xff
 800fd82:	2100      	movs	r1, #0
 800fd84:	69f8      	ldr	r0, [r7, #28]
 800fd86:	f000 f9cd 	bl	8010124 <ip4_output_if>
  }
  pbuf_free(q);
 800fd8a:	69f8      	ldr	r0, [r7, #28]
 800fd8c:	f7f7 fd5e 	bl	800784c <pbuf_free>
 800fd90:	e000      	b.n	800fd94 <icmp_send_response+0xc0>
    return;
 800fd92:	bf00      	nop
}
 800fd94:	3720      	adds	r7, #32
 800fd96:	46bd      	mov	sp, r7
 800fd98:	bd80      	pop	{r7, pc}
 800fd9a:	bf00      	nop
 800fd9c:	08014c3c 	.word	0x08014c3c
 800fda0:	08014d08 	.word	0x08014d08
 800fda4:	08014cac 	.word	0x08014cac

0800fda8 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800fda8:	b480      	push	{r7}
 800fdaa:	b085      	sub	sp, #20
 800fdac:	af00      	add	r7, sp, #0
 800fdae:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800fdb0:	4b33      	ldr	r3, [pc, #204]	@ (800fe80 <ip4_route+0xd8>)
 800fdb2:	681b      	ldr	r3, [r3, #0]
 800fdb4:	60fb      	str	r3, [r7, #12]
 800fdb6:	e036      	b.n	800fe26 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800fdb8:	68fb      	ldr	r3, [r7, #12]
 800fdba:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800fdbe:	f003 0301 	and.w	r3, r3, #1
 800fdc2:	b2db      	uxtb	r3, r3
 800fdc4:	2b00      	cmp	r3, #0
 800fdc6:	d02b      	beq.n	800fe20 <ip4_route+0x78>
 800fdc8:	68fb      	ldr	r3, [r7, #12]
 800fdca:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800fdce:	089b      	lsrs	r3, r3, #2
 800fdd0:	f003 0301 	and.w	r3, r3, #1
 800fdd4:	b2db      	uxtb	r3, r3
 800fdd6:	2b00      	cmp	r3, #0
 800fdd8:	d022      	beq.n	800fe20 <ip4_route+0x78>
 800fdda:	68fb      	ldr	r3, [r7, #12]
 800fddc:	3304      	adds	r3, #4
 800fdde:	681b      	ldr	r3, [r3, #0]
 800fde0:	2b00      	cmp	r3, #0
 800fde2:	d01d      	beq.n	800fe20 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800fde4:	687b      	ldr	r3, [r7, #4]
 800fde6:	681a      	ldr	r2, [r3, #0]
 800fde8:	68fb      	ldr	r3, [r7, #12]
 800fdea:	3304      	adds	r3, #4
 800fdec:	681b      	ldr	r3, [r3, #0]
 800fdee:	405a      	eors	r2, r3
 800fdf0:	68fb      	ldr	r3, [r7, #12]
 800fdf2:	3308      	adds	r3, #8
 800fdf4:	681b      	ldr	r3, [r3, #0]
 800fdf6:	4013      	ands	r3, r2
 800fdf8:	2b00      	cmp	r3, #0
 800fdfa:	d101      	bne.n	800fe00 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800fdfc:	68fb      	ldr	r3, [r7, #12]
 800fdfe:	e038      	b.n	800fe72 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800fe00:	68fb      	ldr	r3, [r7, #12]
 800fe02:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800fe06:	f003 0302 	and.w	r3, r3, #2
 800fe0a:	2b00      	cmp	r3, #0
 800fe0c:	d108      	bne.n	800fe20 <ip4_route+0x78>
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	681a      	ldr	r2, [r3, #0]
 800fe12:	68fb      	ldr	r3, [r7, #12]
 800fe14:	330c      	adds	r3, #12
 800fe16:	681b      	ldr	r3, [r3, #0]
 800fe18:	429a      	cmp	r2, r3
 800fe1a:	d101      	bne.n	800fe20 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800fe1c:	68fb      	ldr	r3, [r7, #12]
 800fe1e:	e028      	b.n	800fe72 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800fe20:	68fb      	ldr	r3, [r7, #12]
 800fe22:	681b      	ldr	r3, [r3, #0]
 800fe24:	60fb      	str	r3, [r7, #12]
 800fe26:	68fb      	ldr	r3, [r7, #12]
 800fe28:	2b00      	cmp	r3, #0
 800fe2a:	d1c5      	bne.n	800fdb8 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800fe2c:	4b15      	ldr	r3, [pc, #84]	@ (800fe84 <ip4_route+0xdc>)
 800fe2e:	681b      	ldr	r3, [r3, #0]
 800fe30:	2b00      	cmp	r3, #0
 800fe32:	d01a      	beq.n	800fe6a <ip4_route+0xc2>
 800fe34:	4b13      	ldr	r3, [pc, #76]	@ (800fe84 <ip4_route+0xdc>)
 800fe36:	681b      	ldr	r3, [r3, #0]
 800fe38:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800fe3c:	f003 0301 	and.w	r3, r3, #1
 800fe40:	2b00      	cmp	r3, #0
 800fe42:	d012      	beq.n	800fe6a <ip4_route+0xc2>
 800fe44:	4b0f      	ldr	r3, [pc, #60]	@ (800fe84 <ip4_route+0xdc>)
 800fe46:	681b      	ldr	r3, [r3, #0]
 800fe48:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800fe4c:	f003 0304 	and.w	r3, r3, #4
 800fe50:	2b00      	cmp	r3, #0
 800fe52:	d00a      	beq.n	800fe6a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800fe54:	4b0b      	ldr	r3, [pc, #44]	@ (800fe84 <ip4_route+0xdc>)
 800fe56:	681b      	ldr	r3, [r3, #0]
 800fe58:	3304      	adds	r3, #4
 800fe5a:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800fe5c:	2b00      	cmp	r3, #0
 800fe5e:	d004      	beq.n	800fe6a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800fe60:	687b      	ldr	r3, [r7, #4]
 800fe62:	681b      	ldr	r3, [r3, #0]
 800fe64:	b2db      	uxtb	r3, r3
 800fe66:	2b7f      	cmp	r3, #127	@ 0x7f
 800fe68:	d101      	bne.n	800fe6e <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800fe6a:	2300      	movs	r3, #0
 800fe6c:	e001      	b.n	800fe72 <ip4_route+0xca>
  }

  return netif_default;
 800fe6e:	4b05      	ldr	r3, [pc, #20]	@ (800fe84 <ip4_route+0xdc>)
 800fe70:	681b      	ldr	r3, [r3, #0]
}
 800fe72:	4618      	mov	r0, r3
 800fe74:	3714      	adds	r7, #20
 800fe76:	46bd      	mov	sp, r7
 800fe78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe7c:	4770      	bx	lr
 800fe7e:	bf00      	nop
 800fe80:	2000a7dc 	.word	0x2000a7dc
 800fe84:	2000a7e0 	.word	0x2000a7e0

0800fe88 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800fe88:	b580      	push	{r7, lr}
 800fe8a:	b082      	sub	sp, #8
 800fe8c:	af00      	add	r7, sp, #0
 800fe8e:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800fe96:	f003 0301 	and.w	r3, r3, #1
 800fe9a:	b2db      	uxtb	r3, r3
 800fe9c:	2b00      	cmp	r3, #0
 800fe9e:	d016      	beq.n	800fece <ip4_input_accept+0x46>
 800fea0:	687b      	ldr	r3, [r7, #4]
 800fea2:	3304      	adds	r3, #4
 800fea4:	681b      	ldr	r3, [r3, #0]
 800fea6:	2b00      	cmp	r3, #0
 800fea8:	d011      	beq.n	800fece <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800feaa:	4b0b      	ldr	r3, [pc, #44]	@ (800fed8 <ip4_input_accept+0x50>)
 800feac:	695a      	ldr	r2, [r3, #20]
 800feae:	687b      	ldr	r3, [r7, #4]
 800feb0:	3304      	adds	r3, #4
 800feb2:	681b      	ldr	r3, [r3, #0]
 800feb4:	429a      	cmp	r2, r3
 800feb6:	d008      	beq.n	800feca <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800feb8:	4b07      	ldr	r3, [pc, #28]	@ (800fed8 <ip4_input_accept+0x50>)
 800feba:	695b      	ldr	r3, [r3, #20]
 800febc:	6879      	ldr	r1, [r7, #4]
 800febe:	4618      	mov	r0, r3
 800fec0:	f000 fa08 	bl	80102d4 <ip4_addr_isbroadcast_u32>
 800fec4:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800fec6:	2b00      	cmp	r3, #0
 800fec8:	d001      	beq.n	800fece <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800feca:	2301      	movs	r3, #1
 800fecc:	e000      	b.n	800fed0 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800fece:	2300      	movs	r3, #0
}
 800fed0:	4618      	mov	r0, r3
 800fed2:	3708      	adds	r7, #8
 800fed4:	46bd      	mov	sp, r7
 800fed6:	bd80      	pop	{r7, pc}
 800fed8:	200050b8 	.word	0x200050b8

0800fedc <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800fedc:	b580      	push	{r7, lr}
 800fede:	b086      	sub	sp, #24
 800fee0:	af00      	add	r7, sp, #0
 800fee2:	6078      	str	r0, [r7, #4]
 800fee4:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800fee6:	687b      	ldr	r3, [r7, #4]
 800fee8:	685b      	ldr	r3, [r3, #4]
 800feea:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800feec:	697b      	ldr	r3, [r7, #20]
 800feee:	781b      	ldrb	r3, [r3, #0]
 800fef0:	091b      	lsrs	r3, r3, #4
 800fef2:	b2db      	uxtb	r3, r3
 800fef4:	2b04      	cmp	r3, #4
 800fef6:	d004      	beq.n	800ff02 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800fef8:	6878      	ldr	r0, [r7, #4]
 800fefa:	f7f7 fca7 	bl	800784c <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800fefe:	2300      	movs	r3, #0
 800ff00:	e107      	b.n	8010112 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800ff02:	697b      	ldr	r3, [r7, #20]
 800ff04:	781b      	ldrb	r3, [r3, #0]
 800ff06:	f003 030f 	and.w	r3, r3, #15
 800ff0a:	b2db      	uxtb	r3, r3
 800ff0c:	009b      	lsls	r3, r3, #2
 800ff0e:	b2db      	uxtb	r3, r3
 800ff10:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800ff12:	697b      	ldr	r3, [r7, #20]
 800ff14:	885b      	ldrh	r3, [r3, #2]
 800ff16:	b29b      	uxth	r3, r3
 800ff18:	4618      	mov	r0, r3
 800ff1a:	f7f6 f939 	bl	8006190 <lwip_htons>
 800ff1e:	4603      	mov	r3, r0
 800ff20:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800ff22:	687b      	ldr	r3, [r7, #4]
 800ff24:	891b      	ldrh	r3, [r3, #8]
 800ff26:	89ba      	ldrh	r2, [r7, #12]
 800ff28:	429a      	cmp	r2, r3
 800ff2a:	d204      	bcs.n	800ff36 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 800ff2c:	89bb      	ldrh	r3, [r7, #12]
 800ff2e:	4619      	mov	r1, r3
 800ff30:	6878      	ldr	r0, [r7, #4]
 800ff32:	f7f7 fb05 	bl	8007540 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800ff36:	687b      	ldr	r3, [r7, #4]
 800ff38:	895b      	ldrh	r3, [r3, #10]
 800ff3a:	89fa      	ldrh	r2, [r7, #14]
 800ff3c:	429a      	cmp	r2, r3
 800ff3e:	d807      	bhi.n	800ff50 <ip4_input+0x74>
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	891b      	ldrh	r3, [r3, #8]
 800ff44:	89ba      	ldrh	r2, [r7, #12]
 800ff46:	429a      	cmp	r2, r3
 800ff48:	d802      	bhi.n	800ff50 <ip4_input+0x74>
 800ff4a:	89fb      	ldrh	r3, [r7, #14]
 800ff4c:	2b13      	cmp	r3, #19
 800ff4e:	d804      	bhi.n	800ff5a <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800ff50:	6878      	ldr	r0, [r7, #4]
 800ff52:	f7f7 fc7b 	bl	800784c <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800ff56:	2300      	movs	r3, #0
 800ff58:	e0db      	b.n	8010112 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800ff5a:	697b      	ldr	r3, [r7, #20]
 800ff5c:	691b      	ldr	r3, [r3, #16]
 800ff5e:	4a6f      	ldr	r2, [pc, #444]	@ (801011c <ip4_input+0x240>)
 800ff60:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800ff62:	697b      	ldr	r3, [r7, #20]
 800ff64:	68db      	ldr	r3, [r3, #12]
 800ff66:	4a6d      	ldr	r2, [pc, #436]	@ (801011c <ip4_input+0x240>)
 800ff68:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800ff6a:	4b6c      	ldr	r3, [pc, #432]	@ (801011c <ip4_input+0x240>)
 800ff6c:	695b      	ldr	r3, [r3, #20]
 800ff6e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800ff72:	2be0      	cmp	r3, #224	@ 0xe0
 800ff74:	d112      	bne.n	800ff9c <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800ff76:	683b      	ldr	r3, [r7, #0]
 800ff78:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800ff7c:	f003 0301 	and.w	r3, r3, #1
 800ff80:	b2db      	uxtb	r3, r3
 800ff82:	2b00      	cmp	r3, #0
 800ff84:	d007      	beq.n	800ff96 <ip4_input+0xba>
 800ff86:	683b      	ldr	r3, [r7, #0]
 800ff88:	3304      	adds	r3, #4
 800ff8a:	681b      	ldr	r3, [r3, #0]
 800ff8c:	2b00      	cmp	r3, #0
 800ff8e:	d002      	beq.n	800ff96 <ip4_input+0xba>
      netif = inp;
 800ff90:	683b      	ldr	r3, [r7, #0]
 800ff92:	613b      	str	r3, [r7, #16]
 800ff94:	e02a      	b.n	800ffec <ip4_input+0x110>
    } else {
      netif = NULL;
 800ff96:	2300      	movs	r3, #0
 800ff98:	613b      	str	r3, [r7, #16]
 800ff9a:	e027      	b.n	800ffec <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800ff9c:	6838      	ldr	r0, [r7, #0]
 800ff9e:	f7ff ff73 	bl	800fe88 <ip4_input_accept>
 800ffa2:	4603      	mov	r3, r0
 800ffa4:	2b00      	cmp	r3, #0
 800ffa6:	d002      	beq.n	800ffae <ip4_input+0xd2>
      netif = inp;
 800ffa8:	683b      	ldr	r3, [r7, #0]
 800ffaa:	613b      	str	r3, [r7, #16]
 800ffac:	e01e      	b.n	800ffec <ip4_input+0x110>
    } else {
      netif = NULL;
 800ffae:	2300      	movs	r3, #0
 800ffb0:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800ffb2:	4b5a      	ldr	r3, [pc, #360]	@ (801011c <ip4_input+0x240>)
 800ffb4:	695b      	ldr	r3, [r3, #20]
 800ffb6:	b2db      	uxtb	r3, r3
 800ffb8:	2b7f      	cmp	r3, #127	@ 0x7f
 800ffba:	d017      	beq.n	800ffec <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800ffbc:	4b58      	ldr	r3, [pc, #352]	@ (8010120 <ip4_input+0x244>)
 800ffbe:	681b      	ldr	r3, [r3, #0]
 800ffc0:	613b      	str	r3, [r7, #16]
 800ffc2:	e00e      	b.n	800ffe2 <ip4_input+0x106>
          if (netif == inp) {
 800ffc4:	693a      	ldr	r2, [r7, #16]
 800ffc6:	683b      	ldr	r3, [r7, #0]
 800ffc8:	429a      	cmp	r2, r3
 800ffca:	d006      	beq.n	800ffda <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800ffcc:	6938      	ldr	r0, [r7, #16]
 800ffce:	f7ff ff5b 	bl	800fe88 <ip4_input_accept>
 800ffd2:	4603      	mov	r3, r0
 800ffd4:	2b00      	cmp	r3, #0
 800ffd6:	d108      	bne.n	800ffea <ip4_input+0x10e>
 800ffd8:	e000      	b.n	800ffdc <ip4_input+0x100>
            continue;
 800ffda:	bf00      	nop
        NETIF_FOREACH(netif) {
 800ffdc:	693b      	ldr	r3, [r7, #16]
 800ffde:	681b      	ldr	r3, [r3, #0]
 800ffe0:	613b      	str	r3, [r7, #16]
 800ffe2:	693b      	ldr	r3, [r7, #16]
 800ffe4:	2b00      	cmp	r3, #0
 800ffe6:	d1ed      	bne.n	800ffc4 <ip4_input+0xe8>
 800ffe8:	e000      	b.n	800ffec <ip4_input+0x110>
            break;
 800ffea:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800ffec:	4b4b      	ldr	r3, [pc, #300]	@ (801011c <ip4_input+0x240>)
 800ffee:	691b      	ldr	r3, [r3, #16]
 800fff0:	6839      	ldr	r1, [r7, #0]
 800fff2:	4618      	mov	r0, r3
 800fff4:	f000 f96e 	bl	80102d4 <ip4_addr_isbroadcast_u32>
 800fff8:	4603      	mov	r3, r0
 800fffa:	2b00      	cmp	r3, #0
 800fffc:	d105      	bne.n	801000a <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800fffe:	4b47      	ldr	r3, [pc, #284]	@ (801011c <ip4_input+0x240>)
 8010000:	691b      	ldr	r3, [r3, #16]
 8010002:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8010006:	2be0      	cmp	r3, #224	@ 0xe0
 8010008:	d104      	bne.n	8010014 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801000a:	6878      	ldr	r0, [r7, #4]
 801000c:	f7f7 fc1e 	bl	800784c <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8010010:	2300      	movs	r3, #0
 8010012:	e07e      	b.n	8010112 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8010014:	693b      	ldr	r3, [r7, #16]
 8010016:	2b00      	cmp	r3, #0
 8010018:	d104      	bne.n	8010024 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801001a:	6878      	ldr	r0, [r7, #4]
 801001c:	f7f7 fc16 	bl	800784c <pbuf_free>
    return ERR_OK;
 8010020:	2300      	movs	r3, #0
 8010022:	e076      	b.n	8010112 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8010024:	697b      	ldr	r3, [r7, #20]
 8010026:	88db      	ldrh	r3, [r3, #6]
 8010028:	b29b      	uxth	r3, r3
 801002a:	461a      	mov	r2, r3
 801002c:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 8010030:	4013      	ands	r3, r2
 8010032:	2b00      	cmp	r3, #0
 8010034:	d00b      	beq.n	801004e <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8010036:	6878      	ldr	r0, [r7, #4]
 8010038:	f000 fc92 	bl	8010960 <ip4_reass>
 801003c:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801003e:	687b      	ldr	r3, [r7, #4]
 8010040:	2b00      	cmp	r3, #0
 8010042:	d101      	bne.n	8010048 <ip4_input+0x16c>
      return ERR_OK;
 8010044:	2300      	movs	r3, #0
 8010046:	e064      	b.n	8010112 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8010048:	687b      	ldr	r3, [r7, #4]
 801004a:	685b      	ldr	r3, [r3, #4]
 801004c:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801004e:	4a33      	ldr	r2, [pc, #204]	@ (801011c <ip4_input+0x240>)
 8010050:	693b      	ldr	r3, [r7, #16]
 8010052:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8010054:	4a31      	ldr	r2, [pc, #196]	@ (801011c <ip4_input+0x240>)
 8010056:	683b      	ldr	r3, [r7, #0]
 8010058:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801005a:	4a30      	ldr	r2, [pc, #192]	@ (801011c <ip4_input+0x240>)
 801005c:	697b      	ldr	r3, [r7, #20]
 801005e:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8010060:	697b      	ldr	r3, [r7, #20]
 8010062:	781b      	ldrb	r3, [r3, #0]
 8010064:	f003 030f 	and.w	r3, r3, #15
 8010068:	b2db      	uxtb	r3, r3
 801006a:	009b      	lsls	r3, r3, #2
 801006c:	b2db      	uxtb	r3, r3
 801006e:	461a      	mov	r2, r3
 8010070:	4b2a      	ldr	r3, [pc, #168]	@ (801011c <ip4_input+0x240>)
 8010072:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8010074:	89fb      	ldrh	r3, [r7, #14]
 8010076:	4619      	mov	r1, r3
 8010078:	6878      	ldr	r0, [r7, #4]
 801007a:	f7f7 fb61 	bl	8007740 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801007e:	697b      	ldr	r3, [r7, #20]
 8010080:	7a5b      	ldrb	r3, [r3, #9]
 8010082:	2b11      	cmp	r3, #17
 8010084:	d006      	beq.n	8010094 <ip4_input+0x1b8>
 8010086:	2b11      	cmp	r3, #17
 8010088:	dc13      	bgt.n	80100b2 <ip4_input+0x1d6>
 801008a:	2b01      	cmp	r3, #1
 801008c:	d00c      	beq.n	80100a8 <ip4_input+0x1cc>
 801008e:	2b06      	cmp	r3, #6
 8010090:	d005      	beq.n	801009e <ip4_input+0x1c2>
 8010092:	e00e      	b.n	80100b2 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8010094:	6839      	ldr	r1, [r7, #0]
 8010096:	6878      	ldr	r0, [r7, #4]
 8010098:	f7fe f950 	bl	800e33c <udp_input>
        break;
 801009c:	e026      	b.n	80100ec <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 801009e:	6839      	ldr	r1, [r7, #0]
 80100a0:	6878      	ldr	r0, [r7, #4]
 80100a2:	f7f9 fd3f 	bl	8009b24 <tcp_input>
        break;
 80100a6:	e021      	b.n	80100ec <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 80100a8:	6839      	ldr	r1, [r7, #0]
 80100aa:	6878      	ldr	r0, [r7, #4]
 80100ac:	f7ff fcee 	bl	800fa8c <icmp_input>
        break;
 80100b0:	e01c      	b.n	80100ec <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80100b2:	4b1a      	ldr	r3, [pc, #104]	@ (801011c <ip4_input+0x240>)
 80100b4:	695b      	ldr	r3, [r3, #20]
 80100b6:	6939      	ldr	r1, [r7, #16]
 80100b8:	4618      	mov	r0, r3
 80100ba:	f000 f90b 	bl	80102d4 <ip4_addr_isbroadcast_u32>
 80100be:	4603      	mov	r3, r0
 80100c0:	2b00      	cmp	r3, #0
 80100c2:	d10f      	bne.n	80100e4 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80100c4:	4b15      	ldr	r3, [pc, #84]	@ (801011c <ip4_input+0x240>)
 80100c6:	695b      	ldr	r3, [r3, #20]
 80100c8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80100cc:	2be0      	cmp	r3, #224	@ 0xe0
 80100ce:	d009      	beq.n	80100e4 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 80100d0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80100d4:	4619      	mov	r1, r3
 80100d6:	6878      	ldr	r0, [r7, #4]
 80100d8:	f7f7 fba5 	bl	8007826 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 80100dc:	2102      	movs	r1, #2
 80100de:	6878      	ldr	r0, [r7, #4]
 80100e0:	f7ff fdd8 	bl	800fc94 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 80100e4:	6878      	ldr	r0, [r7, #4]
 80100e6:	f7f7 fbb1 	bl	800784c <pbuf_free>
        break;
 80100ea:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 80100ec:	4b0b      	ldr	r3, [pc, #44]	@ (801011c <ip4_input+0x240>)
 80100ee:	2200      	movs	r2, #0
 80100f0:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 80100f2:	4b0a      	ldr	r3, [pc, #40]	@ (801011c <ip4_input+0x240>)
 80100f4:	2200      	movs	r2, #0
 80100f6:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 80100f8:	4b08      	ldr	r3, [pc, #32]	@ (801011c <ip4_input+0x240>)
 80100fa:	2200      	movs	r2, #0
 80100fc:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 80100fe:	4b07      	ldr	r3, [pc, #28]	@ (801011c <ip4_input+0x240>)
 8010100:	2200      	movs	r2, #0
 8010102:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8010104:	4b05      	ldr	r3, [pc, #20]	@ (801011c <ip4_input+0x240>)
 8010106:	2200      	movs	r2, #0
 8010108:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801010a:	4b04      	ldr	r3, [pc, #16]	@ (801011c <ip4_input+0x240>)
 801010c:	2200      	movs	r2, #0
 801010e:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8010110:	2300      	movs	r3, #0
}
 8010112:	4618      	mov	r0, r3
 8010114:	3718      	adds	r7, #24
 8010116:	46bd      	mov	sp, r7
 8010118:	bd80      	pop	{r7, pc}
 801011a:	bf00      	nop
 801011c:	200050b8 	.word	0x200050b8
 8010120:	2000a7dc 	.word	0x2000a7dc

08010124 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8010124:	b580      	push	{r7, lr}
 8010126:	b08a      	sub	sp, #40	@ 0x28
 8010128:	af04      	add	r7, sp, #16
 801012a:	60f8      	str	r0, [r7, #12]
 801012c:	60b9      	str	r1, [r7, #8]
 801012e:	607a      	str	r2, [r7, #4]
 8010130:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8010132:	68bb      	ldr	r3, [r7, #8]
 8010134:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8010136:	687b      	ldr	r3, [r7, #4]
 8010138:	2b00      	cmp	r3, #0
 801013a:	d009      	beq.n	8010150 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 801013c:	68bb      	ldr	r3, [r7, #8]
 801013e:	2b00      	cmp	r3, #0
 8010140:	d003      	beq.n	801014a <ip4_output_if+0x26>
 8010142:	68bb      	ldr	r3, [r7, #8]
 8010144:	681b      	ldr	r3, [r3, #0]
 8010146:	2b00      	cmp	r3, #0
 8010148:	d102      	bne.n	8010150 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801014a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801014c:	3304      	adds	r3, #4
 801014e:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8010150:	78fa      	ldrb	r2, [r7, #3]
 8010152:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010154:	9302      	str	r3, [sp, #8]
 8010156:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801015a:	9301      	str	r3, [sp, #4]
 801015c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8010160:	9300      	str	r3, [sp, #0]
 8010162:	4613      	mov	r3, r2
 8010164:	687a      	ldr	r2, [r7, #4]
 8010166:	6979      	ldr	r1, [r7, #20]
 8010168:	68f8      	ldr	r0, [r7, #12]
 801016a:	f000 f805 	bl	8010178 <ip4_output_if_src>
 801016e:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8010170:	4618      	mov	r0, r3
 8010172:	3718      	adds	r7, #24
 8010174:	46bd      	mov	sp, r7
 8010176:	bd80      	pop	{r7, pc}

08010178 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8010178:	b580      	push	{r7, lr}
 801017a:	b088      	sub	sp, #32
 801017c:	af00      	add	r7, sp, #0
 801017e:	60f8      	str	r0, [r7, #12]
 8010180:	60b9      	str	r1, [r7, #8]
 8010182:	607a      	str	r2, [r7, #4]
 8010184:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8010186:	68fb      	ldr	r3, [r7, #12]
 8010188:	7b9b      	ldrb	r3, [r3, #14]
 801018a:	2b01      	cmp	r3, #1
 801018c:	d006      	beq.n	801019c <ip4_output_if_src+0x24>
 801018e:	4b4b      	ldr	r3, [pc, #300]	@ (80102bc <ip4_output_if_src+0x144>)
 8010190:	f44f 7255 	mov.w	r2, #852	@ 0x354
 8010194:	494a      	ldr	r1, [pc, #296]	@ (80102c0 <ip4_output_if_src+0x148>)
 8010196:	484b      	ldr	r0, [pc, #300]	@ (80102c4 <ip4_output_if_src+0x14c>)
 8010198:	f001 f8f2 	bl	8011380 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 801019c:	687b      	ldr	r3, [r7, #4]
 801019e:	2b00      	cmp	r3, #0
 80101a0:	d060      	beq.n	8010264 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 80101a2:	2314      	movs	r3, #20
 80101a4:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 80101a6:	2114      	movs	r1, #20
 80101a8:	68f8      	ldr	r0, [r7, #12]
 80101aa:	f7f7 fab9 	bl	8007720 <pbuf_add_header>
 80101ae:	4603      	mov	r3, r0
 80101b0:	2b00      	cmp	r3, #0
 80101b2:	d002      	beq.n	80101ba <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80101b4:	f06f 0301 	mvn.w	r3, #1
 80101b8:	e07c      	b.n	80102b4 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 80101ba:	68fb      	ldr	r3, [r7, #12]
 80101bc:	685b      	ldr	r3, [r3, #4]
 80101be:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 80101c0:	68fb      	ldr	r3, [r7, #12]
 80101c2:	895b      	ldrh	r3, [r3, #10]
 80101c4:	2b13      	cmp	r3, #19
 80101c6:	d806      	bhi.n	80101d6 <ip4_output_if_src+0x5e>
 80101c8:	4b3c      	ldr	r3, [pc, #240]	@ (80102bc <ip4_output_if_src+0x144>)
 80101ca:	f44f 7262 	mov.w	r2, #904	@ 0x388
 80101ce:	493e      	ldr	r1, [pc, #248]	@ (80102c8 <ip4_output_if_src+0x150>)
 80101d0:	483c      	ldr	r0, [pc, #240]	@ (80102c4 <ip4_output_if_src+0x14c>)
 80101d2:	f001 f8d5 	bl	8011380 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 80101d6:	69fb      	ldr	r3, [r7, #28]
 80101d8:	78fa      	ldrb	r2, [r7, #3]
 80101da:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 80101dc:	69fb      	ldr	r3, [r7, #28]
 80101de:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80101e2:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 80101e4:	687b      	ldr	r3, [r7, #4]
 80101e6:	681a      	ldr	r2, [r3, #0]
 80101e8:	69fb      	ldr	r3, [r7, #28]
 80101ea:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 80101ec:	8b7b      	ldrh	r3, [r7, #26]
 80101ee:	089b      	lsrs	r3, r3, #2
 80101f0:	b29b      	uxth	r3, r3
 80101f2:	b2db      	uxtb	r3, r3
 80101f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80101f8:	b2da      	uxtb	r2, r3
 80101fa:	69fb      	ldr	r3, [r7, #28]
 80101fc:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 80101fe:	69fb      	ldr	r3, [r7, #28]
 8010200:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8010204:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8010206:	68fb      	ldr	r3, [r7, #12]
 8010208:	891b      	ldrh	r3, [r3, #8]
 801020a:	4618      	mov	r0, r3
 801020c:	f7f5 ffc0 	bl	8006190 <lwip_htons>
 8010210:	4603      	mov	r3, r0
 8010212:	461a      	mov	r2, r3
 8010214:	69fb      	ldr	r3, [r7, #28]
 8010216:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8010218:	69fb      	ldr	r3, [r7, #28]
 801021a:	2200      	movs	r2, #0
 801021c:	719a      	strb	r2, [r3, #6]
 801021e:	2200      	movs	r2, #0
 8010220:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8010222:	4b2a      	ldr	r3, [pc, #168]	@ (80102cc <ip4_output_if_src+0x154>)
 8010224:	881b      	ldrh	r3, [r3, #0]
 8010226:	4618      	mov	r0, r3
 8010228:	f7f5 ffb2 	bl	8006190 <lwip_htons>
 801022c:	4603      	mov	r3, r0
 801022e:	461a      	mov	r2, r3
 8010230:	69fb      	ldr	r3, [r7, #28]
 8010232:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8010234:	4b25      	ldr	r3, [pc, #148]	@ (80102cc <ip4_output_if_src+0x154>)
 8010236:	881b      	ldrh	r3, [r3, #0]
 8010238:	3301      	adds	r3, #1
 801023a:	b29a      	uxth	r2, r3
 801023c:	4b23      	ldr	r3, [pc, #140]	@ (80102cc <ip4_output_if_src+0x154>)
 801023e:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8010240:	68bb      	ldr	r3, [r7, #8]
 8010242:	2b00      	cmp	r3, #0
 8010244:	d104      	bne.n	8010250 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8010246:	4b22      	ldr	r3, [pc, #136]	@ (80102d0 <ip4_output_if_src+0x158>)
 8010248:	681a      	ldr	r2, [r3, #0]
 801024a:	69fb      	ldr	r3, [r7, #28]
 801024c:	60da      	str	r2, [r3, #12]
 801024e:	e003      	b.n	8010258 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8010250:	68bb      	ldr	r3, [r7, #8]
 8010252:	681a      	ldr	r2, [r3, #0]
 8010254:	69fb      	ldr	r3, [r7, #28]
 8010256:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8010258:	69fb      	ldr	r3, [r7, #28]
 801025a:	2200      	movs	r2, #0
 801025c:	729a      	strb	r2, [r3, #10]
 801025e:	2200      	movs	r2, #0
 8010260:	72da      	strb	r2, [r3, #11]
 8010262:	e00f      	b.n	8010284 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8010264:	68fb      	ldr	r3, [r7, #12]
 8010266:	895b      	ldrh	r3, [r3, #10]
 8010268:	2b13      	cmp	r3, #19
 801026a:	d802      	bhi.n	8010272 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801026c:	f06f 0301 	mvn.w	r3, #1
 8010270:	e020      	b.n	80102b4 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8010272:	68fb      	ldr	r3, [r7, #12]
 8010274:	685b      	ldr	r3, [r3, #4]
 8010276:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8010278:	69fb      	ldr	r3, [r7, #28]
 801027a:	691b      	ldr	r3, [r3, #16]
 801027c:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801027e:	f107 0314 	add.w	r3, r7, #20
 8010282:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8010284:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010286:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8010288:	2b00      	cmp	r3, #0
 801028a:	d00c      	beq.n	80102a6 <ip4_output_if_src+0x12e>
 801028c:	68fb      	ldr	r3, [r7, #12]
 801028e:	891a      	ldrh	r2, [r3, #8]
 8010290:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010292:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8010294:	429a      	cmp	r2, r3
 8010296:	d906      	bls.n	80102a6 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8010298:	687a      	ldr	r2, [r7, #4]
 801029a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801029c:	68f8      	ldr	r0, [r7, #12]
 801029e:	f000 fd53 	bl	8010d48 <ip4_frag>
 80102a2:	4603      	mov	r3, r0
 80102a4:	e006      	b.n	80102b4 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 80102a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80102a8:	695b      	ldr	r3, [r3, #20]
 80102aa:	687a      	ldr	r2, [r7, #4]
 80102ac:	68f9      	ldr	r1, [r7, #12]
 80102ae:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80102b0:	4798      	blx	r3
 80102b2:	4603      	mov	r3, r0
}
 80102b4:	4618      	mov	r0, r3
 80102b6:	3720      	adds	r7, #32
 80102b8:	46bd      	mov	sp, r7
 80102ba:	bd80      	pop	{r7, pc}
 80102bc:	08014d34 	.word	0x08014d34
 80102c0:	08014d68 	.word	0x08014d68
 80102c4:	08014d74 	.word	0x08014d74
 80102c8:	08014d9c 	.word	0x08014d9c
 80102cc:	2000a93a 	.word	0x2000a93a
 80102d0:	0801517c 	.word	0x0801517c

080102d4 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 80102d4:	b480      	push	{r7}
 80102d6:	b085      	sub	sp, #20
 80102d8:	af00      	add	r7, sp, #0
 80102da:	6078      	str	r0, [r7, #4]
 80102dc:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 80102de:	687b      	ldr	r3, [r7, #4]
 80102e0:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 80102e2:	687b      	ldr	r3, [r7, #4]
 80102e4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80102e8:	d002      	beq.n	80102f0 <ip4_addr_isbroadcast_u32+0x1c>
 80102ea:	687b      	ldr	r3, [r7, #4]
 80102ec:	2b00      	cmp	r3, #0
 80102ee:	d101      	bne.n	80102f4 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 80102f0:	2301      	movs	r3, #1
 80102f2:	e02a      	b.n	801034a <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 80102f4:	683b      	ldr	r3, [r7, #0]
 80102f6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80102fa:	f003 0302 	and.w	r3, r3, #2
 80102fe:	2b00      	cmp	r3, #0
 8010300:	d101      	bne.n	8010306 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8010302:	2300      	movs	r3, #0
 8010304:	e021      	b.n	801034a <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8010306:	683b      	ldr	r3, [r7, #0]
 8010308:	3304      	adds	r3, #4
 801030a:	681b      	ldr	r3, [r3, #0]
 801030c:	687a      	ldr	r2, [r7, #4]
 801030e:	429a      	cmp	r2, r3
 8010310:	d101      	bne.n	8010316 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8010312:	2300      	movs	r3, #0
 8010314:	e019      	b.n	801034a <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8010316:	68fa      	ldr	r2, [r7, #12]
 8010318:	683b      	ldr	r3, [r7, #0]
 801031a:	3304      	adds	r3, #4
 801031c:	681b      	ldr	r3, [r3, #0]
 801031e:	405a      	eors	r2, r3
 8010320:	683b      	ldr	r3, [r7, #0]
 8010322:	3308      	adds	r3, #8
 8010324:	681b      	ldr	r3, [r3, #0]
 8010326:	4013      	ands	r3, r2
 8010328:	2b00      	cmp	r3, #0
 801032a:	d10d      	bne.n	8010348 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801032c:	683b      	ldr	r3, [r7, #0]
 801032e:	3308      	adds	r3, #8
 8010330:	681b      	ldr	r3, [r3, #0]
 8010332:	43da      	mvns	r2, r3
 8010334:	687b      	ldr	r3, [r7, #4]
 8010336:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8010338:	683b      	ldr	r3, [r7, #0]
 801033a:	3308      	adds	r3, #8
 801033c:	681b      	ldr	r3, [r3, #0]
 801033e:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8010340:	429a      	cmp	r2, r3
 8010342:	d101      	bne.n	8010348 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8010344:	2301      	movs	r3, #1
 8010346:	e000      	b.n	801034a <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8010348:	2300      	movs	r3, #0
  }
}
 801034a:	4618      	mov	r0, r3
 801034c:	3714      	adds	r7, #20
 801034e:	46bd      	mov	sp, r7
 8010350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010354:	4770      	bx	lr
	...

08010358 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8010358:	b580      	push	{r7, lr}
 801035a:	b084      	sub	sp, #16
 801035c:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801035e:	2300      	movs	r3, #0
 8010360:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8010362:	4b12      	ldr	r3, [pc, #72]	@ (80103ac <ip_reass_tmr+0x54>)
 8010364:	681b      	ldr	r3, [r3, #0]
 8010366:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8010368:	e018      	b.n	801039c <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801036a:	68fb      	ldr	r3, [r7, #12]
 801036c:	7fdb      	ldrb	r3, [r3, #31]
 801036e:	2b00      	cmp	r3, #0
 8010370:	d00b      	beq.n	801038a <ip_reass_tmr+0x32>
      r->timer--;
 8010372:	68fb      	ldr	r3, [r7, #12]
 8010374:	7fdb      	ldrb	r3, [r3, #31]
 8010376:	3b01      	subs	r3, #1
 8010378:	b2da      	uxtb	r2, r3
 801037a:	68fb      	ldr	r3, [r7, #12]
 801037c:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801037e:	68fb      	ldr	r3, [r7, #12]
 8010380:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8010382:	68fb      	ldr	r3, [r7, #12]
 8010384:	681b      	ldr	r3, [r3, #0]
 8010386:	60fb      	str	r3, [r7, #12]
 8010388:	e008      	b.n	801039c <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801038a:	68fb      	ldr	r3, [r7, #12]
 801038c:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801038e:	68fb      	ldr	r3, [r7, #12]
 8010390:	681b      	ldr	r3, [r3, #0]
 8010392:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8010394:	68b9      	ldr	r1, [r7, #8]
 8010396:	6878      	ldr	r0, [r7, #4]
 8010398:	f000 f80a 	bl	80103b0 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 801039c:	68fb      	ldr	r3, [r7, #12]
 801039e:	2b00      	cmp	r3, #0
 80103a0:	d1e3      	bne.n	801036a <ip_reass_tmr+0x12>
    }
  }
}
 80103a2:	bf00      	nop
 80103a4:	bf00      	nop
 80103a6:	3710      	adds	r7, #16
 80103a8:	46bd      	mov	sp, r7
 80103aa:	bd80      	pop	{r7, pc}
 80103ac:	2000a93c 	.word	0x2000a93c

080103b0 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80103b0:	b580      	push	{r7, lr}
 80103b2:	b088      	sub	sp, #32
 80103b4:	af00      	add	r7, sp, #0
 80103b6:	6078      	str	r0, [r7, #4]
 80103b8:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 80103ba:	2300      	movs	r3, #0
 80103bc:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 80103be:	683a      	ldr	r2, [r7, #0]
 80103c0:	687b      	ldr	r3, [r7, #4]
 80103c2:	429a      	cmp	r2, r3
 80103c4:	d105      	bne.n	80103d2 <ip_reass_free_complete_datagram+0x22>
 80103c6:	4b45      	ldr	r3, [pc, #276]	@ (80104dc <ip_reass_free_complete_datagram+0x12c>)
 80103c8:	22ab      	movs	r2, #171	@ 0xab
 80103ca:	4945      	ldr	r1, [pc, #276]	@ (80104e0 <ip_reass_free_complete_datagram+0x130>)
 80103cc:	4845      	ldr	r0, [pc, #276]	@ (80104e4 <ip_reass_free_complete_datagram+0x134>)
 80103ce:	f000 ffd7 	bl	8011380 <iprintf>
  if (prev != NULL) {
 80103d2:	683b      	ldr	r3, [r7, #0]
 80103d4:	2b00      	cmp	r3, #0
 80103d6:	d00a      	beq.n	80103ee <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 80103d8:	683b      	ldr	r3, [r7, #0]
 80103da:	681b      	ldr	r3, [r3, #0]
 80103dc:	687a      	ldr	r2, [r7, #4]
 80103de:	429a      	cmp	r2, r3
 80103e0:	d005      	beq.n	80103ee <ip_reass_free_complete_datagram+0x3e>
 80103e2:	4b3e      	ldr	r3, [pc, #248]	@ (80104dc <ip_reass_free_complete_datagram+0x12c>)
 80103e4:	22ad      	movs	r2, #173	@ 0xad
 80103e6:	4940      	ldr	r1, [pc, #256]	@ (80104e8 <ip_reass_free_complete_datagram+0x138>)
 80103e8:	483e      	ldr	r0, [pc, #248]	@ (80104e4 <ip_reass_free_complete_datagram+0x134>)
 80103ea:	f000 ffc9 	bl	8011380 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 80103ee:	687b      	ldr	r3, [r7, #4]
 80103f0:	685b      	ldr	r3, [r3, #4]
 80103f2:	685b      	ldr	r3, [r3, #4]
 80103f4:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 80103f6:	697b      	ldr	r3, [r7, #20]
 80103f8:	889b      	ldrh	r3, [r3, #4]
 80103fa:	b29b      	uxth	r3, r3
 80103fc:	2b00      	cmp	r3, #0
 80103fe:	d12a      	bne.n	8010456 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	685b      	ldr	r3, [r3, #4]
 8010404:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8010406:	697b      	ldr	r3, [r7, #20]
 8010408:	681a      	ldr	r2, [r3, #0]
 801040a:	687b      	ldr	r3, [r7, #4]
 801040c:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801040e:	69bb      	ldr	r3, [r7, #24]
 8010410:	6858      	ldr	r0, [r3, #4]
 8010412:	687b      	ldr	r3, [r7, #4]
 8010414:	3308      	adds	r3, #8
 8010416:	2214      	movs	r2, #20
 8010418:	4619      	mov	r1, r3
 801041a:	f001 f90c 	bl	8011636 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801041e:	2101      	movs	r1, #1
 8010420:	69b8      	ldr	r0, [r7, #24]
 8010422:	f7ff fc47 	bl	800fcb4 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8010426:	69b8      	ldr	r0, [r7, #24]
 8010428:	f7f7 fa98 	bl	800795c <pbuf_clen>
 801042c:	4603      	mov	r3, r0
 801042e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8010430:	8bfa      	ldrh	r2, [r7, #30]
 8010432:	8a7b      	ldrh	r3, [r7, #18]
 8010434:	4413      	add	r3, r2
 8010436:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801043a:	db05      	blt.n	8010448 <ip_reass_free_complete_datagram+0x98>
 801043c:	4b27      	ldr	r3, [pc, #156]	@ (80104dc <ip_reass_free_complete_datagram+0x12c>)
 801043e:	22bc      	movs	r2, #188	@ 0xbc
 8010440:	492a      	ldr	r1, [pc, #168]	@ (80104ec <ip_reass_free_complete_datagram+0x13c>)
 8010442:	4828      	ldr	r0, [pc, #160]	@ (80104e4 <ip_reass_free_complete_datagram+0x134>)
 8010444:	f000 ff9c 	bl	8011380 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8010448:	8bfa      	ldrh	r2, [r7, #30]
 801044a:	8a7b      	ldrh	r3, [r7, #18]
 801044c:	4413      	add	r3, r2
 801044e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8010450:	69b8      	ldr	r0, [r7, #24]
 8010452:	f7f7 f9fb 	bl	800784c <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8010456:	687b      	ldr	r3, [r7, #4]
 8010458:	685b      	ldr	r3, [r3, #4]
 801045a:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 801045c:	e01f      	b.n	801049e <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801045e:	69bb      	ldr	r3, [r7, #24]
 8010460:	685b      	ldr	r3, [r3, #4]
 8010462:	617b      	str	r3, [r7, #20]
    pcur = p;
 8010464:	69bb      	ldr	r3, [r7, #24]
 8010466:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8010468:	697b      	ldr	r3, [r7, #20]
 801046a:	681b      	ldr	r3, [r3, #0]
 801046c:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801046e:	68f8      	ldr	r0, [r7, #12]
 8010470:	f7f7 fa74 	bl	800795c <pbuf_clen>
 8010474:	4603      	mov	r3, r0
 8010476:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8010478:	8bfa      	ldrh	r2, [r7, #30]
 801047a:	8a7b      	ldrh	r3, [r7, #18]
 801047c:	4413      	add	r3, r2
 801047e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010482:	db05      	blt.n	8010490 <ip_reass_free_complete_datagram+0xe0>
 8010484:	4b15      	ldr	r3, [pc, #84]	@ (80104dc <ip_reass_free_complete_datagram+0x12c>)
 8010486:	22cc      	movs	r2, #204	@ 0xcc
 8010488:	4918      	ldr	r1, [pc, #96]	@ (80104ec <ip_reass_free_complete_datagram+0x13c>)
 801048a:	4816      	ldr	r0, [pc, #88]	@ (80104e4 <ip_reass_free_complete_datagram+0x134>)
 801048c:	f000 ff78 	bl	8011380 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8010490:	8bfa      	ldrh	r2, [r7, #30]
 8010492:	8a7b      	ldrh	r3, [r7, #18]
 8010494:	4413      	add	r3, r2
 8010496:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8010498:	68f8      	ldr	r0, [r7, #12]
 801049a:	f7f7 f9d7 	bl	800784c <pbuf_free>
  while (p != NULL) {
 801049e:	69bb      	ldr	r3, [r7, #24]
 80104a0:	2b00      	cmp	r3, #0
 80104a2:	d1dc      	bne.n	801045e <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 80104a4:	6839      	ldr	r1, [r7, #0]
 80104a6:	6878      	ldr	r0, [r7, #4]
 80104a8:	f000 f8c2 	bl	8010630 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 80104ac:	4b10      	ldr	r3, [pc, #64]	@ (80104f0 <ip_reass_free_complete_datagram+0x140>)
 80104ae:	881b      	ldrh	r3, [r3, #0]
 80104b0:	8bfa      	ldrh	r2, [r7, #30]
 80104b2:	429a      	cmp	r2, r3
 80104b4:	d905      	bls.n	80104c2 <ip_reass_free_complete_datagram+0x112>
 80104b6:	4b09      	ldr	r3, [pc, #36]	@ (80104dc <ip_reass_free_complete_datagram+0x12c>)
 80104b8:	22d2      	movs	r2, #210	@ 0xd2
 80104ba:	490e      	ldr	r1, [pc, #56]	@ (80104f4 <ip_reass_free_complete_datagram+0x144>)
 80104bc:	4809      	ldr	r0, [pc, #36]	@ (80104e4 <ip_reass_free_complete_datagram+0x134>)
 80104be:	f000 ff5f 	bl	8011380 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 80104c2:	4b0b      	ldr	r3, [pc, #44]	@ (80104f0 <ip_reass_free_complete_datagram+0x140>)
 80104c4:	881a      	ldrh	r2, [r3, #0]
 80104c6:	8bfb      	ldrh	r3, [r7, #30]
 80104c8:	1ad3      	subs	r3, r2, r3
 80104ca:	b29a      	uxth	r2, r3
 80104cc:	4b08      	ldr	r3, [pc, #32]	@ (80104f0 <ip_reass_free_complete_datagram+0x140>)
 80104ce:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 80104d0:	8bfb      	ldrh	r3, [r7, #30]
}
 80104d2:	4618      	mov	r0, r3
 80104d4:	3720      	adds	r7, #32
 80104d6:	46bd      	mov	sp, r7
 80104d8:	bd80      	pop	{r7, pc}
 80104da:	bf00      	nop
 80104dc:	08014dcc 	.word	0x08014dcc
 80104e0:	08014e08 	.word	0x08014e08
 80104e4:	08014e14 	.word	0x08014e14
 80104e8:	08014e3c 	.word	0x08014e3c
 80104ec:	08014e50 	.word	0x08014e50
 80104f0:	2000a940 	.word	0x2000a940
 80104f4:	08014e70 	.word	0x08014e70

080104f8 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 80104f8:	b580      	push	{r7, lr}
 80104fa:	b08a      	sub	sp, #40	@ 0x28
 80104fc:	af00      	add	r7, sp, #0
 80104fe:	6078      	str	r0, [r7, #4]
 8010500:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8010502:	2300      	movs	r3, #0
 8010504:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8010506:	2300      	movs	r3, #0
 8010508:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801050a:	2300      	movs	r3, #0
 801050c:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801050e:	2300      	movs	r3, #0
 8010510:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8010512:	2300      	movs	r3, #0
 8010514:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8010516:	4b28      	ldr	r3, [pc, #160]	@ (80105b8 <ip_reass_remove_oldest_datagram+0xc0>)
 8010518:	681b      	ldr	r3, [r3, #0]
 801051a:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 801051c:	e030      	b.n	8010580 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801051e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010520:	695a      	ldr	r2, [r3, #20]
 8010522:	687b      	ldr	r3, [r7, #4]
 8010524:	68db      	ldr	r3, [r3, #12]
 8010526:	429a      	cmp	r2, r3
 8010528:	d10c      	bne.n	8010544 <ip_reass_remove_oldest_datagram+0x4c>
 801052a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801052c:	699a      	ldr	r2, [r3, #24]
 801052e:	687b      	ldr	r3, [r7, #4]
 8010530:	691b      	ldr	r3, [r3, #16]
 8010532:	429a      	cmp	r2, r3
 8010534:	d106      	bne.n	8010544 <ip_reass_remove_oldest_datagram+0x4c>
 8010536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010538:	899a      	ldrh	r2, [r3, #12]
 801053a:	687b      	ldr	r3, [r7, #4]
 801053c:	889b      	ldrh	r3, [r3, #4]
 801053e:	b29b      	uxth	r3, r3
 8010540:	429a      	cmp	r2, r3
 8010542:	d014      	beq.n	801056e <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8010544:	693b      	ldr	r3, [r7, #16]
 8010546:	3301      	adds	r3, #1
 8010548:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801054a:	6a3b      	ldr	r3, [r7, #32]
 801054c:	2b00      	cmp	r3, #0
 801054e:	d104      	bne.n	801055a <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8010550:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010552:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8010554:	69fb      	ldr	r3, [r7, #28]
 8010556:	61bb      	str	r3, [r7, #24]
 8010558:	e009      	b.n	801056e <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801055a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801055c:	7fda      	ldrb	r2, [r3, #31]
 801055e:	6a3b      	ldr	r3, [r7, #32]
 8010560:	7fdb      	ldrb	r3, [r3, #31]
 8010562:	429a      	cmp	r2, r3
 8010564:	d803      	bhi.n	801056e <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8010566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010568:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801056a:	69fb      	ldr	r3, [r7, #28]
 801056c:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801056e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010570:	681b      	ldr	r3, [r3, #0]
 8010572:	2b00      	cmp	r3, #0
 8010574:	d001      	beq.n	801057a <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8010576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010578:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801057a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801057c:	681b      	ldr	r3, [r3, #0]
 801057e:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 8010580:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010582:	2b00      	cmp	r3, #0
 8010584:	d1cb      	bne.n	801051e <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8010586:	6a3b      	ldr	r3, [r7, #32]
 8010588:	2b00      	cmp	r3, #0
 801058a:	d008      	beq.n	801059e <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 801058c:	69b9      	ldr	r1, [r7, #24]
 801058e:	6a38      	ldr	r0, [r7, #32]
 8010590:	f7ff ff0e 	bl	80103b0 <ip_reass_free_complete_datagram>
 8010594:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8010596:	697a      	ldr	r2, [r7, #20]
 8010598:	68fb      	ldr	r3, [r7, #12]
 801059a:	4413      	add	r3, r2
 801059c:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801059e:	697a      	ldr	r2, [r7, #20]
 80105a0:	683b      	ldr	r3, [r7, #0]
 80105a2:	429a      	cmp	r2, r3
 80105a4:	da02      	bge.n	80105ac <ip_reass_remove_oldest_datagram+0xb4>
 80105a6:	693b      	ldr	r3, [r7, #16]
 80105a8:	2b01      	cmp	r3, #1
 80105aa:	dcac      	bgt.n	8010506 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 80105ac:	697b      	ldr	r3, [r7, #20]
}
 80105ae:	4618      	mov	r0, r3
 80105b0:	3728      	adds	r7, #40	@ 0x28
 80105b2:	46bd      	mov	sp, r7
 80105b4:	bd80      	pop	{r7, pc}
 80105b6:	bf00      	nop
 80105b8:	2000a93c 	.word	0x2000a93c

080105bc <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 80105bc:	b580      	push	{r7, lr}
 80105be:	b084      	sub	sp, #16
 80105c0:	af00      	add	r7, sp, #0
 80105c2:	6078      	str	r0, [r7, #4]
 80105c4:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80105c6:	2004      	movs	r0, #4
 80105c8:	f7f6 fa5a 	bl	8006a80 <memp_malloc>
 80105cc:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 80105ce:	68fb      	ldr	r3, [r7, #12]
 80105d0:	2b00      	cmp	r3, #0
 80105d2:	d110      	bne.n	80105f6 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 80105d4:	6839      	ldr	r1, [r7, #0]
 80105d6:	6878      	ldr	r0, [r7, #4]
 80105d8:	f7ff ff8e 	bl	80104f8 <ip_reass_remove_oldest_datagram>
 80105dc:	4602      	mov	r2, r0
 80105de:	683b      	ldr	r3, [r7, #0]
 80105e0:	4293      	cmp	r3, r2
 80105e2:	dc03      	bgt.n	80105ec <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80105e4:	2004      	movs	r0, #4
 80105e6:	f7f6 fa4b 	bl	8006a80 <memp_malloc>
 80105ea:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 80105ec:	68fb      	ldr	r3, [r7, #12]
 80105ee:	2b00      	cmp	r3, #0
 80105f0:	d101      	bne.n	80105f6 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 80105f2:	2300      	movs	r3, #0
 80105f4:	e016      	b.n	8010624 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 80105f6:	2220      	movs	r2, #32
 80105f8:	2100      	movs	r1, #0
 80105fa:	68f8      	ldr	r0, [r7, #12]
 80105fc:	f000 ff93 	bl	8011526 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8010600:	68fb      	ldr	r3, [r7, #12]
 8010602:	220f      	movs	r2, #15
 8010604:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8010606:	4b09      	ldr	r3, [pc, #36]	@ (801062c <ip_reass_enqueue_new_datagram+0x70>)
 8010608:	681a      	ldr	r2, [r3, #0]
 801060a:	68fb      	ldr	r3, [r7, #12]
 801060c:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801060e:	4a07      	ldr	r2, [pc, #28]	@ (801062c <ip_reass_enqueue_new_datagram+0x70>)
 8010610:	68fb      	ldr	r3, [r7, #12]
 8010612:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8010614:	68fb      	ldr	r3, [r7, #12]
 8010616:	3308      	adds	r3, #8
 8010618:	2214      	movs	r2, #20
 801061a:	6879      	ldr	r1, [r7, #4]
 801061c:	4618      	mov	r0, r3
 801061e:	f001 f80a 	bl	8011636 <memcpy>
  return ipr;
 8010622:	68fb      	ldr	r3, [r7, #12]
}
 8010624:	4618      	mov	r0, r3
 8010626:	3710      	adds	r7, #16
 8010628:	46bd      	mov	sp, r7
 801062a:	bd80      	pop	{r7, pc}
 801062c:	2000a93c 	.word	0x2000a93c

08010630 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8010630:	b580      	push	{r7, lr}
 8010632:	b082      	sub	sp, #8
 8010634:	af00      	add	r7, sp, #0
 8010636:	6078      	str	r0, [r7, #4]
 8010638:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801063a:	4b10      	ldr	r3, [pc, #64]	@ (801067c <ip_reass_dequeue_datagram+0x4c>)
 801063c:	681b      	ldr	r3, [r3, #0]
 801063e:	687a      	ldr	r2, [r7, #4]
 8010640:	429a      	cmp	r2, r3
 8010642:	d104      	bne.n	801064e <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8010644:	687b      	ldr	r3, [r7, #4]
 8010646:	681b      	ldr	r3, [r3, #0]
 8010648:	4a0c      	ldr	r2, [pc, #48]	@ (801067c <ip_reass_dequeue_datagram+0x4c>)
 801064a:	6013      	str	r3, [r2, #0]
 801064c:	e00d      	b.n	801066a <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801064e:	683b      	ldr	r3, [r7, #0]
 8010650:	2b00      	cmp	r3, #0
 8010652:	d106      	bne.n	8010662 <ip_reass_dequeue_datagram+0x32>
 8010654:	4b0a      	ldr	r3, [pc, #40]	@ (8010680 <ip_reass_dequeue_datagram+0x50>)
 8010656:	f240 1245 	movw	r2, #325	@ 0x145
 801065a:	490a      	ldr	r1, [pc, #40]	@ (8010684 <ip_reass_dequeue_datagram+0x54>)
 801065c:	480a      	ldr	r0, [pc, #40]	@ (8010688 <ip_reass_dequeue_datagram+0x58>)
 801065e:	f000 fe8f 	bl	8011380 <iprintf>
    prev->next = ipr->next;
 8010662:	687b      	ldr	r3, [r7, #4]
 8010664:	681a      	ldr	r2, [r3, #0]
 8010666:	683b      	ldr	r3, [r7, #0]
 8010668:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801066a:	6879      	ldr	r1, [r7, #4]
 801066c:	2004      	movs	r0, #4
 801066e:	f7f6 fa77 	bl	8006b60 <memp_free>
}
 8010672:	bf00      	nop
 8010674:	3708      	adds	r7, #8
 8010676:	46bd      	mov	sp, r7
 8010678:	bd80      	pop	{r7, pc}
 801067a:	bf00      	nop
 801067c:	2000a93c 	.word	0x2000a93c
 8010680:	08014dcc 	.word	0x08014dcc
 8010684:	08014e94 	.word	0x08014e94
 8010688:	08014e14 	.word	0x08014e14

0801068c <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 801068c:	b580      	push	{r7, lr}
 801068e:	b08c      	sub	sp, #48	@ 0x30
 8010690:	af00      	add	r7, sp, #0
 8010692:	60f8      	str	r0, [r7, #12]
 8010694:	60b9      	str	r1, [r7, #8]
 8010696:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8010698:	2300      	movs	r3, #0
 801069a:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 801069c:	2301      	movs	r3, #1
 801069e:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 80106a0:	68bb      	ldr	r3, [r7, #8]
 80106a2:	685b      	ldr	r3, [r3, #4]
 80106a4:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80106a6:	69fb      	ldr	r3, [r7, #28]
 80106a8:	885b      	ldrh	r3, [r3, #2]
 80106aa:	b29b      	uxth	r3, r3
 80106ac:	4618      	mov	r0, r3
 80106ae:	f7f5 fd6f 	bl	8006190 <lwip_htons>
 80106b2:	4603      	mov	r3, r0
 80106b4:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 80106b6:	69fb      	ldr	r3, [r7, #28]
 80106b8:	781b      	ldrb	r3, [r3, #0]
 80106ba:	f003 030f 	and.w	r3, r3, #15
 80106be:	b2db      	uxtb	r3, r3
 80106c0:	009b      	lsls	r3, r3, #2
 80106c2:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 80106c4:	7e7b      	ldrb	r3, [r7, #25]
 80106c6:	b29b      	uxth	r3, r3
 80106c8:	8b7a      	ldrh	r2, [r7, #26]
 80106ca:	429a      	cmp	r2, r3
 80106cc:	d202      	bcs.n	80106d4 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80106ce:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80106d2:	e135      	b.n	8010940 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 80106d4:	7e7b      	ldrb	r3, [r7, #25]
 80106d6:	b29b      	uxth	r3, r3
 80106d8:	8b7a      	ldrh	r2, [r7, #26]
 80106da:	1ad3      	subs	r3, r2, r3
 80106dc:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 80106de:	69fb      	ldr	r3, [r7, #28]
 80106e0:	88db      	ldrh	r3, [r3, #6]
 80106e2:	b29b      	uxth	r3, r3
 80106e4:	4618      	mov	r0, r3
 80106e6:	f7f5 fd53 	bl	8006190 <lwip_htons>
 80106ea:	4603      	mov	r3, r0
 80106ec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80106f0:	b29b      	uxth	r3, r3
 80106f2:	00db      	lsls	r3, r3, #3
 80106f4:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 80106f6:	68bb      	ldr	r3, [r7, #8]
 80106f8:	685b      	ldr	r3, [r3, #4]
 80106fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 80106fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80106fe:	2200      	movs	r2, #0
 8010700:	701a      	strb	r2, [r3, #0]
 8010702:	2200      	movs	r2, #0
 8010704:	705a      	strb	r2, [r3, #1]
 8010706:	2200      	movs	r2, #0
 8010708:	709a      	strb	r2, [r3, #2]
 801070a:	2200      	movs	r2, #0
 801070c:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801070e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010710:	8afa      	ldrh	r2, [r7, #22]
 8010712:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8010714:	8afa      	ldrh	r2, [r7, #22]
 8010716:	8b7b      	ldrh	r3, [r7, #26]
 8010718:	4413      	add	r3, r2
 801071a:	b29a      	uxth	r2, r3
 801071c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801071e:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8010720:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010722:	88db      	ldrh	r3, [r3, #6]
 8010724:	b29b      	uxth	r3, r3
 8010726:	8afa      	ldrh	r2, [r7, #22]
 8010728:	429a      	cmp	r2, r3
 801072a:	d902      	bls.n	8010732 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801072c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8010730:	e106      	b.n	8010940 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8010732:	68fb      	ldr	r3, [r7, #12]
 8010734:	685b      	ldr	r3, [r3, #4]
 8010736:	627b      	str	r3, [r7, #36]	@ 0x24
 8010738:	e068      	b.n	801080c <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801073a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801073c:	685b      	ldr	r3, [r3, #4]
 801073e:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8010740:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010742:	889b      	ldrh	r3, [r3, #4]
 8010744:	b29a      	uxth	r2, r3
 8010746:	693b      	ldr	r3, [r7, #16]
 8010748:	889b      	ldrh	r3, [r3, #4]
 801074a:	b29b      	uxth	r3, r3
 801074c:	429a      	cmp	r2, r3
 801074e:	d235      	bcs.n	80107bc <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8010750:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010752:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010754:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8010756:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010758:	2b00      	cmp	r3, #0
 801075a:	d020      	beq.n	801079e <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801075c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801075e:	889b      	ldrh	r3, [r3, #4]
 8010760:	b29a      	uxth	r2, r3
 8010762:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010764:	88db      	ldrh	r3, [r3, #6]
 8010766:	b29b      	uxth	r3, r3
 8010768:	429a      	cmp	r2, r3
 801076a:	d307      	bcc.n	801077c <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 801076c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801076e:	88db      	ldrh	r3, [r3, #6]
 8010770:	b29a      	uxth	r2, r3
 8010772:	693b      	ldr	r3, [r7, #16]
 8010774:	889b      	ldrh	r3, [r3, #4]
 8010776:	b29b      	uxth	r3, r3
 8010778:	429a      	cmp	r2, r3
 801077a:	d902      	bls.n	8010782 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801077c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8010780:	e0de      	b.n	8010940 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8010782:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010784:	68ba      	ldr	r2, [r7, #8]
 8010786:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8010788:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801078a:	88db      	ldrh	r3, [r3, #6]
 801078c:	b29a      	uxth	r2, r3
 801078e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010790:	889b      	ldrh	r3, [r3, #4]
 8010792:	b29b      	uxth	r3, r3
 8010794:	429a      	cmp	r2, r3
 8010796:	d03d      	beq.n	8010814 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8010798:	2300      	movs	r3, #0
 801079a:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 801079c:	e03a      	b.n	8010814 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801079e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80107a0:	88db      	ldrh	r3, [r3, #6]
 80107a2:	b29a      	uxth	r2, r3
 80107a4:	693b      	ldr	r3, [r7, #16]
 80107a6:	889b      	ldrh	r3, [r3, #4]
 80107a8:	b29b      	uxth	r3, r3
 80107aa:	429a      	cmp	r2, r3
 80107ac:	d902      	bls.n	80107b4 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80107ae:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80107b2:	e0c5      	b.n	8010940 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 80107b4:	68fb      	ldr	r3, [r7, #12]
 80107b6:	68ba      	ldr	r2, [r7, #8]
 80107b8:	605a      	str	r2, [r3, #4]
      break;
 80107ba:	e02b      	b.n	8010814 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 80107bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80107be:	889b      	ldrh	r3, [r3, #4]
 80107c0:	b29a      	uxth	r2, r3
 80107c2:	693b      	ldr	r3, [r7, #16]
 80107c4:	889b      	ldrh	r3, [r3, #4]
 80107c6:	b29b      	uxth	r3, r3
 80107c8:	429a      	cmp	r2, r3
 80107ca:	d102      	bne.n	80107d2 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80107cc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80107d0:	e0b6      	b.n	8010940 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 80107d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80107d4:	889b      	ldrh	r3, [r3, #4]
 80107d6:	b29a      	uxth	r2, r3
 80107d8:	693b      	ldr	r3, [r7, #16]
 80107da:	88db      	ldrh	r3, [r3, #6]
 80107dc:	b29b      	uxth	r3, r3
 80107de:	429a      	cmp	r2, r3
 80107e0:	d202      	bcs.n	80107e8 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80107e2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80107e6:	e0ab      	b.n	8010940 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 80107e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80107ea:	2b00      	cmp	r3, #0
 80107ec:	d009      	beq.n	8010802 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 80107ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80107f0:	88db      	ldrh	r3, [r3, #6]
 80107f2:	b29a      	uxth	r2, r3
 80107f4:	693b      	ldr	r3, [r7, #16]
 80107f6:	889b      	ldrh	r3, [r3, #4]
 80107f8:	b29b      	uxth	r3, r3
 80107fa:	429a      	cmp	r2, r3
 80107fc:	d001      	beq.n	8010802 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80107fe:	2300      	movs	r3, #0
 8010800:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8010802:	693b      	ldr	r3, [r7, #16]
 8010804:	681b      	ldr	r3, [r3, #0]
 8010806:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 8010808:	693b      	ldr	r3, [r7, #16]
 801080a:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 801080c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801080e:	2b00      	cmp	r3, #0
 8010810:	d193      	bne.n	801073a <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8010812:	e000      	b.n	8010816 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8010814:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8010816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010818:	2b00      	cmp	r3, #0
 801081a:	d12d      	bne.n	8010878 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 801081c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801081e:	2b00      	cmp	r3, #0
 8010820:	d01c      	beq.n	801085c <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8010822:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010824:	88db      	ldrh	r3, [r3, #6]
 8010826:	b29a      	uxth	r2, r3
 8010828:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801082a:	889b      	ldrh	r3, [r3, #4]
 801082c:	b29b      	uxth	r3, r3
 801082e:	429a      	cmp	r2, r3
 8010830:	d906      	bls.n	8010840 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8010832:	4b45      	ldr	r3, [pc, #276]	@ (8010948 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8010834:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 8010838:	4944      	ldr	r1, [pc, #272]	@ (801094c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801083a:	4845      	ldr	r0, [pc, #276]	@ (8010950 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801083c:	f000 fda0 	bl	8011380 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8010840:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010842:	68ba      	ldr	r2, [r7, #8]
 8010844:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8010846:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010848:	88db      	ldrh	r3, [r3, #6]
 801084a:	b29a      	uxth	r2, r3
 801084c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801084e:	889b      	ldrh	r3, [r3, #4]
 8010850:	b29b      	uxth	r3, r3
 8010852:	429a      	cmp	r2, r3
 8010854:	d010      	beq.n	8010878 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8010856:	2300      	movs	r3, #0
 8010858:	623b      	str	r3, [r7, #32]
 801085a:	e00d      	b.n	8010878 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801085c:	68fb      	ldr	r3, [r7, #12]
 801085e:	685b      	ldr	r3, [r3, #4]
 8010860:	2b00      	cmp	r3, #0
 8010862:	d006      	beq.n	8010872 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8010864:	4b38      	ldr	r3, [pc, #224]	@ (8010948 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8010866:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 801086a:	493a      	ldr	r1, [pc, #232]	@ (8010954 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801086c:	4838      	ldr	r0, [pc, #224]	@ (8010950 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801086e:	f000 fd87 	bl	8011380 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8010872:	68fb      	ldr	r3, [r7, #12]
 8010874:	68ba      	ldr	r2, [r7, #8]
 8010876:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8010878:	687b      	ldr	r3, [r7, #4]
 801087a:	2b00      	cmp	r3, #0
 801087c:	d105      	bne.n	801088a <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801087e:	68fb      	ldr	r3, [r7, #12]
 8010880:	7f9b      	ldrb	r3, [r3, #30]
 8010882:	f003 0301 	and.w	r3, r3, #1
 8010886:	2b00      	cmp	r3, #0
 8010888:	d059      	beq.n	801093e <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801088a:	6a3b      	ldr	r3, [r7, #32]
 801088c:	2b00      	cmp	r3, #0
 801088e:	d04f      	beq.n	8010930 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8010890:	68fb      	ldr	r3, [r7, #12]
 8010892:	685b      	ldr	r3, [r3, #4]
 8010894:	2b00      	cmp	r3, #0
 8010896:	d006      	beq.n	80108a6 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8010898:	68fb      	ldr	r3, [r7, #12]
 801089a:	685b      	ldr	r3, [r3, #4]
 801089c:	685b      	ldr	r3, [r3, #4]
 801089e:	889b      	ldrh	r3, [r3, #4]
 80108a0:	b29b      	uxth	r3, r3
 80108a2:	2b00      	cmp	r3, #0
 80108a4:	d002      	beq.n	80108ac <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 80108a6:	2300      	movs	r3, #0
 80108a8:	623b      	str	r3, [r7, #32]
 80108aa:	e041      	b.n	8010930 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 80108ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80108ae:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 80108b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80108b2:	681b      	ldr	r3, [r3, #0]
 80108b4:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 80108b6:	e012      	b.n	80108de <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 80108b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80108ba:	685b      	ldr	r3, [r3, #4]
 80108bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 80108be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80108c0:	88db      	ldrh	r3, [r3, #6]
 80108c2:	b29a      	uxth	r2, r3
 80108c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80108c6:	889b      	ldrh	r3, [r3, #4]
 80108c8:	b29b      	uxth	r3, r3
 80108ca:	429a      	cmp	r2, r3
 80108cc:	d002      	beq.n	80108d4 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 80108ce:	2300      	movs	r3, #0
 80108d0:	623b      	str	r3, [r7, #32]
            break;
 80108d2:	e007      	b.n	80108e4 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 80108d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80108d6:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 80108d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80108da:	681b      	ldr	r3, [r3, #0]
 80108dc:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 80108de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80108e0:	2b00      	cmp	r3, #0
 80108e2:	d1e9      	bne.n	80108b8 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 80108e4:	6a3b      	ldr	r3, [r7, #32]
 80108e6:	2b00      	cmp	r3, #0
 80108e8:	d022      	beq.n	8010930 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 80108ea:	68fb      	ldr	r3, [r7, #12]
 80108ec:	685b      	ldr	r3, [r3, #4]
 80108ee:	2b00      	cmp	r3, #0
 80108f0:	d106      	bne.n	8010900 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 80108f2:	4b15      	ldr	r3, [pc, #84]	@ (8010948 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80108f4:	f240 12df 	movw	r2, #479	@ 0x1df
 80108f8:	4917      	ldr	r1, [pc, #92]	@ (8010958 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80108fa:	4815      	ldr	r0, [pc, #84]	@ (8010950 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80108fc:	f000 fd40 	bl	8011380 <iprintf>
          LWIP_ASSERT("sanity check",
 8010900:	68fb      	ldr	r3, [r7, #12]
 8010902:	685b      	ldr	r3, [r3, #4]
 8010904:	685b      	ldr	r3, [r3, #4]
 8010906:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010908:	429a      	cmp	r2, r3
 801090a:	d106      	bne.n	801091a <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 801090c:	4b0e      	ldr	r3, [pc, #56]	@ (8010948 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801090e:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8010912:	4911      	ldr	r1, [pc, #68]	@ (8010958 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8010914:	480e      	ldr	r0, [pc, #56]	@ (8010950 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8010916:	f000 fd33 	bl	8011380 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801091a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801091c:	681b      	ldr	r3, [r3, #0]
 801091e:	2b00      	cmp	r3, #0
 8010920:	d006      	beq.n	8010930 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8010922:	4b09      	ldr	r3, [pc, #36]	@ (8010948 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8010924:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 8010928:	490c      	ldr	r1, [pc, #48]	@ (801095c <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801092a:	4809      	ldr	r0, [pc, #36]	@ (8010950 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801092c:	f000 fd28 	bl	8011380 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8010930:	6a3b      	ldr	r3, [r7, #32]
 8010932:	2b00      	cmp	r3, #0
 8010934:	bf14      	ite	ne
 8010936:	2301      	movne	r3, #1
 8010938:	2300      	moveq	r3, #0
 801093a:	b2db      	uxtb	r3, r3
 801093c:	e000      	b.n	8010940 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801093e:	2300      	movs	r3, #0
}
 8010940:	4618      	mov	r0, r3
 8010942:	3730      	adds	r7, #48	@ 0x30
 8010944:	46bd      	mov	sp, r7
 8010946:	bd80      	pop	{r7, pc}
 8010948:	08014dcc 	.word	0x08014dcc
 801094c:	08014eb0 	.word	0x08014eb0
 8010950:	08014e14 	.word	0x08014e14
 8010954:	08014ed0 	.word	0x08014ed0
 8010958:	08014f08 	.word	0x08014f08
 801095c:	08014f18 	.word	0x08014f18

08010960 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8010960:	b580      	push	{r7, lr}
 8010962:	b08e      	sub	sp, #56	@ 0x38
 8010964:	af00      	add	r7, sp, #0
 8010966:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8010968:	687b      	ldr	r3, [r7, #4]
 801096a:	685b      	ldr	r3, [r3, #4]
 801096c:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801096e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010970:	781b      	ldrb	r3, [r3, #0]
 8010972:	f003 030f 	and.w	r3, r3, #15
 8010976:	b2db      	uxtb	r3, r3
 8010978:	009b      	lsls	r3, r3, #2
 801097a:	b2db      	uxtb	r3, r3
 801097c:	2b14      	cmp	r3, #20
 801097e:	f040 8171 	bne.w	8010c64 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8010982:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010984:	88db      	ldrh	r3, [r3, #6]
 8010986:	b29b      	uxth	r3, r3
 8010988:	4618      	mov	r0, r3
 801098a:	f7f5 fc01 	bl	8006190 <lwip_htons>
 801098e:	4603      	mov	r3, r0
 8010990:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010994:	b29b      	uxth	r3, r3
 8010996:	00db      	lsls	r3, r3, #3
 8010998:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801099a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801099c:	885b      	ldrh	r3, [r3, #2]
 801099e:	b29b      	uxth	r3, r3
 80109a0:	4618      	mov	r0, r3
 80109a2:	f7f5 fbf5 	bl	8006190 <lwip_htons>
 80109a6:	4603      	mov	r3, r0
 80109a8:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 80109aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80109ac:	781b      	ldrb	r3, [r3, #0]
 80109ae:	f003 030f 	and.w	r3, r3, #15
 80109b2:	b2db      	uxtb	r3, r3
 80109b4:	009b      	lsls	r3, r3, #2
 80109b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 80109ba:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80109be:	b29b      	uxth	r3, r3
 80109c0:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80109c2:	429a      	cmp	r2, r3
 80109c4:	f0c0 8150 	bcc.w	8010c68 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 80109c8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80109cc:	b29b      	uxth	r3, r3
 80109ce:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80109d0:	1ad3      	subs	r3, r2, r3
 80109d2:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 80109d4:	6878      	ldr	r0, [r7, #4]
 80109d6:	f7f6 ffc1 	bl	800795c <pbuf_clen>
 80109da:	4603      	mov	r3, r0
 80109dc:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80109de:	4b8c      	ldr	r3, [pc, #560]	@ (8010c10 <ip4_reass+0x2b0>)
 80109e0:	881b      	ldrh	r3, [r3, #0]
 80109e2:	461a      	mov	r2, r3
 80109e4:	8c3b      	ldrh	r3, [r7, #32]
 80109e6:	4413      	add	r3, r2
 80109e8:	2b0a      	cmp	r3, #10
 80109ea:	dd10      	ble.n	8010a0e <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80109ec:	8c3b      	ldrh	r3, [r7, #32]
 80109ee:	4619      	mov	r1, r3
 80109f0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80109f2:	f7ff fd81 	bl	80104f8 <ip_reass_remove_oldest_datagram>
 80109f6:	4603      	mov	r3, r0
 80109f8:	2b00      	cmp	r3, #0
 80109fa:	f000 8137 	beq.w	8010c6c <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 80109fe:	4b84      	ldr	r3, [pc, #528]	@ (8010c10 <ip4_reass+0x2b0>)
 8010a00:	881b      	ldrh	r3, [r3, #0]
 8010a02:	461a      	mov	r2, r3
 8010a04:	8c3b      	ldrh	r3, [r7, #32]
 8010a06:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8010a08:	2b0a      	cmp	r3, #10
 8010a0a:	f300 812f 	bgt.w	8010c6c <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8010a0e:	4b81      	ldr	r3, [pc, #516]	@ (8010c14 <ip4_reass+0x2b4>)
 8010a10:	681b      	ldr	r3, [r3, #0]
 8010a12:	633b      	str	r3, [r7, #48]	@ 0x30
 8010a14:	e015      	b.n	8010a42 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8010a16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010a18:	695a      	ldr	r2, [r3, #20]
 8010a1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010a1c:	68db      	ldr	r3, [r3, #12]
 8010a1e:	429a      	cmp	r2, r3
 8010a20:	d10c      	bne.n	8010a3c <ip4_reass+0xdc>
 8010a22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010a24:	699a      	ldr	r2, [r3, #24]
 8010a26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010a28:	691b      	ldr	r3, [r3, #16]
 8010a2a:	429a      	cmp	r2, r3
 8010a2c:	d106      	bne.n	8010a3c <ip4_reass+0xdc>
 8010a2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010a30:	899a      	ldrh	r2, [r3, #12]
 8010a32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010a34:	889b      	ldrh	r3, [r3, #4]
 8010a36:	b29b      	uxth	r3, r3
 8010a38:	429a      	cmp	r2, r3
 8010a3a:	d006      	beq.n	8010a4a <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8010a3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010a3e:	681b      	ldr	r3, [r3, #0]
 8010a40:	633b      	str	r3, [r7, #48]	@ 0x30
 8010a42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010a44:	2b00      	cmp	r3, #0
 8010a46:	d1e6      	bne.n	8010a16 <ip4_reass+0xb6>
 8010a48:	e000      	b.n	8010a4c <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8010a4a:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8010a4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010a4e:	2b00      	cmp	r3, #0
 8010a50:	d109      	bne.n	8010a66 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8010a52:	8c3b      	ldrh	r3, [r7, #32]
 8010a54:	4619      	mov	r1, r3
 8010a56:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010a58:	f7ff fdb0 	bl	80105bc <ip_reass_enqueue_new_datagram>
 8010a5c:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8010a5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010a60:	2b00      	cmp	r3, #0
 8010a62:	d11c      	bne.n	8010a9e <ip4_reass+0x13e>
      goto nullreturn;
 8010a64:	e105      	b.n	8010c72 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8010a66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010a68:	88db      	ldrh	r3, [r3, #6]
 8010a6a:	b29b      	uxth	r3, r3
 8010a6c:	4618      	mov	r0, r3
 8010a6e:	f7f5 fb8f 	bl	8006190 <lwip_htons>
 8010a72:	4603      	mov	r3, r0
 8010a74:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010a78:	2b00      	cmp	r3, #0
 8010a7a:	d110      	bne.n	8010a9e <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8010a7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010a7e:	89db      	ldrh	r3, [r3, #14]
 8010a80:	4618      	mov	r0, r3
 8010a82:	f7f5 fb85 	bl	8006190 <lwip_htons>
 8010a86:	4603      	mov	r3, r0
 8010a88:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8010a8c:	2b00      	cmp	r3, #0
 8010a8e:	d006      	beq.n	8010a9e <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8010a90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010a92:	3308      	adds	r3, #8
 8010a94:	2214      	movs	r2, #20
 8010a96:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010a98:	4618      	mov	r0, r3
 8010a9a:	f000 fdcc 	bl	8011636 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8010a9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010aa0:	88db      	ldrh	r3, [r3, #6]
 8010aa2:	b29b      	uxth	r3, r3
 8010aa4:	f003 0320 	and.w	r3, r3, #32
 8010aa8:	2b00      	cmp	r3, #0
 8010aaa:	bf0c      	ite	eq
 8010aac:	2301      	moveq	r3, #1
 8010aae:	2300      	movne	r3, #0
 8010ab0:	b2db      	uxtb	r3, r3
 8010ab2:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8010ab4:	69fb      	ldr	r3, [r7, #28]
 8010ab6:	2b00      	cmp	r3, #0
 8010ab8:	d00e      	beq.n	8010ad8 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8010aba:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8010abc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010abe:	4413      	add	r3, r2
 8010ac0:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8010ac2:	8b7a      	ldrh	r2, [r7, #26]
 8010ac4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8010ac6:	429a      	cmp	r2, r3
 8010ac8:	f0c0 80a0 	bcc.w	8010c0c <ip4_reass+0x2ac>
 8010acc:	8b7b      	ldrh	r3, [r7, #26]
 8010ace:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 8010ad2:	4293      	cmp	r3, r2
 8010ad4:	f200 809a 	bhi.w	8010c0c <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8010ad8:	69fa      	ldr	r2, [r7, #28]
 8010ada:	6879      	ldr	r1, [r7, #4]
 8010adc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8010ade:	f7ff fdd5 	bl	801068c <ip_reass_chain_frag_into_datagram_and_validate>
 8010ae2:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8010ae4:	697b      	ldr	r3, [r7, #20]
 8010ae6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8010aea:	f000 809b 	beq.w	8010c24 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8010aee:	4b48      	ldr	r3, [pc, #288]	@ (8010c10 <ip4_reass+0x2b0>)
 8010af0:	881a      	ldrh	r2, [r3, #0]
 8010af2:	8c3b      	ldrh	r3, [r7, #32]
 8010af4:	4413      	add	r3, r2
 8010af6:	b29a      	uxth	r2, r3
 8010af8:	4b45      	ldr	r3, [pc, #276]	@ (8010c10 <ip4_reass+0x2b0>)
 8010afa:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8010afc:	69fb      	ldr	r3, [r7, #28]
 8010afe:	2b00      	cmp	r3, #0
 8010b00:	d00d      	beq.n	8010b1e <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8010b02:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8010b04:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010b06:	4413      	add	r3, r2
 8010b08:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8010b0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010b0c:	8a7a      	ldrh	r2, [r7, #18]
 8010b0e:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8010b10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010b12:	7f9b      	ldrb	r3, [r3, #30]
 8010b14:	f043 0301 	orr.w	r3, r3, #1
 8010b18:	b2da      	uxtb	r2, r3
 8010b1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010b1c:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8010b1e:	697b      	ldr	r3, [r7, #20]
 8010b20:	2b01      	cmp	r3, #1
 8010b22:	d171      	bne.n	8010c08 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8010b24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010b26:	8b9b      	ldrh	r3, [r3, #28]
 8010b28:	3314      	adds	r3, #20
 8010b2a:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8010b2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010b2e:	685b      	ldr	r3, [r3, #4]
 8010b30:	685b      	ldr	r3, [r3, #4]
 8010b32:	681b      	ldr	r3, [r3, #0]
 8010b34:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8010b36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010b38:	685b      	ldr	r3, [r3, #4]
 8010b3a:	685b      	ldr	r3, [r3, #4]
 8010b3c:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8010b3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010b40:	3308      	adds	r3, #8
 8010b42:	2214      	movs	r2, #20
 8010b44:	4619      	mov	r1, r3
 8010b46:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010b48:	f000 fd75 	bl	8011636 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8010b4c:	8a3b      	ldrh	r3, [r7, #16]
 8010b4e:	4618      	mov	r0, r3
 8010b50:	f7f5 fb1e 	bl	8006190 <lwip_htons>
 8010b54:	4603      	mov	r3, r0
 8010b56:	461a      	mov	r2, r3
 8010b58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010b5a:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8010b5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010b5e:	2200      	movs	r2, #0
 8010b60:	719a      	strb	r2, [r3, #6]
 8010b62:	2200      	movs	r2, #0
 8010b64:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8010b66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010b68:	2200      	movs	r2, #0
 8010b6a:	729a      	strb	r2, [r3, #10]
 8010b6c:	2200      	movs	r2, #0
 8010b6e:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8010b70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010b72:	685b      	ldr	r3, [r3, #4]
 8010b74:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8010b76:	e00d      	b.n	8010b94 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8010b78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010b7a:	685b      	ldr	r3, [r3, #4]
 8010b7c:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8010b7e:	2114      	movs	r1, #20
 8010b80:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8010b82:	f7f6 fddd 	bl	8007740 <pbuf_remove_header>
      pbuf_cat(p, r);
 8010b86:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8010b88:	6878      	ldr	r0, [r7, #4]
 8010b8a:	f7f6 ff21 	bl	80079d0 <pbuf_cat>
      r = iprh->next_pbuf;
 8010b8e:	68fb      	ldr	r3, [r7, #12]
 8010b90:	681b      	ldr	r3, [r3, #0]
 8010b92:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 8010b94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010b96:	2b00      	cmp	r3, #0
 8010b98:	d1ee      	bne.n	8010b78 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8010b9a:	4b1e      	ldr	r3, [pc, #120]	@ (8010c14 <ip4_reass+0x2b4>)
 8010b9c:	681b      	ldr	r3, [r3, #0]
 8010b9e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010ba0:	429a      	cmp	r2, r3
 8010ba2:	d102      	bne.n	8010baa <ip4_reass+0x24a>
      ipr_prev = NULL;
 8010ba4:	2300      	movs	r3, #0
 8010ba6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010ba8:	e010      	b.n	8010bcc <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8010baa:	4b1a      	ldr	r3, [pc, #104]	@ (8010c14 <ip4_reass+0x2b4>)
 8010bac:	681b      	ldr	r3, [r3, #0]
 8010bae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010bb0:	e007      	b.n	8010bc2 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8010bb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010bb4:	681b      	ldr	r3, [r3, #0]
 8010bb6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010bb8:	429a      	cmp	r2, r3
 8010bba:	d006      	beq.n	8010bca <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8010bbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010bbe:	681b      	ldr	r3, [r3, #0]
 8010bc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010bc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010bc4:	2b00      	cmp	r3, #0
 8010bc6:	d1f4      	bne.n	8010bb2 <ip4_reass+0x252>
 8010bc8:	e000      	b.n	8010bcc <ip4_reass+0x26c>
          break;
 8010bca:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8010bcc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010bce:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8010bd0:	f7ff fd2e 	bl	8010630 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8010bd4:	6878      	ldr	r0, [r7, #4]
 8010bd6:	f7f6 fec1 	bl	800795c <pbuf_clen>
 8010bda:	4603      	mov	r3, r0
 8010bdc:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8010bde:	4b0c      	ldr	r3, [pc, #48]	@ (8010c10 <ip4_reass+0x2b0>)
 8010be0:	881b      	ldrh	r3, [r3, #0]
 8010be2:	8c3a      	ldrh	r2, [r7, #32]
 8010be4:	429a      	cmp	r2, r3
 8010be6:	d906      	bls.n	8010bf6 <ip4_reass+0x296>
 8010be8:	4b0b      	ldr	r3, [pc, #44]	@ (8010c18 <ip4_reass+0x2b8>)
 8010bea:	f240 229b 	movw	r2, #667	@ 0x29b
 8010bee:	490b      	ldr	r1, [pc, #44]	@ (8010c1c <ip4_reass+0x2bc>)
 8010bf0:	480b      	ldr	r0, [pc, #44]	@ (8010c20 <ip4_reass+0x2c0>)
 8010bf2:	f000 fbc5 	bl	8011380 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8010bf6:	4b06      	ldr	r3, [pc, #24]	@ (8010c10 <ip4_reass+0x2b0>)
 8010bf8:	881a      	ldrh	r2, [r3, #0]
 8010bfa:	8c3b      	ldrh	r3, [r7, #32]
 8010bfc:	1ad3      	subs	r3, r2, r3
 8010bfe:	b29a      	uxth	r2, r3
 8010c00:	4b03      	ldr	r3, [pc, #12]	@ (8010c10 <ip4_reass+0x2b0>)
 8010c02:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8010c04:	687b      	ldr	r3, [r7, #4]
 8010c06:	e038      	b.n	8010c7a <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8010c08:	2300      	movs	r3, #0
 8010c0a:	e036      	b.n	8010c7a <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8010c0c:	bf00      	nop
 8010c0e:	e00a      	b.n	8010c26 <ip4_reass+0x2c6>
 8010c10:	2000a940 	.word	0x2000a940
 8010c14:	2000a93c 	.word	0x2000a93c
 8010c18:	08014dcc 	.word	0x08014dcc
 8010c1c:	08014f3c 	.word	0x08014f3c
 8010c20:	08014e14 	.word	0x08014e14
    goto nullreturn_ipr;
 8010c24:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8010c26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010c28:	2b00      	cmp	r3, #0
 8010c2a:	d106      	bne.n	8010c3a <ip4_reass+0x2da>
 8010c2c:	4b15      	ldr	r3, [pc, #84]	@ (8010c84 <ip4_reass+0x324>)
 8010c2e:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 8010c32:	4915      	ldr	r1, [pc, #84]	@ (8010c88 <ip4_reass+0x328>)
 8010c34:	4815      	ldr	r0, [pc, #84]	@ (8010c8c <ip4_reass+0x32c>)
 8010c36:	f000 fba3 	bl	8011380 <iprintf>
  if (ipr->p == NULL) {
 8010c3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010c3c:	685b      	ldr	r3, [r3, #4]
 8010c3e:	2b00      	cmp	r3, #0
 8010c40:	d116      	bne.n	8010c70 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8010c42:	4b13      	ldr	r3, [pc, #76]	@ (8010c90 <ip4_reass+0x330>)
 8010c44:	681b      	ldr	r3, [r3, #0]
 8010c46:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010c48:	429a      	cmp	r2, r3
 8010c4a:	d006      	beq.n	8010c5a <ip4_reass+0x2fa>
 8010c4c:	4b0d      	ldr	r3, [pc, #52]	@ (8010c84 <ip4_reass+0x324>)
 8010c4e:	f240 22ab 	movw	r2, #683	@ 0x2ab
 8010c52:	4910      	ldr	r1, [pc, #64]	@ (8010c94 <ip4_reass+0x334>)
 8010c54:	480d      	ldr	r0, [pc, #52]	@ (8010c8c <ip4_reass+0x32c>)
 8010c56:	f000 fb93 	bl	8011380 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8010c5a:	2100      	movs	r1, #0
 8010c5c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8010c5e:	f7ff fce7 	bl	8010630 <ip_reass_dequeue_datagram>
 8010c62:	e006      	b.n	8010c72 <ip4_reass+0x312>
    goto nullreturn;
 8010c64:	bf00      	nop
 8010c66:	e004      	b.n	8010c72 <ip4_reass+0x312>
    goto nullreturn;
 8010c68:	bf00      	nop
 8010c6a:	e002      	b.n	8010c72 <ip4_reass+0x312>
      goto nullreturn;
 8010c6c:	bf00      	nop
 8010c6e:	e000      	b.n	8010c72 <ip4_reass+0x312>
  }

nullreturn:
 8010c70:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8010c72:	6878      	ldr	r0, [r7, #4]
 8010c74:	f7f6 fdea 	bl	800784c <pbuf_free>
  return NULL;
 8010c78:	2300      	movs	r3, #0
}
 8010c7a:	4618      	mov	r0, r3
 8010c7c:	3738      	adds	r7, #56	@ 0x38
 8010c7e:	46bd      	mov	sp, r7
 8010c80:	bd80      	pop	{r7, pc}
 8010c82:	bf00      	nop
 8010c84:	08014dcc 	.word	0x08014dcc
 8010c88:	08014f58 	.word	0x08014f58
 8010c8c:	08014e14 	.word	0x08014e14
 8010c90:	2000a93c 	.word	0x2000a93c
 8010c94:	08014f64 	.word	0x08014f64

08010c98 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8010c98:	b580      	push	{r7, lr}
 8010c9a:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8010c9c:	2005      	movs	r0, #5
 8010c9e:	f7f5 feef 	bl	8006a80 <memp_malloc>
 8010ca2:	4603      	mov	r3, r0
}
 8010ca4:	4618      	mov	r0, r3
 8010ca6:	bd80      	pop	{r7, pc}

08010ca8 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8010ca8:	b580      	push	{r7, lr}
 8010caa:	b082      	sub	sp, #8
 8010cac:	af00      	add	r7, sp, #0
 8010cae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8010cb0:	687b      	ldr	r3, [r7, #4]
 8010cb2:	2b00      	cmp	r3, #0
 8010cb4:	d106      	bne.n	8010cc4 <ip_frag_free_pbuf_custom_ref+0x1c>
 8010cb6:	4b07      	ldr	r3, [pc, #28]	@ (8010cd4 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8010cb8:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 8010cbc:	4906      	ldr	r1, [pc, #24]	@ (8010cd8 <ip_frag_free_pbuf_custom_ref+0x30>)
 8010cbe:	4807      	ldr	r0, [pc, #28]	@ (8010cdc <ip_frag_free_pbuf_custom_ref+0x34>)
 8010cc0:	f000 fb5e 	bl	8011380 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8010cc4:	6879      	ldr	r1, [r7, #4]
 8010cc6:	2005      	movs	r0, #5
 8010cc8:	f7f5 ff4a 	bl	8006b60 <memp_free>
}
 8010ccc:	bf00      	nop
 8010cce:	3708      	adds	r7, #8
 8010cd0:	46bd      	mov	sp, r7
 8010cd2:	bd80      	pop	{r7, pc}
 8010cd4:	08014dcc 	.word	0x08014dcc
 8010cd8:	08014f84 	.word	0x08014f84
 8010cdc:	08014e14 	.word	0x08014e14

08010ce0 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8010ce0:	b580      	push	{r7, lr}
 8010ce2:	b084      	sub	sp, #16
 8010ce4:	af00      	add	r7, sp, #0
 8010ce6:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8010ce8:	687b      	ldr	r3, [r7, #4]
 8010cea:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8010cec:	68fb      	ldr	r3, [r7, #12]
 8010cee:	2b00      	cmp	r3, #0
 8010cf0:	d106      	bne.n	8010d00 <ipfrag_free_pbuf_custom+0x20>
 8010cf2:	4b11      	ldr	r3, [pc, #68]	@ (8010d38 <ipfrag_free_pbuf_custom+0x58>)
 8010cf4:	f240 22ce 	movw	r2, #718	@ 0x2ce
 8010cf8:	4910      	ldr	r1, [pc, #64]	@ (8010d3c <ipfrag_free_pbuf_custom+0x5c>)
 8010cfa:	4811      	ldr	r0, [pc, #68]	@ (8010d40 <ipfrag_free_pbuf_custom+0x60>)
 8010cfc:	f000 fb40 	bl	8011380 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8010d00:	68fa      	ldr	r2, [r7, #12]
 8010d02:	687b      	ldr	r3, [r7, #4]
 8010d04:	429a      	cmp	r2, r3
 8010d06:	d006      	beq.n	8010d16 <ipfrag_free_pbuf_custom+0x36>
 8010d08:	4b0b      	ldr	r3, [pc, #44]	@ (8010d38 <ipfrag_free_pbuf_custom+0x58>)
 8010d0a:	f240 22cf 	movw	r2, #719	@ 0x2cf
 8010d0e:	490d      	ldr	r1, [pc, #52]	@ (8010d44 <ipfrag_free_pbuf_custom+0x64>)
 8010d10:	480b      	ldr	r0, [pc, #44]	@ (8010d40 <ipfrag_free_pbuf_custom+0x60>)
 8010d12:	f000 fb35 	bl	8011380 <iprintf>
  if (pcr->original != NULL) {
 8010d16:	68fb      	ldr	r3, [r7, #12]
 8010d18:	695b      	ldr	r3, [r3, #20]
 8010d1a:	2b00      	cmp	r3, #0
 8010d1c:	d004      	beq.n	8010d28 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8010d1e:	68fb      	ldr	r3, [r7, #12]
 8010d20:	695b      	ldr	r3, [r3, #20]
 8010d22:	4618      	mov	r0, r3
 8010d24:	f7f6 fd92 	bl	800784c <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8010d28:	68f8      	ldr	r0, [r7, #12]
 8010d2a:	f7ff ffbd 	bl	8010ca8 <ip_frag_free_pbuf_custom_ref>
}
 8010d2e:	bf00      	nop
 8010d30:	3710      	adds	r7, #16
 8010d32:	46bd      	mov	sp, r7
 8010d34:	bd80      	pop	{r7, pc}
 8010d36:	bf00      	nop
 8010d38:	08014dcc 	.word	0x08014dcc
 8010d3c:	08014f90 	.word	0x08014f90
 8010d40:	08014e14 	.word	0x08014e14
 8010d44:	08014f9c 	.word	0x08014f9c

08010d48 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8010d48:	b580      	push	{r7, lr}
 8010d4a:	b094      	sub	sp, #80	@ 0x50
 8010d4c:	af02      	add	r7, sp, #8
 8010d4e:	60f8      	str	r0, [r7, #12]
 8010d50:	60b9      	str	r1, [r7, #8]
 8010d52:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8010d54:	2300      	movs	r3, #0
 8010d56:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8010d5a:	68bb      	ldr	r3, [r7, #8]
 8010d5c:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8010d5e:	3b14      	subs	r3, #20
 8010d60:	2b00      	cmp	r3, #0
 8010d62:	da00      	bge.n	8010d66 <ip4_frag+0x1e>
 8010d64:	3307      	adds	r3, #7
 8010d66:	10db      	asrs	r3, r3, #3
 8010d68:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8010d6a:	2314      	movs	r3, #20
 8010d6c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8010d6e:	68fb      	ldr	r3, [r7, #12]
 8010d70:	685b      	ldr	r3, [r3, #4]
 8010d72:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 8010d74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010d76:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8010d78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010d7a:	781b      	ldrb	r3, [r3, #0]
 8010d7c:	f003 030f 	and.w	r3, r3, #15
 8010d80:	b2db      	uxtb	r3, r3
 8010d82:	009b      	lsls	r3, r3, #2
 8010d84:	b2db      	uxtb	r3, r3
 8010d86:	2b14      	cmp	r3, #20
 8010d88:	d002      	beq.n	8010d90 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8010d8a:	f06f 0305 	mvn.w	r3, #5
 8010d8e:	e110      	b.n	8010fb2 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8010d90:	68fb      	ldr	r3, [r7, #12]
 8010d92:	895b      	ldrh	r3, [r3, #10]
 8010d94:	2b13      	cmp	r3, #19
 8010d96:	d809      	bhi.n	8010dac <ip4_frag+0x64>
 8010d98:	4b88      	ldr	r3, [pc, #544]	@ (8010fbc <ip4_frag+0x274>)
 8010d9a:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 8010d9e:	4988      	ldr	r1, [pc, #544]	@ (8010fc0 <ip4_frag+0x278>)
 8010da0:	4888      	ldr	r0, [pc, #544]	@ (8010fc4 <ip4_frag+0x27c>)
 8010da2:	f000 faed 	bl	8011380 <iprintf>
 8010da6:	f06f 0305 	mvn.w	r3, #5
 8010daa:	e102      	b.n	8010fb2 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8010dac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010dae:	88db      	ldrh	r3, [r3, #6]
 8010db0:	b29b      	uxth	r3, r3
 8010db2:	4618      	mov	r0, r3
 8010db4:	f7f5 f9ec 	bl	8006190 <lwip_htons>
 8010db8:	4603      	mov	r3, r0
 8010dba:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 8010dbc:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8010dbe:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010dc2:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8010dc6:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8010dc8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8010dcc:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8010dce:	68fb      	ldr	r3, [r7, #12]
 8010dd0:	891b      	ldrh	r3, [r3, #8]
 8010dd2:	3b14      	subs	r3, #20
 8010dd4:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 8010dd8:	e0e1      	b.n	8010f9e <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8010dda:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8010ddc:	00db      	lsls	r3, r3, #3
 8010dde:	b29b      	uxth	r3, r3
 8010de0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8010de4:	4293      	cmp	r3, r2
 8010de6:	bf28      	it	cs
 8010de8:	4613      	movcs	r3, r2
 8010dea:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8010dec:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8010df0:	2114      	movs	r1, #20
 8010df2:	200e      	movs	r0, #14
 8010df4:	f7f6 fa46 	bl	8007284 <pbuf_alloc>
 8010df8:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 8010dfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010dfc:	2b00      	cmp	r3, #0
 8010dfe:	f000 80d5 	beq.w	8010fac <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8010e02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010e04:	895b      	ldrh	r3, [r3, #10]
 8010e06:	2b13      	cmp	r3, #19
 8010e08:	d806      	bhi.n	8010e18 <ip4_frag+0xd0>
 8010e0a:	4b6c      	ldr	r3, [pc, #432]	@ (8010fbc <ip4_frag+0x274>)
 8010e0c:	f44f 7249 	mov.w	r2, #804	@ 0x324
 8010e10:	496d      	ldr	r1, [pc, #436]	@ (8010fc8 <ip4_frag+0x280>)
 8010e12:	486c      	ldr	r0, [pc, #432]	@ (8010fc4 <ip4_frag+0x27c>)
 8010e14:	f000 fab4 	bl	8011380 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8010e18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010e1a:	685b      	ldr	r3, [r3, #4]
 8010e1c:	2214      	movs	r2, #20
 8010e1e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8010e20:	4618      	mov	r0, r3
 8010e22:	f000 fc08 	bl	8011636 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8010e26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010e28:	685b      	ldr	r3, [r3, #4]
 8010e2a:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 8010e2c:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8010e2e:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 8010e32:	e064      	b.n	8010efe <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8010e34:	68fb      	ldr	r3, [r7, #12]
 8010e36:	895a      	ldrh	r2, [r3, #10]
 8010e38:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8010e3a:	1ad3      	subs	r3, r2, r3
 8010e3c:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8010e3e:	68fb      	ldr	r3, [r7, #12]
 8010e40:	895b      	ldrh	r3, [r3, #10]
 8010e42:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8010e44:	429a      	cmp	r2, r3
 8010e46:	d906      	bls.n	8010e56 <ip4_frag+0x10e>
 8010e48:	4b5c      	ldr	r3, [pc, #368]	@ (8010fbc <ip4_frag+0x274>)
 8010e4a:	f240 322d 	movw	r2, #813	@ 0x32d
 8010e4e:	495f      	ldr	r1, [pc, #380]	@ (8010fcc <ip4_frag+0x284>)
 8010e50:	485c      	ldr	r0, [pc, #368]	@ (8010fc4 <ip4_frag+0x27c>)
 8010e52:	f000 fa95 	bl	8011380 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8010e56:	8bfa      	ldrh	r2, [r7, #30]
 8010e58:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8010e5c:	4293      	cmp	r3, r2
 8010e5e:	bf28      	it	cs
 8010e60:	4613      	movcs	r3, r2
 8010e62:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8010e66:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8010e6a:	2b00      	cmp	r3, #0
 8010e6c:	d105      	bne.n	8010e7a <ip4_frag+0x132>
        poff = 0;
 8010e6e:	2300      	movs	r3, #0
 8010e70:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 8010e72:	68fb      	ldr	r3, [r7, #12]
 8010e74:	681b      	ldr	r3, [r3, #0]
 8010e76:	60fb      	str	r3, [r7, #12]
        continue;
 8010e78:	e041      	b.n	8010efe <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8010e7a:	f7ff ff0d 	bl	8010c98 <ip_frag_alloc_pbuf_custom_ref>
 8010e7e:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8010e80:	69bb      	ldr	r3, [r7, #24]
 8010e82:	2b00      	cmp	r3, #0
 8010e84:	d103      	bne.n	8010e8e <ip4_frag+0x146>
        pbuf_free(rambuf);
 8010e86:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8010e88:	f7f6 fce0 	bl	800784c <pbuf_free>
        goto memerr;
 8010e8c:	e08f      	b.n	8010fae <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8010e8e:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8010e90:	68fb      	ldr	r3, [r7, #12]
 8010e92:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8010e94:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8010e96:	4413      	add	r3, r2
 8010e98:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 8010e9c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8010ea0:	9201      	str	r2, [sp, #4]
 8010ea2:	9300      	str	r3, [sp, #0]
 8010ea4:	4603      	mov	r3, r0
 8010ea6:	2241      	movs	r2, #65	@ 0x41
 8010ea8:	2000      	movs	r0, #0
 8010eaa:	f7f6 fb15 	bl	80074d8 <pbuf_alloced_custom>
 8010eae:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8010eb0:	697b      	ldr	r3, [r7, #20]
 8010eb2:	2b00      	cmp	r3, #0
 8010eb4:	d106      	bne.n	8010ec4 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8010eb6:	69b8      	ldr	r0, [r7, #24]
 8010eb8:	f7ff fef6 	bl	8010ca8 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8010ebc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8010ebe:	f7f6 fcc5 	bl	800784c <pbuf_free>
        goto memerr;
 8010ec2:	e074      	b.n	8010fae <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8010ec4:	68f8      	ldr	r0, [r7, #12]
 8010ec6:	f7f6 fd61 	bl	800798c <pbuf_ref>
      pcr->original = p;
 8010eca:	69bb      	ldr	r3, [r7, #24]
 8010ecc:	68fa      	ldr	r2, [r7, #12]
 8010ece:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8010ed0:	69bb      	ldr	r3, [r7, #24]
 8010ed2:	4a3f      	ldr	r2, [pc, #252]	@ (8010fd0 <ip4_frag+0x288>)
 8010ed4:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8010ed6:	6979      	ldr	r1, [r7, #20]
 8010ed8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8010eda:	f7f6 fd79 	bl	80079d0 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8010ede:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 8010ee2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8010ee6:	1ad3      	subs	r3, r2, r3
 8010ee8:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 8010eec:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8010ef0:	2b00      	cmp	r3, #0
 8010ef2:	d004      	beq.n	8010efe <ip4_frag+0x1b6>
        poff = 0;
 8010ef4:	2300      	movs	r3, #0
 8010ef6:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 8010ef8:	68fb      	ldr	r3, [r7, #12]
 8010efa:	681b      	ldr	r3, [r3, #0]
 8010efc:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8010efe:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8010f02:	2b00      	cmp	r3, #0
 8010f04:	d196      	bne.n	8010e34 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8010f06:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8010f08:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8010f0c:	4413      	add	r3, r2
 8010f0e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8010f10:	68bb      	ldr	r3, [r7, #8]
 8010f12:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8010f14:	f1a3 0213 	sub.w	r2, r3, #19
 8010f18:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8010f1c:	429a      	cmp	r2, r3
 8010f1e:	bfcc      	ite	gt
 8010f20:	2301      	movgt	r3, #1
 8010f22:	2300      	movle	r3, #0
 8010f24:	b2db      	uxtb	r3, r3
 8010f26:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8010f28:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8010f2c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010f30:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 8010f32:	6a3b      	ldr	r3, [r7, #32]
 8010f34:	2b00      	cmp	r3, #0
 8010f36:	d002      	beq.n	8010f3e <ip4_frag+0x1f6>
 8010f38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010f3a:	2b00      	cmp	r3, #0
 8010f3c:	d003      	beq.n	8010f46 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8010f3e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8010f40:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8010f44:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8010f46:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8010f48:	4618      	mov	r0, r3
 8010f4a:	f7f5 f921 	bl	8006190 <lwip_htons>
 8010f4e:	4603      	mov	r3, r0
 8010f50:	461a      	mov	r2, r3
 8010f52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010f54:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8010f56:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8010f58:	3314      	adds	r3, #20
 8010f5a:	b29b      	uxth	r3, r3
 8010f5c:	4618      	mov	r0, r3
 8010f5e:	f7f5 f917 	bl	8006190 <lwip_htons>
 8010f62:	4603      	mov	r3, r0
 8010f64:	461a      	mov	r2, r3
 8010f66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010f68:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8010f6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010f6c:	2200      	movs	r2, #0
 8010f6e:	729a      	strb	r2, [r3, #10]
 8010f70:	2200      	movs	r2, #0
 8010f72:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8010f74:	68bb      	ldr	r3, [r7, #8]
 8010f76:	695b      	ldr	r3, [r3, #20]
 8010f78:	687a      	ldr	r2, [r7, #4]
 8010f7a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8010f7c:	68b8      	ldr	r0, [r7, #8]
 8010f7e:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8010f80:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8010f82:	f7f6 fc63 	bl	800784c <pbuf_free>
    left = (u16_t)(left - fragsize);
 8010f86:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8010f8a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8010f8c:	1ad3      	subs	r3, r2, r3
 8010f8e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 8010f92:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8010f96:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8010f98:	4413      	add	r3, r2
 8010f9a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 8010f9e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8010fa2:	2b00      	cmp	r3, #0
 8010fa4:	f47f af19 	bne.w	8010dda <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8010fa8:	2300      	movs	r3, #0
 8010faa:	e002      	b.n	8010fb2 <ip4_frag+0x26a>
      goto memerr;
 8010fac:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8010fae:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8010fb2:	4618      	mov	r0, r3
 8010fb4:	3748      	adds	r7, #72	@ 0x48
 8010fb6:	46bd      	mov	sp, r7
 8010fb8:	bd80      	pop	{r7, pc}
 8010fba:	bf00      	nop
 8010fbc:	08014dcc 	.word	0x08014dcc
 8010fc0:	08014fa8 	.word	0x08014fa8
 8010fc4:	08014e14 	.word	0x08014e14
 8010fc8:	08014fc4 	.word	0x08014fc4
 8010fcc:	08014fe4 	.word	0x08014fe4
 8010fd0:	08010ce1 	.word	0x08010ce1

08010fd4 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8010fd4:	b580      	push	{r7, lr}
 8010fd6:	b086      	sub	sp, #24
 8010fd8:	af00      	add	r7, sp, #0
 8010fda:	6078      	str	r0, [r7, #4]
 8010fdc:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8010fde:	230e      	movs	r3, #14
 8010fe0:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8010fe2:	687b      	ldr	r3, [r7, #4]
 8010fe4:	895b      	ldrh	r3, [r3, #10]
 8010fe6:	2b0e      	cmp	r3, #14
 8010fe8:	d96e      	bls.n	80110c8 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8010fea:	687b      	ldr	r3, [r7, #4]
 8010fec:	7bdb      	ldrb	r3, [r3, #15]
 8010fee:	2b00      	cmp	r3, #0
 8010ff0:	d106      	bne.n	8011000 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8010ff2:	683b      	ldr	r3, [r7, #0]
 8010ff4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8010ff8:	3301      	adds	r3, #1
 8010ffa:	b2da      	uxtb	r2, r3
 8010ffc:	687b      	ldr	r3, [r7, #4]
 8010ffe:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8011000:	687b      	ldr	r3, [r7, #4]
 8011002:	685b      	ldr	r3, [r3, #4]
 8011004:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8011006:	693b      	ldr	r3, [r7, #16]
 8011008:	7b1a      	ldrb	r2, [r3, #12]
 801100a:	7b5b      	ldrb	r3, [r3, #13]
 801100c:	021b      	lsls	r3, r3, #8
 801100e:	4313      	orrs	r3, r2
 8011010:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8011012:	693b      	ldr	r3, [r7, #16]
 8011014:	781b      	ldrb	r3, [r3, #0]
 8011016:	f003 0301 	and.w	r3, r3, #1
 801101a:	2b00      	cmp	r3, #0
 801101c:	d023      	beq.n	8011066 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801101e:	693b      	ldr	r3, [r7, #16]
 8011020:	781b      	ldrb	r3, [r3, #0]
 8011022:	2b01      	cmp	r3, #1
 8011024:	d10f      	bne.n	8011046 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8011026:	693b      	ldr	r3, [r7, #16]
 8011028:	785b      	ldrb	r3, [r3, #1]
 801102a:	2b00      	cmp	r3, #0
 801102c:	d11b      	bne.n	8011066 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801102e:	693b      	ldr	r3, [r7, #16]
 8011030:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8011032:	2b5e      	cmp	r3, #94	@ 0x5e
 8011034:	d117      	bne.n	8011066 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8011036:	687b      	ldr	r3, [r7, #4]
 8011038:	7b5b      	ldrb	r3, [r3, #13]
 801103a:	f043 0310 	orr.w	r3, r3, #16
 801103e:	b2da      	uxtb	r2, r3
 8011040:	687b      	ldr	r3, [r7, #4]
 8011042:	735a      	strb	r2, [r3, #13]
 8011044:	e00f      	b.n	8011066 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8011046:	693b      	ldr	r3, [r7, #16]
 8011048:	2206      	movs	r2, #6
 801104a:	4928      	ldr	r1, [pc, #160]	@ (80110ec <ethernet_input+0x118>)
 801104c:	4618      	mov	r0, r3
 801104e:	f000 fa40 	bl	80114d2 <memcmp>
 8011052:	4603      	mov	r3, r0
 8011054:	2b00      	cmp	r3, #0
 8011056:	d106      	bne.n	8011066 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8011058:	687b      	ldr	r3, [r7, #4]
 801105a:	7b5b      	ldrb	r3, [r3, #13]
 801105c:	f043 0308 	orr.w	r3, r3, #8
 8011060:	b2da      	uxtb	r2, r3
 8011062:	687b      	ldr	r3, [r7, #4]
 8011064:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8011066:	89fb      	ldrh	r3, [r7, #14]
 8011068:	2b08      	cmp	r3, #8
 801106a:	d003      	beq.n	8011074 <ethernet_input+0xa0>
 801106c:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 8011070:	d014      	beq.n	801109c <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8011072:	e032      	b.n	80110da <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8011074:	683b      	ldr	r3, [r7, #0]
 8011076:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801107a:	f003 0308 	and.w	r3, r3, #8
 801107e:	2b00      	cmp	r3, #0
 8011080:	d024      	beq.n	80110cc <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8011082:	8afb      	ldrh	r3, [r7, #22]
 8011084:	4619      	mov	r1, r3
 8011086:	6878      	ldr	r0, [r7, #4]
 8011088:	f7f6 fb5a 	bl	8007740 <pbuf_remove_header>
 801108c:	4603      	mov	r3, r0
 801108e:	2b00      	cmp	r3, #0
 8011090:	d11e      	bne.n	80110d0 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8011092:	6839      	ldr	r1, [r7, #0]
 8011094:	6878      	ldr	r0, [r7, #4]
 8011096:	f7fe ff21 	bl	800fedc <ip4_input>
      break;
 801109a:	e013      	b.n	80110c4 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801109c:	683b      	ldr	r3, [r7, #0]
 801109e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80110a2:	f003 0308 	and.w	r3, r3, #8
 80110a6:	2b00      	cmp	r3, #0
 80110a8:	d014      	beq.n	80110d4 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80110aa:	8afb      	ldrh	r3, [r7, #22]
 80110ac:	4619      	mov	r1, r3
 80110ae:	6878      	ldr	r0, [r7, #4]
 80110b0:	f7f6 fb46 	bl	8007740 <pbuf_remove_header>
 80110b4:	4603      	mov	r3, r0
 80110b6:	2b00      	cmp	r3, #0
 80110b8:	d10e      	bne.n	80110d8 <ethernet_input+0x104>
        etharp_input(p, netif);
 80110ba:	6839      	ldr	r1, [r7, #0]
 80110bc:	6878      	ldr	r0, [r7, #4]
 80110be:	f7fe f8c1 	bl	800f244 <etharp_input>
      break;
 80110c2:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 80110c4:	2300      	movs	r3, #0
 80110c6:	e00c      	b.n	80110e2 <ethernet_input+0x10e>
    goto free_and_return;
 80110c8:	bf00      	nop
 80110ca:	e006      	b.n	80110da <ethernet_input+0x106>
        goto free_and_return;
 80110cc:	bf00      	nop
 80110ce:	e004      	b.n	80110da <ethernet_input+0x106>
        goto free_and_return;
 80110d0:	bf00      	nop
 80110d2:	e002      	b.n	80110da <ethernet_input+0x106>
        goto free_and_return;
 80110d4:	bf00      	nop
 80110d6:	e000      	b.n	80110da <ethernet_input+0x106>
        goto free_and_return;
 80110d8:	bf00      	nop

free_and_return:
  pbuf_free(p);
 80110da:	6878      	ldr	r0, [r7, #4]
 80110dc:	f7f6 fbb6 	bl	800784c <pbuf_free>
  return ERR_OK;
 80110e0:	2300      	movs	r3, #0
}
 80110e2:	4618      	mov	r0, r3
 80110e4:	3718      	adds	r7, #24
 80110e6:	46bd      	mov	sp, r7
 80110e8:	bd80      	pop	{r7, pc}
 80110ea:	bf00      	nop
 80110ec:	08015180 	.word	0x08015180

080110f0 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 80110f0:	b580      	push	{r7, lr}
 80110f2:	b086      	sub	sp, #24
 80110f4:	af00      	add	r7, sp, #0
 80110f6:	60f8      	str	r0, [r7, #12]
 80110f8:	60b9      	str	r1, [r7, #8]
 80110fa:	607a      	str	r2, [r7, #4]
 80110fc:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 80110fe:	8c3b      	ldrh	r3, [r7, #32]
 8011100:	4618      	mov	r0, r3
 8011102:	f7f5 f845 	bl	8006190 <lwip_htons>
 8011106:	4603      	mov	r3, r0
 8011108:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801110a:	210e      	movs	r1, #14
 801110c:	68b8      	ldr	r0, [r7, #8]
 801110e:	f7f6 fb07 	bl	8007720 <pbuf_add_header>
 8011112:	4603      	mov	r3, r0
 8011114:	2b00      	cmp	r3, #0
 8011116:	d125      	bne.n	8011164 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8011118:	68bb      	ldr	r3, [r7, #8]
 801111a:	685b      	ldr	r3, [r3, #4]
 801111c:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801111e:	693b      	ldr	r3, [r7, #16]
 8011120:	8afa      	ldrh	r2, [r7, #22]
 8011122:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8011124:	693b      	ldr	r3, [r7, #16]
 8011126:	2206      	movs	r2, #6
 8011128:	6839      	ldr	r1, [r7, #0]
 801112a:	4618      	mov	r0, r3
 801112c:	f000 fa83 	bl	8011636 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8011130:	693b      	ldr	r3, [r7, #16]
 8011132:	3306      	adds	r3, #6
 8011134:	2206      	movs	r2, #6
 8011136:	6879      	ldr	r1, [r7, #4]
 8011138:	4618      	mov	r0, r3
 801113a:	f000 fa7c 	bl	8011636 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801113e:	68fb      	ldr	r3, [r7, #12]
 8011140:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8011144:	2b06      	cmp	r3, #6
 8011146:	d006      	beq.n	8011156 <ethernet_output+0x66>
 8011148:	4b0a      	ldr	r3, [pc, #40]	@ (8011174 <ethernet_output+0x84>)
 801114a:	f44f 7299 	mov.w	r2, #306	@ 0x132
 801114e:	490a      	ldr	r1, [pc, #40]	@ (8011178 <ethernet_output+0x88>)
 8011150:	480a      	ldr	r0, [pc, #40]	@ (801117c <ethernet_output+0x8c>)
 8011152:	f000 f915 	bl	8011380 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8011156:	68fb      	ldr	r3, [r7, #12]
 8011158:	699b      	ldr	r3, [r3, #24]
 801115a:	68b9      	ldr	r1, [r7, #8]
 801115c:	68f8      	ldr	r0, [r7, #12]
 801115e:	4798      	blx	r3
 8011160:	4603      	mov	r3, r0
 8011162:	e002      	b.n	801116a <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8011164:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8011166:	f06f 0301 	mvn.w	r3, #1
}
 801116a:	4618      	mov	r0, r3
 801116c:	3718      	adds	r7, #24
 801116e:	46bd      	mov	sp, r7
 8011170:	bd80      	pop	{r7, pc}
 8011172:	bf00      	nop
 8011174:	08014ff4 	.word	0x08014ff4
 8011178:	0801502c 	.word	0x0801502c
 801117c:	08015060 	.word	0x08015060

08011180 <rand>:
 8011180:	4b16      	ldr	r3, [pc, #88]	@ (80111dc <rand+0x5c>)
 8011182:	b510      	push	{r4, lr}
 8011184:	681c      	ldr	r4, [r3, #0]
 8011186:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011188:	b9b3      	cbnz	r3, 80111b8 <rand+0x38>
 801118a:	2018      	movs	r0, #24
 801118c:	f000 faca 	bl	8011724 <malloc>
 8011190:	4602      	mov	r2, r0
 8011192:	6320      	str	r0, [r4, #48]	@ 0x30
 8011194:	b920      	cbnz	r0, 80111a0 <rand+0x20>
 8011196:	4b12      	ldr	r3, [pc, #72]	@ (80111e0 <rand+0x60>)
 8011198:	4812      	ldr	r0, [pc, #72]	@ (80111e4 <rand+0x64>)
 801119a:	2152      	movs	r1, #82	@ 0x52
 801119c:	f000 fa5a 	bl	8011654 <__assert_func>
 80111a0:	4911      	ldr	r1, [pc, #68]	@ (80111e8 <rand+0x68>)
 80111a2:	4b12      	ldr	r3, [pc, #72]	@ (80111ec <rand+0x6c>)
 80111a4:	e9c0 1300 	strd	r1, r3, [r0]
 80111a8:	4b11      	ldr	r3, [pc, #68]	@ (80111f0 <rand+0x70>)
 80111aa:	6083      	str	r3, [r0, #8]
 80111ac:	230b      	movs	r3, #11
 80111ae:	8183      	strh	r3, [r0, #12]
 80111b0:	2100      	movs	r1, #0
 80111b2:	2001      	movs	r0, #1
 80111b4:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80111b8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80111ba:	480e      	ldr	r0, [pc, #56]	@ (80111f4 <rand+0x74>)
 80111bc:	690b      	ldr	r3, [r1, #16]
 80111be:	694c      	ldr	r4, [r1, #20]
 80111c0:	4a0d      	ldr	r2, [pc, #52]	@ (80111f8 <rand+0x78>)
 80111c2:	4358      	muls	r0, r3
 80111c4:	fb02 0004 	mla	r0, r2, r4, r0
 80111c8:	fba3 3202 	umull	r3, r2, r3, r2
 80111cc:	3301      	adds	r3, #1
 80111ce:	eb40 0002 	adc.w	r0, r0, r2
 80111d2:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80111d6:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80111da:	bd10      	pop	{r4, pc}
 80111dc:	20000078 	.word	0x20000078
 80111e0:	0801518e 	.word	0x0801518e
 80111e4:	080151a5 	.word	0x080151a5
 80111e8:	abcd330e 	.word	0xabcd330e
 80111ec:	e66d1234 	.word	0xe66d1234
 80111f0:	0005deec 	.word	0x0005deec
 80111f4:	5851f42d 	.word	0x5851f42d
 80111f8:	4c957f2d 	.word	0x4c957f2d

080111fc <std>:
 80111fc:	2300      	movs	r3, #0
 80111fe:	b510      	push	{r4, lr}
 8011200:	4604      	mov	r4, r0
 8011202:	e9c0 3300 	strd	r3, r3, [r0]
 8011206:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801120a:	6083      	str	r3, [r0, #8]
 801120c:	8181      	strh	r1, [r0, #12]
 801120e:	6643      	str	r3, [r0, #100]	@ 0x64
 8011210:	81c2      	strh	r2, [r0, #14]
 8011212:	6183      	str	r3, [r0, #24]
 8011214:	4619      	mov	r1, r3
 8011216:	2208      	movs	r2, #8
 8011218:	305c      	adds	r0, #92	@ 0x5c
 801121a:	f000 f984 	bl	8011526 <memset>
 801121e:	4b0d      	ldr	r3, [pc, #52]	@ (8011254 <std+0x58>)
 8011220:	6263      	str	r3, [r4, #36]	@ 0x24
 8011222:	4b0d      	ldr	r3, [pc, #52]	@ (8011258 <std+0x5c>)
 8011224:	62a3      	str	r3, [r4, #40]	@ 0x28
 8011226:	4b0d      	ldr	r3, [pc, #52]	@ (801125c <std+0x60>)
 8011228:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801122a:	4b0d      	ldr	r3, [pc, #52]	@ (8011260 <std+0x64>)
 801122c:	6323      	str	r3, [r4, #48]	@ 0x30
 801122e:	4b0d      	ldr	r3, [pc, #52]	@ (8011264 <std+0x68>)
 8011230:	6224      	str	r4, [r4, #32]
 8011232:	429c      	cmp	r4, r3
 8011234:	d006      	beq.n	8011244 <std+0x48>
 8011236:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801123a:	4294      	cmp	r4, r2
 801123c:	d002      	beq.n	8011244 <std+0x48>
 801123e:	33d0      	adds	r3, #208	@ 0xd0
 8011240:	429c      	cmp	r4, r3
 8011242:	d105      	bne.n	8011250 <std+0x54>
 8011244:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8011248:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801124c:	f000 b9f0 	b.w	8011630 <__retarget_lock_init_recursive>
 8011250:	bd10      	pop	{r4, pc}
 8011252:	bf00      	nop
 8011254:	0801144d 	.word	0x0801144d
 8011258:	0801146f 	.word	0x0801146f
 801125c:	080114a7 	.word	0x080114a7
 8011260:	080114cb 	.word	0x080114cb
 8011264:	2000a944 	.word	0x2000a944

08011268 <stdio_exit_handler>:
 8011268:	4a02      	ldr	r2, [pc, #8]	@ (8011274 <stdio_exit_handler+0xc>)
 801126a:	4903      	ldr	r1, [pc, #12]	@ (8011278 <stdio_exit_handler+0x10>)
 801126c:	4803      	ldr	r0, [pc, #12]	@ (801127c <stdio_exit_handler+0x14>)
 801126e:	f000 b869 	b.w	8011344 <_fwalk_sglue>
 8011272:	bf00      	nop
 8011274:	2000006c 	.word	0x2000006c
 8011278:	080121e9 	.word	0x080121e9
 801127c:	2000007c 	.word	0x2000007c

08011280 <cleanup_stdio>:
 8011280:	6841      	ldr	r1, [r0, #4]
 8011282:	4b0c      	ldr	r3, [pc, #48]	@ (80112b4 <cleanup_stdio+0x34>)
 8011284:	4299      	cmp	r1, r3
 8011286:	b510      	push	{r4, lr}
 8011288:	4604      	mov	r4, r0
 801128a:	d001      	beq.n	8011290 <cleanup_stdio+0x10>
 801128c:	f000 ffac 	bl	80121e8 <_fflush_r>
 8011290:	68a1      	ldr	r1, [r4, #8]
 8011292:	4b09      	ldr	r3, [pc, #36]	@ (80112b8 <cleanup_stdio+0x38>)
 8011294:	4299      	cmp	r1, r3
 8011296:	d002      	beq.n	801129e <cleanup_stdio+0x1e>
 8011298:	4620      	mov	r0, r4
 801129a:	f000 ffa5 	bl	80121e8 <_fflush_r>
 801129e:	68e1      	ldr	r1, [r4, #12]
 80112a0:	4b06      	ldr	r3, [pc, #24]	@ (80112bc <cleanup_stdio+0x3c>)
 80112a2:	4299      	cmp	r1, r3
 80112a4:	d004      	beq.n	80112b0 <cleanup_stdio+0x30>
 80112a6:	4620      	mov	r0, r4
 80112a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80112ac:	f000 bf9c 	b.w	80121e8 <_fflush_r>
 80112b0:	bd10      	pop	{r4, pc}
 80112b2:	bf00      	nop
 80112b4:	2000a944 	.word	0x2000a944
 80112b8:	2000a9ac 	.word	0x2000a9ac
 80112bc:	2000aa14 	.word	0x2000aa14

080112c0 <global_stdio_init.part.0>:
 80112c0:	b510      	push	{r4, lr}
 80112c2:	4b0b      	ldr	r3, [pc, #44]	@ (80112f0 <global_stdio_init.part.0+0x30>)
 80112c4:	4c0b      	ldr	r4, [pc, #44]	@ (80112f4 <global_stdio_init.part.0+0x34>)
 80112c6:	4a0c      	ldr	r2, [pc, #48]	@ (80112f8 <global_stdio_init.part.0+0x38>)
 80112c8:	601a      	str	r2, [r3, #0]
 80112ca:	4620      	mov	r0, r4
 80112cc:	2200      	movs	r2, #0
 80112ce:	2104      	movs	r1, #4
 80112d0:	f7ff ff94 	bl	80111fc <std>
 80112d4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80112d8:	2201      	movs	r2, #1
 80112da:	2109      	movs	r1, #9
 80112dc:	f7ff ff8e 	bl	80111fc <std>
 80112e0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80112e4:	2202      	movs	r2, #2
 80112e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80112ea:	2112      	movs	r1, #18
 80112ec:	f7ff bf86 	b.w	80111fc <std>
 80112f0:	2000aa7c 	.word	0x2000aa7c
 80112f4:	2000a944 	.word	0x2000a944
 80112f8:	08011269 	.word	0x08011269

080112fc <__sfp_lock_acquire>:
 80112fc:	4801      	ldr	r0, [pc, #4]	@ (8011304 <__sfp_lock_acquire+0x8>)
 80112fe:	f000 b998 	b.w	8011632 <__retarget_lock_acquire_recursive>
 8011302:	bf00      	nop
 8011304:	2000aa85 	.word	0x2000aa85

08011308 <__sfp_lock_release>:
 8011308:	4801      	ldr	r0, [pc, #4]	@ (8011310 <__sfp_lock_release+0x8>)
 801130a:	f000 b993 	b.w	8011634 <__retarget_lock_release_recursive>
 801130e:	bf00      	nop
 8011310:	2000aa85 	.word	0x2000aa85

08011314 <__sinit>:
 8011314:	b510      	push	{r4, lr}
 8011316:	4604      	mov	r4, r0
 8011318:	f7ff fff0 	bl	80112fc <__sfp_lock_acquire>
 801131c:	6a23      	ldr	r3, [r4, #32]
 801131e:	b11b      	cbz	r3, 8011328 <__sinit+0x14>
 8011320:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011324:	f7ff bff0 	b.w	8011308 <__sfp_lock_release>
 8011328:	4b04      	ldr	r3, [pc, #16]	@ (801133c <__sinit+0x28>)
 801132a:	6223      	str	r3, [r4, #32]
 801132c:	4b04      	ldr	r3, [pc, #16]	@ (8011340 <__sinit+0x2c>)
 801132e:	681b      	ldr	r3, [r3, #0]
 8011330:	2b00      	cmp	r3, #0
 8011332:	d1f5      	bne.n	8011320 <__sinit+0xc>
 8011334:	f7ff ffc4 	bl	80112c0 <global_stdio_init.part.0>
 8011338:	e7f2      	b.n	8011320 <__sinit+0xc>
 801133a:	bf00      	nop
 801133c:	08011281 	.word	0x08011281
 8011340:	2000aa7c 	.word	0x2000aa7c

08011344 <_fwalk_sglue>:
 8011344:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011348:	4607      	mov	r7, r0
 801134a:	4688      	mov	r8, r1
 801134c:	4614      	mov	r4, r2
 801134e:	2600      	movs	r6, #0
 8011350:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011354:	f1b9 0901 	subs.w	r9, r9, #1
 8011358:	d505      	bpl.n	8011366 <_fwalk_sglue+0x22>
 801135a:	6824      	ldr	r4, [r4, #0]
 801135c:	2c00      	cmp	r4, #0
 801135e:	d1f7      	bne.n	8011350 <_fwalk_sglue+0xc>
 8011360:	4630      	mov	r0, r6
 8011362:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011366:	89ab      	ldrh	r3, [r5, #12]
 8011368:	2b01      	cmp	r3, #1
 801136a:	d907      	bls.n	801137c <_fwalk_sglue+0x38>
 801136c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011370:	3301      	adds	r3, #1
 8011372:	d003      	beq.n	801137c <_fwalk_sglue+0x38>
 8011374:	4629      	mov	r1, r5
 8011376:	4638      	mov	r0, r7
 8011378:	47c0      	blx	r8
 801137a:	4306      	orrs	r6, r0
 801137c:	3568      	adds	r5, #104	@ 0x68
 801137e:	e7e9      	b.n	8011354 <_fwalk_sglue+0x10>

08011380 <iprintf>:
 8011380:	b40f      	push	{r0, r1, r2, r3}
 8011382:	b507      	push	{r0, r1, r2, lr}
 8011384:	4906      	ldr	r1, [pc, #24]	@ (80113a0 <iprintf+0x20>)
 8011386:	ab04      	add	r3, sp, #16
 8011388:	6808      	ldr	r0, [r1, #0]
 801138a:	f853 2b04 	ldr.w	r2, [r3], #4
 801138e:	6881      	ldr	r1, [r0, #8]
 8011390:	9301      	str	r3, [sp, #4]
 8011392:	f000 fbff 	bl	8011b94 <_vfiprintf_r>
 8011396:	b003      	add	sp, #12
 8011398:	f85d eb04 	ldr.w	lr, [sp], #4
 801139c:	b004      	add	sp, #16
 801139e:	4770      	bx	lr
 80113a0:	20000078 	.word	0x20000078

080113a4 <sniprintf>:
 80113a4:	b40c      	push	{r2, r3}
 80113a6:	b530      	push	{r4, r5, lr}
 80113a8:	4b17      	ldr	r3, [pc, #92]	@ (8011408 <sniprintf+0x64>)
 80113aa:	1e0c      	subs	r4, r1, #0
 80113ac:	681d      	ldr	r5, [r3, #0]
 80113ae:	b09d      	sub	sp, #116	@ 0x74
 80113b0:	da08      	bge.n	80113c4 <sniprintf+0x20>
 80113b2:	238b      	movs	r3, #139	@ 0x8b
 80113b4:	602b      	str	r3, [r5, #0]
 80113b6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80113ba:	b01d      	add	sp, #116	@ 0x74
 80113bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80113c0:	b002      	add	sp, #8
 80113c2:	4770      	bx	lr
 80113c4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80113c8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80113cc:	bf14      	ite	ne
 80113ce:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 80113d2:	4623      	moveq	r3, r4
 80113d4:	9304      	str	r3, [sp, #16]
 80113d6:	9307      	str	r3, [sp, #28]
 80113d8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80113dc:	9002      	str	r0, [sp, #8]
 80113de:	9006      	str	r0, [sp, #24]
 80113e0:	f8ad 3016 	strh.w	r3, [sp, #22]
 80113e4:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80113e6:	ab21      	add	r3, sp, #132	@ 0x84
 80113e8:	a902      	add	r1, sp, #8
 80113ea:	4628      	mov	r0, r5
 80113ec:	9301      	str	r3, [sp, #4]
 80113ee:	f000 faab 	bl	8011948 <_svfiprintf_r>
 80113f2:	1c43      	adds	r3, r0, #1
 80113f4:	bfbc      	itt	lt
 80113f6:	238b      	movlt	r3, #139	@ 0x8b
 80113f8:	602b      	strlt	r3, [r5, #0]
 80113fa:	2c00      	cmp	r4, #0
 80113fc:	d0dd      	beq.n	80113ba <sniprintf+0x16>
 80113fe:	9b02      	ldr	r3, [sp, #8]
 8011400:	2200      	movs	r2, #0
 8011402:	701a      	strb	r2, [r3, #0]
 8011404:	e7d9      	b.n	80113ba <sniprintf+0x16>
 8011406:	bf00      	nop
 8011408:	20000078 	.word	0x20000078

0801140c <siprintf>:
 801140c:	b40e      	push	{r1, r2, r3}
 801140e:	b500      	push	{lr}
 8011410:	b09c      	sub	sp, #112	@ 0x70
 8011412:	ab1d      	add	r3, sp, #116	@ 0x74
 8011414:	9002      	str	r0, [sp, #8]
 8011416:	9006      	str	r0, [sp, #24]
 8011418:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801141c:	4809      	ldr	r0, [pc, #36]	@ (8011444 <siprintf+0x38>)
 801141e:	9107      	str	r1, [sp, #28]
 8011420:	9104      	str	r1, [sp, #16]
 8011422:	4909      	ldr	r1, [pc, #36]	@ (8011448 <siprintf+0x3c>)
 8011424:	f853 2b04 	ldr.w	r2, [r3], #4
 8011428:	9105      	str	r1, [sp, #20]
 801142a:	6800      	ldr	r0, [r0, #0]
 801142c:	9301      	str	r3, [sp, #4]
 801142e:	a902      	add	r1, sp, #8
 8011430:	f000 fa8a 	bl	8011948 <_svfiprintf_r>
 8011434:	9b02      	ldr	r3, [sp, #8]
 8011436:	2200      	movs	r2, #0
 8011438:	701a      	strb	r2, [r3, #0]
 801143a:	b01c      	add	sp, #112	@ 0x70
 801143c:	f85d eb04 	ldr.w	lr, [sp], #4
 8011440:	b003      	add	sp, #12
 8011442:	4770      	bx	lr
 8011444:	20000078 	.word	0x20000078
 8011448:	ffff0208 	.word	0xffff0208

0801144c <__sread>:
 801144c:	b510      	push	{r4, lr}
 801144e:	460c      	mov	r4, r1
 8011450:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011454:	f000 f8a4 	bl	80115a0 <_read_r>
 8011458:	2800      	cmp	r0, #0
 801145a:	bfab      	itete	ge
 801145c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801145e:	89a3      	ldrhlt	r3, [r4, #12]
 8011460:	181b      	addge	r3, r3, r0
 8011462:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8011466:	bfac      	ite	ge
 8011468:	6563      	strge	r3, [r4, #84]	@ 0x54
 801146a:	81a3      	strhlt	r3, [r4, #12]
 801146c:	bd10      	pop	{r4, pc}

0801146e <__swrite>:
 801146e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011472:	461f      	mov	r7, r3
 8011474:	898b      	ldrh	r3, [r1, #12]
 8011476:	05db      	lsls	r3, r3, #23
 8011478:	4605      	mov	r5, r0
 801147a:	460c      	mov	r4, r1
 801147c:	4616      	mov	r6, r2
 801147e:	d505      	bpl.n	801148c <__swrite+0x1e>
 8011480:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011484:	2302      	movs	r3, #2
 8011486:	2200      	movs	r2, #0
 8011488:	f000 f878 	bl	801157c <_lseek_r>
 801148c:	89a3      	ldrh	r3, [r4, #12]
 801148e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011492:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8011496:	81a3      	strh	r3, [r4, #12]
 8011498:	4632      	mov	r2, r6
 801149a:	463b      	mov	r3, r7
 801149c:	4628      	mov	r0, r5
 801149e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80114a2:	f000 b88f 	b.w	80115c4 <_write_r>

080114a6 <__sseek>:
 80114a6:	b510      	push	{r4, lr}
 80114a8:	460c      	mov	r4, r1
 80114aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80114ae:	f000 f865 	bl	801157c <_lseek_r>
 80114b2:	1c43      	adds	r3, r0, #1
 80114b4:	89a3      	ldrh	r3, [r4, #12]
 80114b6:	bf15      	itete	ne
 80114b8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80114ba:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80114be:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80114c2:	81a3      	strheq	r3, [r4, #12]
 80114c4:	bf18      	it	ne
 80114c6:	81a3      	strhne	r3, [r4, #12]
 80114c8:	bd10      	pop	{r4, pc}

080114ca <__sclose>:
 80114ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80114ce:	f000 b845 	b.w	801155c <_close_r>

080114d2 <memcmp>:
 80114d2:	b510      	push	{r4, lr}
 80114d4:	3901      	subs	r1, #1
 80114d6:	4402      	add	r2, r0
 80114d8:	4290      	cmp	r0, r2
 80114da:	d101      	bne.n	80114e0 <memcmp+0xe>
 80114dc:	2000      	movs	r0, #0
 80114de:	e005      	b.n	80114ec <memcmp+0x1a>
 80114e0:	7803      	ldrb	r3, [r0, #0]
 80114e2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80114e6:	42a3      	cmp	r3, r4
 80114e8:	d001      	beq.n	80114ee <memcmp+0x1c>
 80114ea:	1b18      	subs	r0, r3, r4
 80114ec:	bd10      	pop	{r4, pc}
 80114ee:	3001      	adds	r0, #1
 80114f0:	e7f2      	b.n	80114d8 <memcmp+0x6>

080114f2 <memmove>:
 80114f2:	4288      	cmp	r0, r1
 80114f4:	b510      	push	{r4, lr}
 80114f6:	eb01 0402 	add.w	r4, r1, r2
 80114fa:	d902      	bls.n	8011502 <memmove+0x10>
 80114fc:	4284      	cmp	r4, r0
 80114fe:	4623      	mov	r3, r4
 8011500:	d807      	bhi.n	8011512 <memmove+0x20>
 8011502:	1e43      	subs	r3, r0, #1
 8011504:	42a1      	cmp	r1, r4
 8011506:	d008      	beq.n	801151a <memmove+0x28>
 8011508:	f811 2b01 	ldrb.w	r2, [r1], #1
 801150c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011510:	e7f8      	b.n	8011504 <memmove+0x12>
 8011512:	4402      	add	r2, r0
 8011514:	4601      	mov	r1, r0
 8011516:	428a      	cmp	r2, r1
 8011518:	d100      	bne.n	801151c <memmove+0x2a>
 801151a:	bd10      	pop	{r4, pc}
 801151c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011520:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011524:	e7f7      	b.n	8011516 <memmove+0x24>

08011526 <memset>:
 8011526:	4402      	add	r2, r0
 8011528:	4603      	mov	r3, r0
 801152a:	4293      	cmp	r3, r2
 801152c:	d100      	bne.n	8011530 <memset+0xa>
 801152e:	4770      	bx	lr
 8011530:	f803 1b01 	strb.w	r1, [r3], #1
 8011534:	e7f9      	b.n	801152a <memset+0x4>

08011536 <strncpy>:
 8011536:	b510      	push	{r4, lr}
 8011538:	3901      	subs	r1, #1
 801153a:	4603      	mov	r3, r0
 801153c:	b132      	cbz	r2, 801154c <strncpy+0x16>
 801153e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8011542:	f803 4b01 	strb.w	r4, [r3], #1
 8011546:	3a01      	subs	r2, #1
 8011548:	2c00      	cmp	r4, #0
 801154a:	d1f7      	bne.n	801153c <strncpy+0x6>
 801154c:	441a      	add	r2, r3
 801154e:	2100      	movs	r1, #0
 8011550:	4293      	cmp	r3, r2
 8011552:	d100      	bne.n	8011556 <strncpy+0x20>
 8011554:	bd10      	pop	{r4, pc}
 8011556:	f803 1b01 	strb.w	r1, [r3], #1
 801155a:	e7f9      	b.n	8011550 <strncpy+0x1a>

0801155c <_close_r>:
 801155c:	b538      	push	{r3, r4, r5, lr}
 801155e:	4d06      	ldr	r5, [pc, #24]	@ (8011578 <_close_r+0x1c>)
 8011560:	2300      	movs	r3, #0
 8011562:	4604      	mov	r4, r0
 8011564:	4608      	mov	r0, r1
 8011566:	602b      	str	r3, [r5, #0]
 8011568:	f7ef fe54 	bl	8001214 <_close>
 801156c:	1c43      	adds	r3, r0, #1
 801156e:	d102      	bne.n	8011576 <_close_r+0x1a>
 8011570:	682b      	ldr	r3, [r5, #0]
 8011572:	b103      	cbz	r3, 8011576 <_close_r+0x1a>
 8011574:	6023      	str	r3, [r4, #0]
 8011576:	bd38      	pop	{r3, r4, r5, pc}
 8011578:	2000aa80 	.word	0x2000aa80

0801157c <_lseek_r>:
 801157c:	b538      	push	{r3, r4, r5, lr}
 801157e:	4d07      	ldr	r5, [pc, #28]	@ (801159c <_lseek_r+0x20>)
 8011580:	4604      	mov	r4, r0
 8011582:	4608      	mov	r0, r1
 8011584:	4611      	mov	r1, r2
 8011586:	2200      	movs	r2, #0
 8011588:	602a      	str	r2, [r5, #0]
 801158a:	461a      	mov	r2, r3
 801158c:	f7ef fe69 	bl	8001262 <_lseek>
 8011590:	1c43      	adds	r3, r0, #1
 8011592:	d102      	bne.n	801159a <_lseek_r+0x1e>
 8011594:	682b      	ldr	r3, [r5, #0]
 8011596:	b103      	cbz	r3, 801159a <_lseek_r+0x1e>
 8011598:	6023      	str	r3, [r4, #0]
 801159a:	bd38      	pop	{r3, r4, r5, pc}
 801159c:	2000aa80 	.word	0x2000aa80

080115a0 <_read_r>:
 80115a0:	b538      	push	{r3, r4, r5, lr}
 80115a2:	4d07      	ldr	r5, [pc, #28]	@ (80115c0 <_read_r+0x20>)
 80115a4:	4604      	mov	r4, r0
 80115a6:	4608      	mov	r0, r1
 80115a8:	4611      	mov	r1, r2
 80115aa:	2200      	movs	r2, #0
 80115ac:	602a      	str	r2, [r5, #0]
 80115ae:	461a      	mov	r2, r3
 80115b0:	f7ef fdf7 	bl	80011a2 <_read>
 80115b4:	1c43      	adds	r3, r0, #1
 80115b6:	d102      	bne.n	80115be <_read_r+0x1e>
 80115b8:	682b      	ldr	r3, [r5, #0]
 80115ba:	b103      	cbz	r3, 80115be <_read_r+0x1e>
 80115bc:	6023      	str	r3, [r4, #0]
 80115be:	bd38      	pop	{r3, r4, r5, pc}
 80115c0:	2000aa80 	.word	0x2000aa80

080115c4 <_write_r>:
 80115c4:	b538      	push	{r3, r4, r5, lr}
 80115c6:	4d07      	ldr	r5, [pc, #28]	@ (80115e4 <_write_r+0x20>)
 80115c8:	4604      	mov	r4, r0
 80115ca:	4608      	mov	r0, r1
 80115cc:	4611      	mov	r1, r2
 80115ce:	2200      	movs	r2, #0
 80115d0:	602a      	str	r2, [r5, #0]
 80115d2:	461a      	mov	r2, r3
 80115d4:	f7ef fe02 	bl	80011dc <_write>
 80115d8:	1c43      	adds	r3, r0, #1
 80115da:	d102      	bne.n	80115e2 <_write_r+0x1e>
 80115dc:	682b      	ldr	r3, [r5, #0]
 80115de:	b103      	cbz	r3, 80115e2 <_write_r+0x1e>
 80115e0:	6023      	str	r3, [r4, #0]
 80115e2:	bd38      	pop	{r3, r4, r5, pc}
 80115e4:	2000aa80 	.word	0x2000aa80

080115e8 <__libc_init_array>:
 80115e8:	b570      	push	{r4, r5, r6, lr}
 80115ea:	4d0d      	ldr	r5, [pc, #52]	@ (8011620 <__libc_init_array+0x38>)
 80115ec:	4c0d      	ldr	r4, [pc, #52]	@ (8011624 <__libc_init_array+0x3c>)
 80115ee:	1b64      	subs	r4, r4, r5
 80115f0:	10a4      	asrs	r4, r4, #2
 80115f2:	2600      	movs	r6, #0
 80115f4:	42a6      	cmp	r6, r4
 80115f6:	d109      	bne.n	801160c <__libc_init_array+0x24>
 80115f8:	4d0b      	ldr	r5, [pc, #44]	@ (8011628 <__libc_init_array+0x40>)
 80115fa:	4c0c      	ldr	r4, [pc, #48]	@ (801162c <__libc_init_array+0x44>)
 80115fc:	f000 ffd8 	bl	80125b0 <_init>
 8011600:	1b64      	subs	r4, r4, r5
 8011602:	10a4      	asrs	r4, r4, #2
 8011604:	2600      	movs	r6, #0
 8011606:	42a6      	cmp	r6, r4
 8011608:	d105      	bne.n	8011616 <__libc_init_array+0x2e>
 801160a:	bd70      	pop	{r4, r5, r6, pc}
 801160c:	f855 3b04 	ldr.w	r3, [r5], #4
 8011610:	4798      	blx	r3
 8011612:	3601      	adds	r6, #1
 8011614:	e7ee      	b.n	80115f4 <__libc_init_array+0xc>
 8011616:	f855 3b04 	ldr.w	r3, [r5], #4
 801161a:	4798      	blx	r3
 801161c:	3601      	adds	r6, #1
 801161e:	e7f2      	b.n	8011606 <__libc_init_array+0x1e>
 8011620:	08015274 	.word	0x08015274
 8011624:	08015274 	.word	0x08015274
 8011628:	08015274 	.word	0x08015274
 801162c:	08015278 	.word	0x08015278

08011630 <__retarget_lock_init_recursive>:
 8011630:	4770      	bx	lr

08011632 <__retarget_lock_acquire_recursive>:
 8011632:	4770      	bx	lr

08011634 <__retarget_lock_release_recursive>:
 8011634:	4770      	bx	lr

08011636 <memcpy>:
 8011636:	440a      	add	r2, r1
 8011638:	4291      	cmp	r1, r2
 801163a:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 801163e:	d100      	bne.n	8011642 <memcpy+0xc>
 8011640:	4770      	bx	lr
 8011642:	b510      	push	{r4, lr}
 8011644:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011648:	f803 4f01 	strb.w	r4, [r3, #1]!
 801164c:	4291      	cmp	r1, r2
 801164e:	d1f9      	bne.n	8011644 <memcpy+0xe>
 8011650:	bd10      	pop	{r4, pc}
	...

08011654 <__assert_func>:
 8011654:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011656:	4614      	mov	r4, r2
 8011658:	461a      	mov	r2, r3
 801165a:	4b09      	ldr	r3, [pc, #36]	@ (8011680 <__assert_func+0x2c>)
 801165c:	681b      	ldr	r3, [r3, #0]
 801165e:	4605      	mov	r5, r0
 8011660:	68d8      	ldr	r0, [r3, #12]
 8011662:	b954      	cbnz	r4, 801167a <__assert_func+0x26>
 8011664:	4b07      	ldr	r3, [pc, #28]	@ (8011684 <__assert_func+0x30>)
 8011666:	461c      	mov	r4, r3
 8011668:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801166c:	9100      	str	r1, [sp, #0]
 801166e:	462b      	mov	r3, r5
 8011670:	4905      	ldr	r1, [pc, #20]	@ (8011688 <__assert_func+0x34>)
 8011672:	f000 fde1 	bl	8012238 <fiprintf>
 8011676:	f000 fe95 	bl	80123a4 <abort>
 801167a:	4b04      	ldr	r3, [pc, #16]	@ (801168c <__assert_func+0x38>)
 801167c:	e7f4      	b.n	8011668 <__assert_func+0x14>
 801167e:	bf00      	nop
 8011680:	20000078 	.word	0x20000078
 8011684:	08015238 	.word	0x08015238
 8011688:	0801520a 	.word	0x0801520a
 801168c:	080151fd 	.word	0x080151fd

08011690 <_free_r>:
 8011690:	b538      	push	{r3, r4, r5, lr}
 8011692:	4605      	mov	r5, r0
 8011694:	2900      	cmp	r1, #0
 8011696:	d041      	beq.n	801171c <_free_r+0x8c>
 8011698:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801169c:	1f0c      	subs	r4, r1, #4
 801169e:	2b00      	cmp	r3, #0
 80116a0:	bfb8      	it	lt
 80116a2:	18e4      	addlt	r4, r4, r3
 80116a4:	f000 f8e8 	bl	8011878 <__malloc_lock>
 80116a8:	4a1d      	ldr	r2, [pc, #116]	@ (8011720 <_free_r+0x90>)
 80116aa:	6813      	ldr	r3, [r2, #0]
 80116ac:	b933      	cbnz	r3, 80116bc <_free_r+0x2c>
 80116ae:	6063      	str	r3, [r4, #4]
 80116b0:	6014      	str	r4, [r2, #0]
 80116b2:	4628      	mov	r0, r5
 80116b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80116b8:	f000 b8e4 	b.w	8011884 <__malloc_unlock>
 80116bc:	42a3      	cmp	r3, r4
 80116be:	d908      	bls.n	80116d2 <_free_r+0x42>
 80116c0:	6820      	ldr	r0, [r4, #0]
 80116c2:	1821      	adds	r1, r4, r0
 80116c4:	428b      	cmp	r3, r1
 80116c6:	bf01      	itttt	eq
 80116c8:	6819      	ldreq	r1, [r3, #0]
 80116ca:	685b      	ldreq	r3, [r3, #4]
 80116cc:	1809      	addeq	r1, r1, r0
 80116ce:	6021      	streq	r1, [r4, #0]
 80116d0:	e7ed      	b.n	80116ae <_free_r+0x1e>
 80116d2:	461a      	mov	r2, r3
 80116d4:	685b      	ldr	r3, [r3, #4]
 80116d6:	b10b      	cbz	r3, 80116dc <_free_r+0x4c>
 80116d8:	42a3      	cmp	r3, r4
 80116da:	d9fa      	bls.n	80116d2 <_free_r+0x42>
 80116dc:	6811      	ldr	r1, [r2, #0]
 80116de:	1850      	adds	r0, r2, r1
 80116e0:	42a0      	cmp	r0, r4
 80116e2:	d10b      	bne.n	80116fc <_free_r+0x6c>
 80116e4:	6820      	ldr	r0, [r4, #0]
 80116e6:	4401      	add	r1, r0
 80116e8:	1850      	adds	r0, r2, r1
 80116ea:	4283      	cmp	r3, r0
 80116ec:	6011      	str	r1, [r2, #0]
 80116ee:	d1e0      	bne.n	80116b2 <_free_r+0x22>
 80116f0:	6818      	ldr	r0, [r3, #0]
 80116f2:	685b      	ldr	r3, [r3, #4]
 80116f4:	6053      	str	r3, [r2, #4]
 80116f6:	4408      	add	r0, r1
 80116f8:	6010      	str	r0, [r2, #0]
 80116fa:	e7da      	b.n	80116b2 <_free_r+0x22>
 80116fc:	d902      	bls.n	8011704 <_free_r+0x74>
 80116fe:	230c      	movs	r3, #12
 8011700:	602b      	str	r3, [r5, #0]
 8011702:	e7d6      	b.n	80116b2 <_free_r+0x22>
 8011704:	6820      	ldr	r0, [r4, #0]
 8011706:	1821      	adds	r1, r4, r0
 8011708:	428b      	cmp	r3, r1
 801170a:	bf04      	itt	eq
 801170c:	6819      	ldreq	r1, [r3, #0]
 801170e:	685b      	ldreq	r3, [r3, #4]
 8011710:	6063      	str	r3, [r4, #4]
 8011712:	bf04      	itt	eq
 8011714:	1809      	addeq	r1, r1, r0
 8011716:	6021      	streq	r1, [r4, #0]
 8011718:	6054      	str	r4, [r2, #4]
 801171a:	e7ca      	b.n	80116b2 <_free_r+0x22>
 801171c:	bd38      	pop	{r3, r4, r5, pc}
 801171e:	bf00      	nop
 8011720:	2000aa8c 	.word	0x2000aa8c

08011724 <malloc>:
 8011724:	4b02      	ldr	r3, [pc, #8]	@ (8011730 <malloc+0xc>)
 8011726:	4601      	mov	r1, r0
 8011728:	6818      	ldr	r0, [r3, #0]
 801172a:	f000 b825 	b.w	8011778 <_malloc_r>
 801172e:	bf00      	nop
 8011730:	20000078 	.word	0x20000078

08011734 <sbrk_aligned>:
 8011734:	b570      	push	{r4, r5, r6, lr}
 8011736:	4e0f      	ldr	r6, [pc, #60]	@ (8011774 <sbrk_aligned+0x40>)
 8011738:	460c      	mov	r4, r1
 801173a:	6831      	ldr	r1, [r6, #0]
 801173c:	4605      	mov	r5, r0
 801173e:	b911      	cbnz	r1, 8011746 <sbrk_aligned+0x12>
 8011740:	f000 fe20 	bl	8012384 <_sbrk_r>
 8011744:	6030      	str	r0, [r6, #0]
 8011746:	4621      	mov	r1, r4
 8011748:	4628      	mov	r0, r5
 801174a:	f000 fe1b 	bl	8012384 <_sbrk_r>
 801174e:	1c43      	adds	r3, r0, #1
 8011750:	d103      	bne.n	801175a <sbrk_aligned+0x26>
 8011752:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8011756:	4620      	mov	r0, r4
 8011758:	bd70      	pop	{r4, r5, r6, pc}
 801175a:	1cc4      	adds	r4, r0, #3
 801175c:	f024 0403 	bic.w	r4, r4, #3
 8011760:	42a0      	cmp	r0, r4
 8011762:	d0f8      	beq.n	8011756 <sbrk_aligned+0x22>
 8011764:	1a21      	subs	r1, r4, r0
 8011766:	4628      	mov	r0, r5
 8011768:	f000 fe0c 	bl	8012384 <_sbrk_r>
 801176c:	3001      	adds	r0, #1
 801176e:	d1f2      	bne.n	8011756 <sbrk_aligned+0x22>
 8011770:	e7ef      	b.n	8011752 <sbrk_aligned+0x1e>
 8011772:	bf00      	nop
 8011774:	2000aa88 	.word	0x2000aa88

08011778 <_malloc_r>:
 8011778:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801177c:	1ccd      	adds	r5, r1, #3
 801177e:	f025 0503 	bic.w	r5, r5, #3
 8011782:	3508      	adds	r5, #8
 8011784:	2d0c      	cmp	r5, #12
 8011786:	bf38      	it	cc
 8011788:	250c      	movcc	r5, #12
 801178a:	2d00      	cmp	r5, #0
 801178c:	4606      	mov	r6, r0
 801178e:	db01      	blt.n	8011794 <_malloc_r+0x1c>
 8011790:	42a9      	cmp	r1, r5
 8011792:	d904      	bls.n	801179e <_malloc_r+0x26>
 8011794:	230c      	movs	r3, #12
 8011796:	6033      	str	r3, [r6, #0]
 8011798:	2000      	movs	r0, #0
 801179a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801179e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8011874 <_malloc_r+0xfc>
 80117a2:	f000 f869 	bl	8011878 <__malloc_lock>
 80117a6:	f8d8 3000 	ldr.w	r3, [r8]
 80117aa:	461c      	mov	r4, r3
 80117ac:	bb44      	cbnz	r4, 8011800 <_malloc_r+0x88>
 80117ae:	4629      	mov	r1, r5
 80117b0:	4630      	mov	r0, r6
 80117b2:	f7ff ffbf 	bl	8011734 <sbrk_aligned>
 80117b6:	1c43      	adds	r3, r0, #1
 80117b8:	4604      	mov	r4, r0
 80117ba:	d158      	bne.n	801186e <_malloc_r+0xf6>
 80117bc:	f8d8 4000 	ldr.w	r4, [r8]
 80117c0:	4627      	mov	r7, r4
 80117c2:	2f00      	cmp	r7, #0
 80117c4:	d143      	bne.n	801184e <_malloc_r+0xd6>
 80117c6:	2c00      	cmp	r4, #0
 80117c8:	d04b      	beq.n	8011862 <_malloc_r+0xea>
 80117ca:	6823      	ldr	r3, [r4, #0]
 80117cc:	4639      	mov	r1, r7
 80117ce:	4630      	mov	r0, r6
 80117d0:	eb04 0903 	add.w	r9, r4, r3
 80117d4:	f000 fdd6 	bl	8012384 <_sbrk_r>
 80117d8:	4581      	cmp	r9, r0
 80117da:	d142      	bne.n	8011862 <_malloc_r+0xea>
 80117dc:	6821      	ldr	r1, [r4, #0]
 80117de:	1a6d      	subs	r5, r5, r1
 80117e0:	4629      	mov	r1, r5
 80117e2:	4630      	mov	r0, r6
 80117e4:	f7ff ffa6 	bl	8011734 <sbrk_aligned>
 80117e8:	3001      	adds	r0, #1
 80117ea:	d03a      	beq.n	8011862 <_malloc_r+0xea>
 80117ec:	6823      	ldr	r3, [r4, #0]
 80117ee:	442b      	add	r3, r5
 80117f0:	6023      	str	r3, [r4, #0]
 80117f2:	f8d8 3000 	ldr.w	r3, [r8]
 80117f6:	685a      	ldr	r2, [r3, #4]
 80117f8:	bb62      	cbnz	r2, 8011854 <_malloc_r+0xdc>
 80117fa:	f8c8 7000 	str.w	r7, [r8]
 80117fe:	e00f      	b.n	8011820 <_malloc_r+0xa8>
 8011800:	6822      	ldr	r2, [r4, #0]
 8011802:	1b52      	subs	r2, r2, r5
 8011804:	d420      	bmi.n	8011848 <_malloc_r+0xd0>
 8011806:	2a0b      	cmp	r2, #11
 8011808:	d917      	bls.n	801183a <_malloc_r+0xc2>
 801180a:	1961      	adds	r1, r4, r5
 801180c:	42a3      	cmp	r3, r4
 801180e:	6025      	str	r5, [r4, #0]
 8011810:	bf18      	it	ne
 8011812:	6059      	strne	r1, [r3, #4]
 8011814:	6863      	ldr	r3, [r4, #4]
 8011816:	bf08      	it	eq
 8011818:	f8c8 1000 	streq.w	r1, [r8]
 801181c:	5162      	str	r2, [r4, r5]
 801181e:	604b      	str	r3, [r1, #4]
 8011820:	4630      	mov	r0, r6
 8011822:	f000 f82f 	bl	8011884 <__malloc_unlock>
 8011826:	f104 000b 	add.w	r0, r4, #11
 801182a:	1d23      	adds	r3, r4, #4
 801182c:	f020 0007 	bic.w	r0, r0, #7
 8011830:	1ac2      	subs	r2, r0, r3
 8011832:	bf1c      	itt	ne
 8011834:	1a1b      	subne	r3, r3, r0
 8011836:	50a3      	strne	r3, [r4, r2]
 8011838:	e7af      	b.n	801179a <_malloc_r+0x22>
 801183a:	6862      	ldr	r2, [r4, #4]
 801183c:	42a3      	cmp	r3, r4
 801183e:	bf0c      	ite	eq
 8011840:	f8c8 2000 	streq.w	r2, [r8]
 8011844:	605a      	strne	r2, [r3, #4]
 8011846:	e7eb      	b.n	8011820 <_malloc_r+0xa8>
 8011848:	4623      	mov	r3, r4
 801184a:	6864      	ldr	r4, [r4, #4]
 801184c:	e7ae      	b.n	80117ac <_malloc_r+0x34>
 801184e:	463c      	mov	r4, r7
 8011850:	687f      	ldr	r7, [r7, #4]
 8011852:	e7b6      	b.n	80117c2 <_malloc_r+0x4a>
 8011854:	461a      	mov	r2, r3
 8011856:	685b      	ldr	r3, [r3, #4]
 8011858:	42a3      	cmp	r3, r4
 801185a:	d1fb      	bne.n	8011854 <_malloc_r+0xdc>
 801185c:	2300      	movs	r3, #0
 801185e:	6053      	str	r3, [r2, #4]
 8011860:	e7de      	b.n	8011820 <_malloc_r+0xa8>
 8011862:	230c      	movs	r3, #12
 8011864:	6033      	str	r3, [r6, #0]
 8011866:	4630      	mov	r0, r6
 8011868:	f000 f80c 	bl	8011884 <__malloc_unlock>
 801186c:	e794      	b.n	8011798 <_malloc_r+0x20>
 801186e:	6005      	str	r5, [r0, #0]
 8011870:	e7d6      	b.n	8011820 <_malloc_r+0xa8>
 8011872:	bf00      	nop
 8011874:	2000aa8c 	.word	0x2000aa8c

08011878 <__malloc_lock>:
 8011878:	4801      	ldr	r0, [pc, #4]	@ (8011880 <__malloc_lock+0x8>)
 801187a:	f7ff beda 	b.w	8011632 <__retarget_lock_acquire_recursive>
 801187e:	bf00      	nop
 8011880:	2000aa84 	.word	0x2000aa84

08011884 <__malloc_unlock>:
 8011884:	4801      	ldr	r0, [pc, #4]	@ (801188c <__malloc_unlock+0x8>)
 8011886:	f7ff bed5 	b.w	8011634 <__retarget_lock_release_recursive>
 801188a:	bf00      	nop
 801188c:	2000aa84 	.word	0x2000aa84

08011890 <__ssputs_r>:
 8011890:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011894:	688e      	ldr	r6, [r1, #8]
 8011896:	461f      	mov	r7, r3
 8011898:	42be      	cmp	r6, r7
 801189a:	680b      	ldr	r3, [r1, #0]
 801189c:	4682      	mov	sl, r0
 801189e:	460c      	mov	r4, r1
 80118a0:	4690      	mov	r8, r2
 80118a2:	d82d      	bhi.n	8011900 <__ssputs_r+0x70>
 80118a4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80118a8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80118ac:	d026      	beq.n	80118fc <__ssputs_r+0x6c>
 80118ae:	6965      	ldr	r5, [r4, #20]
 80118b0:	6909      	ldr	r1, [r1, #16]
 80118b2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80118b6:	eba3 0901 	sub.w	r9, r3, r1
 80118ba:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80118be:	1c7b      	adds	r3, r7, #1
 80118c0:	444b      	add	r3, r9
 80118c2:	106d      	asrs	r5, r5, #1
 80118c4:	429d      	cmp	r5, r3
 80118c6:	bf38      	it	cc
 80118c8:	461d      	movcc	r5, r3
 80118ca:	0553      	lsls	r3, r2, #21
 80118cc:	d527      	bpl.n	801191e <__ssputs_r+0x8e>
 80118ce:	4629      	mov	r1, r5
 80118d0:	f7ff ff52 	bl	8011778 <_malloc_r>
 80118d4:	4606      	mov	r6, r0
 80118d6:	b360      	cbz	r0, 8011932 <__ssputs_r+0xa2>
 80118d8:	6921      	ldr	r1, [r4, #16]
 80118da:	464a      	mov	r2, r9
 80118dc:	f7ff feab 	bl	8011636 <memcpy>
 80118e0:	89a3      	ldrh	r3, [r4, #12]
 80118e2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80118e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80118ea:	81a3      	strh	r3, [r4, #12]
 80118ec:	6126      	str	r6, [r4, #16]
 80118ee:	6165      	str	r5, [r4, #20]
 80118f0:	444e      	add	r6, r9
 80118f2:	eba5 0509 	sub.w	r5, r5, r9
 80118f6:	6026      	str	r6, [r4, #0]
 80118f8:	60a5      	str	r5, [r4, #8]
 80118fa:	463e      	mov	r6, r7
 80118fc:	42be      	cmp	r6, r7
 80118fe:	d900      	bls.n	8011902 <__ssputs_r+0x72>
 8011900:	463e      	mov	r6, r7
 8011902:	6820      	ldr	r0, [r4, #0]
 8011904:	4632      	mov	r2, r6
 8011906:	4641      	mov	r1, r8
 8011908:	f7ff fdf3 	bl	80114f2 <memmove>
 801190c:	68a3      	ldr	r3, [r4, #8]
 801190e:	1b9b      	subs	r3, r3, r6
 8011910:	60a3      	str	r3, [r4, #8]
 8011912:	6823      	ldr	r3, [r4, #0]
 8011914:	4433      	add	r3, r6
 8011916:	6023      	str	r3, [r4, #0]
 8011918:	2000      	movs	r0, #0
 801191a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801191e:	462a      	mov	r2, r5
 8011920:	f000 fd47 	bl	80123b2 <_realloc_r>
 8011924:	4606      	mov	r6, r0
 8011926:	2800      	cmp	r0, #0
 8011928:	d1e0      	bne.n	80118ec <__ssputs_r+0x5c>
 801192a:	6921      	ldr	r1, [r4, #16]
 801192c:	4650      	mov	r0, sl
 801192e:	f7ff feaf 	bl	8011690 <_free_r>
 8011932:	230c      	movs	r3, #12
 8011934:	f8ca 3000 	str.w	r3, [sl]
 8011938:	89a3      	ldrh	r3, [r4, #12]
 801193a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801193e:	81a3      	strh	r3, [r4, #12]
 8011940:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011944:	e7e9      	b.n	801191a <__ssputs_r+0x8a>
	...

08011948 <_svfiprintf_r>:
 8011948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801194c:	4698      	mov	r8, r3
 801194e:	898b      	ldrh	r3, [r1, #12]
 8011950:	061b      	lsls	r3, r3, #24
 8011952:	b09d      	sub	sp, #116	@ 0x74
 8011954:	4607      	mov	r7, r0
 8011956:	460d      	mov	r5, r1
 8011958:	4614      	mov	r4, r2
 801195a:	d510      	bpl.n	801197e <_svfiprintf_r+0x36>
 801195c:	690b      	ldr	r3, [r1, #16]
 801195e:	b973      	cbnz	r3, 801197e <_svfiprintf_r+0x36>
 8011960:	2140      	movs	r1, #64	@ 0x40
 8011962:	f7ff ff09 	bl	8011778 <_malloc_r>
 8011966:	6028      	str	r0, [r5, #0]
 8011968:	6128      	str	r0, [r5, #16]
 801196a:	b930      	cbnz	r0, 801197a <_svfiprintf_r+0x32>
 801196c:	230c      	movs	r3, #12
 801196e:	603b      	str	r3, [r7, #0]
 8011970:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011974:	b01d      	add	sp, #116	@ 0x74
 8011976:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801197a:	2340      	movs	r3, #64	@ 0x40
 801197c:	616b      	str	r3, [r5, #20]
 801197e:	2300      	movs	r3, #0
 8011980:	9309      	str	r3, [sp, #36]	@ 0x24
 8011982:	2320      	movs	r3, #32
 8011984:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011988:	f8cd 800c 	str.w	r8, [sp, #12]
 801198c:	2330      	movs	r3, #48	@ 0x30
 801198e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8011b2c <_svfiprintf_r+0x1e4>
 8011992:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011996:	f04f 0901 	mov.w	r9, #1
 801199a:	4623      	mov	r3, r4
 801199c:	469a      	mov	sl, r3
 801199e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80119a2:	b10a      	cbz	r2, 80119a8 <_svfiprintf_r+0x60>
 80119a4:	2a25      	cmp	r2, #37	@ 0x25
 80119a6:	d1f9      	bne.n	801199c <_svfiprintf_r+0x54>
 80119a8:	ebba 0b04 	subs.w	fp, sl, r4
 80119ac:	d00b      	beq.n	80119c6 <_svfiprintf_r+0x7e>
 80119ae:	465b      	mov	r3, fp
 80119b0:	4622      	mov	r2, r4
 80119b2:	4629      	mov	r1, r5
 80119b4:	4638      	mov	r0, r7
 80119b6:	f7ff ff6b 	bl	8011890 <__ssputs_r>
 80119ba:	3001      	adds	r0, #1
 80119bc:	f000 80a7 	beq.w	8011b0e <_svfiprintf_r+0x1c6>
 80119c0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80119c2:	445a      	add	r2, fp
 80119c4:	9209      	str	r2, [sp, #36]	@ 0x24
 80119c6:	f89a 3000 	ldrb.w	r3, [sl]
 80119ca:	2b00      	cmp	r3, #0
 80119cc:	f000 809f 	beq.w	8011b0e <_svfiprintf_r+0x1c6>
 80119d0:	2300      	movs	r3, #0
 80119d2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80119d6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80119da:	f10a 0a01 	add.w	sl, sl, #1
 80119de:	9304      	str	r3, [sp, #16]
 80119e0:	9307      	str	r3, [sp, #28]
 80119e2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80119e6:	931a      	str	r3, [sp, #104]	@ 0x68
 80119e8:	4654      	mov	r4, sl
 80119ea:	2205      	movs	r2, #5
 80119ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80119f0:	484e      	ldr	r0, [pc, #312]	@ (8011b2c <_svfiprintf_r+0x1e4>)
 80119f2:	f7ee fc2d 	bl	8000250 <memchr>
 80119f6:	9a04      	ldr	r2, [sp, #16]
 80119f8:	b9d8      	cbnz	r0, 8011a32 <_svfiprintf_r+0xea>
 80119fa:	06d0      	lsls	r0, r2, #27
 80119fc:	bf44      	itt	mi
 80119fe:	2320      	movmi	r3, #32
 8011a00:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011a04:	0711      	lsls	r1, r2, #28
 8011a06:	bf44      	itt	mi
 8011a08:	232b      	movmi	r3, #43	@ 0x2b
 8011a0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011a0e:	f89a 3000 	ldrb.w	r3, [sl]
 8011a12:	2b2a      	cmp	r3, #42	@ 0x2a
 8011a14:	d015      	beq.n	8011a42 <_svfiprintf_r+0xfa>
 8011a16:	9a07      	ldr	r2, [sp, #28]
 8011a18:	4654      	mov	r4, sl
 8011a1a:	2000      	movs	r0, #0
 8011a1c:	f04f 0c0a 	mov.w	ip, #10
 8011a20:	4621      	mov	r1, r4
 8011a22:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011a26:	3b30      	subs	r3, #48	@ 0x30
 8011a28:	2b09      	cmp	r3, #9
 8011a2a:	d94b      	bls.n	8011ac4 <_svfiprintf_r+0x17c>
 8011a2c:	b1b0      	cbz	r0, 8011a5c <_svfiprintf_r+0x114>
 8011a2e:	9207      	str	r2, [sp, #28]
 8011a30:	e014      	b.n	8011a5c <_svfiprintf_r+0x114>
 8011a32:	eba0 0308 	sub.w	r3, r0, r8
 8011a36:	fa09 f303 	lsl.w	r3, r9, r3
 8011a3a:	4313      	orrs	r3, r2
 8011a3c:	9304      	str	r3, [sp, #16]
 8011a3e:	46a2      	mov	sl, r4
 8011a40:	e7d2      	b.n	80119e8 <_svfiprintf_r+0xa0>
 8011a42:	9b03      	ldr	r3, [sp, #12]
 8011a44:	1d19      	adds	r1, r3, #4
 8011a46:	681b      	ldr	r3, [r3, #0]
 8011a48:	9103      	str	r1, [sp, #12]
 8011a4a:	2b00      	cmp	r3, #0
 8011a4c:	bfbb      	ittet	lt
 8011a4e:	425b      	neglt	r3, r3
 8011a50:	f042 0202 	orrlt.w	r2, r2, #2
 8011a54:	9307      	strge	r3, [sp, #28]
 8011a56:	9307      	strlt	r3, [sp, #28]
 8011a58:	bfb8      	it	lt
 8011a5a:	9204      	strlt	r2, [sp, #16]
 8011a5c:	7823      	ldrb	r3, [r4, #0]
 8011a5e:	2b2e      	cmp	r3, #46	@ 0x2e
 8011a60:	d10a      	bne.n	8011a78 <_svfiprintf_r+0x130>
 8011a62:	7863      	ldrb	r3, [r4, #1]
 8011a64:	2b2a      	cmp	r3, #42	@ 0x2a
 8011a66:	d132      	bne.n	8011ace <_svfiprintf_r+0x186>
 8011a68:	9b03      	ldr	r3, [sp, #12]
 8011a6a:	1d1a      	adds	r2, r3, #4
 8011a6c:	681b      	ldr	r3, [r3, #0]
 8011a6e:	9203      	str	r2, [sp, #12]
 8011a70:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011a74:	3402      	adds	r4, #2
 8011a76:	9305      	str	r3, [sp, #20]
 8011a78:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8011b3c <_svfiprintf_r+0x1f4>
 8011a7c:	7821      	ldrb	r1, [r4, #0]
 8011a7e:	2203      	movs	r2, #3
 8011a80:	4650      	mov	r0, sl
 8011a82:	f7ee fbe5 	bl	8000250 <memchr>
 8011a86:	b138      	cbz	r0, 8011a98 <_svfiprintf_r+0x150>
 8011a88:	9b04      	ldr	r3, [sp, #16]
 8011a8a:	eba0 000a 	sub.w	r0, r0, sl
 8011a8e:	2240      	movs	r2, #64	@ 0x40
 8011a90:	4082      	lsls	r2, r0
 8011a92:	4313      	orrs	r3, r2
 8011a94:	3401      	adds	r4, #1
 8011a96:	9304      	str	r3, [sp, #16]
 8011a98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011a9c:	4824      	ldr	r0, [pc, #144]	@ (8011b30 <_svfiprintf_r+0x1e8>)
 8011a9e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011aa2:	2206      	movs	r2, #6
 8011aa4:	f7ee fbd4 	bl	8000250 <memchr>
 8011aa8:	2800      	cmp	r0, #0
 8011aaa:	d036      	beq.n	8011b1a <_svfiprintf_r+0x1d2>
 8011aac:	4b21      	ldr	r3, [pc, #132]	@ (8011b34 <_svfiprintf_r+0x1ec>)
 8011aae:	bb1b      	cbnz	r3, 8011af8 <_svfiprintf_r+0x1b0>
 8011ab0:	9b03      	ldr	r3, [sp, #12]
 8011ab2:	3307      	adds	r3, #7
 8011ab4:	f023 0307 	bic.w	r3, r3, #7
 8011ab8:	3308      	adds	r3, #8
 8011aba:	9303      	str	r3, [sp, #12]
 8011abc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011abe:	4433      	add	r3, r6
 8011ac0:	9309      	str	r3, [sp, #36]	@ 0x24
 8011ac2:	e76a      	b.n	801199a <_svfiprintf_r+0x52>
 8011ac4:	fb0c 3202 	mla	r2, ip, r2, r3
 8011ac8:	460c      	mov	r4, r1
 8011aca:	2001      	movs	r0, #1
 8011acc:	e7a8      	b.n	8011a20 <_svfiprintf_r+0xd8>
 8011ace:	2300      	movs	r3, #0
 8011ad0:	3401      	adds	r4, #1
 8011ad2:	9305      	str	r3, [sp, #20]
 8011ad4:	4619      	mov	r1, r3
 8011ad6:	f04f 0c0a 	mov.w	ip, #10
 8011ada:	4620      	mov	r0, r4
 8011adc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011ae0:	3a30      	subs	r2, #48	@ 0x30
 8011ae2:	2a09      	cmp	r2, #9
 8011ae4:	d903      	bls.n	8011aee <_svfiprintf_r+0x1a6>
 8011ae6:	2b00      	cmp	r3, #0
 8011ae8:	d0c6      	beq.n	8011a78 <_svfiprintf_r+0x130>
 8011aea:	9105      	str	r1, [sp, #20]
 8011aec:	e7c4      	b.n	8011a78 <_svfiprintf_r+0x130>
 8011aee:	fb0c 2101 	mla	r1, ip, r1, r2
 8011af2:	4604      	mov	r4, r0
 8011af4:	2301      	movs	r3, #1
 8011af6:	e7f0      	b.n	8011ada <_svfiprintf_r+0x192>
 8011af8:	ab03      	add	r3, sp, #12
 8011afa:	9300      	str	r3, [sp, #0]
 8011afc:	462a      	mov	r2, r5
 8011afe:	4b0e      	ldr	r3, [pc, #56]	@ (8011b38 <_svfiprintf_r+0x1f0>)
 8011b00:	a904      	add	r1, sp, #16
 8011b02:	4638      	mov	r0, r7
 8011b04:	f3af 8000 	nop.w
 8011b08:	1c42      	adds	r2, r0, #1
 8011b0a:	4606      	mov	r6, r0
 8011b0c:	d1d6      	bne.n	8011abc <_svfiprintf_r+0x174>
 8011b0e:	89ab      	ldrh	r3, [r5, #12]
 8011b10:	065b      	lsls	r3, r3, #25
 8011b12:	f53f af2d 	bmi.w	8011970 <_svfiprintf_r+0x28>
 8011b16:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011b18:	e72c      	b.n	8011974 <_svfiprintf_r+0x2c>
 8011b1a:	ab03      	add	r3, sp, #12
 8011b1c:	9300      	str	r3, [sp, #0]
 8011b1e:	462a      	mov	r2, r5
 8011b20:	4b05      	ldr	r3, [pc, #20]	@ (8011b38 <_svfiprintf_r+0x1f0>)
 8011b22:	a904      	add	r1, sp, #16
 8011b24:	4638      	mov	r0, r7
 8011b26:	f000 f9bb 	bl	8011ea0 <_printf_i>
 8011b2a:	e7ed      	b.n	8011b08 <_svfiprintf_r+0x1c0>
 8011b2c:	08015239 	.word	0x08015239
 8011b30:	08015243 	.word	0x08015243
 8011b34:	00000000 	.word	0x00000000
 8011b38:	08011891 	.word	0x08011891
 8011b3c:	0801523f 	.word	0x0801523f

08011b40 <__sfputc_r>:
 8011b40:	6893      	ldr	r3, [r2, #8]
 8011b42:	3b01      	subs	r3, #1
 8011b44:	2b00      	cmp	r3, #0
 8011b46:	b410      	push	{r4}
 8011b48:	6093      	str	r3, [r2, #8]
 8011b4a:	da08      	bge.n	8011b5e <__sfputc_r+0x1e>
 8011b4c:	6994      	ldr	r4, [r2, #24]
 8011b4e:	42a3      	cmp	r3, r4
 8011b50:	db01      	blt.n	8011b56 <__sfputc_r+0x16>
 8011b52:	290a      	cmp	r1, #10
 8011b54:	d103      	bne.n	8011b5e <__sfputc_r+0x1e>
 8011b56:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011b5a:	f000 bb7f 	b.w	801225c <__swbuf_r>
 8011b5e:	6813      	ldr	r3, [r2, #0]
 8011b60:	1c58      	adds	r0, r3, #1
 8011b62:	6010      	str	r0, [r2, #0]
 8011b64:	7019      	strb	r1, [r3, #0]
 8011b66:	4608      	mov	r0, r1
 8011b68:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011b6c:	4770      	bx	lr

08011b6e <__sfputs_r>:
 8011b6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011b70:	4606      	mov	r6, r0
 8011b72:	460f      	mov	r7, r1
 8011b74:	4614      	mov	r4, r2
 8011b76:	18d5      	adds	r5, r2, r3
 8011b78:	42ac      	cmp	r4, r5
 8011b7a:	d101      	bne.n	8011b80 <__sfputs_r+0x12>
 8011b7c:	2000      	movs	r0, #0
 8011b7e:	e007      	b.n	8011b90 <__sfputs_r+0x22>
 8011b80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011b84:	463a      	mov	r2, r7
 8011b86:	4630      	mov	r0, r6
 8011b88:	f7ff ffda 	bl	8011b40 <__sfputc_r>
 8011b8c:	1c43      	adds	r3, r0, #1
 8011b8e:	d1f3      	bne.n	8011b78 <__sfputs_r+0xa>
 8011b90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011b94 <_vfiprintf_r>:
 8011b94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b98:	460d      	mov	r5, r1
 8011b9a:	b09d      	sub	sp, #116	@ 0x74
 8011b9c:	4614      	mov	r4, r2
 8011b9e:	4698      	mov	r8, r3
 8011ba0:	4606      	mov	r6, r0
 8011ba2:	b118      	cbz	r0, 8011bac <_vfiprintf_r+0x18>
 8011ba4:	6a03      	ldr	r3, [r0, #32]
 8011ba6:	b90b      	cbnz	r3, 8011bac <_vfiprintf_r+0x18>
 8011ba8:	f7ff fbb4 	bl	8011314 <__sinit>
 8011bac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011bae:	07d9      	lsls	r1, r3, #31
 8011bb0:	d405      	bmi.n	8011bbe <_vfiprintf_r+0x2a>
 8011bb2:	89ab      	ldrh	r3, [r5, #12]
 8011bb4:	059a      	lsls	r2, r3, #22
 8011bb6:	d402      	bmi.n	8011bbe <_vfiprintf_r+0x2a>
 8011bb8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011bba:	f7ff fd3a 	bl	8011632 <__retarget_lock_acquire_recursive>
 8011bbe:	89ab      	ldrh	r3, [r5, #12]
 8011bc0:	071b      	lsls	r3, r3, #28
 8011bc2:	d501      	bpl.n	8011bc8 <_vfiprintf_r+0x34>
 8011bc4:	692b      	ldr	r3, [r5, #16]
 8011bc6:	b99b      	cbnz	r3, 8011bf0 <_vfiprintf_r+0x5c>
 8011bc8:	4629      	mov	r1, r5
 8011bca:	4630      	mov	r0, r6
 8011bcc:	f000 fb84 	bl	80122d8 <__swsetup_r>
 8011bd0:	b170      	cbz	r0, 8011bf0 <_vfiprintf_r+0x5c>
 8011bd2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011bd4:	07dc      	lsls	r4, r3, #31
 8011bd6:	d504      	bpl.n	8011be2 <_vfiprintf_r+0x4e>
 8011bd8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011bdc:	b01d      	add	sp, #116	@ 0x74
 8011bde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011be2:	89ab      	ldrh	r3, [r5, #12]
 8011be4:	0598      	lsls	r0, r3, #22
 8011be6:	d4f7      	bmi.n	8011bd8 <_vfiprintf_r+0x44>
 8011be8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011bea:	f7ff fd23 	bl	8011634 <__retarget_lock_release_recursive>
 8011bee:	e7f3      	b.n	8011bd8 <_vfiprintf_r+0x44>
 8011bf0:	2300      	movs	r3, #0
 8011bf2:	9309      	str	r3, [sp, #36]	@ 0x24
 8011bf4:	2320      	movs	r3, #32
 8011bf6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011bfa:	f8cd 800c 	str.w	r8, [sp, #12]
 8011bfe:	2330      	movs	r3, #48	@ 0x30
 8011c00:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8011db0 <_vfiprintf_r+0x21c>
 8011c04:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011c08:	f04f 0901 	mov.w	r9, #1
 8011c0c:	4623      	mov	r3, r4
 8011c0e:	469a      	mov	sl, r3
 8011c10:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011c14:	b10a      	cbz	r2, 8011c1a <_vfiprintf_r+0x86>
 8011c16:	2a25      	cmp	r2, #37	@ 0x25
 8011c18:	d1f9      	bne.n	8011c0e <_vfiprintf_r+0x7a>
 8011c1a:	ebba 0b04 	subs.w	fp, sl, r4
 8011c1e:	d00b      	beq.n	8011c38 <_vfiprintf_r+0xa4>
 8011c20:	465b      	mov	r3, fp
 8011c22:	4622      	mov	r2, r4
 8011c24:	4629      	mov	r1, r5
 8011c26:	4630      	mov	r0, r6
 8011c28:	f7ff ffa1 	bl	8011b6e <__sfputs_r>
 8011c2c:	3001      	adds	r0, #1
 8011c2e:	f000 80a7 	beq.w	8011d80 <_vfiprintf_r+0x1ec>
 8011c32:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011c34:	445a      	add	r2, fp
 8011c36:	9209      	str	r2, [sp, #36]	@ 0x24
 8011c38:	f89a 3000 	ldrb.w	r3, [sl]
 8011c3c:	2b00      	cmp	r3, #0
 8011c3e:	f000 809f 	beq.w	8011d80 <_vfiprintf_r+0x1ec>
 8011c42:	2300      	movs	r3, #0
 8011c44:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8011c48:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011c4c:	f10a 0a01 	add.w	sl, sl, #1
 8011c50:	9304      	str	r3, [sp, #16]
 8011c52:	9307      	str	r3, [sp, #28]
 8011c54:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011c58:	931a      	str	r3, [sp, #104]	@ 0x68
 8011c5a:	4654      	mov	r4, sl
 8011c5c:	2205      	movs	r2, #5
 8011c5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011c62:	4853      	ldr	r0, [pc, #332]	@ (8011db0 <_vfiprintf_r+0x21c>)
 8011c64:	f7ee faf4 	bl	8000250 <memchr>
 8011c68:	9a04      	ldr	r2, [sp, #16]
 8011c6a:	b9d8      	cbnz	r0, 8011ca4 <_vfiprintf_r+0x110>
 8011c6c:	06d1      	lsls	r1, r2, #27
 8011c6e:	bf44      	itt	mi
 8011c70:	2320      	movmi	r3, #32
 8011c72:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011c76:	0713      	lsls	r3, r2, #28
 8011c78:	bf44      	itt	mi
 8011c7a:	232b      	movmi	r3, #43	@ 0x2b
 8011c7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011c80:	f89a 3000 	ldrb.w	r3, [sl]
 8011c84:	2b2a      	cmp	r3, #42	@ 0x2a
 8011c86:	d015      	beq.n	8011cb4 <_vfiprintf_r+0x120>
 8011c88:	9a07      	ldr	r2, [sp, #28]
 8011c8a:	4654      	mov	r4, sl
 8011c8c:	2000      	movs	r0, #0
 8011c8e:	f04f 0c0a 	mov.w	ip, #10
 8011c92:	4621      	mov	r1, r4
 8011c94:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011c98:	3b30      	subs	r3, #48	@ 0x30
 8011c9a:	2b09      	cmp	r3, #9
 8011c9c:	d94b      	bls.n	8011d36 <_vfiprintf_r+0x1a2>
 8011c9e:	b1b0      	cbz	r0, 8011cce <_vfiprintf_r+0x13a>
 8011ca0:	9207      	str	r2, [sp, #28]
 8011ca2:	e014      	b.n	8011cce <_vfiprintf_r+0x13a>
 8011ca4:	eba0 0308 	sub.w	r3, r0, r8
 8011ca8:	fa09 f303 	lsl.w	r3, r9, r3
 8011cac:	4313      	orrs	r3, r2
 8011cae:	9304      	str	r3, [sp, #16]
 8011cb0:	46a2      	mov	sl, r4
 8011cb2:	e7d2      	b.n	8011c5a <_vfiprintf_r+0xc6>
 8011cb4:	9b03      	ldr	r3, [sp, #12]
 8011cb6:	1d19      	adds	r1, r3, #4
 8011cb8:	681b      	ldr	r3, [r3, #0]
 8011cba:	9103      	str	r1, [sp, #12]
 8011cbc:	2b00      	cmp	r3, #0
 8011cbe:	bfbb      	ittet	lt
 8011cc0:	425b      	neglt	r3, r3
 8011cc2:	f042 0202 	orrlt.w	r2, r2, #2
 8011cc6:	9307      	strge	r3, [sp, #28]
 8011cc8:	9307      	strlt	r3, [sp, #28]
 8011cca:	bfb8      	it	lt
 8011ccc:	9204      	strlt	r2, [sp, #16]
 8011cce:	7823      	ldrb	r3, [r4, #0]
 8011cd0:	2b2e      	cmp	r3, #46	@ 0x2e
 8011cd2:	d10a      	bne.n	8011cea <_vfiprintf_r+0x156>
 8011cd4:	7863      	ldrb	r3, [r4, #1]
 8011cd6:	2b2a      	cmp	r3, #42	@ 0x2a
 8011cd8:	d132      	bne.n	8011d40 <_vfiprintf_r+0x1ac>
 8011cda:	9b03      	ldr	r3, [sp, #12]
 8011cdc:	1d1a      	adds	r2, r3, #4
 8011cde:	681b      	ldr	r3, [r3, #0]
 8011ce0:	9203      	str	r2, [sp, #12]
 8011ce2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011ce6:	3402      	adds	r4, #2
 8011ce8:	9305      	str	r3, [sp, #20]
 8011cea:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8011dc0 <_vfiprintf_r+0x22c>
 8011cee:	7821      	ldrb	r1, [r4, #0]
 8011cf0:	2203      	movs	r2, #3
 8011cf2:	4650      	mov	r0, sl
 8011cf4:	f7ee faac 	bl	8000250 <memchr>
 8011cf8:	b138      	cbz	r0, 8011d0a <_vfiprintf_r+0x176>
 8011cfa:	9b04      	ldr	r3, [sp, #16]
 8011cfc:	eba0 000a 	sub.w	r0, r0, sl
 8011d00:	2240      	movs	r2, #64	@ 0x40
 8011d02:	4082      	lsls	r2, r0
 8011d04:	4313      	orrs	r3, r2
 8011d06:	3401      	adds	r4, #1
 8011d08:	9304      	str	r3, [sp, #16]
 8011d0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011d0e:	4829      	ldr	r0, [pc, #164]	@ (8011db4 <_vfiprintf_r+0x220>)
 8011d10:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011d14:	2206      	movs	r2, #6
 8011d16:	f7ee fa9b 	bl	8000250 <memchr>
 8011d1a:	2800      	cmp	r0, #0
 8011d1c:	d03f      	beq.n	8011d9e <_vfiprintf_r+0x20a>
 8011d1e:	4b26      	ldr	r3, [pc, #152]	@ (8011db8 <_vfiprintf_r+0x224>)
 8011d20:	bb1b      	cbnz	r3, 8011d6a <_vfiprintf_r+0x1d6>
 8011d22:	9b03      	ldr	r3, [sp, #12]
 8011d24:	3307      	adds	r3, #7
 8011d26:	f023 0307 	bic.w	r3, r3, #7
 8011d2a:	3308      	adds	r3, #8
 8011d2c:	9303      	str	r3, [sp, #12]
 8011d2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011d30:	443b      	add	r3, r7
 8011d32:	9309      	str	r3, [sp, #36]	@ 0x24
 8011d34:	e76a      	b.n	8011c0c <_vfiprintf_r+0x78>
 8011d36:	fb0c 3202 	mla	r2, ip, r2, r3
 8011d3a:	460c      	mov	r4, r1
 8011d3c:	2001      	movs	r0, #1
 8011d3e:	e7a8      	b.n	8011c92 <_vfiprintf_r+0xfe>
 8011d40:	2300      	movs	r3, #0
 8011d42:	3401      	adds	r4, #1
 8011d44:	9305      	str	r3, [sp, #20]
 8011d46:	4619      	mov	r1, r3
 8011d48:	f04f 0c0a 	mov.w	ip, #10
 8011d4c:	4620      	mov	r0, r4
 8011d4e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011d52:	3a30      	subs	r2, #48	@ 0x30
 8011d54:	2a09      	cmp	r2, #9
 8011d56:	d903      	bls.n	8011d60 <_vfiprintf_r+0x1cc>
 8011d58:	2b00      	cmp	r3, #0
 8011d5a:	d0c6      	beq.n	8011cea <_vfiprintf_r+0x156>
 8011d5c:	9105      	str	r1, [sp, #20]
 8011d5e:	e7c4      	b.n	8011cea <_vfiprintf_r+0x156>
 8011d60:	fb0c 2101 	mla	r1, ip, r1, r2
 8011d64:	4604      	mov	r4, r0
 8011d66:	2301      	movs	r3, #1
 8011d68:	e7f0      	b.n	8011d4c <_vfiprintf_r+0x1b8>
 8011d6a:	ab03      	add	r3, sp, #12
 8011d6c:	9300      	str	r3, [sp, #0]
 8011d6e:	462a      	mov	r2, r5
 8011d70:	4b12      	ldr	r3, [pc, #72]	@ (8011dbc <_vfiprintf_r+0x228>)
 8011d72:	a904      	add	r1, sp, #16
 8011d74:	4630      	mov	r0, r6
 8011d76:	f3af 8000 	nop.w
 8011d7a:	4607      	mov	r7, r0
 8011d7c:	1c78      	adds	r0, r7, #1
 8011d7e:	d1d6      	bne.n	8011d2e <_vfiprintf_r+0x19a>
 8011d80:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011d82:	07d9      	lsls	r1, r3, #31
 8011d84:	d405      	bmi.n	8011d92 <_vfiprintf_r+0x1fe>
 8011d86:	89ab      	ldrh	r3, [r5, #12]
 8011d88:	059a      	lsls	r2, r3, #22
 8011d8a:	d402      	bmi.n	8011d92 <_vfiprintf_r+0x1fe>
 8011d8c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011d8e:	f7ff fc51 	bl	8011634 <__retarget_lock_release_recursive>
 8011d92:	89ab      	ldrh	r3, [r5, #12]
 8011d94:	065b      	lsls	r3, r3, #25
 8011d96:	f53f af1f 	bmi.w	8011bd8 <_vfiprintf_r+0x44>
 8011d9a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011d9c:	e71e      	b.n	8011bdc <_vfiprintf_r+0x48>
 8011d9e:	ab03      	add	r3, sp, #12
 8011da0:	9300      	str	r3, [sp, #0]
 8011da2:	462a      	mov	r2, r5
 8011da4:	4b05      	ldr	r3, [pc, #20]	@ (8011dbc <_vfiprintf_r+0x228>)
 8011da6:	a904      	add	r1, sp, #16
 8011da8:	4630      	mov	r0, r6
 8011daa:	f000 f879 	bl	8011ea0 <_printf_i>
 8011dae:	e7e4      	b.n	8011d7a <_vfiprintf_r+0x1e6>
 8011db0:	08015239 	.word	0x08015239
 8011db4:	08015243 	.word	0x08015243
 8011db8:	00000000 	.word	0x00000000
 8011dbc:	08011b6f 	.word	0x08011b6f
 8011dc0:	0801523f 	.word	0x0801523f

08011dc4 <_printf_common>:
 8011dc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011dc8:	4616      	mov	r6, r2
 8011dca:	4698      	mov	r8, r3
 8011dcc:	688a      	ldr	r2, [r1, #8]
 8011dce:	690b      	ldr	r3, [r1, #16]
 8011dd0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8011dd4:	4293      	cmp	r3, r2
 8011dd6:	bfb8      	it	lt
 8011dd8:	4613      	movlt	r3, r2
 8011dda:	6033      	str	r3, [r6, #0]
 8011ddc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8011de0:	4607      	mov	r7, r0
 8011de2:	460c      	mov	r4, r1
 8011de4:	b10a      	cbz	r2, 8011dea <_printf_common+0x26>
 8011de6:	3301      	adds	r3, #1
 8011de8:	6033      	str	r3, [r6, #0]
 8011dea:	6823      	ldr	r3, [r4, #0]
 8011dec:	0699      	lsls	r1, r3, #26
 8011dee:	bf42      	ittt	mi
 8011df0:	6833      	ldrmi	r3, [r6, #0]
 8011df2:	3302      	addmi	r3, #2
 8011df4:	6033      	strmi	r3, [r6, #0]
 8011df6:	6825      	ldr	r5, [r4, #0]
 8011df8:	f015 0506 	ands.w	r5, r5, #6
 8011dfc:	d106      	bne.n	8011e0c <_printf_common+0x48>
 8011dfe:	f104 0a19 	add.w	sl, r4, #25
 8011e02:	68e3      	ldr	r3, [r4, #12]
 8011e04:	6832      	ldr	r2, [r6, #0]
 8011e06:	1a9b      	subs	r3, r3, r2
 8011e08:	42ab      	cmp	r3, r5
 8011e0a:	dc26      	bgt.n	8011e5a <_printf_common+0x96>
 8011e0c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8011e10:	6822      	ldr	r2, [r4, #0]
 8011e12:	3b00      	subs	r3, #0
 8011e14:	bf18      	it	ne
 8011e16:	2301      	movne	r3, #1
 8011e18:	0692      	lsls	r2, r2, #26
 8011e1a:	d42b      	bmi.n	8011e74 <_printf_common+0xb0>
 8011e1c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8011e20:	4641      	mov	r1, r8
 8011e22:	4638      	mov	r0, r7
 8011e24:	47c8      	blx	r9
 8011e26:	3001      	adds	r0, #1
 8011e28:	d01e      	beq.n	8011e68 <_printf_common+0xa4>
 8011e2a:	6823      	ldr	r3, [r4, #0]
 8011e2c:	6922      	ldr	r2, [r4, #16]
 8011e2e:	f003 0306 	and.w	r3, r3, #6
 8011e32:	2b04      	cmp	r3, #4
 8011e34:	bf02      	ittt	eq
 8011e36:	68e5      	ldreq	r5, [r4, #12]
 8011e38:	6833      	ldreq	r3, [r6, #0]
 8011e3a:	1aed      	subeq	r5, r5, r3
 8011e3c:	68a3      	ldr	r3, [r4, #8]
 8011e3e:	bf0c      	ite	eq
 8011e40:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011e44:	2500      	movne	r5, #0
 8011e46:	4293      	cmp	r3, r2
 8011e48:	bfc4      	itt	gt
 8011e4a:	1a9b      	subgt	r3, r3, r2
 8011e4c:	18ed      	addgt	r5, r5, r3
 8011e4e:	2600      	movs	r6, #0
 8011e50:	341a      	adds	r4, #26
 8011e52:	42b5      	cmp	r5, r6
 8011e54:	d11a      	bne.n	8011e8c <_printf_common+0xc8>
 8011e56:	2000      	movs	r0, #0
 8011e58:	e008      	b.n	8011e6c <_printf_common+0xa8>
 8011e5a:	2301      	movs	r3, #1
 8011e5c:	4652      	mov	r2, sl
 8011e5e:	4641      	mov	r1, r8
 8011e60:	4638      	mov	r0, r7
 8011e62:	47c8      	blx	r9
 8011e64:	3001      	adds	r0, #1
 8011e66:	d103      	bne.n	8011e70 <_printf_common+0xac>
 8011e68:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011e6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011e70:	3501      	adds	r5, #1
 8011e72:	e7c6      	b.n	8011e02 <_printf_common+0x3e>
 8011e74:	18e1      	adds	r1, r4, r3
 8011e76:	1c5a      	adds	r2, r3, #1
 8011e78:	2030      	movs	r0, #48	@ 0x30
 8011e7a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8011e7e:	4422      	add	r2, r4
 8011e80:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8011e84:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8011e88:	3302      	adds	r3, #2
 8011e8a:	e7c7      	b.n	8011e1c <_printf_common+0x58>
 8011e8c:	2301      	movs	r3, #1
 8011e8e:	4622      	mov	r2, r4
 8011e90:	4641      	mov	r1, r8
 8011e92:	4638      	mov	r0, r7
 8011e94:	47c8      	blx	r9
 8011e96:	3001      	adds	r0, #1
 8011e98:	d0e6      	beq.n	8011e68 <_printf_common+0xa4>
 8011e9a:	3601      	adds	r6, #1
 8011e9c:	e7d9      	b.n	8011e52 <_printf_common+0x8e>
	...

08011ea0 <_printf_i>:
 8011ea0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011ea4:	7e0f      	ldrb	r7, [r1, #24]
 8011ea6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8011ea8:	2f78      	cmp	r7, #120	@ 0x78
 8011eaa:	4691      	mov	r9, r2
 8011eac:	4680      	mov	r8, r0
 8011eae:	460c      	mov	r4, r1
 8011eb0:	469a      	mov	sl, r3
 8011eb2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8011eb6:	d807      	bhi.n	8011ec8 <_printf_i+0x28>
 8011eb8:	2f62      	cmp	r7, #98	@ 0x62
 8011eba:	d80a      	bhi.n	8011ed2 <_printf_i+0x32>
 8011ebc:	2f00      	cmp	r7, #0
 8011ebe:	f000 80d2 	beq.w	8012066 <_printf_i+0x1c6>
 8011ec2:	2f58      	cmp	r7, #88	@ 0x58
 8011ec4:	f000 80b9 	beq.w	801203a <_printf_i+0x19a>
 8011ec8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011ecc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8011ed0:	e03a      	b.n	8011f48 <_printf_i+0xa8>
 8011ed2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8011ed6:	2b15      	cmp	r3, #21
 8011ed8:	d8f6      	bhi.n	8011ec8 <_printf_i+0x28>
 8011eda:	a101      	add	r1, pc, #4	@ (adr r1, 8011ee0 <_printf_i+0x40>)
 8011edc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011ee0:	08011f39 	.word	0x08011f39
 8011ee4:	08011f4d 	.word	0x08011f4d
 8011ee8:	08011ec9 	.word	0x08011ec9
 8011eec:	08011ec9 	.word	0x08011ec9
 8011ef0:	08011ec9 	.word	0x08011ec9
 8011ef4:	08011ec9 	.word	0x08011ec9
 8011ef8:	08011f4d 	.word	0x08011f4d
 8011efc:	08011ec9 	.word	0x08011ec9
 8011f00:	08011ec9 	.word	0x08011ec9
 8011f04:	08011ec9 	.word	0x08011ec9
 8011f08:	08011ec9 	.word	0x08011ec9
 8011f0c:	0801204d 	.word	0x0801204d
 8011f10:	08011f77 	.word	0x08011f77
 8011f14:	08012007 	.word	0x08012007
 8011f18:	08011ec9 	.word	0x08011ec9
 8011f1c:	08011ec9 	.word	0x08011ec9
 8011f20:	0801206f 	.word	0x0801206f
 8011f24:	08011ec9 	.word	0x08011ec9
 8011f28:	08011f77 	.word	0x08011f77
 8011f2c:	08011ec9 	.word	0x08011ec9
 8011f30:	08011ec9 	.word	0x08011ec9
 8011f34:	0801200f 	.word	0x0801200f
 8011f38:	6833      	ldr	r3, [r6, #0]
 8011f3a:	1d1a      	adds	r2, r3, #4
 8011f3c:	681b      	ldr	r3, [r3, #0]
 8011f3e:	6032      	str	r2, [r6, #0]
 8011f40:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011f44:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8011f48:	2301      	movs	r3, #1
 8011f4a:	e09d      	b.n	8012088 <_printf_i+0x1e8>
 8011f4c:	6833      	ldr	r3, [r6, #0]
 8011f4e:	6820      	ldr	r0, [r4, #0]
 8011f50:	1d19      	adds	r1, r3, #4
 8011f52:	6031      	str	r1, [r6, #0]
 8011f54:	0606      	lsls	r6, r0, #24
 8011f56:	d501      	bpl.n	8011f5c <_printf_i+0xbc>
 8011f58:	681d      	ldr	r5, [r3, #0]
 8011f5a:	e003      	b.n	8011f64 <_printf_i+0xc4>
 8011f5c:	0645      	lsls	r5, r0, #25
 8011f5e:	d5fb      	bpl.n	8011f58 <_printf_i+0xb8>
 8011f60:	f9b3 5000 	ldrsh.w	r5, [r3]
 8011f64:	2d00      	cmp	r5, #0
 8011f66:	da03      	bge.n	8011f70 <_printf_i+0xd0>
 8011f68:	232d      	movs	r3, #45	@ 0x2d
 8011f6a:	426d      	negs	r5, r5
 8011f6c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011f70:	4859      	ldr	r0, [pc, #356]	@ (80120d8 <_printf_i+0x238>)
 8011f72:	230a      	movs	r3, #10
 8011f74:	e011      	b.n	8011f9a <_printf_i+0xfa>
 8011f76:	6821      	ldr	r1, [r4, #0]
 8011f78:	6833      	ldr	r3, [r6, #0]
 8011f7a:	0608      	lsls	r0, r1, #24
 8011f7c:	f853 5b04 	ldr.w	r5, [r3], #4
 8011f80:	d402      	bmi.n	8011f88 <_printf_i+0xe8>
 8011f82:	0649      	lsls	r1, r1, #25
 8011f84:	bf48      	it	mi
 8011f86:	b2ad      	uxthmi	r5, r5
 8011f88:	2f6f      	cmp	r7, #111	@ 0x6f
 8011f8a:	4853      	ldr	r0, [pc, #332]	@ (80120d8 <_printf_i+0x238>)
 8011f8c:	6033      	str	r3, [r6, #0]
 8011f8e:	bf14      	ite	ne
 8011f90:	230a      	movne	r3, #10
 8011f92:	2308      	moveq	r3, #8
 8011f94:	2100      	movs	r1, #0
 8011f96:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8011f9a:	6866      	ldr	r6, [r4, #4]
 8011f9c:	60a6      	str	r6, [r4, #8]
 8011f9e:	2e00      	cmp	r6, #0
 8011fa0:	bfa2      	ittt	ge
 8011fa2:	6821      	ldrge	r1, [r4, #0]
 8011fa4:	f021 0104 	bicge.w	r1, r1, #4
 8011fa8:	6021      	strge	r1, [r4, #0]
 8011faa:	b90d      	cbnz	r5, 8011fb0 <_printf_i+0x110>
 8011fac:	2e00      	cmp	r6, #0
 8011fae:	d04b      	beq.n	8012048 <_printf_i+0x1a8>
 8011fb0:	4616      	mov	r6, r2
 8011fb2:	fbb5 f1f3 	udiv	r1, r5, r3
 8011fb6:	fb03 5711 	mls	r7, r3, r1, r5
 8011fba:	5dc7      	ldrb	r7, [r0, r7]
 8011fbc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8011fc0:	462f      	mov	r7, r5
 8011fc2:	42bb      	cmp	r3, r7
 8011fc4:	460d      	mov	r5, r1
 8011fc6:	d9f4      	bls.n	8011fb2 <_printf_i+0x112>
 8011fc8:	2b08      	cmp	r3, #8
 8011fca:	d10b      	bne.n	8011fe4 <_printf_i+0x144>
 8011fcc:	6823      	ldr	r3, [r4, #0]
 8011fce:	07df      	lsls	r7, r3, #31
 8011fd0:	d508      	bpl.n	8011fe4 <_printf_i+0x144>
 8011fd2:	6923      	ldr	r3, [r4, #16]
 8011fd4:	6861      	ldr	r1, [r4, #4]
 8011fd6:	4299      	cmp	r1, r3
 8011fd8:	bfde      	ittt	le
 8011fda:	2330      	movle	r3, #48	@ 0x30
 8011fdc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8011fe0:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8011fe4:	1b92      	subs	r2, r2, r6
 8011fe6:	6122      	str	r2, [r4, #16]
 8011fe8:	f8cd a000 	str.w	sl, [sp]
 8011fec:	464b      	mov	r3, r9
 8011fee:	aa03      	add	r2, sp, #12
 8011ff0:	4621      	mov	r1, r4
 8011ff2:	4640      	mov	r0, r8
 8011ff4:	f7ff fee6 	bl	8011dc4 <_printf_common>
 8011ff8:	3001      	adds	r0, #1
 8011ffa:	d14a      	bne.n	8012092 <_printf_i+0x1f2>
 8011ffc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012000:	b004      	add	sp, #16
 8012002:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012006:	6823      	ldr	r3, [r4, #0]
 8012008:	f043 0320 	orr.w	r3, r3, #32
 801200c:	6023      	str	r3, [r4, #0]
 801200e:	4833      	ldr	r0, [pc, #204]	@ (80120dc <_printf_i+0x23c>)
 8012010:	2778      	movs	r7, #120	@ 0x78
 8012012:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8012016:	6823      	ldr	r3, [r4, #0]
 8012018:	6831      	ldr	r1, [r6, #0]
 801201a:	061f      	lsls	r7, r3, #24
 801201c:	f851 5b04 	ldr.w	r5, [r1], #4
 8012020:	d402      	bmi.n	8012028 <_printf_i+0x188>
 8012022:	065f      	lsls	r7, r3, #25
 8012024:	bf48      	it	mi
 8012026:	b2ad      	uxthmi	r5, r5
 8012028:	6031      	str	r1, [r6, #0]
 801202a:	07d9      	lsls	r1, r3, #31
 801202c:	bf44      	itt	mi
 801202e:	f043 0320 	orrmi.w	r3, r3, #32
 8012032:	6023      	strmi	r3, [r4, #0]
 8012034:	b11d      	cbz	r5, 801203e <_printf_i+0x19e>
 8012036:	2310      	movs	r3, #16
 8012038:	e7ac      	b.n	8011f94 <_printf_i+0xf4>
 801203a:	4827      	ldr	r0, [pc, #156]	@ (80120d8 <_printf_i+0x238>)
 801203c:	e7e9      	b.n	8012012 <_printf_i+0x172>
 801203e:	6823      	ldr	r3, [r4, #0]
 8012040:	f023 0320 	bic.w	r3, r3, #32
 8012044:	6023      	str	r3, [r4, #0]
 8012046:	e7f6      	b.n	8012036 <_printf_i+0x196>
 8012048:	4616      	mov	r6, r2
 801204a:	e7bd      	b.n	8011fc8 <_printf_i+0x128>
 801204c:	6833      	ldr	r3, [r6, #0]
 801204e:	6825      	ldr	r5, [r4, #0]
 8012050:	6961      	ldr	r1, [r4, #20]
 8012052:	1d18      	adds	r0, r3, #4
 8012054:	6030      	str	r0, [r6, #0]
 8012056:	062e      	lsls	r6, r5, #24
 8012058:	681b      	ldr	r3, [r3, #0]
 801205a:	d501      	bpl.n	8012060 <_printf_i+0x1c0>
 801205c:	6019      	str	r1, [r3, #0]
 801205e:	e002      	b.n	8012066 <_printf_i+0x1c6>
 8012060:	0668      	lsls	r0, r5, #25
 8012062:	d5fb      	bpl.n	801205c <_printf_i+0x1bc>
 8012064:	8019      	strh	r1, [r3, #0]
 8012066:	2300      	movs	r3, #0
 8012068:	6123      	str	r3, [r4, #16]
 801206a:	4616      	mov	r6, r2
 801206c:	e7bc      	b.n	8011fe8 <_printf_i+0x148>
 801206e:	6833      	ldr	r3, [r6, #0]
 8012070:	1d1a      	adds	r2, r3, #4
 8012072:	6032      	str	r2, [r6, #0]
 8012074:	681e      	ldr	r6, [r3, #0]
 8012076:	6862      	ldr	r2, [r4, #4]
 8012078:	2100      	movs	r1, #0
 801207a:	4630      	mov	r0, r6
 801207c:	f7ee f8e8 	bl	8000250 <memchr>
 8012080:	b108      	cbz	r0, 8012086 <_printf_i+0x1e6>
 8012082:	1b80      	subs	r0, r0, r6
 8012084:	6060      	str	r0, [r4, #4]
 8012086:	6863      	ldr	r3, [r4, #4]
 8012088:	6123      	str	r3, [r4, #16]
 801208a:	2300      	movs	r3, #0
 801208c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012090:	e7aa      	b.n	8011fe8 <_printf_i+0x148>
 8012092:	6923      	ldr	r3, [r4, #16]
 8012094:	4632      	mov	r2, r6
 8012096:	4649      	mov	r1, r9
 8012098:	4640      	mov	r0, r8
 801209a:	47d0      	blx	sl
 801209c:	3001      	adds	r0, #1
 801209e:	d0ad      	beq.n	8011ffc <_printf_i+0x15c>
 80120a0:	6823      	ldr	r3, [r4, #0]
 80120a2:	079b      	lsls	r3, r3, #30
 80120a4:	d413      	bmi.n	80120ce <_printf_i+0x22e>
 80120a6:	68e0      	ldr	r0, [r4, #12]
 80120a8:	9b03      	ldr	r3, [sp, #12]
 80120aa:	4298      	cmp	r0, r3
 80120ac:	bfb8      	it	lt
 80120ae:	4618      	movlt	r0, r3
 80120b0:	e7a6      	b.n	8012000 <_printf_i+0x160>
 80120b2:	2301      	movs	r3, #1
 80120b4:	4632      	mov	r2, r6
 80120b6:	4649      	mov	r1, r9
 80120b8:	4640      	mov	r0, r8
 80120ba:	47d0      	blx	sl
 80120bc:	3001      	adds	r0, #1
 80120be:	d09d      	beq.n	8011ffc <_printf_i+0x15c>
 80120c0:	3501      	adds	r5, #1
 80120c2:	68e3      	ldr	r3, [r4, #12]
 80120c4:	9903      	ldr	r1, [sp, #12]
 80120c6:	1a5b      	subs	r3, r3, r1
 80120c8:	42ab      	cmp	r3, r5
 80120ca:	dcf2      	bgt.n	80120b2 <_printf_i+0x212>
 80120cc:	e7eb      	b.n	80120a6 <_printf_i+0x206>
 80120ce:	2500      	movs	r5, #0
 80120d0:	f104 0619 	add.w	r6, r4, #25
 80120d4:	e7f5      	b.n	80120c2 <_printf_i+0x222>
 80120d6:	bf00      	nop
 80120d8:	0801524a 	.word	0x0801524a
 80120dc:	0801525b 	.word	0x0801525b

080120e0 <__sflush_r>:
 80120e0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80120e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80120e8:	0716      	lsls	r6, r2, #28
 80120ea:	4605      	mov	r5, r0
 80120ec:	460c      	mov	r4, r1
 80120ee:	d454      	bmi.n	801219a <__sflush_r+0xba>
 80120f0:	684b      	ldr	r3, [r1, #4]
 80120f2:	2b00      	cmp	r3, #0
 80120f4:	dc02      	bgt.n	80120fc <__sflush_r+0x1c>
 80120f6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80120f8:	2b00      	cmp	r3, #0
 80120fa:	dd48      	ble.n	801218e <__sflush_r+0xae>
 80120fc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80120fe:	2e00      	cmp	r6, #0
 8012100:	d045      	beq.n	801218e <__sflush_r+0xae>
 8012102:	2300      	movs	r3, #0
 8012104:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8012108:	682f      	ldr	r7, [r5, #0]
 801210a:	6a21      	ldr	r1, [r4, #32]
 801210c:	602b      	str	r3, [r5, #0]
 801210e:	d030      	beq.n	8012172 <__sflush_r+0x92>
 8012110:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8012112:	89a3      	ldrh	r3, [r4, #12]
 8012114:	0759      	lsls	r1, r3, #29
 8012116:	d505      	bpl.n	8012124 <__sflush_r+0x44>
 8012118:	6863      	ldr	r3, [r4, #4]
 801211a:	1ad2      	subs	r2, r2, r3
 801211c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801211e:	b10b      	cbz	r3, 8012124 <__sflush_r+0x44>
 8012120:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8012122:	1ad2      	subs	r2, r2, r3
 8012124:	2300      	movs	r3, #0
 8012126:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8012128:	6a21      	ldr	r1, [r4, #32]
 801212a:	4628      	mov	r0, r5
 801212c:	47b0      	blx	r6
 801212e:	1c43      	adds	r3, r0, #1
 8012130:	89a3      	ldrh	r3, [r4, #12]
 8012132:	d106      	bne.n	8012142 <__sflush_r+0x62>
 8012134:	6829      	ldr	r1, [r5, #0]
 8012136:	291d      	cmp	r1, #29
 8012138:	d82b      	bhi.n	8012192 <__sflush_r+0xb2>
 801213a:	4a2a      	ldr	r2, [pc, #168]	@ (80121e4 <__sflush_r+0x104>)
 801213c:	410a      	asrs	r2, r1
 801213e:	07d6      	lsls	r6, r2, #31
 8012140:	d427      	bmi.n	8012192 <__sflush_r+0xb2>
 8012142:	2200      	movs	r2, #0
 8012144:	6062      	str	r2, [r4, #4]
 8012146:	04d9      	lsls	r1, r3, #19
 8012148:	6922      	ldr	r2, [r4, #16]
 801214a:	6022      	str	r2, [r4, #0]
 801214c:	d504      	bpl.n	8012158 <__sflush_r+0x78>
 801214e:	1c42      	adds	r2, r0, #1
 8012150:	d101      	bne.n	8012156 <__sflush_r+0x76>
 8012152:	682b      	ldr	r3, [r5, #0]
 8012154:	b903      	cbnz	r3, 8012158 <__sflush_r+0x78>
 8012156:	6560      	str	r0, [r4, #84]	@ 0x54
 8012158:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801215a:	602f      	str	r7, [r5, #0]
 801215c:	b1b9      	cbz	r1, 801218e <__sflush_r+0xae>
 801215e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012162:	4299      	cmp	r1, r3
 8012164:	d002      	beq.n	801216c <__sflush_r+0x8c>
 8012166:	4628      	mov	r0, r5
 8012168:	f7ff fa92 	bl	8011690 <_free_r>
 801216c:	2300      	movs	r3, #0
 801216e:	6363      	str	r3, [r4, #52]	@ 0x34
 8012170:	e00d      	b.n	801218e <__sflush_r+0xae>
 8012172:	2301      	movs	r3, #1
 8012174:	4628      	mov	r0, r5
 8012176:	47b0      	blx	r6
 8012178:	4602      	mov	r2, r0
 801217a:	1c50      	adds	r0, r2, #1
 801217c:	d1c9      	bne.n	8012112 <__sflush_r+0x32>
 801217e:	682b      	ldr	r3, [r5, #0]
 8012180:	2b00      	cmp	r3, #0
 8012182:	d0c6      	beq.n	8012112 <__sflush_r+0x32>
 8012184:	2b1d      	cmp	r3, #29
 8012186:	d001      	beq.n	801218c <__sflush_r+0xac>
 8012188:	2b16      	cmp	r3, #22
 801218a:	d11e      	bne.n	80121ca <__sflush_r+0xea>
 801218c:	602f      	str	r7, [r5, #0]
 801218e:	2000      	movs	r0, #0
 8012190:	e022      	b.n	80121d8 <__sflush_r+0xf8>
 8012192:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012196:	b21b      	sxth	r3, r3
 8012198:	e01b      	b.n	80121d2 <__sflush_r+0xf2>
 801219a:	690f      	ldr	r7, [r1, #16]
 801219c:	2f00      	cmp	r7, #0
 801219e:	d0f6      	beq.n	801218e <__sflush_r+0xae>
 80121a0:	0793      	lsls	r3, r2, #30
 80121a2:	680e      	ldr	r6, [r1, #0]
 80121a4:	bf08      	it	eq
 80121a6:	694b      	ldreq	r3, [r1, #20]
 80121a8:	600f      	str	r7, [r1, #0]
 80121aa:	bf18      	it	ne
 80121ac:	2300      	movne	r3, #0
 80121ae:	eba6 0807 	sub.w	r8, r6, r7
 80121b2:	608b      	str	r3, [r1, #8]
 80121b4:	f1b8 0f00 	cmp.w	r8, #0
 80121b8:	dde9      	ble.n	801218e <__sflush_r+0xae>
 80121ba:	6a21      	ldr	r1, [r4, #32]
 80121bc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80121be:	4643      	mov	r3, r8
 80121c0:	463a      	mov	r2, r7
 80121c2:	4628      	mov	r0, r5
 80121c4:	47b0      	blx	r6
 80121c6:	2800      	cmp	r0, #0
 80121c8:	dc08      	bgt.n	80121dc <__sflush_r+0xfc>
 80121ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80121ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80121d2:	81a3      	strh	r3, [r4, #12]
 80121d4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80121d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80121dc:	4407      	add	r7, r0
 80121de:	eba8 0800 	sub.w	r8, r8, r0
 80121e2:	e7e7      	b.n	80121b4 <__sflush_r+0xd4>
 80121e4:	dfbffffe 	.word	0xdfbffffe

080121e8 <_fflush_r>:
 80121e8:	b538      	push	{r3, r4, r5, lr}
 80121ea:	690b      	ldr	r3, [r1, #16]
 80121ec:	4605      	mov	r5, r0
 80121ee:	460c      	mov	r4, r1
 80121f0:	b913      	cbnz	r3, 80121f8 <_fflush_r+0x10>
 80121f2:	2500      	movs	r5, #0
 80121f4:	4628      	mov	r0, r5
 80121f6:	bd38      	pop	{r3, r4, r5, pc}
 80121f8:	b118      	cbz	r0, 8012202 <_fflush_r+0x1a>
 80121fa:	6a03      	ldr	r3, [r0, #32]
 80121fc:	b90b      	cbnz	r3, 8012202 <_fflush_r+0x1a>
 80121fe:	f7ff f889 	bl	8011314 <__sinit>
 8012202:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012206:	2b00      	cmp	r3, #0
 8012208:	d0f3      	beq.n	80121f2 <_fflush_r+0xa>
 801220a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801220c:	07d0      	lsls	r0, r2, #31
 801220e:	d404      	bmi.n	801221a <_fflush_r+0x32>
 8012210:	0599      	lsls	r1, r3, #22
 8012212:	d402      	bmi.n	801221a <_fflush_r+0x32>
 8012214:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012216:	f7ff fa0c 	bl	8011632 <__retarget_lock_acquire_recursive>
 801221a:	4628      	mov	r0, r5
 801221c:	4621      	mov	r1, r4
 801221e:	f7ff ff5f 	bl	80120e0 <__sflush_r>
 8012222:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8012224:	07da      	lsls	r2, r3, #31
 8012226:	4605      	mov	r5, r0
 8012228:	d4e4      	bmi.n	80121f4 <_fflush_r+0xc>
 801222a:	89a3      	ldrh	r3, [r4, #12]
 801222c:	059b      	lsls	r3, r3, #22
 801222e:	d4e1      	bmi.n	80121f4 <_fflush_r+0xc>
 8012230:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012232:	f7ff f9ff 	bl	8011634 <__retarget_lock_release_recursive>
 8012236:	e7dd      	b.n	80121f4 <_fflush_r+0xc>

08012238 <fiprintf>:
 8012238:	b40e      	push	{r1, r2, r3}
 801223a:	b503      	push	{r0, r1, lr}
 801223c:	4601      	mov	r1, r0
 801223e:	ab03      	add	r3, sp, #12
 8012240:	4805      	ldr	r0, [pc, #20]	@ (8012258 <fiprintf+0x20>)
 8012242:	f853 2b04 	ldr.w	r2, [r3], #4
 8012246:	6800      	ldr	r0, [r0, #0]
 8012248:	9301      	str	r3, [sp, #4]
 801224a:	f7ff fca3 	bl	8011b94 <_vfiprintf_r>
 801224e:	b002      	add	sp, #8
 8012250:	f85d eb04 	ldr.w	lr, [sp], #4
 8012254:	b003      	add	sp, #12
 8012256:	4770      	bx	lr
 8012258:	20000078 	.word	0x20000078

0801225c <__swbuf_r>:
 801225c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801225e:	460e      	mov	r6, r1
 8012260:	4614      	mov	r4, r2
 8012262:	4605      	mov	r5, r0
 8012264:	b118      	cbz	r0, 801226e <__swbuf_r+0x12>
 8012266:	6a03      	ldr	r3, [r0, #32]
 8012268:	b90b      	cbnz	r3, 801226e <__swbuf_r+0x12>
 801226a:	f7ff f853 	bl	8011314 <__sinit>
 801226e:	69a3      	ldr	r3, [r4, #24]
 8012270:	60a3      	str	r3, [r4, #8]
 8012272:	89a3      	ldrh	r3, [r4, #12]
 8012274:	071a      	lsls	r2, r3, #28
 8012276:	d501      	bpl.n	801227c <__swbuf_r+0x20>
 8012278:	6923      	ldr	r3, [r4, #16]
 801227a:	b943      	cbnz	r3, 801228e <__swbuf_r+0x32>
 801227c:	4621      	mov	r1, r4
 801227e:	4628      	mov	r0, r5
 8012280:	f000 f82a 	bl	80122d8 <__swsetup_r>
 8012284:	b118      	cbz	r0, 801228e <__swbuf_r+0x32>
 8012286:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 801228a:	4638      	mov	r0, r7
 801228c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801228e:	6823      	ldr	r3, [r4, #0]
 8012290:	6922      	ldr	r2, [r4, #16]
 8012292:	1a98      	subs	r0, r3, r2
 8012294:	6963      	ldr	r3, [r4, #20]
 8012296:	b2f6      	uxtb	r6, r6
 8012298:	4283      	cmp	r3, r0
 801229a:	4637      	mov	r7, r6
 801229c:	dc05      	bgt.n	80122aa <__swbuf_r+0x4e>
 801229e:	4621      	mov	r1, r4
 80122a0:	4628      	mov	r0, r5
 80122a2:	f7ff ffa1 	bl	80121e8 <_fflush_r>
 80122a6:	2800      	cmp	r0, #0
 80122a8:	d1ed      	bne.n	8012286 <__swbuf_r+0x2a>
 80122aa:	68a3      	ldr	r3, [r4, #8]
 80122ac:	3b01      	subs	r3, #1
 80122ae:	60a3      	str	r3, [r4, #8]
 80122b0:	6823      	ldr	r3, [r4, #0]
 80122b2:	1c5a      	adds	r2, r3, #1
 80122b4:	6022      	str	r2, [r4, #0]
 80122b6:	701e      	strb	r6, [r3, #0]
 80122b8:	6962      	ldr	r2, [r4, #20]
 80122ba:	1c43      	adds	r3, r0, #1
 80122bc:	429a      	cmp	r2, r3
 80122be:	d004      	beq.n	80122ca <__swbuf_r+0x6e>
 80122c0:	89a3      	ldrh	r3, [r4, #12]
 80122c2:	07db      	lsls	r3, r3, #31
 80122c4:	d5e1      	bpl.n	801228a <__swbuf_r+0x2e>
 80122c6:	2e0a      	cmp	r6, #10
 80122c8:	d1df      	bne.n	801228a <__swbuf_r+0x2e>
 80122ca:	4621      	mov	r1, r4
 80122cc:	4628      	mov	r0, r5
 80122ce:	f7ff ff8b 	bl	80121e8 <_fflush_r>
 80122d2:	2800      	cmp	r0, #0
 80122d4:	d0d9      	beq.n	801228a <__swbuf_r+0x2e>
 80122d6:	e7d6      	b.n	8012286 <__swbuf_r+0x2a>

080122d8 <__swsetup_r>:
 80122d8:	b538      	push	{r3, r4, r5, lr}
 80122da:	4b29      	ldr	r3, [pc, #164]	@ (8012380 <__swsetup_r+0xa8>)
 80122dc:	4605      	mov	r5, r0
 80122de:	6818      	ldr	r0, [r3, #0]
 80122e0:	460c      	mov	r4, r1
 80122e2:	b118      	cbz	r0, 80122ec <__swsetup_r+0x14>
 80122e4:	6a03      	ldr	r3, [r0, #32]
 80122e6:	b90b      	cbnz	r3, 80122ec <__swsetup_r+0x14>
 80122e8:	f7ff f814 	bl	8011314 <__sinit>
 80122ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80122f0:	0719      	lsls	r1, r3, #28
 80122f2:	d422      	bmi.n	801233a <__swsetup_r+0x62>
 80122f4:	06da      	lsls	r2, r3, #27
 80122f6:	d407      	bmi.n	8012308 <__swsetup_r+0x30>
 80122f8:	2209      	movs	r2, #9
 80122fa:	602a      	str	r2, [r5, #0]
 80122fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012300:	81a3      	strh	r3, [r4, #12]
 8012302:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012306:	e033      	b.n	8012370 <__swsetup_r+0x98>
 8012308:	0758      	lsls	r0, r3, #29
 801230a:	d512      	bpl.n	8012332 <__swsetup_r+0x5a>
 801230c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801230e:	b141      	cbz	r1, 8012322 <__swsetup_r+0x4a>
 8012310:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012314:	4299      	cmp	r1, r3
 8012316:	d002      	beq.n	801231e <__swsetup_r+0x46>
 8012318:	4628      	mov	r0, r5
 801231a:	f7ff f9b9 	bl	8011690 <_free_r>
 801231e:	2300      	movs	r3, #0
 8012320:	6363      	str	r3, [r4, #52]	@ 0x34
 8012322:	89a3      	ldrh	r3, [r4, #12]
 8012324:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8012328:	81a3      	strh	r3, [r4, #12]
 801232a:	2300      	movs	r3, #0
 801232c:	6063      	str	r3, [r4, #4]
 801232e:	6923      	ldr	r3, [r4, #16]
 8012330:	6023      	str	r3, [r4, #0]
 8012332:	89a3      	ldrh	r3, [r4, #12]
 8012334:	f043 0308 	orr.w	r3, r3, #8
 8012338:	81a3      	strh	r3, [r4, #12]
 801233a:	6923      	ldr	r3, [r4, #16]
 801233c:	b94b      	cbnz	r3, 8012352 <__swsetup_r+0x7a>
 801233e:	89a3      	ldrh	r3, [r4, #12]
 8012340:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8012344:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012348:	d003      	beq.n	8012352 <__swsetup_r+0x7a>
 801234a:	4621      	mov	r1, r4
 801234c:	4628      	mov	r0, r5
 801234e:	f000 f884 	bl	801245a <__smakebuf_r>
 8012352:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012356:	f013 0201 	ands.w	r2, r3, #1
 801235a:	d00a      	beq.n	8012372 <__swsetup_r+0x9a>
 801235c:	2200      	movs	r2, #0
 801235e:	60a2      	str	r2, [r4, #8]
 8012360:	6962      	ldr	r2, [r4, #20]
 8012362:	4252      	negs	r2, r2
 8012364:	61a2      	str	r2, [r4, #24]
 8012366:	6922      	ldr	r2, [r4, #16]
 8012368:	b942      	cbnz	r2, 801237c <__swsetup_r+0xa4>
 801236a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801236e:	d1c5      	bne.n	80122fc <__swsetup_r+0x24>
 8012370:	bd38      	pop	{r3, r4, r5, pc}
 8012372:	0799      	lsls	r1, r3, #30
 8012374:	bf58      	it	pl
 8012376:	6962      	ldrpl	r2, [r4, #20]
 8012378:	60a2      	str	r2, [r4, #8]
 801237a:	e7f4      	b.n	8012366 <__swsetup_r+0x8e>
 801237c:	2000      	movs	r0, #0
 801237e:	e7f7      	b.n	8012370 <__swsetup_r+0x98>
 8012380:	20000078 	.word	0x20000078

08012384 <_sbrk_r>:
 8012384:	b538      	push	{r3, r4, r5, lr}
 8012386:	4d06      	ldr	r5, [pc, #24]	@ (80123a0 <_sbrk_r+0x1c>)
 8012388:	2300      	movs	r3, #0
 801238a:	4604      	mov	r4, r0
 801238c:	4608      	mov	r0, r1
 801238e:	602b      	str	r3, [r5, #0]
 8012390:	f7ee ff74 	bl	800127c <_sbrk>
 8012394:	1c43      	adds	r3, r0, #1
 8012396:	d102      	bne.n	801239e <_sbrk_r+0x1a>
 8012398:	682b      	ldr	r3, [r5, #0]
 801239a:	b103      	cbz	r3, 801239e <_sbrk_r+0x1a>
 801239c:	6023      	str	r3, [r4, #0]
 801239e:	bd38      	pop	{r3, r4, r5, pc}
 80123a0:	2000aa80 	.word	0x2000aa80

080123a4 <abort>:
 80123a4:	b508      	push	{r3, lr}
 80123a6:	2006      	movs	r0, #6
 80123a8:	f000 f8bc 	bl	8012524 <raise>
 80123ac:	2001      	movs	r0, #1
 80123ae:	f7ee feed 	bl	800118c <_exit>

080123b2 <_realloc_r>:
 80123b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80123b6:	4680      	mov	r8, r0
 80123b8:	4615      	mov	r5, r2
 80123ba:	460c      	mov	r4, r1
 80123bc:	b921      	cbnz	r1, 80123c8 <_realloc_r+0x16>
 80123be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80123c2:	4611      	mov	r1, r2
 80123c4:	f7ff b9d8 	b.w	8011778 <_malloc_r>
 80123c8:	b92a      	cbnz	r2, 80123d6 <_realloc_r+0x24>
 80123ca:	f7ff f961 	bl	8011690 <_free_r>
 80123ce:	2400      	movs	r4, #0
 80123d0:	4620      	mov	r0, r4
 80123d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80123d6:	f000 f8e3 	bl	80125a0 <_malloc_usable_size_r>
 80123da:	4285      	cmp	r5, r0
 80123dc:	4606      	mov	r6, r0
 80123de:	d802      	bhi.n	80123e6 <_realloc_r+0x34>
 80123e0:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80123e4:	d8f4      	bhi.n	80123d0 <_realloc_r+0x1e>
 80123e6:	4629      	mov	r1, r5
 80123e8:	4640      	mov	r0, r8
 80123ea:	f7ff f9c5 	bl	8011778 <_malloc_r>
 80123ee:	4607      	mov	r7, r0
 80123f0:	2800      	cmp	r0, #0
 80123f2:	d0ec      	beq.n	80123ce <_realloc_r+0x1c>
 80123f4:	42b5      	cmp	r5, r6
 80123f6:	462a      	mov	r2, r5
 80123f8:	4621      	mov	r1, r4
 80123fa:	bf28      	it	cs
 80123fc:	4632      	movcs	r2, r6
 80123fe:	f7ff f91a 	bl	8011636 <memcpy>
 8012402:	4621      	mov	r1, r4
 8012404:	4640      	mov	r0, r8
 8012406:	f7ff f943 	bl	8011690 <_free_r>
 801240a:	463c      	mov	r4, r7
 801240c:	e7e0      	b.n	80123d0 <_realloc_r+0x1e>

0801240e <__swhatbuf_r>:
 801240e:	b570      	push	{r4, r5, r6, lr}
 8012410:	460c      	mov	r4, r1
 8012412:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012416:	2900      	cmp	r1, #0
 8012418:	b096      	sub	sp, #88	@ 0x58
 801241a:	4615      	mov	r5, r2
 801241c:	461e      	mov	r6, r3
 801241e:	da0d      	bge.n	801243c <__swhatbuf_r+0x2e>
 8012420:	89a3      	ldrh	r3, [r4, #12]
 8012422:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8012426:	f04f 0100 	mov.w	r1, #0
 801242a:	bf14      	ite	ne
 801242c:	2340      	movne	r3, #64	@ 0x40
 801242e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8012432:	2000      	movs	r0, #0
 8012434:	6031      	str	r1, [r6, #0]
 8012436:	602b      	str	r3, [r5, #0]
 8012438:	b016      	add	sp, #88	@ 0x58
 801243a:	bd70      	pop	{r4, r5, r6, pc}
 801243c:	466a      	mov	r2, sp
 801243e:	f000 f879 	bl	8012534 <_fstat_r>
 8012442:	2800      	cmp	r0, #0
 8012444:	dbec      	blt.n	8012420 <__swhatbuf_r+0x12>
 8012446:	9901      	ldr	r1, [sp, #4]
 8012448:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801244c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8012450:	4259      	negs	r1, r3
 8012452:	4159      	adcs	r1, r3
 8012454:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8012458:	e7eb      	b.n	8012432 <__swhatbuf_r+0x24>

0801245a <__smakebuf_r>:
 801245a:	898b      	ldrh	r3, [r1, #12]
 801245c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801245e:	079d      	lsls	r5, r3, #30
 8012460:	4606      	mov	r6, r0
 8012462:	460c      	mov	r4, r1
 8012464:	d507      	bpl.n	8012476 <__smakebuf_r+0x1c>
 8012466:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801246a:	6023      	str	r3, [r4, #0]
 801246c:	6123      	str	r3, [r4, #16]
 801246e:	2301      	movs	r3, #1
 8012470:	6163      	str	r3, [r4, #20]
 8012472:	b003      	add	sp, #12
 8012474:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012476:	ab01      	add	r3, sp, #4
 8012478:	466a      	mov	r2, sp
 801247a:	f7ff ffc8 	bl	801240e <__swhatbuf_r>
 801247e:	9f00      	ldr	r7, [sp, #0]
 8012480:	4605      	mov	r5, r0
 8012482:	4639      	mov	r1, r7
 8012484:	4630      	mov	r0, r6
 8012486:	f7ff f977 	bl	8011778 <_malloc_r>
 801248a:	b948      	cbnz	r0, 80124a0 <__smakebuf_r+0x46>
 801248c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012490:	059a      	lsls	r2, r3, #22
 8012492:	d4ee      	bmi.n	8012472 <__smakebuf_r+0x18>
 8012494:	f023 0303 	bic.w	r3, r3, #3
 8012498:	f043 0302 	orr.w	r3, r3, #2
 801249c:	81a3      	strh	r3, [r4, #12]
 801249e:	e7e2      	b.n	8012466 <__smakebuf_r+0xc>
 80124a0:	89a3      	ldrh	r3, [r4, #12]
 80124a2:	6020      	str	r0, [r4, #0]
 80124a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80124a8:	81a3      	strh	r3, [r4, #12]
 80124aa:	9b01      	ldr	r3, [sp, #4]
 80124ac:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80124b0:	b15b      	cbz	r3, 80124ca <__smakebuf_r+0x70>
 80124b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80124b6:	4630      	mov	r0, r6
 80124b8:	f000 f84e 	bl	8012558 <_isatty_r>
 80124bc:	b128      	cbz	r0, 80124ca <__smakebuf_r+0x70>
 80124be:	89a3      	ldrh	r3, [r4, #12]
 80124c0:	f023 0303 	bic.w	r3, r3, #3
 80124c4:	f043 0301 	orr.w	r3, r3, #1
 80124c8:	81a3      	strh	r3, [r4, #12]
 80124ca:	89a3      	ldrh	r3, [r4, #12]
 80124cc:	431d      	orrs	r5, r3
 80124ce:	81a5      	strh	r5, [r4, #12]
 80124d0:	e7cf      	b.n	8012472 <__smakebuf_r+0x18>

080124d2 <_raise_r>:
 80124d2:	291f      	cmp	r1, #31
 80124d4:	b538      	push	{r3, r4, r5, lr}
 80124d6:	4605      	mov	r5, r0
 80124d8:	460c      	mov	r4, r1
 80124da:	d904      	bls.n	80124e6 <_raise_r+0x14>
 80124dc:	2316      	movs	r3, #22
 80124de:	6003      	str	r3, [r0, #0]
 80124e0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80124e4:	bd38      	pop	{r3, r4, r5, pc}
 80124e6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80124e8:	b112      	cbz	r2, 80124f0 <_raise_r+0x1e>
 80124ea:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80124ee:	b94b      	cbnz	r3, 8012504 <_raise_r+0x32>
 80124f0:	4628      	mov	r0, r5
 80124f2:	f000 f853 	bl	801259c <_getpid_r>
 80124f6:	4622      	mov	r2, r4
 80124f8:	4601      	mov	r1, r0
 80124fa:	4628      	mov	r0, r5
 80124fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012500:	f000 b83a 	b.w	8012578 <_kill_r>
 8012504:	2b01      	cmp	r3, #1
 8012506:	d00a      	beq.n	801251e <_raise_r+0x4c>
 8012508:	1c59      	adds	r1, r3, #1
 801250a:	d103      	bne.n	8012514 <_raise_r+0x42>
 801250c:	2316      	movs	r3, #22
 801250e:	6003      	str	r3, [r0, #0]
 8012510:	2001      	movs	r0, #1
 8012512:	e7e7      	b.n	80124e4 <_raise_r+0x12>
 8012514:	2100      	movs	r1, #0
 8012516:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801251a:	4620      	mov	r0, r4
 801251c:	4798      	blx	r3
 801251e:	2000      	movs	r0, #0
 8012520:	e7e0      	b.n	80124e4 <_raise_r+0x12>
	...

08012524 <raise>:
 8012524:	4b02      	ldr	r3, [pc, #8]	@ (8012530 <raise+0xc>)
 8012526:	4601      	mov	r1, r0
 8012528:	6818      	ldr	r0, [r3, #0]
 801252a:	f7ff bfd2 	b.w	80124d2 <_raise_r>
 801252e:	bf00      	nop
 8012530:	20000078 	.word	0x20000078

08012534 <_fstat_r>:
 8012534:	b538      	push	{r3, r4, r5, lr}
 8012536:	4d07      	ldr	r5, [pc, #28]	@ (8012554 <_fstat_r+0x20>)
 8012538:	2300      	movs	r3, #0
 801253a:	4604      	mov	r4, r0
 801253c:	4608      	mov	r0, r1
 801253e:	4611      	mov	r1, r2
 8012540:	602b      	str	r3, [r5, #0]
 8012542:	f7ee fe73 	bl	800122c <_fstat>
 8012546:	1c43      	adds	r3, r0, #1
 8012548:	d102      	bne.n	8012550 <_fstat_r+0x1c>
 801254a:	682b      	ldr	r3, [r5, #0]
 801254c:	b103      	cbz	r3, 8012550 <_fstat_r+0x1c>
 801254e:	6023      	str	r3, [r4, #0]
 8012550:	bd38      	pop	{r3, r4, r5, pc}
 8012552:	bf00      	nop
 8012554:	2000aa80 	.word	0x2000aa80

08012558 <_isatty_r>:
 8012558:	b538      	push	{r3, r4, r5, lr}
 801255a:	4d06      	ldr	r5, [pc, #24]	@ (8012574 <_isatty_r+0x1c>)
 801255c:	2300      	movs	r3, #0
 801255e:	4604      	mov	r4, r0
 8012560:	4608      	mov	r0, r1
 8012562:	602b      	str	r3, [r5, #0]
 8012564:	f7ee fe72 	bl	800124c <_isatty>
 8012568:	1c43      	adds	r3, r0, #1
 801256a:	d102      	bne.n	8012572 <_isatty_r+0x1a>
 801256c:	682b      	ldr	r3, [r5, #0]
 801256e:	b103      	cbz	r3, 8012572 <_isatty_r+0x1a>
 8012570:	6023      	str	r3, [r4, #0]
 8012572:	bd38      	pop	{r3, r4, r5, pc}
 8012574:	2000aa80 	.word	0x2000aa80

08012578 <_kill_r>:
 8012578:	b538      	push	{r3, r4, r5, lr}
 801257a:	4d07      	ldr	r5, [pc, #28]	@ (8012598 <_kill_r+0x20>)
 801257c:	2300      	movs	r3, #0
 801257e:	4604      	mov	r4, r0
 8012580:	4608      	mov	r0, r1
 8012582:	4611      	mov	r1, r2
 8012584:	602b      	str	r3, [r5, #0]
 8012586:	f7ee fdef 	bl	8001168 <_kill>
 801258a:	1c43      	adds	r3, r0, #1
 801258c:	d102      	bne.n	8012594 <_kill_r+0x1c>
 801258e:	682b      	ldr	r3, [r5, #0]
 8012590:	b103      	cbz	r3, 8012594 <_kill_r+0x1c>
 8012592:	6023      	str	r3, [r4, #0]
 8012594:	bd38      	pop	{r3, r4, r5, pc}
 8012596:	bf00      	nop
 8012598:	2000aa80 	.word	0x2000aa80

0801259c <_getpid_r>:
 801259c:	f7ee bddc 	b.w	8001158 <_getpid>

080125a0 <_malloc_usable_size_r>:
 80125a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80125a4:	1f18      	subs	r0, r3, #4
 80125a6:	2b00      	cmp	r3, #0
 80125a8:	bfbc      	itt	lt
 80125aa:	580b      	ldrlt	r3, [r1, r0]
 80125ac:	18c0      	addlt	r0, r0, r3
 80125ae:	4770      	bx	lr

080125b0 <_init>:
 80125b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80125b2:	bf00      	nop
 80125b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80125b6:	bc08      	pop	{r3}
 80125b8:	469e      	mov	lr, r3
 80125ba:	4770      	bx	lr

080125bc <_fini>:
 80125bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80125be:	bf00      	nop
 80125c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80125c2:	bc08      	pop	{r3}
 80125c4:	469e      	mov	lr, r3
 80125c6:	4770      	bx	lr
