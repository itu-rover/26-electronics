
Science.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c484  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f0  0800c628  0800c628  0000d628  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ca18  0800ca18  0000e1e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800ca18  0800ca18  0000da18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ca20  0800ca20  0000e1e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ca20  0800ca20  0000da20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ca24  0800ca24  0000da24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e8  20000000  0800ca28  0000e000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000e1e8  2**0
                  CONTENTS
 10 .bss          000004f8  200001e8  200001e8  0000e1e8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200006e0  200006e0  0000e1e8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000e1e8  2**0
                  CONTENTS, READONLY
 13 .debug_info   000160fb  00000000  00000000  0000e218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002e0e  00000000  00000000  00024313  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001230  00000000  00000000  00027128  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e4a  00000000  00000000  00028358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000238e8  00000000  00000000  000291a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a604  00000000  00000000  0004ca8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d6d3b  00000000  00000000  0006708e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0013ddc9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000061b4  00000000  00000000  0013de0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000055  00000000  00000000  00143fc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e8 	.word	0x200001e8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800c60c 	.word	0x0800c60c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001ec 	.word	0x200001ec
 80001dc:	0800c60c 	.word	0x0800c60c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <HAL_TIM_IC_CaptureCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

//MHZ-19 Callback Function
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
	if(htim->Channel==HAL_TIM_ACTIVE_CHANNEL_1)
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	7f1b      	ldrb	r3, [r3, #28]
 8000c64:	2b01      	cmp	r3, #1
 8000c66:	d10f      	bne.n	8000c88 <HAL_TIM_IC_CaptureCallback+0x30>
	{
		period_tick = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000c68:	2100      	movs	r1, #0
 8000c6a:	6878      	ldr	r0, [r7, #4]
 8000c6c:	f005 ff3e 	bl	8006aec <HAL_TIM_ReadCapturedValue>
 8000c70:	4603      	mov	r3, r0
 8000c72:	b29a      	uxth	r2, r3
 8000c74:	4b2a      	ldr	r3, [pc, #168]	@ (8000d20 <HAL_TIM_IC_CaptureCallback+0xc8>)
 8000c76:	801a      	strh	r2, [r3, #0]
		high_tick = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8000c78:	2104      	movs	r1, #4
 8000c7a:	6878      	ldr	r0, [r7, #4]
 8000c7c:	f005 ff36 	bl	8006aec <HAL_TIM_ReadCapturedValue>
 8000c80:	4603      	mov	r3, r0
 8000c82:	b29a      	uxth	r2, r3
 8000c84:	4b27      	ldr	r3, [pc, #156]	@ (8000d24 <HAL_TIM_IC_CaptureCallback+0xcc>)
 8000c86:	801a      	strh	r2, [r3, #0]
	}
	high_ms = high_tick * TICK_MS;
 8000c88:	4b26      	ldr	r3, [pc, #152]	@ (8000d24 <HAL_TIM_IC_CaptureCallback+0xcc>)
 8000c8a:	881b      	ldrh	r3, [r3, #0]
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f7ff fc51 	bl	8000534 <__aeabi_i2d>
 8000c92:	a321      	add	r3, pc, #132	@ (adr r3, 8000d18 <HAL_TIM_IC_CaptureCallback+0xc0>)
 8000c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c98:	f7ff fcb6 	bl	8000608 <__aeabi_dmul>
 8000c9c:	4602      	mov	r2, r0
 8000c9e:	460b      	mov	r3, r1
 8000ca0:	4610      	mov	r0, r2
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	f7ff ff88 	bl	8000bb8 <__aeabi_d2f>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	4a1f      	ldr	r2, [pc, #124]	@ (8000d28 <HAL_TIM_IC_CaptureCallback+0xd0>)
 8000cac:	6013      	str	r3, [r2, #0]
	period_ms = period_tick * TICK_MS;
 8000cae:	4b1c      	ldr	r3, [pc, #112]	@ (8000d20 <HAL_TIM_IC_CaptureCallback+0xc8>)
 8000cb0:	881b      	ldrh	r3, [r3, #0]
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f7ff fc3e 	bl	8000534 <__aeabi_i2d>
 8000cb8:	a317      	add	r3, pc, #92	@ (adr r3, 8000d18 <HAL_TIM_IC_CaptureCallback+0xc0>)
 8000cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cbe:	f7ff fca3 	bl	8000608 <__aeabi_dmul>
 8000cc2:	4602      	mov	r2, r0
 8000cc4:	460b      	mov	r3, r1
 8000cc6:	4610      	mov	r0, r2
 8000cc8:	4619      	mov	r1, r3
 8000cca:	f7ff ff75 	bl	8000bb8 <__aeabi_d2f>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	4a16      	ldr	r2, [pc, #88]	@ (8000d2c <HAL_TIM_IC_CaptureCallback+0xd4>)
 8000cd2:	6013      	str	r3, [r2, #0]
	CO2 = 2000 * (high_ms - 2) / (period_ms - 4) + 240 ;
 8000cd4:	4b14      	ldr	r3, [pc, #80]	@ (8000d28 <HAL_TIM_IC_CaptureCallback+0xd0>)
 8000cd6:	edd3 7a00 	vldr	s15, [r3]
 8000cda:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8000cde:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000ce2:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 8000d30 <HAL_TIM_IC_CaptureCallback+0xd8>
 8000ce6:	ee67 6a87 	vmul.f32	s13, s15, s14
 8000cea:	4b10      	ldr	r3, [pc, #64]	@ (8000d2c <HAL_TIM_IC_CaptureCallback+0xd4>)
 8000cec:	edd3 7a00 	vldr	s15, [r3]
 8000cf0:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8000cf4:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8000cf8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000cfc:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8000d34 <HAL_TIM_IC_CaptureCallback+0xdc>
 8000d00:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000d04:	4b0c      	ldr	r3, [pc, #48]	@ (8000d38 <HAL_TIM_IC_CaptureCallback+0xe0>)
 8000d06:	edc3 7a00 	vstr	s15, [r3]
}
 8000d0a:	bf00      	nop
 8000d0c:	3708      	adds	r7, #8
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	f3af 8000 	nop.w
 8000d18:	47ae147b 	.word	0x47ae147b
 8000d1c:	3f947ae1 	.word	0x3f947ae1
 8000d20:	200004b0 	.word	0x200004b0
 8000d24:	200004b2 	.word	0x200004b2
 8000d28:	200004b4 	.word	0x200004b4
 8000d2c:	200004b8 	.word	0x200004b8
 8000d30:	44fa0000 	.word	0x44fa0000
 8000d34:	43700000 	.word	0x43700000
 8000d38:	200004a8 	.word	0x200004a8

08000d3c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000d40:	b08e      	sub	sp, #56	@ 0x38
 8000d42:	af0c      	add	r7, sp, #48	@ 0x30
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d44:	f000 ff64 	bl	8001c10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d48:	f000 f8fa 	bl	8000f40 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d4c:	f000 fbd4 	bl	80014f8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000d50:	f000 fba2 	bl	8001498 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000d54:	f000 fa82 	bl	800125c <MX_TIM2_Init>
  MX_ADC3_Init();
 8000d58:	f000 f9d0 	bl	80010fc <MX_ADC3_Init>
  MX_I2C1_Init();
 8000d5c:	f000 fa3e 	bl	80011dc <MX_I2C1_Init>
  MX_ADC1_Init();
 8000d60:	f000 f95c 	bl	800101c <MX_ADC1_Init>
  MX_UART5_Init();
 8000d64:	f000 fb68 	bl	8001438 <MX_UART5_Init>
  MX_TIM4_Init();
 8000d68:	f000 fac6 	bl	80012f8 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  //PWM input in interrupt mode
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1); // Rising edge
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	4861      	ldr	r0, [pc, #388]	@ (8000ef4 <main+0x1b8>)
 8000d70:	f005 fac8 	bl	8006304 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_2); // Falling edge
 8000d74:	2104      	movs	r1, #4
 8000d76:	485f      	ldr	r0, [pc, #380]	@ (8000ef4 <main+0x1b8>)
 8000d78:	f005 fac4 	bl	8006304 <HAL_TIM_IC_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  DHT11_Start();
 8000d7c:	f007 f994 	bl	80080a8 <DHT11_Start>
	  presence = DHT11_Check_Response();
 8000d80:	f007 f9b4 	bl	80080ec <DHT11_Check_Response>
 8000d84:	4603      	mov	r3, r0
 8000d86:	461a      	mov	r2, r3
 8000d88:	4b5b      	ldr	r3, [pc, #364]	@ (8000ef8 <main+0x1bc>)
 8000d8a:	701a      	strb	r2, [r3, #0]

	  if (presence) {
 8000d8c:	4b5a      	ldr	r3, [pc, #360]	@ (8000ef8 <main+0x1bc>)
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d01d      	beq.n	8000dd0 <main+0x94>
		  RhByteInt   = DHT11_Read_Byte();			//Nem: tam kısım
 8000d94:	f007 f9da 	bl	800814c <DHT11_Read_Byte>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	461a      	mov	r2, r3
 8000d9c:	4b57      	ldr	r3, [pc, #348]	@ (8000efc <main+0x1c0>)
 8000d9e:	701a      	strb	r2, [r3, #0]
		  RhByteDec   = DHT11_Read_Byte();			//Nem: ondalıklı kısım (sıfır geliyo)
 8000da0:	f007 f9d4 	bl	800814c <DHT11_Read_Byte>
 8000da4:	4603      	mov	r3, r0
 8000da6:	461a      	mov	r2, r3
 8000da8:	4b55      	ldr	r3, [pc, #340]	@ (8000f00 <main+0x1c4>)
 8000daa:	701a      	strb	r2, [r3, #0]
		  TempByteInt = DHT11_Read_Byte();			//Sıcaklık: tam kısım
 8000dac:	f007 f9ce 	bl	800814c <DHT11_Read_Byte>
 8000db0:	4603      	mov	r3, r0
 8000db2:	461a      	mov	r2, r3
 8000db4:	4b53      	ldr	r3, [pc, #332]	@ (8000f04 <main+0x1c8>)
 8000db6:	701a      	strb	r2, [r3, #0]
		  TempByteDec = DHT11_Read_Byte();			//Sıcaklık: ondalıklı kısım
 8000db8:	f007 f9c8 	bl	800814c <DHT11_Read_Byte>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	461a      	mov	r2, r3
 8000dc0:	4b51      	ldr	r3, [pc, #324]	@ (8000f08 <main+0x1cc>)
 8000dc2:	701a      	strb	r2, [r3, #0]
		  SumCheck    = DHT11_Read_Byte();			//Önemsiz
 8000dc4:	f007 f9c2 	bl	800814c <DHT11_Read_Byte>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	461a      	mov	r2, r3
 8000dcc:	4b4f      	ldr	r3, [pc, #316]	@ (8000f0c <main+0x1d0>)
 8000dce:	701a      	strb	r2, [r3, #0]
	  }
	  DHT_temp 	   = TempByteInt +  TempByteDec / 10.0f;
 8000dd0:	4b4c      	ldr	r3, [pc, #304]	@ (8000f04 <main+0x1c8>)
 8000dd2:	781b      	ldrb	r3, [r3, #0]
 8000dd4:	ee07 3a90 	vmov	s15, r3
 8000dd8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ddc:	4b4a      	ldr	r3, [pc, #296]	@ (8000f08 <main+0x1cc>)
 8000dde:	781b      	ldrb	r3, [r3, #0]
 8000de0:	ee07 3a90 	vmov	s15, r3
 8000de4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000de8:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8000dec:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8000df0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000df4:	4b46      	ldr	r3, [pc, #280]	@ (8000f10 <main+0x1d4>)
 8000df6:	edc3 7a00 	vstr	s15, [r3]

	  NH3 = Read_NH3();
 8000dfa:	f007 fa69 	bl	80082d0 <Read_NH3>
 8000dfe:	eef0 7a40 	vmov.f32	s15, s0
 8000e02:	4b44      	ldr	r3, [pc, #272]	@ (8000f14 <main+0x1d8>)
 8000e04:	edc3 7a00 	vstr	s15, [r3]
	  CH4 = Read_CH4();
 8000e08:	f007 faee 	bl	80083e8 <Read_CH4>
 8000e0c:	eef0 7a40 	vmov.f32	s15, s0
 8000e10:	4b41      	ldr	r3, [pc, #260]	@ (8000f18 <main+0x1dc>)
 8000e12:	edc3 7a00 	vstr	s15, [r3]
	  NO2 = Read_NO2();
 8000e16:	f007 f9e7 	bl	80081e8 <Read_NO2>
 8000e1a:	eef0 7a40 	vmov.f32	s15, s0
 8000e1e:	4b3f      	ldr	r3, [pc, #252]	@ (8000f1c <main+0x1e0>)
 8000e20:	edc3 7a00 	vstr	s15, [r3]

	  UT = get_ut();
 8000e24:	f006 ff62 	bl	8007cec <get_ut>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	461a      	mov	r2, r3
 8000e2c:	4b3c      	ldr	r3, [pc, #240]	@ (8000f20 <main+0x1e4>)
 8000e2e:	601a      	str	r2, [r3, #0]
	  UP = get_up();
 8000e30:	f006 ffdc 	bl	8007dec <get_up>
 8000e34:	4603      	mov	r3, r0
 8000e36:	461a      	mov	r2, r3
 8000e38:	4b3a      	ldr	r3, [pc, #232]	@ (8000f24 <main+0x1e8>)
 8000e3a:	601a      	str	r2, [r3, #0]
	  temp = get_temp();
 8000e3c:	f006 ff8a 	bl	8007d54 <get_temp>
 8000e40:	eef0 7a40 	vmov.f32	s15, s0
 8000e44:	4b38      	ldr	r3, [pc, #224]	@ (8000f28 <main+0x1ec>)
 8000e46:	edc3 7a00 	vstr	s15, [r3]
	  press= get_press() * 10;
 8000e4a:	f007 f801 	bl	8007e50 <get_press>
 8000e4e:	4602      	mov	r2, r0
 8000e50:	4613      	mov	r3, r2
 8000e52:	009b      	lsls	r3, r3, #2
 8000e54:	4413      	add	r3, r2
 8000e56:	005b      	lsls	r3, r3, #1
 8000e58:	461a      	mov	r2, r3
 8000e5a:	4b34      	ldr	r3, [pc, #208]	@ (8000f2c <main+0x1f0>)
 8000e5c:	601a      	str	r2, [r3, #0]

	  snprintf(data_buff, sizeof(data_buff), "%f %f %f %f %f %u %ld",
 8000e5e:	4b34      	ldr	r3, [pc, #208]	@ (8000f30 <main+0x1f4>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	4618      	mov	r0, r3
 8000e64:	f7ff fb78 	bl	8000558 <__aeabi_f2d>
 8000e68:	4604      	mov	r4, r0
 8000e6a:	460d      	mov	r5, r1
 8000e6c:	4b29      	ldr	r3, [pc, #164]	@ (8000f14 <main+0x1d8>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4618      	mov	r0, r3
 8000e72:	f7ff fb71 	bl	8000558 <__aeabi_f2d>
 8000e76:	4680      	mov	r8, r0
 8000e78:	4689      	mov	r9, r1
 8000e7a:	4b27      	ldr	r3, [pc, #156]	@ (8000f18 <main+0x1dc>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f7ff fb6a 	bl	8000558 <__aeabi_f2d>
 8000e84:	4682      	mov	sl, r0
 8000e86:	468b      	mov	fp, r1
 8000e88:	4b24      	ldr	r3, [pc, #144]	@ (8000f1c <main+0x1e0>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f7ff fb63 	bl	8000558 <__aeabi_f2d>
 8000e92:	e9c7 0100 	strd	r0, r1, [r7]
 8000e96:	4b1e      	ldr	r3, [pc, #120]	@ (8000f10 <main+0x1d4>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f7ff fb5c 	bl	8000558 <__aeabi_f2d>
 8000ea0:	4602      	mov	r2, r0
 8000ea2:	460b      	mov	r3, r1
 8000ea4:	4915      	ldr	r1, [pc, #84]	@ (8000efc <main+0x1c0>)
 8000ea6:	7809      	ldrb	r1, [r1, #0]
 8000ea8:	4608      	mov	r0, r1
 8000eaa:	4920      	ldr	r1, [pc, #128]	@ (8000f2c <main+0x1f0>)
 8000eac:	6809      	ldr	r1, [r1, #0]
 8000eae:	910b      	str	r1, [sp, #44]	@ 0x2c
 8000eb0:	900a      	str	r0, [sp, #40]	@ 0x28
 8000eb2:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8000eb6:	ed97 7b00 	vldr	d7, [r7]
 8000eba:	ed8d 7b06 	vstr	d7, [sp, #24]
 8000ebe:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8000ec2:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8000ec6:	e9cd 4500 	strd	r4, r5, [sp]
 8000eca:	4a1a      	ldr	r2, [pc, #104]	@ (8000f34 <main+0x1f8>)
 8000ecc:	2180      	movs	r1, #128	@ 0x80
 8000ece:	481a      	ldr	r0, [pc, #104]	@ (8000f38 <main+0x1fc>)
 8000ed0:	f008 f832 	bl	8008f38 <sniprintf>
		CO2, NH3, CH4, NO2, DHT_temp, RhByteInt, press);

	  HAL_UART_Transmit(&huart5, (uint8_t*)data_buff, strlen(data_buff), HAL_MAX_DELAY);
 8000ed4:	4818      	ldr	r0, [pc, #96]	@ (8000f38 <main+0x1fc>)
 8000ed6:	f7ff f9d3 	bl	8000280 <strlen>
 8000eda:	4603      	mov	r3, r0
 8000edc:	b29a      	uxth	r2, r3
 8000ede:	f04f 33ff 	mov.w	r3, #4294967295
 8000ee2:	4915      	ldr	r1, [pc, #84]	@ (8000f38 <main+0x1fc>)
 8000ee4:	4815      	ldr	r0, [pc, #84]	@ (8000f3c <main+0x200>)
 8000ee6:	f006 fa87 	bl	80073f8 <HAL_UART_Transmit>

	  HAL_Delay(1500);
 8000eea:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000eee:	f000 fef5 	bl	8001cdc <HAL_Delay>
	  DHT11_Start();
 8000ef2:	e743      	b.n	8000d7c <main+0x40>
 8000ef4:	20000344 	.word	0x20000344
 8000ef8:	200004bc 	.word	0x200004bc
 8000efc:	200004bd 	.word	0x200004bd
 8000f00:	200004be 	.word	0x200004be
 8000f04:	200004bf 	.word	0x200004bf
 8000f08:	200004c0 	.word	0x200004c0
 8000f0c:	200004c1 	.word	0x200004c1
 8000f10:	200004c4 	.word	0x200004c4
 8000f14:	200004a0 	.word	0x200004a0
 8000f18:	200004ac 	.word	0x200004ac
 8000f1c:	200004a4 	.word	0x200004a4
 8000f20:	2000056c 	.word	0x2000056c
 8000f24:	20000570 	.word	0x20000570
 8000f28:	200004cc 	.word	0x200004cc
 8000f2c:	200004c8 	.word	0x200004c8
 8000f30:	200004a8 	.word	0x200004a8
 8000f34:	0800c628 	.word	0x0800c628
 8000f38:	200004d0 	.word	0x200004d0
 8000f3c:	20000390 	.word	0x20000390

08000f40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b0a6      	sub	sp, #152	@ 0x98
 8000f44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f46:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000f4a:	2228      	movs	r2, #40	@ 0x28
 8000f4c:	2100      	movs	r1, #0
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f008 f869 	bl	8009026 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f54:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000f58:	2200      	movs	r2, #0
 8000f5a:	601a      	str	r2, [r3, #0]
 8000f5c:	605a      	str	r2, [r3, #4]
 8000f5e:	609a      	str	r2, [r3, #8]
 8000f60:	60da      	str	r2, [r3, #12]
 8000f62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f64:	1d3b      	adds	r3, r7, #4
 8000f66:	2258      	movs	r2, #88	@ 0x58
 8000f68:	2100      	movs	r1, #0
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f008 f85b 	bl	8009026 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f70:	2302      	movs	r3, #2
 8000f72:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f74:	2301      	movs	r3, #1
 8000f76:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f78:	2310      	movs	r3, #16
 8000f7a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f7e:	2302      	movs	r3, #2
 8000f80:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f84:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000f88:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000f8c:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000f90:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000f94:	2300      	movs	r3, #0
 8000f96:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f9a:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f003 fbfc 	bl	800479c <HAL_RCC_OscConfig>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d001      	beq.n	8000fae <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000faa:	f000 fb29 	bl	8001600 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fae:	230f      	movs	r3, #15
 8000fb0:	65fb      	str	r3, [r7, #92]	@ 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fb2:	2302      	movs	r3, #2
 8000fb4:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000fbe:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	66fb      	str	r3, [r7, #108]	@ 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000fc4:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000fc8:	2102      	movs	r1, #2
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f004 fc3a 	bl	8005844 <HAL_RCC_ClockConfig>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000fd6:	f000 fb13 	bl	8001600 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_UART5
 8000fda:	4b0f      	ldr	r3, [pc, #60]	@ (8001018 <SystemClock_Config+0xd8>)
 8000fdc:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_ADC12
                              |RCC_PERIPHCLK_ADC34|RCC_PERIPHCLK_TIM2
                              |RCC_PERIPHCLK_TIM34;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8000fe6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000fea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  PeriphClkInit.Adc34ClockSelection = RCC_ADC34PLLCLK_DIV1;
 8000fec:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ff0:	633b      	str	r3, [r7, #48]	@ 0x30
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	623b      	str	r3, [r7, #32]
  PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_HCLK;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  PeriphClkInit.Tim34ClockSelection = RCC_TIM34CLK_HCLK;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	643b      	str	r3, [r7, #64]	@ 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ffe:	1d3b      	adds	r3, r7, #4
 8001000:	4618      	mov	r0, r3
 8001002:	f004 fe3f 	bl	8005c84 <HAL_RCCEx_PeriphCLKConfig>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d001      	beq.n	8001010 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 800100c:	f000 faf8 	bl	8001600 <Error_Handler>
  }
}
 8001010:	bf00      	nop
 8001012:	3798      	adds	r7, #152	@ 0x98
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	003001b2 	.word	0x003001b2

0800101c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b08a      	sub	sp, #40	@ 0x28
 8001020:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001022:	f107 031c 	add.w	r3, r7, #28
 8001026:	2200      	movs	r2, #0
 8001028:	601a      	str	r2, [r3, #0]
 800102a:	605a      	str	r2, [r3, #4]
 800102c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800102e:	1d3b      	adds	r3, r7, #4
 8001030:	2200      	movs	r2, #0
 8001032:	601a      	str	r2, [r3, #0]
 8001034:	605a      	str	r2, [r3, #4]
 8001036:	609a      	str	r2, [r3, #8]
 8001038:	60da      	str	r2, [r3, #12]
 800103a:	611a      	str	r2, [r3, #16]
 800103c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800103e:	4b2e      	ldr	r3, [pc, #184]	@ (80010f8 <MX_ADC1_Init+0xdc>)
 8001040:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001044:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001046:	4b2c      	ldr	r3, [pc, #176]	@ (80010f8 <MX_ADC1_Init+0xdc>)
 8001048:	2200      	movs	r2, #0
 800104a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800104c:	4b2a      	ldr	r3, [pc, #168]	@ (80010f8 <MX_ADC1_Init+0xdc>)
 800104e:	2200      	movs	r2, #0
 8001050:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001052:	4b29      	ldr	r3, [pc, #164]	@ (80010f8 <MX_ADC1_Init+0xdc>)
 8001054:	2200      	movs	r2, #0
 8001056:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001058:	4b27      	ldr	r3, [pc, #156]	@ (80010f8 <MX_ADC1_Init+0xdc>)
 800105a:	2200      	movs	r2, #0
 800105c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800105e:	4b26      	ldr	r3, [pc, #152]	@ (80010f8 <MX_ADC1_Init+0xdc>)
 8001060:	2200      	movs	r2, #0
 8001062:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001066:	4b24      	ldr	r3, [pc, #144]	@ (80010f8 <MX_ADC1_Init+0xdc>)
 8001068:	2200      	movs	r2, #0
 800106a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800106c:	4b22      	ldr	r3, [pc, #136]	@ (80010f8 <MX_ADC1_Init+0xdc>)
 800106e:	2201      	movs	r2, #1
 8001070:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001072:	4b21      	ldr	r3, [pc, #132]	@ (80010f8 <MX_ADC1_Init+0xdc>)
 8001074:	2200      	movs	r2, #0
 8001076:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001078:	4b1f      	ldr	r3, [pc, #124]	@ (80010f8 <MX_ADC1_Init+0xdc>)
 800107a:	2201      	movs	r2, #1
 800107c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800107e:	4b1e      	ldr	r3, [pc, #120]	@ (80010f8 <MX_ADC1_Init+0xdc>)
 8001080:	2200      	movs	r2, #0
 8001082:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001086:	4b1c      	ldr	r3, [pc, #112]	@ (80010f8 <MX_ADC1_Init+0xdc>)
 8001088:	2204      	movs	r2, #4
 800108a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800108c:	4b1a      	ldr	r3, [pc, #104]	@ (80010f8 <MX_ADC1_Init+0xdc>)
 800108e:	2200      	movs	r2, #0
 8001090:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001092:	4b19      	ldr	r3, [pc, #100]	@ (80010f8 <MX_ADC1_Init+0xdc>)
 8001094:	2200      	movs	r2, #0
 8001096:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001098:	4817      	ldr	r0, [pc, #92]	@ (80010f8 <MX_ADC1_Init+0xdc>)
 800109a:	f000 fe43 	bl	8001d24 <HAL_ADC_Init>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d001      	beq.n	80010a8 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 80010a4:	f000 faac 	bl	8001600 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80010a8:	2300      	movs	r3, #0
 80010aa:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80010ac:	f107 031c 	add.w	r3, r7, #28
 80010b0:	4619      	mov	r1, r3
 80010b2:	4811      	ldr	r0, [pc, #68]	@ (80010f8 <MX_ADC1_Init+0xdc>)
 80010b4:	f001 fd76 	bl	8002ba4 <HAL_ADCEx_MultiModeConfigChannel>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80010be:	f000 fa9f 	bl	8001600 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80010c2:	2307      	movs	r3, #7
 80010c4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010c6:	2301      	movs	r3, #1
 80010c8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80010ca:	2300      	movs	r3, #0
 80010cc:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80010ce:	2300      	movs	r3, #0
 80010d0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80010d2:	2300      	movs	r3, #0
 80010d4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80010d6:	2300      	movs	r3, #0
 80010d8:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010da:	1d3b      	adds	r3, r7, #4
 80010dc:	4619      	mov	r1, r3
 80010de:	4806      	ldr	r0, [pc, #24]	@ (80010f8 <MX_ADC1_Init+0xdc>)
 80010e0:	f001 fa76 	bl	80025d0 <HAL_ADC_ConfigChannel>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d001      	beq.n	80010ee <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 80010ea:	f000 fa89 	bl	8001600 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010ee:	bf00      	nop
 80010f0:	3728      	adds	r7, #40	@ 0x28
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	20000204 	.word	0x20000204

080010fc <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b08a      	sub	sp, #40	@ 0x28
 8001100:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001102:	f107 031c 	add.w	r3, r7, #28
 8001106:	2200      	movs	r2, #0
 8001108:	601a      	str	r2, [r3, #0]
 800110a:	605a      	str	r2, [r3, #4]
 800110c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800110e:	1d3b      	adds	r3, r7, #4
 8001110:	2200      	movs	r2, #0
 8001112:	601a      	str	r2, [r3, #0]
 8001114:	605a      	str	r2, [r3, #4]
 8001116:	609a      	str	r2, [r3, #8]
 8001118:	60da      	str	r2, [r3, #12]
 800111a:	611a      	str	r2, [r3, #16]
 800111c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 800111e:	4b2d      	ldr	r3, [pc, #180]	@ (80011d4 <MX_ADC3_Init+0xd8>)
 8001120:	4a2d      	ldr	r2, [pc, #180]	@ (80011d8 <MX_ADC3_Init+0xdc>)
 8001122:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001124:	4b2b      	ldr	r3, [pc, #172]	@ (80011d4 <MX_ADC3_Init+0xd8>)
 8001126:	2200      	movs	r2, #0
 8001128:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800112a:	4b2a      	ldr	r3, [pc, #168]	@ (80011d4 <MX_ADC3_Init+0xd8>)
 800112c:	2200      	movs	r2, #0
 800112e:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001130:	4b28      	ldr	r3, [pc, #160]	@ (80011d4 <MX_ADC3_Init+0xd8>)
 8001132:	2200      	movs	r2, #0
 8001134:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001136:	4b27      	ldr	r3, [pc, #156]	@ (80011d4 <MX_ADC3_Init+0xd8>)
 8001138:	2200      	movs	r2, #0
 800113a:	765a      	strb	r2, [r3, #25]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800113c:	4b25      	ldr	r3, [pc, #148]	@ (80011d4 <MX_ADC3_Init+0xd8>)
 800113e:	2200      	movs	r2, #0
 8001140:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001144:	4b23      	ldr	r3, [pc, #140]	@ (80011d4 <MX_ADC3_Init+0xd8>)
 8001146:	2200      	movs	r2, #0
 8001148:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800114a:	4b22      	ldr	r3, [pc, #136]	@ (80011d4 <MX_ADC3_Init+0xd8>)
 800114c:	2201      	movs	r2, #1
 800114e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001150:	4b20      	ldr	r3, [pc, #128]	@ (80011d4 <MX_ADC3_Init+0xd8>)
 8001152:	2200      	movs	r2, #0
 8001154:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8001156:	4b1f      	ldr	r3, [pc, #124]	@ (80011d4 <MX_ADC3_Init+0xd8>)
 8001158:	2201      	movs	r2, #1
 800115a:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 800115c:	4b1d      	ldr	r3, [pc, #116]	@ (80011d4 <MX_ADC3_Init+0xd8>)
 800115e:	2200      	movs	r2, #0
 8001160:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001164:	4b1b      	ldr	r3, [pc, #108]	@ (80011d4 <MX_ADC3_Init+0xd8>)
 8001166:	2204      	movs	r2, #4
 8001168:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 800116a:	4b1a      	ldr	r3, [pc, #104]	@ (80011d4 <MX_ADC3_Init+0xd8>)
 800116c:	2200      	movs	r2, #0
 800116e:	761a      	strb	r2, [r3, #24]
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001170:	4b18      	ldr	r3, [pc, #96]	@ (80011d4 <MX_ADC3_Init+0xd8>)
 8001172:	2200      	movs	r2, #0
 8001174:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001176:	4817      	ldr	r0, [pc, #92]	@ (80011d4 <MX_ADC3_Init+0xd8>)
 8001178:	f000 fdd4 	bl	8001d24 <HAL_ADC_Init>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <MX_ADC3_Init+0x8a>
  {
    Error_Handler();
 8001182:	f000 fa3d 	bl	8001600 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001186:	2300      	movs	r3, #0
 8001188:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 800118a:	f107 031c 	add.w	r3, r7, #28
 800118e:	4619      	mov	r1, r3
 8001190:	4810      	ldr	r0, [pc, #64]	@ (80011d4 <MX_ADC3_Init+0xd8>)
 8001192:	f001 fd07 	bl	8002ba4 <HAL_ADCEx_MultiModeConfigChannel>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d001      	beq.n	80011a0 <MX_ADC3_Init+0xa4>
  {
    Error_Handler();
 800119c:	f000 fa30 	bl	8001600 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80011a0:	2301      	movs	r3, #1
 80011a2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80011a4:	2301      	movs	r3, #1
 80011a6:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80011a8:	2300      	movs	r3, #0
 80011aa:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80011ac:	2300      	movs	r3, #0
 80011ae:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80011b0:	2300      	movs	r3, #0
 80011b2:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80011b4:	2300      	movs	r3, #0
 80011b6:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80011b8:	1d3b      	adds	r3, r7, #4
 80011ba:	4619      	mov	r1, r3
 80011bc:	4805      	ldr	r0, [pc, #20]	@ (80011d4 <MX_ADC3_Init+0xd8>)
 80011be:	f001 fa07 	bl	80025d0 <HAL_ADC_ConfigChannel>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d001      	beq.n	80011cc <MX_ADC3_Init+0xd0>
  {
    Error_Handler();
 80011c8:	f000 fa1a 	bl	8001600 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80011cc:	bf00      	nop
 80011ce:	3728      	adds	r7, #40	@ 0x28
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	20000254 	.word	0x20000254
 80011d8:	50000400 	.word	0x50000400

080011dc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80011e0:	4b1b      	ldr	r3, [pc, #108]	@ (8001250 <MX_I2C1_Init+0x74>)
 80011e2:	4a1c      	ldr	r2, [pc, #112]	@ (8001254 <MX_I2C1_Init+0x78>)
 80011e4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00201D2B;
 80011e6:	4b1a      	ldr	r3, [pc, #104]	@ (8001250 <MX_I2C1_Init+0x74>)
 80011e8:	4a1b      	ldr	r2, [pc, #108]	@ (8001258 <MX_I2C1_Init+0x7c>)
 80011ea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80011ec:	4b18      	ldr	r3, [pc, #96]	@ (8001250 <MX_I2C1_Init+0x74>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011f2:	4b17      	ldr	r3, [pc, #92]	@ (8001250 <MX_I2C1_Init+0x74>)
 80011f4:	2201      	movs	r2, #1
 80011f6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011f8:	4b15      	ldr	r3, [pc, #84]	@ (8001250 <MX_I2C1_Init+0x74>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80011fe:	4b14      	ldr	r3, [pc, #80]	@ (8001250 <MX_I2C1_Init+0x74>)
 8001200:	2200      	movs	r2, #0
 8001202:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001204:	4b12      	ldr	r3, [pc, #72]	@ (8001250 <MX_I2C1_Init+0x74>)
 8001206:	2200      	movs	r2, #0
 8001208:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800120a:	4b11      	ldr	r3, [pc, #68]	@ (8001250 <MX_I2C1_Init+0x74>)
 800120c:	2200      	movs	r2, #0
 800120e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001210:	4b0f      	ldr	r3, [pc, #60]	@ (8001250 <MX_I2C1_Init+0x74>)
 8001212:	2200      	movs	r2, #0
 8001214:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001216:	480e      	ldr	r0, [pc, #56]	@ (8001250 <MX_I2C1_Init+0x74>)
 8001218:	f002 fa02 	bl	8003620 <HAL_I2C_Init>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001222:	f000 f9ed 	bl	8001600 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001226:	2100      	movs	r1, #0
 8001228:	4809      	ldr	r0, [pc, #36]	@ (8001250 <MX_I2C1_Init+0x74>)
 800122a:	f003 fa1f 	bl	800466c <HAL_I2CEx_ConfigAnalogFilter>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001234:	f000 f9e4 	bl	8001600 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001238:	2100      	movs	r1, #0
 800123a:	4805      	ldr	r0, [pc, #20]	@ (8001250 <MX_I2C1_Init+0x74>)
 800123c:	f003 fa61 	bl	8004702 <HAL_I2CEx_ConfigDigitalFilter>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001246:	f000 f9db 	bl	8001600 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800124a:	bf00      	nop
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	200002a4 	.word	0x200002a4
 8001254:	40005400 	.word	0x40005400
 8001258:	00201d2b 	.word	0x00201d2b

0800125c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b088      	sub	sp, #32
 8001260:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001262:	f107 0310 	add.w	r3, r7, #16
 8001266:	2200      	movs	r2, #0
 8001268:	601a      	str	r2, [r3, #0]
 800126a:	605a      	str	r2, [r3, #4]
 800126c:	609a      	str	r2, [r3, #8]
 800126e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001270:	1d3b      	adds	r3, r7, #4
 8001272:	2200      	movs	r2, #0
 8001274:	601a      	str	r2, [r3, #0]
 8001276:	605a      	str	r2, [r3, #4]
 8001278:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800127a:	4b1e      	ldr	r3, [pc, #120]	@ (80012f4 <MX_TIM2_Init+0x98>)
 800127c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001280:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 8001282:	4b1c      	ldr	r3, [pc, #112]	@ (80012f4 <MX_TIM2_Init+0x98>)
 8001284:	2247      	movs	r2, #71	@ 0x47
 8001286:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001288:	4b1a      	ldr	r3, [pc, #104]	@ (80012f4 <MX_TIM2_Init+0x98>)
 800128a:	2200      	movs	r2, #0
 800128c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800128e:	4b19      	ldr	r3, [pc, #100]	@ (80012f4 <MX_TIM2_Init+0x98>)
 8001290:	f04f 32ff 	mov.w	r2, #4294967295
 8001294:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001296:	4b17      	ldr	r3, [pc, #92]	@ (80012f4 <MX_TIM2_Init+0x98>)
 8001298:	2200      	movs	r2, #0
 800129a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800129c:	4b15      	ldr	r3, [pc, #84]	@ (80012f4 <MX_TIM2_Init+0x98>)
 800129e:	2200      	movs	r2, #0
 80012a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80012a2:	4814      	ldr	r0, [pc, #80]	@ (80012f4 <MX_TIM2_Init+0x98>)
 80012a4:	f004 ff0c 	bl	80060c0 <HAL_TIM_Base_Init>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d001      	beq.n	80012b2 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80012ae:	f000 f9a7 	bl	8001600 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012b2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012b6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80012b8:	f107 0310 	add.w	r3, r7, #16
 80012bc:	4619      	mov	r1, r3
 80012be:	480d      	ldr	r0, [pc, #52]	@ (80012f4 <MX_TIM2_Init+0x98>)
 80012c0:	f005 fb08 	bl	80068d4 <HAL_TIM_ConfigClockSource>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80012ca:	f000 f999 	bl	8001600 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012ce:	2300      	movs	r3, #0
 80012d0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012d2:	2300      	movs	r3, #0
 80012d4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012d6:	1d3b      	adds	r3, r7, #4
 80012d8:	4619      	mov	r1, r3
 80012da:	4806      	ldr	r0, [pc, #24]	@ (80012f4 <MX_TIM2_Init+0x98>)
 80012dc:	f005 ff94 	bl	8007208 <HAL_TIMEx_MasterConfigSynchronization>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80012e6:	f000 f98b 	bl	8001600 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80012ea:	bf00      	nop
 80012ec:	3720      	adds	r7, #32
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	200002f8 	.word	0x200002f8

080012f8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b090      	sub	sp, #64	@ 0x40
 80012fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012fe:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001302:	2200      	movs	r2, #0
 8001304:	601a      	str	r2, [r3, #0]
 8001306:	605a      	str	r2, [r3, #4]
 8001308:	609a      	str	r2, [r3, #8]
 800130a:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800130c:	f107 031c 	add.w	r3, r7, #28
 8001310:	2200      	movs	r2, #0
 8001312:	601a      	str	r2, [r3, #0]
 8001314:	605a      	str	r2, [r3, #4]
 8001316:	609a      	str	r2, [r3, #8]
 8001318:	60da      	str	r2, [r3, #12]
 800131a:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800131c:	f107 030c 	add.w	r3, r7, #12
 8001320:	2200      	movs	r2, #0
 8001322:	601a      	str	r2, [r3, #0]
 8001324:	605a      	str	r2, [r3, #4]
 8001326:	609a      	str	r2, [r3, #8]
 8001328:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800132a:	463b      	mov	r3, r7
 800132c:	2200      	movs	r2, #0
 800132e:	601a      	str	r2, [r3, #0]
 8001330:	605a      	str	r2, [r3, #4]
 8001332:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001334:	4b3e      	ldr	r3, [pc, #248]	@ (8001430 <MX_TIM4_Init+0x138>)
 8001336:	4a3f      	ldr	r2, [pc, #252]	@ (8001434 <MX_TIM4_Init+0x13c>)
 8001338:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1440-1;
 800133a:	4b3d      	ldr	r3, [pc, #244]	@ (8001430 <MX_TIM4_Init+0x138>)
 800133c:	f240 529f 	movw	r2, #1439	@ 0x59f
 8001340:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001342:	4b3b      	ldr	r3, [pc, #236]	@ (8001430 <MX_TIM4_Init+0x138>)
 8001344:	2200      	movs	r2, #0
 8001346:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001348:	4b39      	ldr	r3, [pc, #228]	@ (8001430 <MX_TIM4_Init+0x138>)
 800134a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800134e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001350:	4b37      	ldr	r3, [pc, #220]	@ (8001430 <MX_TIM4_Init+0x138>)
 8001352:	2200      	movs	r2, #0
 8001354:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001356:	4b36      	ldr	r3, [pc, #216]	@ (8001430 <MX_TIM4_Init+0x138>)
 8001358:	2200      	movs	r2, #0
 800135a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800135c:	4834      	ldr	r0, [pc, #208]	@ (8001430 <MX_TIM4_Init+0x138>)
 800135e:	f004 feaf 	bl	80060c0 <HAL_TIM_Base_Init>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d001      	beq.n	800136c <MX_TIM4_Init+0x74>
  {
    Error_Handler();
 8001368:	f000 f94a 	bl	8001600 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800136c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001370:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001372:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001376:	4619      	mov	r1, r3
 8001378:	482d      	ldr	r0, [pc, #180]	@ (8001430 <MX_TIM4_Init+0x138>)
 800137a:	f005 faab 	bl	80068d4 <HAL_TIM_ConfigClockSource>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d001      	beq.n	8001388 <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 8001384:	f000 f93c 	bl	8001600 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8001388:	4829      	ldr	r0, [pc, #164]	@ (8001430 <MX_TIM4_Init+0x138>)
 800138a:	f004 ff59 	bl	8006240 <HAL_TIM_IC_Init>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d001      	beq.n	8001398 <MX_TIM4_Init+0xa0>
  {
    Error_Handler();
 8001394:	f000 f934 	bl	8001600 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001398:	2304      	movs	r3, #4
 800139a:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 800139c:	2350      	movs	r3, #80	@ 0x50
 800139e:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80013a0:	2300      	movs	r3, #0
 80013a2:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 80013a4:	2300      	movs	r3, #0
 80013a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sSlaveConfig.TriggerFilter = 0;
 80013a8:	2300      	movs	r3, #0
 80013aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 80013ac:	f107 031c 	add.w	r3, r7, #28
 80013b0:	4619      	mov	r1, r3
 80013b2:	481f      	ldr	r0, [pc, #124]	@ (8001430 <MX_TIM4_Init+0x138>)
 80013b4:	f005 fb57 	bl	8006a66 <HAL_TIM_SlaveConfigSynchro>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <MX_TIM4_Init+0xca>
  {
    Error_Handler();
 80013be:	f000 f91f 	bl	8001600 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80013c2:	2300      	movs	r3, #0
 80013c4:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80013c6:	2301      	movs	r3, #1
 80013c8:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80013ca:	2300      	movs	r3, #0
 80013cc:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 80013ce:	2300      	movs	r3, #0
 80013d0:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80013d2:	f107 030c 	add.w	r3, r7, #12
 80013d6:	2200      	movs	r2, #0
 80013d8:	4619      	mov	r1, r3
 80013da:	4815      	ldr	r0, [pc, #84]	@ (8001430 <MX_TIM4_Init+0x138>)
 80013dc:	f005 f9de 	bl	800679c <HAL_TIM_IC_ConfigChannel>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d001      	beq.n	80013ea <MX_TIM4_Init+0xf2>
  {
    Error_Handler();
 80013e6:	f000 f90b 	bl	8001600 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80013ea:	2302      	movs	r3, #2
 80013ec:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80013ee:	2302      	movs	r3, #2
 80013f0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80013f2:	f107 030c 	add.w	r3, r7, #12
 80013f6:	2204      	movs	r2, #4
 80013f8:	4619      	mov	r1, r3
 80013fa:	480d      	ldr	r0, [pc, #52]	@ (8001430 <MX_TIM4_Init+0x138>)
 80013fc:	f005 f9ce 	bl	800679c <HAL_TIM_IC_ConfigChannel>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d001      	beq.n	800140a <MX_TIM4_Init+0x112>
  {
    Error_Handler();
 8001406:	f000 f8fb 	bl	8001600 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800140a:	2300      	movs	r3, #0
 800140c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800140e:	2300      	movs	r3, #0
 8001410:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001412:	463b      	mov	r3, r7
 8001414:	4619      	mov	r1, r3
 8001416:	4806      	ldr	r0, [pc, #24]	@ (8001430 <MX_TIM4_Init+0x138>)
 8001418:	f005 fef6 	bl	8007208 <HAL_TIMEx_MasterConfigSynchronization>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d001      	beq.n	8001426 <MX_TIM4_Init+0x12e>
  {
    Error_Handler();
 8001422:	f000 f8ed 	bl	8001600 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001426:	bf00      	nop
 8001428:	3740      	adds	r7, #64	@ 0x40
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	20000344 	.word	0x20000344
 8001434:	40000800 	.word	0x40000800

08001438 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 800143c:	4b14      	ldr	r3, [pc, #80]	@ (8001490 <MX_UART5_Init+0x58>)
 800143e:	4a15      	ldr	r2, [pc, #84]	@ (8001494 <MX_UART5_Init+0x5c>)
 8001440:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8001442:	4b13      	ldr	r3, [pc, #76]	@ (8001490 <MX_UART5_Init+0x58>)
 8001444:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001448:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800144a:	4b11      	ldr	r3, [pc, #68]	@ (8001490 <MX_UART5_Init+0x58>)
 800144c:	2200      	movs	r2, #0
 800144e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001450:	4b0f      	ldr	r3, [pc, #60]	@ (8001490 <MX_UART5_Init+0x58>)
 8001452:	2200      	movs	r2, #0
 8001454:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001456:	4b0e      	ldr	r3, [pc, #56]	@ (8001490 <MX_UART5_Init+0x58>)
 8001458:	2200      	movs	r2, #0
 800145a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 800145c:	4b0c      	ldr	r3, [pc, #48]	@ (8001490 <MX_UART5_Init+0x58>)
 800145e:	220c      	movs	r2, #12
 8001460:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001462:	4b0b      	ldr	r3, [pc, #44]	@ (8001490 <MX_UART5_Init+0x58>)
 8001464:	2200      	movs	r2, #0
 8001466:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001468:	4b09      	ldr	r3, [pc, #36]	@ (8001490 <MX_UART5_Init+0x58>)
 800146a:	2200      	movs	r2, #0
 800146c:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800146e:	4b08      	ldr	r3, [pc, #32]	@ (8001490 <MX_UART5_Init+0x58>)
 8001470:	2200      	movs	r2, #0
 8001472:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001474:	4b06      	ldr	r3, [pc, #24]	@ (8001490 <MX_UART5_Init+0x58>)
 8001476:	2200      	movs	r2, #0
 8001478:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800147a:	4805      	ldr	r0, [pc, #20]	@ (8001490 <MX_UART5_Init+0x58>)
 800147c:	f005 ff6e 	bl	800735c <HAL_UART_Init>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <MX_UART5_Init+0x52>
  {
    Error_Handler();
 8001486:	f000 f8bb 	bl	8001600 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800148a:	bf00      	nop
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	20000390 	.word	0x20000390
 8001494:	40005000 	.word	0x40005000

08001498 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800149c:	4b14      	ldr	r3, [pc, #80]	@ (80014f0 <MX_USART2_UART_Init+0x58>)
 800149e:	4a15      	ldr	r2, [pc, #84]	@ (80014f4 <MX_USART2_UART_Init+0x5c>)
 80014a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80014a2:	4b13      	ldr	r3, [pc, #76]	@ (80014f0 <MX_USART2_UART_Init+0x58>)
 80014a4:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 80014a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80014aa:	4b11      	ldr	r3, [pc, #68]	@ (80014f0 <MX_USART2_UART_Init+0x58>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80014b0:	4b0f      	ldr	r3, [pc, #60]	@ (80014f0 <MX_USART2_UART_Init+0x58>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80014b6:	4b0e      	ldr	r3, [pc, #56]	@ (80014f0 <MX_USART2_UART_Init+0x58>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80014bc:	4b0c      	ldr	r3, [pc, #48]	@ (80014f0 <MX_USART2_UART_Init+0x58>)
 80014be:	220c      	movs	r2, #12
 80014c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014c2:	4b0b      	ldr	r3, [pc, #44]	@ (80014f0 <MX_USART2_UART_Init+0x58>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80014c8:	4b09      	ldr	r3, [pc, #36]	@ (80014f0 <MX_USART2_UART_Init+0x58>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014ce:	4b08      	ldr	r3, [pc, #32]	@ (80014f0 <MX_USART2_UART_Init+0x58>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014d4:	4b06      	ldr	r3, [pc, #24]	@ (80014f0 <MX_USART2_UART_Init+0x58>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80014da:	4805      	ldr	r0, [pc, #20]	@ (80014f0 <MX_USART2_UART_Init+0x58>)
 80014dc:	f005 ff3e 	bl	800735c <HAL_UART_Init>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d001      	beq.n	80014ea <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80014e6:	f000 f88b 	bl	8001600 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80014ea:	bf00      	nop
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	20000418 	.word	0x20000418
 80014f4:	40004400 	.word	0x40004400

080014f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b08a      	sub	sp, #40	@ 0x28
 80014fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014fe:	f107 0314 	add.w	r3, r7, #20
 8001502:	2200      	movs	r2, #0
 8001504:	601a      	str	r2, [r3, #0]
 8001506:	605a      	str	r2, [r3, #4]
 8001508:	609a      	str	r2, [r3, #8]
 800150a:	60da      	str	r2, [r3, #12]
 800150c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800150e:	4b39      	ldr	r3, [pc, #228]	@ (80015f4 <MX_GPIO_Init+0xfc>)
 8001510:	695b      	ldr	r3, [r3, #20]
 8001512:	4a38      	ldr	r2, [pc, #224]	@ (80015f4 <MX_GPIO_Init+0xfc>)
 8001514:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001518:	6153      	str	r3, [r2, #20]
 800151a:	4b36      	ldr	r3, [pc, #216]	@ (80015f4 <MX_GPIO_Init+0xfc>)
 800151c:	695b      	ldr	r3, [r3, #20]
 800151e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001522:	613b      	str	r3, [r7, #16]
 8001524:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001526:	4b33      	ldr	r3, [pc, #204]	@ (80015f4 <MX_GPIO_Init+0xfc>)
 8001528:	695b      	ldr	r3, [r3, #20]
 800152a:	4a32      	ldr	r2, [pc, #200]	@ (80015f4 <MX_GPIO_Init+0xfc>)
 800152c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001530:	6153      	str	r3, [r2, #20]
 8001532:	4b30      	ldr	r3, [pc, #192]	@ (80015f4 <MX_GPIO_Init+0xfc>)
 8001534:	695b      	ldr	r3, [r3, #20]
 8001536:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800153a:	60fb      	str	r3, [r7, #12]
 800153c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800153e:	4b2d      	ldr	r3, [pc, #180]	@ (80015f4 <MX_GPIO_Init+0xfc>)
 8001540:	695b      	ldr	r3, [r3, #20]
 8001542:	4a2c      	ldr	r2, [pc, #176]	@ (80015f4 <MX_GPIO_Init+0xfc>)
 8001544:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001548:	6153      	str	r3, [r2, #20]
 800154a:	4b2a      	ldr	r3, [pc, #168]	@ (80015f4 <MX_GPIO_Init+0xfc>)
 800154c:	695b      	ldr	r3, [r3, #20]
 800154e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001552:	60bb      	str	r3, [r7, #8]
 8001554:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001556:	4b27      	ldr	r3, [pc, #156]	@ (80015f4 <MX_GPIO_Init+0xfc>)
 8001558:	695b      	ldr	r3, [r3, #20]
 800155a:	4a26      	ldr	r2, [pc, #152]	@ (80015f4 <MX_GPIO_Init+0xfc>)
 800155c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001560:	6153      	str	r3, [r2, #20]
 8001562:	4b24      	ldr	r3, [pc, #144]	@ (80015f4 <MX_GPIO_Init+0xfc>)
 8001564:	695b      	ldr	r3, [r3, #20]
 8001566:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800156a:	607b      	str	r3, [r7, #4]
 800156c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800156e:	4b21      	ldr	r3, [pc, #132]	@ (80015f4 <MX_GPIO_Init+0xfc>)
 8001570:	695b      	ldr	r3, [r3, #20]
 8001572:	4a20      	ldr	r2, [pc, #128]	@ (80015f4 <MX_GPIO_Init+0xfc>)
 8001574:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001578:	6153      	str	r3, [r2, #20]
 800157a:	4b1e      	ldr	r3, [pc, #120]	@ (80015f4 <MX_GPIO_Init+0xfc>)
 800157c:	695b      	ldr	r3, [r3, #20]
 800157e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001582:	603b      	str	r3, [r7, #0]
 8001584:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001586:	2200      	movs	r2, #0
 8001588:	2120      	movs	r1, #32
 800158a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800158e:	f002 f82f 	bl	80035f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001592:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001596:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001598:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800159c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159e:	2300      	movs	r3, #0
 80015a0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80015a2:	f107 0314 	add.w	r3, r7, #20
 80015a6:	4619      	mov	r1, r3
 80015a8:	4813      	ldr	r0, [pc, #76]	@ (80015f8 <MX_GPIO_Init+0x100>)
 80015aa:	f001 fe7f 	bl	80032ac <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80015ae:	2320      	movs	r3, #32
 80015b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015b2:	2301      	movs	r3, #1
 80015b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b6:	2300      	movs	r3, #0
 80015b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ba:	2300      	movs	r3, #0
 80015bc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80015be:	f107 0314 	add.w	r3, r7, #20
 80015c2:	4619      	mov	r1, r3
 80015c4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015c8:	f001 fe70 	bl	80032ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80015cc:	2310      	movs	r3, #16
 80015ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d0:	2302      	movs	r3, #2
 80015d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d4:	2300      	movs	r3, #0
 80015d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d8:	2300      	movs	r3, #0
 80015da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80015dc:	2302      	movs	r3, #2
 80015de:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015e0:	f107 0314 	add.w	r3, r7, #20
 80015e4:	4619      	mov	r1, r3
 80015e6:	4805      	ldr	r0, [pc, #20]	@ (80015fc <MX_GPIO_Init+0x104>)
 80015e8:	f001 fe60 	bl	80032ac <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80015ec:	bf00      	nop
 80015ee:	3728      	adds	r7, #40	@ 0x28
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	40021000 	.word	0x40021000
 80015f8:	48000800 	.word	0x48000800
 80015fc:	48000400 	.word	0x48000400

08001600 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001604:	b672      	cpsid	i
}
 8001606:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001608:	bf00      	nop
 800160a:	e7fd      	b.n	8001608 <Error_Handler+0x8>

0800160c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b082      	sub	sp, #8
 8001610:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001612:	4b0f      	ldr	r3, [pc, #60]	@ (8001650 <HAL_MspInit+0x44>)
 8001614:	699b      	ldr	r3, [r3, #24]
 8001616:	4a0e      	ldr	r2, [pc, #56]	@ (8001650 <HAL_MspInit+0x44>)
 8001618:	f043 0301 	orr.w	r3, r3, #1
 800161c:	6193      	str	r3, [r2, #24]
 800161e:	4b0c      	ldr	r3, [pc, #48]	@ (8001650 <HAL_MspInit+0x44>)
 8001620:	699b      	ldr	r3, [r3, #24]
 8001622:	f003 0301 	and.w	r3, r3, #1
 8001626:	607b      	str	r3, [r7, #4]
 8001628:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800162a:	4b09      	ldr	r3, [pc, #36]	@ (8001650 <HAL_MspInit+0x44>)
 800162c:	69db      	ldr	r3, [r3, #28]
 800162e:	4a08      	ldr	r2, [pc, #32]	@ (8001650 <HAL_MspInit+0x44>)
 8001630:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001634:	61d3      	str	r3, [r2, #28]
 8001636:	4b06      	ldr	r3, [pc, #24]	@ (8001650 <HAL_MspInit+0x44>)
 8001638:	69db      	ldr	r3, [r3, #28]
 800163a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800163e:	603b      	str	r3, [r7, #0]
 8001640:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001642:	2007      	movs	r0, #7
 8001644:	f001 fdf0 	bl	8003228 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001648:	bf00      	nop
 800164a:	3708      	adds	r7, #8
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}
 8001650:	40021000 	.word	0x40021000

08001654 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b08c      	sub	sp, #48	@ 0x30
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800165c:	f107 031c 	add.w	r3, r7, #28
 8001660:	2200      	movs	r2, #0
 8001662:	601a      	str	r2, [r3, #0]
 8001664:	605a      	str	r2, [r3, #4]
 8001666:	609a      	str	r2, [r3, #8]
 8001668:	60da      	str	r2, [r3, #12]
 800166a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001674:	d124      	bne.n	80016c0 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001676:	4b29      	ldr	r3, [pc, #164]	@ (800171c <HAL_ADC_MspInit+0xc8>)
 8001678:	695b      	ldr	r3, [r3, #20]
 800167a:	4a28      	ldr	r2, [pc, #160]	@ (800171c <HAL_ADC_MspInit+0xc8>)
 800167c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001680:	6153      	str	r3, [r2, #20]
 8001682:	4b26      	ldr	r3, [pc, #152]	@ (800171c <HAL_ADC_MspInit+0xc8>)
 8001684:	695b      	ldr	r3, [r3, #20]
 8001686:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800168a:	61bb      	str	r3, [r7, #24]
 800168c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800168e:	4b23      	ldr	r3, [pc, #140]	@ (800171c <HAL_ADC_MspInit+0xc8>)
 8001690:	695b      	ldr	r3, [r3, #20]
 8001692:	4a22      	ldr	r2, [pc, #136]	@ (800171c <HAL_ADC_MspInit+0xc8>)
 8001694:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001698:	6153      	str	r3, [r2, #20]
 800169a:	4b20      	ldr	r3, [pc, #128]	@ (800171c <HAL_ADC_MspInit+0xc8>)
 800169c:	695b      	ldr	r3, [r3, #20]
 800169e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80016a2:	617b      	str	r3, [r7, #20]
 80016a4:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80016a6:	2302      	movs	r3, #2
 80016a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016aa:	2303      	movs	r3, #3
 80016ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ae:	2300      	movs	r3, #0
 80016b0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016b2:	f107 031c 	add.w	r3, r7, #28
 80016b6:	4619      	mov	r1, r3
 80016b8:	4819      	ldr	r0, [pc, #100]	@ (8001720 <HAL_ADC_MspInit+0xcc>)
 80016ba:	f001 fdf7 	bl	80032ac <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80016be:	e028      	b.n	8001712 <HAL_ADC_MspInit+0xbe>
  else if(hadc->Instance==ADC3)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a17      	ldr	r2, [pc, #92]	@ (8001724 <HAL_ADC_MspInit+0xd0>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d123      	bne.n	8001712 <HAL_ADC_MspInit+0xbe>
    __HAL_RCC_ADC34_CLK_ENABLE();
 80016ca:	4b14      	ldr	r3, [pc, #80]	@ (800171c <HAL_ADC_MspInit+0xc8>)
 80016cc:	695b      	ldr	r3, [r3, #20]
 80016ce:	4a13      	ldr	r2, [pc, #76]	@ (800171c <HAL_ADC_MspInit+0xc8>)
 80016d0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80016d4:	6153      	str	r3, [r2, #20]
 80016d6:	4b11      	ldr	r3, [pc, #68]	@ (800171c <HAL_ADC_MspInit+0xc8>)
 80016d8:	695b      	ldr	r3, [r3, #20]
 80016da:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80016de:	613b      	str	r3, [r7, #16]
 80016e0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016e2:	4b0e      	ldr	r3, [pc, #56]	@ (800171c <HAL_ADC_MspInit+0xc8>)
 80016e4:	695b      	ldr	r3, [r3, #20]
 80016e6:	4a0d      	ldr	r2, [pc, #52]	@ (800171c <HAL_ADC_MspInit+0xc8>)
 80016e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80016ec:	6153      	str	r3, [r2, #20]
 80016ee:	4b0b      	ldr	r3, [pc, #44]	@ (800171c <HAL_ADC_MspInit+0xc8>)
 80016f0:	695b      	ldr	r3, [r3, #20]
 80016f2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80016f6:	60fb      	str	r3, [r7, #12]
 80016f8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80016fa:	2302      	movs	r3, #2
 80016fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016fe:	2303      	movs	r3, #3
 8001700:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001702:	2300      	movs	r3, #0
 8001704:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001706:	f107 031c 	add.w	r3, r7, #28
 800170a:	4619      	mov	r1, r3
 800170c:	4806      	ldr	r0, [pc, #24]	@ (8001728 <HAL_ADC_MspInit+0xd4>)
 800170e:	f001 fdcd 	bl	80032ac <HAL_GPIO_Init>
}
 8001712:	bf00      	nop
 8001714:	3730      	adds	r7, #48	@ 0x30
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	40021000 	.word	0x40021000
 8001720:	48000800 	.word	0x48000800
 8001724:	50000400 	.word	0x50000400
 8001728:	48000400 	.word	0x48000400

0800172c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b08a      	sub	sp, #40	@ 0x28
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001734:	f107 0314 	add.w	r3, r7, #20
 8001738:	2200      	movs	r2, #0
 800173a:	601a      	str	r2, [r3, #0]
 800173c:	605a      	str	r2, [r3, #4]
 800173e:	609a      	str	r2, [r3, #8]
 8001740:	60da      	str	r2, [r3, #12]
 8001742:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a17      	ldr	r2, [pc, #92]	@ (80017a8 <HAL_I2C_MspInit+0x7c>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d127      	bne.n	800179e <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800174e:	4b17      	ldr	r3, [pc, #92]	@ (80017ac <HAL_I2C_MspInit+0x80>)
 8001750:	695b      	ldr	r3, [r3, #20]
 8001752:	4a16      	ldr	r2, [pc, #88]	@ (80017ac <HAL_I2C_MspInit+0x80>)
 8001754:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001758:	6153      	str	r3, [r2, #20]
 800175a:	4b14      	ldr	r3, [pc, #80]	@ (80017ac <HAL_I2C_MspInit+0x80>)
 800175c:	695b      	ldr	r3, [r3, #20]
 800175e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001762:	613b      	str	r3, [r7, #16]
 8001764:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001766:	23c0      	movs	r3, #192	@ 0xc0
 8001768:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800176a:	2312      	movs	r3, #18
 800176c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176e:	2300      	movs	r3, #0
 8001770:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001772:	2303      	movs	r3, #3
 8001774:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001776:	2304      	movs	r3, #4
 8001778:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800177a:	f107 0314 	add.w	r3, r7, #20
 800177e:	4619      	mov	r1, r3
 8001780:	480b      	ldr	r0, [pc, #44]	@ (80017b0 <HAL_I2C_MspInit+0x84>)
 8001782:	f001 fd93 	bl	80032ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001786:	4b09      	ldr	r3, [pc, #36]	@ (80017ac <HAL_I2C_MspInit+0x80>)
 8001788:	69db      	ldr	r3, [r3, #28]
 800178a:	4a08      	ldr	r2, [pc, #32]	@ (80017ac <HAL_I2C_MspInit+0x80>)
 800178c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001790:	61d3      	str	r3, [r2, #28]
 8001792:	4b06      	ldr	r3, [pc, #24]	@ (80017ac <HAL_I2C_MspInit+0x80>)
 8001794:	69db      	ldr	r3, [r3, #28]
 8001796:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800179a:	60fb      	str	r3, [r7, #12]
 800179c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800179e:	bf00      	nop
 80017a0:	3728      	adds	r7, #40	@ 0x28
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	40005400 	.word	0x40005400
 80017ac:	40021000 	.word	0x40021000
 80017b0:	48000400 	.word	0x48000400

080017b4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b08a      	sub	sp, #40	@ 0x28
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017bc:	f107 0314 	add.w	r3, r7, #20
 80017c0:	2200      	movs	r2, #0
 80017c2:	601a      	str	r2, [r3, #0]
 80017c4:	605a      	str	r2, [r3, #4]
 80017c6:	609a      	str	r2, [r3, #8]
 80017c8:	60da      	str	r2, [r3, #12]
 80017ca:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80017d4:	d10c      	bne.n	80017f0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80017d6:	4b24      	ldr	r3, [pc, #144]	@ (8001868 <HAL_TIM_Base_MspInit+0xb4>)
 80017d8:	69db      	ldr	r3, [r3, #28]
 80017da:	4a23      	ldr	r2, [pc, #140]	@ (8001868 <HAL_TIM_Base_MspInit+0xb4>)
 80017dc:	f043 0301 	orr.w	r3, r3, #1
 80017e0:	61d3      	str	r3, [r2, #28]
 80017e2:	4b21      	ldr	r3, [pc, #132]	@ (8001868 <HAL_TIM_Base_MspInit+0xb4>)
 80017e4:	69db      	ldr	r3, [r3, #28]
 80017e6:	f003 0301 	and.w	r3, r3, #1
 80017ea:	613b      	str	r3, [r7, #16]
 80017ec:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80017ee:	e036      	b.n	800185e <HAL_TIM_Base_MspInit+0xaa>
  else if(htim_base->Instance==TIM4)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a1d      	ldr	r2, [pc, #116]	@ (800186c <HAL_TIM_Base_MspInit+0xb8>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d131      	bne.n	800185e <HAL_TIM_Base_MspInit+0xaa>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80017fa:	4b1b      	ldr	r3, [pc, #108]	@ (8001868 <HAL_TIM_Base_MspInit+0xb4>)
 80017fc:	69db      	ldr	r3, [r3, #28]
 80017fe:	4a1a      	ldr	r2, [pc, #104]	@ (8001868 <HAL_TIM_Base_MspInit+0xb4>)
 8001800:	f043 0304 	orr.w	r3, r3, #4
 8001804:	61d3      	str	r3, [r2, #28]
 8001806:	4b18      	ldr	r3, [pc, #96]	@ (8001868 <HAL_TIM_Base_MspInit+0xb4>)
 8001808:	69db      	ldr	r3, [r3, #28]
 800180a:	f003 0304 	and.w	r3, r3, #4
 800180e:	60fb      	str	r3, [r7, #12]
 8001810:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001812:	4b15      	ldr	r3, [pc, #84]	@ (8001868 <HAL_TIM_Base_MspInit+0xb4>)
 8001814:	695b      	ldr	r3, [r3, #20]
 8001816:	4a14      	ldr	r2, [pc, #80]	@ (8001868 <HAL_TIM_Base_MspInit+0xb4>)
 8001818:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800181c:	6153      	str	r3, [r2, #20]
 800181e:	4b12      	ldr	r3, [pc, #72]	@ (8001868 <HAL_TIM_Base_MspInit+0xb4>)
 8001820:	695b      	ldr	r3, [r3, #20]
 8001822:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001826:	60bb      	str	r3, [r7, #8]
 8001828:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800182a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800182e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001830:	2302      	movs	r3, #2
 8001832:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001834:	2300      	movs	r3, #0
 8001836:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001838:	2300      	movs	r3, #0
 800183a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 800183c:	230a      	movs	r3, #10
 800183e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001840:	f107 0314 	add.w	r3, r7, #20
 8001844:	4619      	mov	r1, r3
 8001846:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800184a:	f001 fd2f 	bl	80032ac <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800184e:	2200      	movs	r2, #0
 8001850:	2100      	movs	r1, #0
 8001852:	201e      	movs	r0, #30
 8001854:	f001 fcf3 	bl	800323e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001858:	201e      	movs	r0, #30
 800185a:	f001 fd0c 	bl	8003276 <HAL_NVIC_EnableIRQ>
}
 800185e:	bf00      	nop
 8001860:	3728      	adds	r7, #40	@ 0x28
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	40021000 	.word	0x40021000
 800186c:	40000800 	.word	0x40000800

08001870 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b08c      	sub	sp, #48	@ 0x30
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001878:	f107 031c 	add.w	r3, r7, #28
 800187c:	2200      	movs	r2, #0
 800187e:	601a      	str	r2, [r3, #0]
 8001880:	605a      	str	r2, [r3, #4]
 8001882:	609a      	str	r2, [r3, #8]
 8001884:	60da      	str	r2, [r3, #12]
 8001886:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a3d      	ldr	r2, [pc, #244]	@ (8001984 <HAL_UART_MspInit+0x114>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d145      	bne.n	800191e <HAL_UART_MspInit+0xae>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8001892:	4b3d      	ldr	r3, [pc, #244]	@ (8001988 <HAL_UART_MspInit+0x118>)
 8001894:	69db      	ldr	r3, [r3, #28]
 8001896:	4a3c      	ldr	r2, [pc, #240]	@ (8001988 <HAL_UART_MspInit+0x118>)
 8001898:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800189c:	61d3      	str	r3, [r2, #28]
 800189e:	4b3a      	ldr	r3, [pc, #232]	@ (8001988 <HAL_UART_MspInit+0x118>)
 80018a0:	69db      	ldr	r3, [r3, #28]
 80018a2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80018a6:	61bb      	str	r3, [r7, #24]
 80018a8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018aa:	4b37      	ldr	r3, [pc, #220]	@ (8001988 <HAL_UART_MspInit+0x118>)
 80018ac:	695b      	ldr	r3, [r3, #20]
 80018ae:	4a36      	ldr	r2, [pc, #216]	@ (8001988 <HAL_UART_MspInit+0x118>)
 80018b0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80018b4:	6153      	str	r3, [r2, #20]
 80018b6:	4b34      	ldr	r3, [pc, #208]	@ (8001988 <HAL_UART_MspInit+0x118>)
 80018b8:	695b      	ldr	r3, [r3, #20]
 80018ba:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80018be:	617b      	str	r3, [r7, #20]
 80018c0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80018c2:	4b31      	ldr	r3, [pc, #196]	@ (8001988 <HAL_UART_MspInit+0x118>)
 80018c4:	695b      	ldr	r3, [r3, #20]
 80018c6:	4a30      	ldr	r2, [pc, #192]	@ (8001988 <HAL_UART_MspInit+0x118>)
 80018c8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80018cc:	6153      	str	r3, [r2, #20]
 80018ce:	4b2e      	ldr	r3, [pc, #184]	@ (8001988 <HAL_UART_MspInit+0x118>)
 80018d0:	695b      	ldr	r3, [r3, #20]
 80018d2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80018d6:	613b      	str	r3, [r7, #16]
 80018d8:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80018da:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80018de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018e0:	2302      	movs	r3, #2
 80018e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e4:	2300      	movs	r3, #0
 80018e6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018e8:	2303      	movs	r3, #3
 80018ea:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 80018ec:	2305      	movs	r3, #5
 80018ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018f0:	f107 031c 	add.w	r3, r7, #28
 80018f4:	4619      	mov	r1, r3
 80018f6:	4825      	ldr	r0, [pc, #148]	@ (800198c <HAL_UART_MspInit+0x11c>)
 80018f8:	f001 fcd8 	bl	80032ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80018fc:	2304      	movs	r3, #4
 80018fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001900:	2302      	movs	r3, #2
 8001902:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001904:	2300      	movs	r3, #0
 8001906:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001908:	2303      	movs	r3, #3
 800190a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 800190c:	2305      	movs	r3, #5
 800190e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001910:	f107 031c 	add.w	r3, r7, #28
 8001914:	4619      	mov	r1, r3
 8001916:	481e      	ldr	r0, [pc, #120]	@ (8001990 <HAL_UART_MspInit+0x120>)
 8001918:	f001 fcc8 	bl	80032ac <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800191c:	e02d      	b.n	800197a <HAL_UART_MspInit+0x10a>
  else if(huart->Instance==USART2)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4a1c      	ldr	r2, [pc, #112]	@ (8001994 <HAL_UART_MspInit+0x124>)
 8001924:	4293      	cmp	r3, r2
 8001926:	d128      	bne.n	800197a <HAL_UART_MspInit+0x10a>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001928:	4b17      	ldr	r3, [pc, #92]	@ (8001988 <HAL_UART_MspInit+0x118>)
 800192a:	69db      	ldr	r3, [r3, #28]
 800192c:	4a16      	ldr	r2, [pc, #88]	@ (8001988 <HAL_UART_MspInit+0x118>)
 800192e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001932:	61d3      	str	r3, [r2, #28]
 8001934:	4b14      	ldr	r3, [pc, #80]	@ (8001988 <HAL_UART_MspInit+0x118>)
 8001936:	69db      	ldr	r3, [r3, #28]
 8001938:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800193c:	60fb      	str	r3, [r7, #12]
 800193e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001940:	4b11      	ldr	r3, [pc, #68]	@ (8001988 <HAL_UART_MspInit+0x118>)
 8001942:	695b      	ldr	r3, [r3, #20]
 8001944:	4a10      	ldr	r2, [pc, #64]	@ (8001988 <HAL_UART_MspInit+0x118>)
 8001946:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800194a:	6153      	str	r3, [r2, #20]
 800194c:	4b0e      	ldr	r3, [pc, #56]	@ (8001988 <HAL_UART_MspInit+0x118>)
 800194e:	695b      	ldr	r3, [r3, #20]
 8001950:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001954:	60bb      	str	r3, [r7, #8]
 8001956:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001958:	230c      	movs	r3, #12
 800195a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800195c:	2302      	movs	r3, #2
 800195e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001960:	2300      	movs	r3, #0
 8001962:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001964:	2300      	movs	r3, #0
 8001966:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001968:	2307      	movs	r3, #7
 800196a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800196c:	f107 031c 	add.w	r3, r7, #28
 8001970:	4619      	mov	r1, r3
 8001972:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001976:	f001 fc99 	bl	80032ac <HAL_GPIO_Init>
}
 800197a:	bf00      	nop
 800197c:	3730      	adds	r7, #48	@ 0x30
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	40005000 	.word	0x40005000
 8001988:	40021000 	.word	0x40021000
 800198c:	48000800 	.word	0x48000800
 8001990:	48000c00 	.word	0x48000c00
 8001994:	40004400 	.word	0x40004400

08001998 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001998:	b480      	push	{r7}
 800199a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800199c:	bf00      	nop
 800199e:	e7fd      	b.n	800199c <NMI_Handler+0x4>

080019a0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019a4:	bf00      	nop
 80019a6:	e7fd      	b.n	80019a4 <HardFault_Handler+0x4>

080019a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019a8:	b480      	push	{r7}
 80019aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019ac:	bf00      	nop
 80019ae:	e7fd      	b.n	80019ac <MemManage_Handler+0x4>

080019b0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019b4:	bf00      	nop
 80019b6:	e7fd      	b.n	80019b4 <BusFault_Handler+0x4>

080019b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019b8:	b480      	push	{r7}
 80019ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019bc:	bf00      	nop
 80019be:	e7fd      	b.n	80019bc <UsageFault_Handler+0x4>

080019c0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019c4:	bf00      	nop
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr

080019ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019ce:	b480      	push	{r7}
 80019d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019d2:	bf00      	nop
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr

080019dc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019e0:	bf00      	nop
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr

080019ea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019ea:	b580      	push	{r7, lr}
 80019ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019ee:	f000 f955 	bl	8001c9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019f2:	bf00      	nop
 80019f4:	bd80      	pop	{r7, pc}
	...

080019f8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80019fc:	4802      	ldr	r0, [pc, #8]	@ (8001a08 <TIM4_IRQHandler+0x10>)
 80019fe:	f004 fdcb 	bl	8006598 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001a02:	bf00      	nop
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	20000344 	.word	0x20000344

08001a0c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	af00      	add	r7, sp, #0
  return 1;
 8001a10:	2301      	movs	r3, #1
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	46bd      	mov	sp, r7
 8001a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1a:	4770      	bx	lr

08001a1c <_kill>:

int _kill(int pid, int sig)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b082      	sub	sp, #8
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
 8001a24:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001a26:	f007 fb51 	bl	80090cc <__errno>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	2216      	movs	r2, #22
 8001a2e:	601a      	str	r2, [r3, #0]
  return -1;
 8001a30:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	3708      	adds	r7, #8
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}

08001a3c <_exit>:

void _exit (int status)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b082      	sub	sp, #8
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001a44:	f04f 31ff 	mov.w	r1, #4294967295
 8001a48:	6878      	ldr	r0, [r7, #4]
 8001a4a:	f7ff ffe7 	bl	8001a1c <_kill>
  while (1) {}    /* Make sure we hang here */
 8001a4e:	bf00      	nop
 8001a50:	e7fd      	b.n	8001a4e <_exit+0x12>

08001a52 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a52:	b580      	push	{r7, lr}
 8001a54:	b086      	sub	sp, #24
 8001a56:	af00      	add	r7, sp, #0
 8001a58:	60f8      	str	r0, [r7, #12]
 8001a5a:	60b9      	str	r1, [r7, #8]
 8001a5c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a5e:	2300      	movs	r3, #0
 8001a60:	617b      	str	r3, [r7, #20]
 8001a62:	e00a      	b.n	8001a7a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a64:	f3af 8000 	nop.w
 8001a68:	4601      	mov	r1, r0
 8001a6a:	68bb      	ldr	r3, [r7, #8]
 8001a6c:	1c5a      	adds	r2, r3, #1
 8001a6e:	60ba      	str	r2, [r7, #8]
 8001a70:	b2ca      	uxtb	r2, r1
 8001a72:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	3301      	adds	r3, #1
 8001a78:	617b      	str	r3, [r7, #20]
 8001a7a:	697a      	ldr	r2, [r7, #20]
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	429a      	cmp	r2, r3
 8001a80:	dbf0      	blt.n	8001a64 <_read+0x12>
  }

  return len;
 8001a82:	687b      	ldr	r3, [r7, #4]
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	3718      	adds	r7, #24
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}

08001a8c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b086      	sub	sp, #24
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	60f8      	str	r0, [r7, #12]
 8001a94:	60b9      	str	r1, [r7, #8]
 8001a96:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a98:	2300      	movs	r3, #0
 8001a9a:	617b      	str	r3, [r7, #20]
 8001a9c:	e009      	b.n	8001ab2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001a9e:	68bb      	ldr	r3, [r7, #8]
 8001aa0:	1c5a      	adds	r2, r3, #1
 8001aa2:	60ba      	str	r2, [r7, #8]
 8001aa4:	781b      	ldrb	r3, [r3, #0]
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	3301      	adds	r3, #1
 8001ab0:	617b      	str	r3, [r7, #20]
 8001ab2:	697a      	ldr	r2, [r7, #20]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	429a      	cmp	r2, r3
 8001ab8:	dbf1      	blt.n	8001a9e <_write+0x12>
  }
  return len;
 8001aba:	687b      	ldr	r3, [r7, #4]
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	3718      	adds	r7, #24
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}

08001ac4 <_close>:

int _close(int file)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b083      	sub	sp, #12
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001acc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	370c      	adds	r7, #12
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr

08001adc <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b083      	sub	sp, #12
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
 8001ae4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001aec:	605a      	str	r2, [r3, #4]
  return 0;
 8001aee:	2300      	movs	r3, #0
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	370c      	adds	r7, #12
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr

08001afc <_isatty>:

int _isatty(int file)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b083      	sub	sp, #12
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001b04:	2301      	movs	r3, #1
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	370c      	adds	r7, #12
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr

08001b12 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b12:	b480      	push	{r7}
 8001b14:	b085      	sub	sp, #20
 8001b16:	af00      	add	r7, sp, #0
 8001b18:	60f8      	str	r0, [r7, #12]
 8001b1a:	60b9      	str	r1, [r7, #8]
 8001b1c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001b1e:	2300      	movs	r3, #0
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	3714      	adds	r7, #20
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr

08001b2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b086      	sub	sp, #24
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b34:	4a14      	ldr	r2, [pc, #80]	@ (8001b88 <_sbrk+0x5c>)
 8001b36:	4b15      	ldr	r3, [pc, #84]	@ (8001b8c <_sbrk+0x60>)
 8001b38:	1ad3      	subs	r3, r2, r3
 8001b3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b40:	4b13      	ldr	r3, [pc, #76]	@ (8001b90 <_sbrk+0x64>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d102      	bne.n	8001b4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b48:	4b11      	ldr	r3, [pc, #68]	@ (8001b90 <_sbrk+0x64>)
 8001b4a:	4a12      	ldr	r2, [pc, #72]	@ (8001b94 <_sbrk+0x68>)
 8001b4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b4e:	4b10      	ldr	r3, [pc, #64]	@ (8001b90 <_sbrk+0x64>)
 8001b50:	681a      	ldr	r2, [r3, #0]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	4413      	add	r3, r2
 8001b56:	693a      	ldr	r2, [r7, #16]
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	d207      	bcs.n	8001b6c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b5c:	f007 fab6 	bl	80090cc <__errno>
 8001b60:	4603      	mov	r3, r0
 8001b62:	220c      	movs	r2, #12
 8001b64:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b66:	f04f 33ff 	mov.w	r3, #4294967295
 8001b6a:	e009      	b.n	8001b80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b6c:	4b08      	ldr	r3, [pc, #32]	@ (8001b90 <_sbrk+0x64>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b72:	4b07      	ldr	r3, [pc, #28]	@ (8001b90 <_sbrk+0x64>)
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	4413      	add	r3, r2
 8001b7a:	4a05      	ldr	r2, [pc, #20]	@ (8001b90 <_sbrk+0x64>)
 8001b7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b7e:	68fb      	ldr	r3, [r7, #12]
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	3718      	adds	r7, #24
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	20010000 	.word	0x20010000
 8001b8c:	00000400 	.word	0x00000400
 8001b90:	20000550 	.word	0x20000550
 8001b94:	200006e0 	.word	0x200006e0

08001b98 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b9c:	4b06      	ldr	r3, [pc, #24]	@ (8001bb8 <SystemInit+0x20>)
 8001b9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ba2:	4a05      	ldr	r2, [pc, #20]	@ (8001bb8 <SystemInit+0x20>)
 8001ba4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001ba8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bac:	bf00      	nop
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr
 8001bb6:	bf00      	nop
 8001bb8:	e000ed00 	.word	0xe000ed00

08001bbc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001bbc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001bf4 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001bc0:	f7ff ffea 	bl	8001b98 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001bc4:	480c      	ldr	r0, [pc, #48]	@ (8001bf8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001bc6:	490d      	ldr	r1, [pc, #52]	@ (8001bfc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001bc8:	4a0d      	ldr	r2, [pc, #52]	@ (8001c00 <LoopForever+0xe>)
  movs r3, #0
 8001bca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bcc:	e002      	b.n	8001bd4 <LoopCopyDataInit>

08001bce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bd2:	3304      	adds	r3, #4

08001bd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bd8:	d3f9      	bcc.n	8001bce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bda:	4a0a      	ldr	r2, [pc, #40]	@ (8001c04 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001bdc:	4c0a      	ldr	r4, [pc, #40]	@ (8001c08 <LoopForever+0x16>)
  movs r3, #0
 8001bde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001be0:	e001      	b.n	8001be6 <LoopFillZerobss>

08001be2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001be2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001be4:	3204      	adds	r2, #4

08001be6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001be6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001be8:	d3fb      	bcc.n	8001be2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001bea:	f007 fa75 	bl	80090d8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001bee:	f7ff f8a5 	bl	8000d3c <main>

08001bf2 <LoopForever>:

LoopForever:
    b LoopForever
 8001bf2:	e7fe      	b.n	8001bf2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001bf4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001bf8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bfc:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8001c00:	0800ca28 	.word	0x0800ca28
  ldr r2, =_sbss
 8001c04:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8001c08:	200006e0 	.word	0x200006e0

08001c0c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001c0c:	e7fe      	b.n	8001c0c <ADC1_2_IRQHandler>
	...

08001c10 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c14:	4b08      	ldr	r3, [pc, #32]	@ (8001c38 <HAL_Init+0x28>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a07      	ldr	r2, [pc, #28]	@ (8001c38 <HAL_Init+0x28>)
 8001c1a:	f043 0310 	orr.w	r3, r3, #16
 8001c1e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c20:	2003      	movs	r0, #3
 8001c22:	f001 fb01 	bl	8003228 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c26:	2000      	movs	r0, #0
 8001c28:	f000 f808 	bl	8001c3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c2c:	f7ff fcee 	bl	800160c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c30:	2300      	movs	r3, #0
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	40022000 	.word	0x40022000

08001c3c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b082      	sub	sp, #8
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c44:	4b12      	ldr	r3, [pc, #72]	@ (8001c90 <HAL_InitTick+0x54>)
 8001c46:	681a      	ldr	r2, [r3, #0]
 8001c48:	4b12      	ldr	r3, [pc, #72]	@ (8001c94 <HAL_InitTick+0x58>)
 8001c4a:	781b      	ldrb	r3, [r3, #0]
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c52:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c56:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f001 fb19 	bl	8003292 <HAL_SYSTICK_Config>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d001      	beq.n	8001c6a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c66:	2301      	movs	r3, #1
 8001c68:	e00e      	b.n	8001c88 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2b0f      	cmp	r3, #15
 8001c6e:	d80a      	bhi.n	8001c86 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c70:	2200      	movs	r2, #0
 8001c72:	6879      	ldr	r1, [r7, #4]
 8001c74:	f04f 30ff 	mov.w	r0, #4294967295
 8001c78:	f001 fae1 	bl	800323e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c7c:	4a06      	ldr	r2, [pc, #24]	@ (8001c98 <HAL_InitTick+0x5c>)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001c82:	2300      	movs	r3, #0
 8001c84:	e000      	b.n	8001c88 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	3708      	adds	r7, #8
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	20000000 	.word	0x20000000
 8001c94:	20000008 	.word	0x20000008
 8001c98:	20000004 	.word	0x20000004

08001c9c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ca0:	4b06      	ldr	r3, [pc, #24]	@ (8001cbc <HAL_IncTick+0x20>)
 8001ca2:	781b      	ldrb	r3, [r3, #0]
 8001ca4:	461a      	mov	r2, r3
 8001ca6:	4b06      	ldr	r3, [pc, #24]	@ (8001cc0 <HAL_IncTick+0x24>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4413      	add	r3, r2
 8001cac:	4a04      	ldr	r2, [pc, #16]	@ (8001cc0 <HAL_IncTick+0x24>)
 8001cae:	6013      	str	r3, [r2, #0]
}
 8001cb0:	bf00      	nop
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr
 8001cba:	bf00      	nop
 8001cbc:	20000008 	.word	0x20000008
 8001cc0:	20000554 	.word	0x20000554

08001cc4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	af00      	add	r7, sp, #0
  return uwTick;  
 8001cc8:	4b03      	ldr	r3, [pc, #12]	@ (8001cd8 <HAL_GetTick+0x14>)
 8001cca:	681b      	ldr	r3, [r3, #0]
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr
 8001cd6:	bf00      	nop
 8001cd8:	20000554 	.word	0x20000554

08001cdc <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b084      	sub	sp, #16
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ce4:	f7ff ffee 	bl	8001cc4 <HAL_GetTick>
 8001ce8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cf4:	d005      	beq.n	8001d02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cf6:	4b0a      	ldr	r3, [pc, #40]	@ (8001d20 <HAL_Delay+0x44>)
 8001cf8:	781b      	ldrb	r3, [r3, #0]
 8001cfa:	461a      	mov	r2, r3
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	4413      	add	r3, r2
 8001d00:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001d02:	bf00      	nop
 8001d04:	f7ff ffde 	bl	8001cc4 <HAL_GetTick>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	68bb      	ldr	r3, [r7, #8]
 8001d0c:	1ad3      	subs	r3, r2, r3
 8001d0e:	68fa      	ldr	r2, [r7, #12]
 8001d10:	429a      	cmp	r2, r3
 8001d12:	d8f7      	bhi.n	8001d04 <HAL_Delay+0x28>
  {
  }
}
 8001d14:	bf00      	nop
 8001d16:	bf00      	nop
 8001d18:	3710      	adds	r7, #16
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	20000008 	.word	0x20000008

08001d24 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b09a      	sub	sp, #104	@ 0x68
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8001d32:	2300      	movs	r3, #0
 8001d34:	663b      	str	r3, [r7, #96]	@ 0x60
  __IO uint32_t wait_loop_index = 0U;
 8001d36:	2300      	movs	r3, #0
 8001d38:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d101      	bne.n	8001d44 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001d40:	2301      	movs	r3, #1
 8001d42:	e1e3      	b.n	800210c <HAL_ADC_Init+0x3e8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	691b      	ldr	r3, [r3, #16]
 8001d48:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d4e:	f003 0310 	and.w	r3, r3, #16
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d176      	bne.n	8001e44 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d152      	bne.n	8001e04 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2200      	movs	r2, #0
 8001d62:	645a      	str	r2, [r3, #68]	@ 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2200      	movs	r2, #0
 8001d68:	64da      	str	r2, [r3, #76]	@ 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	649a      	str	r2, [r3, #72]	@ 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2200      	movs	r2, #0
 8001d74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001d78:	6878      	ldr	r0, [r7, #4]
 8001d7a:	f7ff fc6b 	bl	8001654 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d13b      	bne.n	8001e04 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8001d8c:	6878      	ldr	r0, [r7, #4]
 8001d8e:	f001 f85f 	bl	8002e50 <ADC_Disable>
 8001d92:	4603      	mov	r3, r0
 8001d94:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d9c:	f003 0310 	and.w	r3, r3, #16
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d12f      	bne.n	8001e04 <HAL_ADC_Init+0xe0>
 8001da4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d12b      	bne.n	8001e04 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001db0:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001db4:	f023 0302 	bic.w	r3, r3, #2
 8001db8:	f043 0202 	orr.w	r2, r3, #2
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	641a      	str	r2, [r3, #64]	@ 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	689a      	ldr	r2, [r3, #8]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001dce:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	689a      	ldr	r2, [r3, #8]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001dde:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001de0:	4b92      	ldr	r3, [pc, #584]	@ (800202c <HAL_ADC_Init+0x308>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a92      	ldr	r2, [pc, #584]	@ (8002030 <HAL_ADC_Init+0x30c>)
 8001de6:	fba2 2303 	umull	r2, r3, r2, r3
 8001dea:	0c9a      	lsrs	r2, r3, #18
 8001dec:	4613      	mov	r3, r2
 8001dee:	009b      	lsls	r3, r3, #2
 8001df0:	4413      	add	r3, r2
 8001df2:	005b      	lsls	r3, r3, #1
 8001df4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001df6:	e002      	b.n	8001dfe <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	3b01      	subs	r3, #1
 8001dfc:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001dfe:	68bb      	ldr	r3, [r7, #8]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d1f9      	bne.n	8001df8 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	689b      	ldr	r3, [r3, #8]
 8001e0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d007      	beq.n	8001e22 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001e1c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001e20:	d110      	bne.n	8001e44 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e26:	f023 0312 	bic.w	r3, r3, #18
 8001e2a:	f043 0210 	orr.w	r2, r3, #16
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e36:	f043 0201 	orr.w	r2, r3, #1
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	645a      	str	r2, [r3, #68]	@ 0x44
      
      tmp_hal_status = HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e48:	f003 0310 	and.w	r3, r3, #16
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	f040 8150 	bne.w	80020f2 <HAL_ADC_Init+0x3ce>
 8001e52:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	f040 814b 	bne.w	80020f2 <HAL_ADC_Init+0x3ce>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	689b      	ldr	r3, [r3, #8]
 8001e62:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	f040 8143 	bne.w	80020f2 <HAL_ADC_Init+0x3ce>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e70:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001e74:	f043 0202 	orr.w	r2, r3, #2
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001e84:	d004      	beq.n	8001e90 <HAL_ADC_Init+0x16c>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a6a      	ldr	r2, [pc, #424]	@ (8002034 <HAL_ADC_Init+0x310>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d101      	bne.n	8001e94 <HAL_ADC_Init+0x170>
 8001e90:	4b69      	ldr	r3, [pc, #420]	@ (8002038 <HAL_ADC_Init+0x314>)
 8001e92:	e000      	b.n	8001e96 <HAL_ADC_Init+0x172>
 8001e94:	4b69      	ldr	r3, [pc, #420]	@ (800203c <HAL_ADC_Init+0x318>)
 8001e96:	65fb      	str	r3, [r7, #92]	@ 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001ea0:	d102      	bne.n	8001ea8 <HAL_ADC_Init+0x184>
 8001ea2:	4b64      	ldr	r3, [pc, #400]	@ (8002034 <HAL_ADC_Init+0x310>)
 8001ea4:	60fb      	str	r3, [r7, #12]
 8001ea6:	e01a      	b.n	8001ede <HAL_ADC_Init+0x1ba>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a61      	ldr	r2, [pc, #388]	@ (8002034 <HAL_ADC_Init+0x310>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d103      	bne.n	8001eba <HAL_ADC_Init+0x196>
 8001eb2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001eb6:	60fb      	str	r3, [r7, #12]
 8001eb8:	e011      	b.n	8001ede <HAL_ADC_Init+0x1ba>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4a60      	ldr	r2, [pc, #384]	@ (8002040 <HAL_ADC_Init+0x31c>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d102      	bne.n	8001eca <HAL_ADC_Init+0x1a6>
 8001ec4:	4b5f      	ldr	r3, [pc, #380]	@ (8002044 <HAL_ADC_Init+0x320>)
 8001ec6:	60fb      	str	r3, [r7, #12]
 8001ec8:	e009      	b.n	8001ede <HAL_ADC_Init+0x1ba>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a5d      	ldr	r2, [pc, #372]	@ (8002044 <HAL_ADC_Init+0x320>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d102      	bne.n	8001eda <HAL_ADC_Init+0x1b6>
 8001ed4:	4b5a      	ldr	r3, [pc, #360]	@ (8002040 <HAL_ADC_Init+0x31c>)
 8001ed6:	60fb      	str	r3, [r7, #12]
 8001ed8:	e001      	b.n	8001ede <HAL_ADC_Init+0x1ba>
 8001eda:	2300      	movs	r3, #0
 8001edc:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	689b      	ldr	r3, [r3, #8]
 8001ee4:	f003 0303 	and.w	r3, r3, #3
 8001ee8:	2b01      	cmp	r3, #1
 8001eea:	d108      	bne.n	8001efe <HAL_ADC_Init+0x1da>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f003 0301 	and.w	r3, r3, #1
 8001ef6:	2b01      	cmp	r3, #1
 8001ef8:	d101      	bne.n	8001efe <HAL_ADC_Init+0x1da>
 8001efa:	2301      	movs	r3, #1
 8001efc:	e000      	b.n	8001f00 <HAL_ADC_Init+0x1dc>
 8001efe:	2300      	movs	r3, #0
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d11c      	bne.n	8001f3e <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001f04:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d010      	beq.n	8001f2c <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	689b      	ldr	r3, [r3, #8]
 8001f0e:	f003 0303 	and.w	r3, r3, #3
 8001f12:	2b01      	cmp	r3, #1
 8001f14:	d107      	bne.n	8001f26 <HAL_ADC_Init+0x202>
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f003 0301 	and.w	r3, r3, #1
 8001f1e:	2b01      	cmp	r3, #1
 8001f20:	d101      	bne.n	8001f26 <HAL_ADC_Init+0x202>
 8001f22:	2301      	movs	r3, #1
 8001f24:	e000      	b.n	8001f28 <HAL_ADC_Init+0x204>
 8001f26:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d108      	bne.n	8001f3e <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001f2c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001f2e:	689b      	ldr	r3, [r3, #8]
 8001f30:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	431a      	orrs	r2, r3
 8001f3a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001f3c:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	7e5b      	ldrb	r3, [r3, #25]
 8001f42:	035b      	lsls	r3, r3, #13
 8001f44:	687a      	ldr	r2, [r7, #4]
 8001f46:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001f48:	2a01      	cmp	r2, #1
 8001f4a:	d002      	beq.n	8001f52 <HAL_ADC_Init+0x22e>
 8001f4c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001f50:	e000      	b.n	8001f54 <HAL_ADC_Init+0x230>
 8001f52:	2200      	movs	r2, #0
 8001f54:	431a      	orrs	r2, r3
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	68db      	ldr	r3, [r3, #12]
 8001f5a:	431a      	orrs	r2, r3
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	689b      	ldr	r3, [r3, #8]
 8001f60:	4313      	orrs	r3, r2
 8001f62:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001f64:	4313      	orrs	r3, r2
 8001f66:	663b      	str	r3, [r7, #96]	@ 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f6e:	2b01      	cmp	r3, #1
 8001f70:	d11b      	bne.n	8001faa <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	7e5b      	ldrb	r3, [r3, #25]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d109      	bne.n	8001f8e <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f7e:	3b01      	subs	r3, #1
 8001f80:	045a      	lsls	r2, r3, #17
 8001f82:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001f84:	4313      	orrs	r3, r2
 8001f86:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f8a:	663b      	str	r3, [r7, #96]	@ 0x60
 8001f8c:	e00d      	b.n	8001faa <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f92:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8001f96:	f043 0220 	orr.w	r2, r3, #32
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	641a      	str	r2, [r3, #64]	@ 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fa2:	f043 0201 	orr.w	r2, r3, #1
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fae:	2b01      	cmp	r3, #1
 8001fb0:	d054      	beq.n	800205c <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4a22      	ldr	r2, [pc, #136]	@ (8002040 <HAL_ADC_Init+0x31c>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d004      	beq.n	8001fc6 <HAL_ADC_Init+0x2a2>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a20      	ldr	r2, [pc, #128]	@ (8002044 <HAL_ADC_Init+0x320>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d140      	bne.n	8002048 <HAL_ADC_Init+0x324>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fca:	f5b3 7f30 	cmp.w	r3, #704	@ 0x2c0
 8001fce:	d02a      	beq.n	8002026 <HAL_ADC_Init+0x302>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fd4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001fd8:	d022      	beq.n	8002020 <HAL_ADC_Init+0x2fc>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fde:	f5b3 7fe0 	cmp.w	r3, #448	@ 0x1c0
 8001fe2:	d01a      	beq.n	800201a <HAL_ADC_Init+0x2f6>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fe8:	f5b3 5f8a 	cmp.w	r3, #4416	@ 0x1140
 8001fec:	d012      	beq.n	8002014 <HAL_ADC_Init+0x2f0>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ff2:	f5b3 5f84 	cmp.w	r3, #4224	@ 0x1080
 8001ff6:	d00a      	beq.n	800200e <HAL_ADC_Init+0x2ea>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ffc:	f5b3 5f86 	cmp.w	r3, #4288	@ 0x10c0
 8002000:	d002      	beq.n	8002008 <HAL_ADC_Init+0x2e4>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002006:	e023      	b.n	8002050 <HAL_ADC_Init+0x32c>
 8002008:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 800200c:	e020      	b.n	8002050 <HAL_ADC_Init+0x32c>
 800200e:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8002012:	e01d      	b.n	8002050 <HAL_ADC_Init+0x32c>
 8002014:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8002018:	e01a      	b.n	8002050 <HAL_ADC_Init+0x32c>
 800201a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800201e:	e017      	b.n	8002050 <HAL_ADC_Init+0x32c>
 8002020:	f44f 7330 	mov.w	r3, #704	@ 0x2c0
 8002024:	e014      	b.n	8002050 <HAL_ADC_Init+0x32c>
 8002026:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 800202a:	e011      	b.n	8002050 <HAL_ADC_Init+0x32c>
 800202c:	20000000 	.word	0x20000000
 8002030:	431bde83 	.word	0x431bde83
 8002034:	50000100 	.word	0x50000100
 8002038:	50000300 	.word	0x50000300
 800203c:	50000700 	.word	0x50000700
 8002040:	50000400 	.word	0x50000400
 8002044:	50000500 	.word	0x50000500
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800204c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002050:	687a      	ldr	r2, [r7, #4]
 8002052:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002054:	4313      	orrs	r3, r2
 8002056:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002058:	4313      	orrs	r3, r2
 800205a:	663b      	str	r3, [r7, #96]	@ 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	689b      	ldr	r3, [r3, #8]
 8002062:	f003 030c 	and.w	r3, r3, #12
 8002066:	2b00      	cmp	r3, #0
 8002068:	d114      	bne.n	8002094 <HAL_ADC_Init+0x370>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	68db      	ldr	r3, [r3, #12]
 8002070:	687a      	ldr	r2, [r7, #4]
 8002072:	6812      	ldr	r2, [r2, #0]
 8002074:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002078:	f023 0302 	bic.w	r3, r3, #2
 800207c:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	7e1b      	ldrb	r3, [r3, #24]
 8002082:	039a      	lsls	r2, r3, #14
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800208a:	005b      	lsls	r3, r3, #1
 800208c:	4313      	orrs	r3, r2
 800208e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002090:	4313      	orrs	r3, r2
 8002092:	663b      	str	r3, [r7, #96]	@ 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	68da      	ldr	r2, [r3, #12]
 800209a:	4b1e      	ldr	r3, [pc, #120]	@ (8002114 <HAL_ADC_Init+0x3f0>)
 800209c:	4013      	ands	r3, r2
 800209e:	687a      	ldr	r2, [r7, #4]
 80020a0:	6812      	ldr	r2, [r2, #0]
 80020a2:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80020a4:	430b      	orrs	r3, r1
 80020a6:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	691b      	ldr	r3, [r3, #16]
 80020ac:	2b01      	cmp	r3, #1
 80020ae:	d10c      	bne.n	80020ca <HAL_ADC_Init+0x3a6>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020b6:	f023 010f 	bic.w	r1, r3, #15
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	69db      	ldr	r3, [r3, #28]
 80020be:	1e5a      	subs	r2, r3, #1
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	430a      	orrs	r2, r1
 80020c6:	631a      	str	r2, [r3, #48]	@ 0x30
 80020c8:	e007      	b.n	80020da <HAL_ADC_Init+0x3b6>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f022 020f 	bic.w	r2, r2, #15
 80020d8:	631a      	str	r2, [r3, #48]	@ 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2200      	movs	r2, #0
 80020de:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020e4:	f023 0303 	bic.w	r3, r3, #3
 80020e8:	f043 0201 	orr.w	r2, r3, #1
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	641a      	str	r2, [r3, #64]	@ 0x40
 80020f0:	e00a      	b.n	8002108 <HAL_ADC_Init+0x3e4>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020f6:	f023 0312 	bic.w	r3, r3, #18
 80020fa:	f043 0210 	orr.w	r2, r3, #16
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8002102:	2301      	movs	r3, #1
 8002104:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8002108:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 800210c:	4618      	mov	r0, r3
 800210e:	3768      	adds	r7, #104	@ 0x68
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}
 8002114:	fff0c007 	.word	0xfff0c007

08002118 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b084      	sub	sp, #16
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002120:	2300      	movs	r3, #0
 8002122:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	f003 0304 	and.w	r3, r3, #4
 800212e:	2b00      	cmp	r3, #0
 8002130:	f040 80f9 	bne.w	8002326 <HAL_ADC_Start+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800213a:	2b01      	cmp	r3, #1
 800213c:	d101      	bne.n	8002142 <HAL_ADC_Start+0x2a>
 800213e:	2302      	movs	r3, #2
 8002140:	e0f4      	b.n	800232c <HAL_ADC_Start+0x214>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2201      	movs	r2, #1
 8002146:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800214a:	6878      	ldr	r0, [r7, #4]
 800214c:	f000 fe1c 	bl	8002d88 <ADC_Enable>
 8002150:	4603      	mov	r3, r0
 8002152:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002154:	7bfb      	ldrb	r3, [r7, #15]
 8002156:	2b00      	cmp	r3, #0
 8002158:	f040 80e0 	bne.w	800231c <HAL_ADC_Start+0x204>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002160:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002164:	f023 0301 	bic.w	r3, r3, #1
 8002168:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002178:	d004      	beq.n	8002184 <HAL_ADC_Start+0x6c>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a6d      	ldr	r2, [pc, #436]	@ (8002334 <HAL_ADC_Start+0x21c>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d106      	bne.n	8002192 <HAL_ADC_Start+0x7a>
 8002184:	4b6c      	ldr	r3, [pc, #432]	@ (8002338 <HAL_ADC_Start+0x220>)
 8002186:	689b      	ldr	r3, [r3, #8]
 8002188:	f003 031f 	and.w	r3, r3, #31
 800218c:	2b00      	cmp	r3, #0
 800218e:	d010      	beq.n	80021b2 <HAL_ADC_Start+0x9a>
 8002190:	e005      	b.n	800219e <HAL_ADC_Start+0x86>
 8002192:	4b6a      	ldr	r3, [pc, #424]	@ (800233c <HAL_ADC_Start+0x224>)
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	f003 031f 	and.w	r3, r3, #31
 800219a:	2b00      	cmp	r3, #0
 800219c:	d009      	beq.n	80021b2 <HAL_ADC_Start+0x9a>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80021a6:	d004      	beq.n	80021b2 <HAL_ADC_Start+0x9a>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a64      	ldr	r2, [pc, #400]	@ (8002340 <HAL_ADC_Start+0x228>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d115      	bne.n	80021de <HAL_ADC_Start+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021b6:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	68db      	ldr	r3, [r3, #12]
 80021c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d036      	beq.n	800223a <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021d0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80021d4:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	641a      	str	r2, [r3, #64]	@ 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80021dc:	e02d      	b.n	800223a <HAL_ADC_Start+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021e2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80021f2:	d004      	beq.n	80021fe <HAL_ADC_Start+0xe6>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a4e      	ldr	r2, [pc, #312]	@ (8002334 <HAL_ADC_Start+0x21c>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d10a      	bne.n	8002214 <HAL_ADC_Start+0xfc>
 80021fe:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002202:	68db      	ldr	r3, [r3, #12]
 8002204:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002208:	2b00      	cmp	r3, #0
 800220a:	bf14      	ite	ne
 800220c:	2301      	movne	r3, #1
 800220e:	2300      	moveq	r3, #0
 8002210:	b2db      	uxtb	r3, r3
 8002212:	e008      	b.n	8002226 <HAL_ADC_Start+0x10e>
 8002214:	4b4a      	ldr	r3, [pc, #296]	@ (8002340 <HAL_ADC_Start+0x228>)
 8002216:	68db      	ldr	r3, [r3, #12]
 8002218:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800221c:	2b00      	cmp	r3, #0
 800221e:	bf14      	ite	ne
 8002220:	2301      	movne	r3, #1
 8002222:	2300      	moveq	r3, #0
 8002224:	b2db      	uxtb	r3, r3
 8002226:	2b00      	cmp	r3, #0
 8002228:	d007      	beq.n	800223a <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800222e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002232:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	641a      	str	r2, [r3, #64]	@ 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800223e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002242:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002246:	d106      	bne.n	8002256 <HAL_ADC_Start+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800224c:	f023 0206 	bic.w	r2, r3, #6
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	645a      	str	r2, [r3, #68]	@ 0x44
 8002254:	e002      	b.n	800225c <HAL_ADC_Start+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2200      	movs	r2, #0
 800225a:	645a      	str	r2, [r3, #68]	@ 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2200      	movs	r2, #0
 8002260:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	221c      	movs	r2, #28
 800226a:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002274:	d004      	beq.n	8002280 <HAL_ADC_Start+0x168>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a2e      	ldr	r2, [pc, #184]	@ (8002334 <HAL_ADC_Start+0x21c>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d106      	bne.n	800228e <HAL_ADC_Start+0x176>
 8002280:	4b2d      	ldr	r3, [pc, #180]	@ (8002338 <HAL_ADC_Start+0x220>)
 8002282:	689b      	ldr	r3, [r3, #8]
 8002284:	f003 031f 	and.w	r3, r3, #31
 8002288:	2b00      	cmp	r3, #0
 800228a:	d03e      	beq.n	800230a <HAL_ADC_Start+0x1f2>
 800228c:	e005      	b.n	800229a <HAL_ADC_Start+0x182>
 800228e:	4b2b      	ldr	r3, [pc, #172]	@ (800233c <HAL_ADC_Start+0x224>)
 8002290:	689b      	ldr	r3, [r3, #8]
 8002292:	f003 031f 	and.w	r3, r3, #31
 8002296:	2b00      	cmp	r3, #0
 8002298:	d037      	beq.n	800230a <HAL_ADC_Start+0x1f2>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80022a2:	d004      	beq.n	80022ae <HAL_ADC_Start+0x196>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a22      	ldr	r2, [pc, #136]	@ (8002334 <HAL_ADC_Start+0x21c>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d106      	bne.n	80022bc <HAL_ADC_Start+0x1a4>
 80022ae:	4b22      	ldr	r3, [pc, #136]	@ (8002338 <HAL_ADC_Start+0x220>)
 80022b0:	689b      	ldr	r3, [r3, #8]
 80022b2:	f003 031f 	and.w	r3, r3, #31
 80022b6:	2b05      	cmp	r3, #5
 80022b8:	d027      	beq.n	800230a <HAL_ADC_Start+0x1f2>
 80022ba:	e005      	b.n	80022c8 <HAL_ADC_Start+0x1b0>
 80022bc:	4b1f      	ldr	r3, [pc, #124]	@ (800233c <HAL_ADC_Start+0x224>)
 80022be:	689b      	ldr	r3, [r3, #8]
 80022c0:	f003 031f 	and.w	r3, r3, #31
 80022c4:	2b05      	cmp	r3, #5
 80022c6:	d020      	beq.n	800230a <HAL_ADC_Start+0x1f2>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80022d0:	d004      	beq.n	80022dc <HAL_ADC_Start+0x1c4>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a17      	ldr	r2, [pc, #92]	@ (8002334 <HAL_ADC_Start+0x21c>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d106      	bne.n	80022ea <HAL_ADC_Start+0x1d2>
 80022dc:	4b16      	ldr	r3, [pc, #88]	@ (8002338 <HAL_ADC_Start+0x220>)
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	f003 031f 	and.w	r3, r3, #31
 80022e4:	2b09      	cmp	r3, #9
 80022e6:	d010      	beq.n	800230a <HAL_ADC_Start+0x1f2>
 80022e8:	e005      	b.n	80022f6 <HAL_ADC_Start+0x1de>
 80022ea:	4b14      	ldr	r3, [pc, #80]	@ (800233c <HAL_ADC_Start+0x224>)
 80022ec:	689b      	ldr	r3, [r3, #8]
 80022ee:	f003 031f 	and.w	r3, r3, #31
 80022f2:	2b09      	cmp	r3, #9
 80022f4:	d009      	beq.n	800230a <HAL_ADC_Start+0x1f2>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80022fe:	d004      	beq.n	800230a <HAL_ADC_Start+0x1f2>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a0e      	ldr	r2, [pc, #56]	@ (8002340 <HAL_ADC_Start+0x228>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d10f      	bne.n	800232a <HAL_ADC_Start+0x212>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	689a      	ldr	r2, [r3, #8]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f042 0204 	orr.w	r2, r2, #4
 8002318:	609a      	str	r2, [r3, #8]
 800231a:	e006      	b.n	800232a <HAL_ADC_Start+0x212>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2200      	movs	r2, #0
 8002320:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8002324:	e001      	b.n	800232a <HAL_ADC_Start+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002326:	2302      	movs	r3, #2
 8002328:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800232a:	7bfb      	ldrb	r3, [r7, #15]
}
 800232c:	4618      	mov	r0, r3
 800232e:	3710      	adds	r7, #16
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}
 8002334:	50000100 	.word	0x50000100
 8002338:	50000300 	.word	0x50000300
 800233c:	50000700 	.word	0x50000700
 8002340:	50000400 	.word	0x50000400

08002344 <HAL_ADC_Stop>:
  *         use function @ref HAL_ADCEx_RegularStop().
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b084      	sub	sp, #16
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800234c:	2300      	movs	r3, #0
 800234e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002356:	2b01      	cmp	r3, #1
 8002358:	d101      	bne.n	800235e <HAL_ADC_Stop+0x1a>
 800235a:	2302      	movs	r3, #2
 800235c:	e023      	b.n	80023a6 <HAL_ADC_Stop+0x62>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2201      	movs	r2, #1
 8002362:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* 1. Stop potential conversion on going, on regular and injected groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8002366:	216c      	movs	r1, #108	@ 0x6c
 8002368:	6878      	ldr	r0, [r7, #4]
 800236a:	f000 fdd7 	bl	8002f1c <ADC_ConversionStop>
 800236e:	4603      	mov	r3, r0
 8002370:	73fb      	strb	r3, [r7, #15]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002372:	7bfb      	ldrb	r3, [r7, #15]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d111      	bne.n	800239c <HAL_ADC_Stop+0x58>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8002378:	6878      	ldr	r0, [r7, #4]
 800237a:	f000 fd69 	bl	8002e50 <ADC_Disable>
 800237e:	4603      	mov	r3, r0
 8002380:	73fb      	strb	r3, [r7, #15]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002382:	7bfb      	ldrb	r3, [r7, #15]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d109      	bne.n	800239c <HAL_ADC_Stop+0x58>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800238c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002390:	f023 0301 	bic.w	r3, r3, #1
 8002394:	f043 0201 	orr.w	r2, r3, #1
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2200      	movs	r2, #0
 80023a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80023a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	3710      	adds	r7, #16
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}
	...

080023b0 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b086      	sub	sp, #24
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
 80023b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 80023ba:	2300      	movs	r3, #0
 80023bc:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	695b      	ldr	r3, [r3, #20]
 80023c2:	2b08      	cmp	r3, #8
 80023c4:	d102      	bne.n	80023cc <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 80023c6:	2308      	movs	r3, #8
 80023c8:	617b      	str	r3, [r7, #20]
 80023ca:	e03a      	b.n	8002442 <HAL_ADC_PollForConversion+0x92>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80023d4:	d004      	beq.n	80023e0 <HAL_ADC_PollForConversion+0x30>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a72      	ldr	r2, [pc, #456]	@ (80025a4 <HAL_ADC_PollForConversion+0x1f4>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d101      	bne.n	80023e4 <HAL_ADC_PollForConversion+0x34>
 80023e0:	4b71      	ldr	r3, [pc, #452]	@ (80025a8 <HAL_ADC_PollForConversion+0x1f8>)
 80023e2:	e000      	b.n	80023e6 <HAL_ADC_PollForConversion+0x36>
 80023e4:	4b71      	ldr	r3, [pc, #452]	@ (80025ac <HAL_ADC_PollForConversion+0x1fc>)
 80023e6:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	689b      	ldr	r3, [r3, #8]
 80023ec:	f003 031f 	and.w	r3, r3, #31
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d112      	bne.n	800241a <HAL_ADC_PollForConversion+0x6a>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	68db      	ldr	r3, [r3, #12]
 80023fa:	f003 0301 	and.w	r3, r3, #1
 80023fe:	2b01      	cmp	r3, #1
 8002400:	d11d      	bne.n	800243e <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002406:	f043 0220 	orr.w	r2, r3, #32
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2200      	movs	r2, #0
 8002412:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        
        return HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	e0bf      	b.n	800259a <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	689b      	ldr	r3, [r3, #8]
 800241e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002422:	2b00      	cmp	r3, #0
 8002424:	d00b      	beq.n	800243e <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800242a:	f043 0220 	orr.w	r2, r3, #32
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2200      	movs	r2, #0
 8002436:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        
        return HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	e0ad      	b.n	800259a <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800243e:	230c      	movs	r3, #12
 8002440:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800244a:	d004      	beq.n	8002456 <HAL_ADC_PollForConversion+0xa6>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a54      	ldr	r2, [pc, #336]	@ (80025a4 <HAL_ADC_PollForConversion+0x1f4>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d106      	bne.n	8002464 <HAL_ADC_PollForConversion+0xb4>
 8002456:	4b54      	ldr	r3, [pc, #336]	@ (80025a8 <HAL_ADC_PollForConversion+0x1f8>)
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	f003 031f 	and.w	r3, r3, #31
 800245e:	2b00      	cmp	r3, #0
 8002460:	d010      	beq.n	8002484 <HAL_ADC_PollForConversion+0xd4>
 8002462:	e005      	b.n	8002470 <HAL_ADC_PollForConversion+0xc0>
 8002464:	4b51      	ldr	r3, [pc, #324]	@ (80025ac <HAL_ADC_PollForConversion+0x1fc>)
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	f003 031f 	and.w	r3, r3, #31
 800246c:	2b00      	cmp	r3, #0
 800246e:	d009      	beq.n	8002484 <HAL_ADC_PollForConversion+0xd4>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002478:	d004      	beq.n	8002484 <HAL_ADC_PollForConversion+0xd4>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a4c      	ldr	r2, [pc, #304]	@ (80025b0 <HAL_ADC_PollForConversion+0x200>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d104      	bne.n	800248e <HAL_ADC_PollForConversion+0xde>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	68db      	ldr	r3, [r3, #12]
 800248a:	613b      	str	r3, [r7, #16]
 800248c:	e00f      	b.n	80024ae <HAL_ADC_PollForConversion+0xfe>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002496:	d004      	beq.n	80024a2 <HAL_ADC_PollForConversion+0xf2>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a41      	ldr	r2, [pc, #260]	@ (80025a4 <HAL_ADC_PollForConversion+0x1f4>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d102      	bne.n	80024a8 <HAL_ADC_PollForConversion+0xf8>
 80024a2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80024a6:	e000      	b.n	80024aa <HAL_ADC_PollForConversion+0xfa>
 80024a8:	4b41      	ldr	r3, [pc, #260]	@ (80025b0 <HAL_ADC_PollForConversion+0x200>)
 80024aa:	68db      	ldr	r3, [r3, #12]
 80024ac:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 80024ae:	f7ff fc09 	bl	8001cc4 <HAL_GetTick>
 80024b2:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80024b4:	e021      	b.n	80024fa <HAL_ADC_PollForConversion+0x14a>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024bc:	d01d      	beq.n	80024fa <HAL_ADC_PollForConversion+0x14a>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d007      	beq.n	80024d4 <HAL_ADC_PollForConversion+0x124>
 80024c4:	f7ff fbfe 	bl	8001cc4 <HAL_GetTick>
 80024c8:	4602      	mov	r2, r0
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	1ad3      	subs	r3, r2, r3
 80024ce:	683a      	ldr	r2, [r7, #0]
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d212      	bcs.n	80024fa <HAL_ADC_PollForConversion+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	681a      	ldr	r2, [r3, #0]
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	4013      	ands	r3, r2
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d10b      	bne.n	80024fa <HAL_ADC_PollForConversion+0x14a>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024e6:	f043 0204 	orr.w	r2, r3, #4
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2200      	movs	r2, #0
 80024f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 80024f6:	2303      	movs	r3, #3
 80024f8:	e04f      	b.n	800259a <HAL_ADC_PollForConversion+0x1ea>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	4013      	ands	r3, r2
 8002504:	2b00      	cmp	r3, #0
 8002506:	d0d6      	beq.n	80024b6 <HAL_ADC_PollForConversion+0x106>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800250c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	641a      	str	r2, [r3, #64]	@ 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	68db      	ldr	r3, [r3, #12]
 800251a:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800251e:	2b00      	cmp	r3, #0
 8002520:	d131      	bne.n	8002586 <HAL_ADC_PollForConversion+0x1d6>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8002528:	2b00      	cmp	r3, #0
 800252a:	d12c      	bne.n	8002586 <HAL_ADC_PollForConversion+0x1d6>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 0308 	and.w	r3, r3, #8
 8002536:	2b08      	cmp	r3, #8
 8002538:	d125      	bne.n	8002586 <HAL_ADC_PollForConversion+0x1d6>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	f003 0304 	and.w	r3, r3, #4
 8002544:	2b00      	cmp	r3, #0
 8002546:	d112      	bne.n	800256e <HAL_ADC_PollForConversion+0x1be>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800254c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	641a      	str	r2, [r3, #64]	@ 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002558:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800255c:	2b00      	cmp	r3, #0
 800255e:	d112      	bne.n	8002586 <HAL_ADC_PollForConversion+0x1d6>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002564:	f043 0201 	orr.w	r2, r3, #1
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	641a      	str	r2, [r3, #64]	@ 0x40
 800256c:	e00b      	b.n	8002586 <HAL_ADC_PollForConversion+0x1d6>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002572:	f043 0220 	orr.w	r2, r3, #32
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800257e:	f043 0201 	orr.w	r2, r3, #1
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800258c:	2b00      	cmp	r3, #0
 800258e:	d103      	bne.n	8002598 <HAL_ADC_PollForConversion+0x1e8>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	697a      	ldr	r2, [r7, #20]
 8002596:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002598:	2300      	movs	r3, #0
}
 800259a:	4618      	mov	r0, r3
 800259c:	3718      	adds	r7, #24
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop
 80025a4:	50000100 	.word	0x50000100
 80025a8:	50000300 	.word	0x50000300
 80025ac:	50000700 	.word	0x50000700
 80025b0:	50000400 	.word	0x50000400

080025b4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b083      	sub	sp, #12
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	370c      	adds	r7, #12
 80025c6:	46bd      	mov	sp, r7
 80025c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025cc:	4770      	bx	lr
	...

080025d0 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b09b      	sub	sp, #108	@ 0x6c
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
 80025d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025da:	2300      	movs	r3, #0
 80025dc:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80025e0:	2300      	movs	r3, #0
 80025e2:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80025ea:	2b01      	cmp	r3, #1
 80025ec:	d101      	bne.n	80025f2 <HAL_ADC_ConfigChannel+0x22>
 80025ee:	2302      	movs	r3, #2
 80025f0:	e2c8      	b.n	8002b84 <HAL_ADC_ConfigChannel+0x5b4>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2201      	movs	r2, #1
 80025f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	f003 0304 	and.w	r3, r3, #4
 8002604:	2b00      	cmp	r3, #0
 8002606:	f040 82ac 	bne.w	8002b62 <HAL_ADC_ConfigChannel+0x592>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	2b04      	cmp	r3, #4
 8002610:	d81c      	bhi.n	800264c <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	685a      	ldr	r2, [r3, #4]
 800261c:	4613      	mov	r3, r2
 800261e:	005b      	lsls	r3, r3, #1
 8002620:	4413      	add	r3, r2
 8002622:	005b      	lsls	r3, r3, #1
 8002624:	461a      	mov	r2, r3
 8002626:	231f      	movs	r3, #31
 8002628:	4093      	lsls	r3, r2
 800262a:	43db      	mvns	r3, r3
 800262c:	4019      	ands	r1, r3
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	6818      	ldr	r0, [r3, #0]
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	685a      	ldr	r2, [r3, #4]
 8002636:	4613      	mov	r3, r2
 8002638:	005b      	lsls	r3, r3, #1
 800263a:	4413      	add	r3, r2
 800263c:	005b      	lsls	r3, r3, #1
 800263e:	fa00 f203 	lsl.w	r2, r0, r3
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	430a      	orrs	r2, r1
 8002648:	631a      	str	r2, [r3, #48]	@ 0x30
 800264a:	e063      	b.n	8002714 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	2b09      	cmp	r3, #9
 8002652:	d81e      	bhi.n	8002692 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	685a      	ldr	r2, [r3, #4]
 800265e:	4613      	mov	r3, r2
 8002660:	005b      	lsls	r3, r3, #1
 8002662:	4413      	add	r3, r2
 8002664:	005b      	lsls	r3, r3, #1
 8002666:	3b1e      	subs	r3, #30
 8002668:	221f      	movs	r2, #31
 800266a:	fa02 f303 	lsl.w	r3, r2, r3
 800266e:	43db      	mvns	r3, r3
 8002670:	4019      	ands	r1, r3
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	6818      	ldr	r0, [r3, #0]
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	685a      	ldr	r2, [r3, #4]
 800267a:	4613      	mov	r3, r2
 800267c:	005b      	lsls	r3, r3, #1
 800267e:	4413      	add	r3, r2
 8002680:	005b      	lsls	r3, r3, #1
 8002682:	3b1e      	subs	r3, #30
 8002684:	fa00 f203 	lsl.w	r2, r0, r3
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	430a      	orrs	r2, r1
 800268e:	635a      	str	r2, [r3, #52]	@ 0x34
 8002690:	e040      	b.n	8002714 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	2b0e      	cmp	r3, #14
 8002698:	d81e      	bhi.n	80026d8 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	685a      	ldr	r2, [r3, #4]
 80026a4:	4613      	mov	r3, r2
 80026a6:	005b      	lsls	r3, r3, #1
 80026a8:	4413      	add	r3, r2
 80026aa:	005b      	lsls	r3, r3, #1
 80026ac:	3b3c      	subs	r3, #60	@ 0x3c
 80026ae:	221f      	movs	r2, #31
 80026b0:	fa02 f303 	lsl.w	r3, r2, r3
 80026b4:	43db      	mvns	r3, r3
 80026b6:	4019      	ands	r1, r3
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	6818      	ldr	r0, [r3, #0]
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	685a      	ldr	r2, [r3, #4]
 80026c0:	4613      	mov	r3, r2
 80026c2:	005b      	lsls	r3, r3, #1
 80026c4:	4413      	add	r3, r2
 80026c6:	005b      	lsls	r3, r3, #1
 80026c8:	3b3c      	subs	r3, #60	@ 0x3c
 80026ca:	fa00 f203 	lsl.w	r2, r0, r3
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	430a      	orrs	r2, r1
 80026d4:	639a      	str	r2, [r3, #56]	@ 0x38
 80026d6:	e01d      	b.n	8002714 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	685a      	ldr	r2, [r3, #4]
 80026e2:	4613      	mov	r3, r2
 80026e4:	005b      	lsls	r3, r3, #1
 80026e6:	4413      	add	r3, r2
 80026e8:	005b      	lsls	r3, r3, #1
 80026ea:	3b5a      	subs	r3, #90	@ 0x5a
 80026ec:	221f      	movs	r2, #31
 80026ee:	fa02 f303 	lsl.w	r3, r2, r3
 80026f2:	43db      	mvns	r3, r3
 80026f4:	4019      	ands	r1, r3
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	6818      	ldr	r0, [r3, #0]
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	685a      	ldr	r2, [r3, #4]
 80026fe:	4613      	mov	r3, r2
 8002700:	005b      	lsls	r3, r3, #1
 8002702:	4413      	add	r3, r2
 8002704:	005b      	lsls	r3, r3, #1
 8002706:	3b5a      	subs	r3, #90	@ 0x5a
 8002708:	fa00 f203 	lsl.w	r2, r0, r3
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	430a      	orrs	r2, r1
 8002712:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	f003 030c 	and.w	r3, r3, #12
 800271e:	2b00      	cmp	r3, #0
 8002720:	f040 80e5 	bne.w	80028ee <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	2b09      	cmp	r3, #9
 800272a:	d91c      	bls.n	8002766 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	6999      	ldr	r1, [r3, #24]
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	4613      	mov	r3, r2
 8002738:	005b      	lsls	r3, r3, #1
 800273a:	4413      	add	r3, r2
 800273c:	3b1e      	subs	r3, #30
 800273e:	2207      	movs	r2, #7
 8002740:	fa02 f303 	lsl.w	r3, r2, r3
 8002744:	43db      	mvns	r3, r3
 8002746:	4019      	ands	r1, r3
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	6898      	ldr	r0, [r3, #8]
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	681a      	ldr	r2, [r3, #0]
 8002750:	4613      	mov	r3, r2
 8002752:	005b      	lsls	r3, r3, #1
 8002754:	4413      	add	r3, r2
 8002756:	3b1e      	subs	r3, #30
 8002758:	fa00 f203 	lsl.w	r2, r0, r3
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	430a      	orrs	r2, r1
 8002762:	619a      	str	r2, [r3, #24]
 8002764:	e019      	b.n	800279a <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	6959      	ldr	r1, [r3, #20]
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	681a      	ldr	r2, [r3, #0]
 8002770:	4613      	mov	r3, r2
 8002772:	005b      	lsls	r3, r3, #1
 8002774:	4413      	add	r3, r2
 8002776:	2207      	movs	r2, #7
 8002778:	fa02 f303 	lsl.w	r3, r2, r3
 800277c:	43db      	mvns	r3, r3
 800277e:	4019      	ands	r1, r3
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	6898      	ldr	r0, [r3, #8]
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	4613      	mov	r3, r2
 800278a:	005b      	lsls	r3, r3, #1
 800278c:	4413      	add	r3, r2
 800278e:	fa00 f203 	lsl.w	r2, r0, r3
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	430a      	orrs	r2, r1
 8002798:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	695a      	ldr	r2, [r3, #20]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	68db      	ldr	r3, [r3, #12]
 80027a4:	08db      	lsrs	r3, r3, #3
 80027a6:	f003 0303 	and.w	r3, r3, #3
 80027aa:	005b      	lsls	r3, r3, #1
 80027ac:	fa02 f303 	lsl.w	r3, r2, r3
 80027b0:	663b      	str	r3, [r7, #96]	@ 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	691b      	ldr	r3, [r3, #16]
 80027b6:	3b01      	subs	r3, #1
 80027b8:	2b03      	cmp	r3, #3
 80027ba:	d84f      	bhi.n	800285c <HAL_ADC_ConfigChannel+0x28c>
 80027bc:	a201      	add	r2, pc, #4	@ (adr r2, 80027c4 <HAL_ADC_ConfigChannel+0x1f4>)
 80027be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027c2:	bf00      	nop
 80027c4:	080027d5 	.word	0x080027d5
 80027c8:	080027f7 	.word	0x080027f7
 80027cc:	08002819 	.word	0x08002819
 80027d0:	0800283b 	.word	0x0800283b
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80027da:	4b99      	ldr	r3, [pc, #612]	@ (8002a40 <HAL_ADC_ConfigChannel+0x470>)
 80027dc:	4013      	ands	r3, r2
 80027de:	683a      	ldr	r2, [r7, #0]
 80027e0:	6812      	ldr	r2, [r2, #0]
 80027e2:	0691      	lsls	r1, r2, #26
 80027e4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80027e6:	430a      	orrs	r2, r1
 80027e8:	431a      	orrs	r2, r3
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80027f2:	661a      	str	r2, [r3, #96]	@ 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80027f4:	e07b      	b.n	80028ee <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80027fc:	4b90      	ldr	r3, [pc, #576]	@ (8002a40 <HAL_ADC_ConfigChannel+0x470>)
 80027fe:	4013      	ands	r3, r2
 8002800:	683a      	ldr	r2, [r7, #0]
 8002802:	6812      	ldr	r2, [r2, #0]
 8002804:	0691      	lsls	r1, r2, #26
 8002806:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002808:	430a      	orrs	r2, r1
 800280a:	431a      	orrs	r2, r3
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8002814:	665a      	str	r2, [r3, #100]	@ 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002816:	e06a      	b.n	80028ee <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800281e:	4b88      	ldr	r3, [pc, #544]	@ (8002a40 <HAL_ADC_ConfigChannel+0x470>)
 8002820:	4013      	ands	r3, r2
 8002822:	683a      	ldr	r2, [r7, #0]
 8002824:	6812      	ldr	r2, [r2, #0]
 8002826:	0691      	lsls	r1, r2, #26
 8002828:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800282a:	430a      	orrs	r2, r1
 800282c:	431a      	orrs	r2, r3
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8002836:	669a      	str	r2, [r3, #104]	@ 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002838:	e059      	b.n	80028ee <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002840:	4b7f      	ldr	r3, [pc, #508]	@ (8002a40 <HAL_ADC_ConfigChannel+0x470>)
 8002842:	4013      	ands	r3, r2
 8002844:	683a      	ldr	r2, [r7, #0]
 8002846:	6812      	ldr	r2, [r2, #0]
 8002848:	0691      	lsls	r1, r2, #26
 800284a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800284c:	430a      	orrs	r2, r1
 800284e:	431a      	orrs	r2, r3
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8002858:	66da      	str	r2, [r3, #108]	@ 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800285a:	e048      	b.n	80028ee <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002862:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	069b      	lsls	r3, r3, #26
 800286c:	429a      	cmp	r2, r3
 800286e:	d107      	bne.n	8002880 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800287e:	661a      	str	r2, [r3, #96]	@ 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002886:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	069b      	lsls	r3, r3, #26
 8002890:	429a      	cmp	r2, r3
 8002892:	d107      	bne.n	80028a4 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80028a2:	665a      	str	r2, [r3, #100]	@ 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80028aa:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	069b      	lsls	r3, r3, #26
 80028b4:	429a      	cmp	r2, r3
 80028b6:	d107      	bne.n	80028c8 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80028c6:	669a      	str	r2, [r3, #104]	@ 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80028ce:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	069b      	lsls	r3, r3, #26
 80028d8:	429a      	cmp	r2, r3
 80028da:	d107      	bne.n	80028ec <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80028ea:	66da      	str	r2, [r3, #108]	@ 0x6c
      }
      break;
 80028ec:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	f003 0303 	and.w	r3, r3, #3
 80028f8:	2b01      	cmp	r3, #1
 80028fa:	d108      	bne.n	800290e <HAL_ADC_ConfigChannel+0x33e>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 0301 	and.w	r3, r3, #1
 8002906:	2b01      	cmp	r3, #1
 8002908:	d101      	bne.n	800290e <HAL_ADC_ConfigChannel+0x33e>
 800290a:	2301      	movs	r3, #1
 800290c:	e000      	b.n	8002910 <HAL_ADC_ConfigChannel+0x340>
 800290e:	2300      	movs	r3, #0
 8002910:	2b00      	cmp	r3, #0
 8002912:	f040 8131 	bne.w	8002b78 <HAL_ADC_ConfigChannel+0x5a8>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	68db      	ldr	r3, [r3, #12]
 800291a:	2b01      	cmp	r3, #1
 800291c:	d00f      	beq.n	800293e <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	2201      	movs	r2, #1
 800292c:	fa02 f303 	lsl.w	r3, r2, r3
 8002930:	43da      	mvns	r2, r3
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	400a      	ands	r2, r1
 8002938:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 800293c:	e049      	b.n	80029d2 <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	2201      	movs	r2, #1
 800294c:	409a      	lsls	r2, r3
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	430a      	orrs	r2, r1
 8002954:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	2b09      	cmp	r3, #9
 800295e:	d91c      	bls.n	800299a <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	6999      	ldr	r1, [r3, #24]
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	681a      	ldr	r2, [r3, #0]
 800296a:	4613      	mov	r3, r2
 800296c:	005b      	lsls	r3, r3, #1
 800296e:	4413      	add	r3, r2
 8002970:	3b1b      	subs	r3, #27
 8002972:	2207      	movs	r2, #7
 8002974:	fa02 f303 	lsl.w	r3, r2, r3
 8002978:	43db      	mvns	r3, r3
 800297a:	4019      	ands	r1, r3
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	6898      	ldr	r0, [r3, #8]
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	681a      	ldr	r2, [r3, #0]
 8002984:	4613      	mov	r3, r2
 8002986:	005b      	lsls	r3, r3, #1
 8002988:	4413      	add	r3, r2
 800298a:	3b1b      	subs	r3, #27
 800298c:	fa00 f203 	lsl.w	r2, r0, r3
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	430a      	orrs	r2, r1
 8002996:	619a      	str	r2, [r3, #24]
 8002998:	e01b      	b.n	80029d2 <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	6959      	ldr	r1, [r3, #20]
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	1c5a      	adds	r2, r3, #1
 80029a6:	4613      	mov	r3, r2
 80029a8:	005b      	lsls	r3, r3, #1
 80029aa:	4413      	add	r3, r2
 80029ac:	2207      	movs	r2, #7
 80029ae:	fa02 f303 	lsl.w	r3, r2, r3
 80029b2:	43db      	mvns	r3, r3
 80029b4:	4019      	ands	r1, r3
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	6898      	ldr	r0, [r3, #8]
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	1c5a      	adds	r2, r3, #1
 80029c0:	4613      	mov	r3, r2
 80029c2:	005b      	lsls	r3, r3, #1
 80029c4:	4413      	add	r3, r2
 80029c6:	fa00 f203 	lsl.w	r2, r0, r3
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	430a      	orrs	r2, r1
 80029d0:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80029da:	d004      	beq.n	80029e6 <HAL_ADC_ConfigChannel+0x416>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a18      	ldr	r2, [pc, #96]	@ (8002a44 <HAL_ADC_ConfigChannel+0x474>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d101      	bne.n	80029ea <HAL_ADC_ConfigChannel+0x41a>
 80029e6:	4b18      	ldr	r3, [pc, #96]	@ (8002a48 <HAL_ADC_ConfigChannel+0x478>)
 80029e8:	e000      	b.n	80029ec <HAL_ADC_ConfigChannel+0x41c>
 80029ea:	4b18      	ldr	r3, [pc, #96]	@ (8002a4c <HAL_ADC_ConfigChannel+0x47c>)
 80029ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	2b10      	cmp	r3, #16
 80029f4:	d105      	bne.n	8002a02 <HAL_ADC_ConfigChannel+0x432>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80029f6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d015      	beq.n	8002a2e <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002a06:	2b11      	cmp	r3, #17
 8002a08:	d105      	bne.n	8002a16 <HAL_ADC_ConfigChannel+0x446>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002a0a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d00b      	beq.n	8002a2e <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002a1a:	2b12      	cmp	r3, #18
 8002a1c:	f040 80ac 	bne.w	8002b78 <HAL_ADC_ConfigChannel+0x5a8>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8002a20:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002a22:	689b      	ldr	r3, [r3, #8]
 8002a24:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	f040 80a5 	bne.w	8002b78 <HAL_ADC_ConfigChannel+0x5a8>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002a36:	d10b      	bne.n	8002a50 <HAL_ADC_ConfigChannel+0x480>
 8002a38:	4b02      	ldr	r3, [pc, #8]	@ (8002a44 <HAL_ADC_ConfigChannel+0x474>)
 8002a3a:	60fb      	str	r3, [r7, #12]
 8002a3c:	e023      	b.n	8002a86 <HAL_ADC_ConfigChannel+0x4b6>
 8002a3e:	bf00      	nop
 8002a40:	83fff000 	.word	0x83fff000
 8002a44:	50000100 	.word	0x50000100
 8002a48:	50000300 	.word	0x50000300
 8002a4c:	50000700 	.word	0x50000700
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a4e      	ldr	r2, [pc, #312]	@ (8002b90 <HAL_ADC_ConfigChannel+0x5c0>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d103      	bne.n	8002a62 <HAL_ADC_ConfigChannel+0x492>
 8002a5a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002a5e:	60fb      	str	r3, [r7, #12]
 8002a60:	e011      	b.n	8002a86 <HAL_ADC_ConfigChannel+0x4b6>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a4b      	ldr	r2, [pc, #300]	@ (8002b94 <HAL_ADC_ConfigChannel+0x5c4>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d102      	bne.n	8002a72 <HAL_ADC_ConfigChannel+0x4a2>
 8002a6c:	4b4a      	ldr	r3, [pc, #296]	@ (8002b98 <HAL_ADC_ConfigChannel+0x5c8>)
 8002a6e:	60fb      	str	r3, [r7, #12]
 8002a70:	e009      	b.n	8002a86 <HAL_ADC_ConfigChannel+0x4b6>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a48      	ldr	r2, [pc, #288]	@ (8002b98 <HAL_ADC_ConfigChannel+0x5c8>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d102      	bne.n	8002a82 <HAL_ADC_ConfigChannel+0x4b2>
 8002a7c:	4b45      	ldr	r3, [pc, #276]	@ (8002b94 <HAL_ADC_ConfigChannel+0x5c4>)
 8002a7e:	60fb      	str	r3, [r7, #12]
 8002a80:	e001      	b.n	8002a86 <HAL_ADC_ConfigChannel+0x4b6>
 8002a82:	2300      	movs	r3, #0
 8002a84:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	f003 0303 	and.w	r3, r3, #3
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	d108      	bne.n	8002aa6 <HAL_ADC_ConfigChannel+0x4d6>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f003 0301 	and.w	r3, r3, #1
 8002a9e:	2b01      	cmp	r3, #1
 8002aa0:	d101      	bne.n	8002aa6 <HAL_ADC_ConfigChannel+0x4d6>
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e000      	b.n	8002aa8 <HAL_ADC_ConfigChannel+0x4d8>
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d150      	bne.n	8002b4e <HAL_ADC_ConfigChannel+0x57e>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002aac:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d010      	beq.n	8002ad4 <HAL_ADC_ConfigChannel+0x504>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	f003 0303 	and.w	r3, r3, #3
 8002aba:	2b01      	cmp	r3, #1
 8002abc:	d107      	bne.n	8002ace <HAL_ADC_ConfigChannel+0x4fe>
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f003 0301 	and.w	r3, r3, #1
 8002ac6:	2b01      	cmp	r3, #1
 8002ac8:	d101      	bne.n	8002ace <HAL_ADC_ConfigChannel+0x4fe>
 8002aca:	2301      	movs	r3, #1
 8002acc:	e000      	b.n	8002ad0 <HAL_ADC_ConfigChannel+0x500>
 8002ace:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d13c      	bne.n	8002b4e <HAL_ADC_ConfigChannel+0x57e>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	2b10      	cmp	r3, #16
 8002ada:	d11d      	bne.n	8002b18 <HAL_ADC_ConfigChannel+0x548>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002ae4:	d118      	bne.n	8002b18 <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8002ae6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002ae8:	689b      	ldr	r3, [r3, #8]
 8002aea:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002aee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002af0:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002af2:	4b2a      	ldr	r3, [pc, #168]	@ (8002b9c <HAL_ADC_ConfigChannel+0x5cc>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a2a      	ldr	r2, [pc, #168]	@ (8002ba0 <HAL_ADC_ConfigChannel+0x5d0>)
 8002af8:	fba2 2303 	umull	r2, r3, r2, r3
 8002afc:	0c9a      	lsrs	r2, r3, #18
 8002afe:	4613      	mov	r3, r2
 8002b00:	009b      	lsls	r3, r3, #2
 8002b02:	4413      	add	r3, r2
 8002b04:	005b      	lsls	r3, r3, #1
 8002b06:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002b08:	e002      	b.n	8002b10 <HAL_ADC_ConfigChannel+0x540>
          {
            wait_loop_index--;
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	3b01      	subs	r3, #1
 8002b0e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d1f9      	bne.n	8002b0a <HAL_ADC_ConfigChannel+0x53a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002b16:	e02e      	b.n	8002b76 <HAL_ADC_ConfigChannel+0x5a6>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	2b11      	cmp	r3, #17
 8002b1e:	d10b      	bne.n	8002b38 <HAL_ADC_ConfigChannel+0x568>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002b28:	d106      	bne.n	8002b38 <HAL_ADC_ConfigChannel+0x568>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8002b2a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002b2c:	689b      	ldr	r3, [r3, #8]
 8002b2e:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 8002b32:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002b34:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002b36:	e01e      	b.n	8002b76 <HAL_ADC_ConfigChannel+0x5a6>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	2b12      	cmp	r3, #18
 8002b3e:	d11a      	bne.n	8002b76 <HAL_ADC_ConfigChannel+0x5a6>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8002b40:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002b48:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002b4a:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002b4c:	e013      	b.n	8002b76 <HAL_ADC_ConfigChannel+0x5a6>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b52:	f043 0220 	orr.w	r2, r3, #32
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	641a      	str	r2, [r3, #64]	@ 0x40
        
        tmp_hal_status = HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8002b60:	e00a      	b.n	8002b78 <HAL_ADC_ConfigChannel+0x5a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b66:	f043 0220 	orr.w	r2, r3, #32
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8002b74:	e000      	b.n	8002b78 <HAL_ADC_ConfigChannel+0x5a8>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002b76:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002b80:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	376c      	adds	r7, #108	@ 0x6c
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8e:	4770      	bx	lr
 8002b90:	50000100 	.word	0x50000100
 8002b94:	50000400 	.word	0x50000400
 8002b98:	50000500 	.word	0x50000500
 8002b9c:	20000000 	.word	0x20000000
 8002ba0:	431bde83 	.word	0x431bde83

08002ba4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b099      	sub	sp, #100	@ 0x64
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
 8002bac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002bbc:	d102      	bne.n	8002bc4 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8002bbe:	4b6d      	ldr	r3, [pc, #436]	@ (8002d74 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002bc0:	60bb      	str	r3, [r7, #8]
 8002bc2:	e01a      	b.n	8002bfa <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a6a      	ldr	r2, [pc, #424]	@ (8002d74 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d103      	bne.n	8002bd6 <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8002bce:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002bd2:	60bb      	str	r3, [r7, #8]
 8002bd4:	e011      	b.n	8002bfa <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a67      	ldr	r2, [pc, #412]	@ (8002d78 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d102      	bne.n	8002be6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002be0:	4b66      	ldr	r3, [pc, #408]	@ (8002d7c <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8002be2:	60bb      	str	r3, [r7, #8]
 8002be4:	e009      	b.n	8002bfa <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a64      	ldr	r2, [pc, #400]	@ (8002d7c <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d102      	bne.n	8002bf6 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002bf0:	4b61      	ldr	r3, [pc, #388]	@ (8002d78 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8002bf2:	60bb      	str	r3, [r7, #8]
 8002bf4:	e001      	b.n	8002bfa <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d101      	bne.n	8002c04 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8002c00:	2301      	movs	r3, #1
 8002c02:	e0b0      	b.n	8002d66 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002c0a:	2b01      	cmp	r3, #1
 8002c0c:	d101      	bne.n	8002c12 <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8002c0e:	2302      	movs	r3, #2
 8002c10:	e0a9      	b.n	8002d66 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2201      	movs	r2, #1
 8002c16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	f003 0304 	and.w	r3, r3, #4
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	f040 808d 	bne.w	8002d44 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	689b      	ldr	r3, [r3, #8]
 8002c2e:	f003 0304 	and.w	r3, r3, #4
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	f040 8086 	bne.w	8002d44 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002c40:	d004      	beq.n	8002c4c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a4b      	ldr	r2, [pc, #300]	@ (8002d74 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d101      	bne.n	8002c50 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8002c4c:	4b4c      	ldr	r3, [pc, #304]	@ (8002d80 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8002c4e:	e000      	b.n	8002c52 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8002c50:	4b4c      	ldr	r3, [pc, #304]	@ (8002d84 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 8002c52:	65bb      	str	r3, [r7, #88]	@ 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d040      	beq.n	8002cde <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002c5c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002c5e:	689b      	ldr	r3, [r3, #8]
 8002c60:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	6859      	ldr	r1, [r3, #4]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002c6e:	035b      	lsls	r3, r3, #13
 8002c70:	430b      	orrs	r3, r1
 8002c72:	431a      	orrs	r2, r3
 8002c74:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002c76:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	f003 0303 	and.w	r3, r3, #3
 8002c82:	2b01      	cmp	r3, #1
 8002c84:	d108      	bne.n	8002c98 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f003 0301 	and.w	r3, r3, #1
 8002c90:	2b01      	cmp	r3, #1
 8002c92:	d101      	bne.n	8002c98 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8002c94:	2301      	movs	r3, #1
 8002c96:	e000      	b.n	8002c9a <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8002c98:	2300      	movs	r3, #0
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d15c      	bne.n	8002d58 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	f003 0303 	and.w	r3, r3, #3
 8002ca6:	2b01      	cmp	r3, #1
 8002ca8:	d107      	bne.n	8002cba <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8002caa:	68bb      	ldr	r3, [r7, #8]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f003 0301 	and.w	r3, r3, #1
 8002cb2:	2b01      	cmp	r3, #1
 8002cb4:	d101      	bne.n	8002cba <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e000      	b.n	8002cbc <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8002cba:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d14b      	bne.n	8002d58 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002cc0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002cc2:	689b      	ldr	r3, [r3, #8]
 8002cc4:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002cc8:	f023 030f 	bic.w	r3, r3, #15
 8002ccc:	683a      	ldr	r2, [r7, #0]
 8002cce:	6811      	ldr	r1, [r2, #0]
 8002cd0:	683a      	ldr	r2, [r7, #0]
 8002cd2:	6892      	ldr	r2, [r2, #8]
 8002cd4:	430a      	orrs	r2, r1
 8002cd6:	431a      	orrs	r2, r3
 8002cd8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002cda:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002cdc:	e03c      	b.n	8002d58 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002cde:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002ce6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002ce8:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	f003 0303 	and.w	r3, r3, #3
 8002cf4:	2b01      	cmp	r3, #1
 8002cf6:	d108      	bne.n	8002d0a <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f003 0301 	and.w	r3, r3, #1
 8002d02:	2b01      	cmp	r3, #1
 8002d04:	d101      	bne.n	8002d0a <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8002d06:	2301      	movs	r3, #1
 8002d08:	e000      	b.n	8002d0c <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d123      	bne.n	8002d58 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	f003 0303 	and.w	r3, r3, #3
 8002d18:	2b01      	cmp	r3, #1
 8002d1a:	d107      	bne.n	8002d2c <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f003 0301 	and.w	r3, r3, #1
 8002d24:	2b01      	cmp	r3, #1
 8002d26:	d101      	bne.n	8002d2c <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8002d28:	2301      	movs	r3, #1
 8002d2a:	e000      	b.n	8002d2e <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8002d2c:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d112      	bne.n	8002d58 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8002d32:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002d3a:	f023 030f 	bic.w	r3, r3, #15
 8002d3e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002d40:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002d42:	e009      	b.n	8002d58 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d48:	f043 0220 	orr.w	r2, r3, #32
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002d50:	2301      	movs	r3, #1
 8002d52:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8002d56:	e000      	b.n	8002d5a <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002d58:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002d62:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
} 
 8002d66:	4618      	mov	r0, r3
 8002d68:	3764      	adds	r7, #100	@ 0x64
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d70:	4770      	bx	lr
 8002d72:	bf00      	nop
 8002d74:	50000100 	.word	0x50000100
 8002d78:	50000400 	.word	0x50000400
 8002d7c:	50000500 	.word	0x50000500
 8002d80:	50000300 	.word	0x50000300
 8002d84:	50000700 	.word	0x50000700

08002d88 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b084      	sub	sp, #16
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002d90:	2300      	movs	r3, #0
 8002d92:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	f003 0303 	and.w	r3, r3, #3
 8002d9e:	2b01      	cmp	r3, #1
 8002da0:	d108      	bne.n	8002db4 <ADC_Enable+0x2c>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f003 0301 	and.w	r3, r3, #1
 8002dac:	2b01      	cmp	r3, #1
 8002dae:	d101      	bne.n	8002db4 <ADC_Enable+0x2c>
 8002db0:	2301      	movs	r3, #1
 8002db2:	e000      	b.n	8002db6 <ADC_Enable+0x2e>
 8002db4:	2300      	movs	r3, #0
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d143      	bne.n	8002e42 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	689a      	ldr	r2, [r3, #8]
 8002dc0:	4b22      	ldr	r3, [pc, #136]	@ (8002e4c <ADC_Enable+0xc4>)
 8002dc2:	4013      	ands	r3, r2
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d00d      	beq.n	8002de4 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dcc:	f043 0210 	orr.w	r2, r3, #16
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	641a      	str	r2, [r3, #64]	@ 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dd8:	f043 0201 	orr.w	r2, r3, #1
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	645a      	str	r2, [r3, #68]	@ 0x44
      
      return HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	e02f      	b.n	8002e44 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	689a      	ldr	r2, [r3, #8]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f042 0201 	orr.w	r2, r2, #1
 8002df2:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8002df4:	f7fe ff66 	bl	8001cc4 <HAL_GetTick>
 8002df8:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002dfa:	e01b      	b.n	8002e34 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002dfc:	f7fe ff62 	bl	8001cc4 <HAL_GetTick>
 8002e00:	4602      	mov	r2, r0
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	1ad3      	subs	r3, r2, r3
 8002e06:	2b02      	cmp	r3, #2
 8002e08:	d914      	bls.n	8002e34 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f003 0301 	and.w	r3, r3, #1
 8002e14:	2b01      	cmp	r3, #1
 8002e16:	d00d      	beq.n	8002e34 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e1c:	f043 0210 	orr.w	r2, r3, #16
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e28:	f043 0201 	orr.w	r2, r3, #1
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 8002e30:	2301      	movs	r3, #1
 8002e32:	e007      	b.n	8002e44 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f003 0301 	and.w	r3, r3, #1
 8002e3e:	2b01      	cmp	r3, #1
 8002e40:	d1dc      	bne.n	8002dfc <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002e42:	2300      	movs	r3, #0
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	3710      	adds	r7, #16
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}
 8002e4c:	8000003f 	.word	0x8000003f

08002e50 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b084      	sub	sp, #16
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	f003 0303 	and.w	r3, r3, #3
 8002e66:	2b01      	cmp	r3, #1
 8002e68:	d108      	bne.n	8002e7c <ADC_Disable+0x2c>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f003 0301 	and.w	r3, r3, #1
 8002e74:	2b01      	cmp	r3, #1
 8002e76:	d101      	bne.n	8002e7c <ADC_Disable+0x2c>
 8002e78:	2301      	movs	r3, #1
 8002e7a:	e000      	b.n	8002e7e <ADC_Disable+0x2e>
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d047      	beq.n	8002f12 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	f003 030d 	and.w	r3, r3, #13
 8002e8c:	2b01      	cmp	r3, #1
 8002e8e:	d10f      	bne.n	8002eb0 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	689a      	ldr	r2, [r3, #8]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f042 0202 	orr.w	r2, r2, #2
 8002e9e:	609a      	str	r2, [r3, #8]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	2203      	movs	r2, #3
 8002ea6:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8002ea8:	f7fe ff0c 	bl	8001cc4 <HAL_GetTick>
 8002eac:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002eae:	e029      	b.n	8002f04 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eb4:	f043 0210 	orr.w	r2, r3, #16
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	641a      	str	r2, [r3, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ec0:	f043 0201 	orr.w	r2, r3, #1
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	645a      	str	r2, [r3, #68]	@ 0x44
      return HAL_ERROR;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	e023      	b.n	8002f14 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002ecc:	f7fe fefa 	bl	8001cc4 <HAL_GetTick>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	1ad3      	subs	r3, r2, r3
 8002ed6:	2b02      	cmp	r3, #2
 8002ed8:	d914      	bls.n	8002f04 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	f003 0301 	and.w	r3, r3, #1
 8002ee4:	2b01      	cmp	r3, #1
 8002ee6:	d10d      	bne.n	8002f04 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eec:	f043 0210 	orr.w	r2, r3, #16
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ef8:	f043 0201 	orr.w	r2, r3, #1
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 8002f00:	2301      	movs	r3, #1
 8002f02:	e007      	b.n	8002f14 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	689b      	ldr	r3, [r3, #8]
 8002f0a:	f003 0301 	and.w	r3, r3, #1
 8002f0e:	2b01      	cmp	r3, #1
 8002f10:	d0dc      	beq.n	8002ecc <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002f12:	2300      	movs	r3, #0
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	3710      	adds	r7, #16
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}

08002f1c <ADC_ConversionStop>:
  *            @arg ADC_INJECTED_GROUP: ADC injected conversion type.
  *            @arg ADC_REGULAR_INJECTED_GROUP: ADC regular and injected conversion type.
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc, uint32_t ConversionGroup)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b086      	sub	sp, #24
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
 8002f24:	6039      	str	r1, [r7, #0]
  uint32_t tmp_ADC_CR_ADSTART_JADSTART = 0U;
 8002f26:	2300      	movs	r3, #0
 8002f28:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	613b      	str	r3, [r7, #16]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
    
  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	f003 030c 	and.w	r3, r3, #12
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	f000 809b 	beq.w	8003078 <ADC_ConversionStop+0x15c>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1U, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	68db      	ldr	r3, [r3, #12]
 8002f48:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f4c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002f50:	d12a      	bne.n	8002fa8 <ADC_ConversionStop+0x8c>
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	7e5b      	ldrb	r3, [r3, #25]
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8002f56:	2b01      	cmp	r3, #1
 8002f58:	d126      	bne.n	8002fa8 <ADC_ConversionStop+0x8c>
         (hadc->Init.LowPowerAutoWait==ENABLE)                   )
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	7e1b      	ldrb	r3, [r3, #24]
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8002f5e:	2b01      	cmp	r3, #1
 8002f60:	d122      	bne.n	8002fa8 <ADC_ConversionStop+0x8c>
    {
      /* Use stop of regular group */
      ConversionGroup = ADC_REGULAR_GROUP;
 8002f62:	230c      	movs	r3, #12
 8002f64:	603b      	str	r3, [r7, #0]
      
      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8002f66:	e014      	b.n	8002f92 <ADC_ConversionStop+0x76>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4U))
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	4a46      	ldr	r2, [pc, #280]	@ (8003084 <ADC_ConversionStop+0x168>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d90d      	bls.n	8002f8c <ADC_ConversionStop+0x70>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f74:	f043 0210 	orr.w	r2, r3, #16
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f80:	f043 0201 	orr.w	r2, r3, #1
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	645a      	str	r2, [r3, #68]	@ 0x44
          
          return HAL_ERROR;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	e076      	b.n	800307a <ADC_ConversionStop+0x15e>
        }
        Conversion_Timeout_CPU_cycles ++;
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	3301      	adds	r3, #1
 8002f90:	613b      	str	r3, [r7, #16]
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f9c:	2b40      	cmp	r3, #64	@ 0x40
 8002f9e:	d1e3      	bne.n	8002f68 <ADC_ConversionStop+0x4c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	2240      	movs	r2, #64	@ 0x40
 8002fa6:	601a      	str	r2, [r3, #0]
    }
    
    /* Stop potential conversion on going on regular group */
    if (ConversionGroup != ADC_INJECTED_GROUP)
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	2b60      	cmp	r3, #96	@ 0x60
 8002fac:	d015      	beq.n	8002fda <ADC_ConversionStop+0xbe>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	f003 0304 	and.w	r3, r3, #4
 8002fb8:	2b04      	cmp	r3, #4
 8002fba:	d10e      	bne.n	8002fda <ADC_ConversionStop+0xbe>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d107      	bne.n	8002fda <ADC_ConversionStop+0xbe>
      {
        /* Stop conversions on regular group */
        hadc->Instance->CR |= ADC_CR_ADSTP;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	689a      	ldr	r2, [r3, #8]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f042 0210 	orr.w	r2, r2, #16
 8002fd8:	609a      	str	r2, [r3, #8]
      }
    }

    /* Stop potential conversion on going on injected group */
    if (ConversionGroup != ADC_REGULAR_GROUP)
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	2b0c      	cmp	r3, #12
 8002fde:	d015      	beq.n	800300c <ADC_ConversionStop+0xf0>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	689b      	ldr	r3, [r3, #8]
 8002fe6:	f003 0308 	and.w	r3, r3, #8
 8002fea:	2b08      	cmp	r3, #8
 8002fec:	d10e      	bne.n	800300c <ADC_ConversionStop+0xf0>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d107      	bne.n	800300c <ADC_ConversionStop+0xf0>
      {
        /* Stop conversions on injected group */
        hadc->Instance->CR |= ADC_CR_JADSTP;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	689a      	ldr	r2, [r3, #8]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f042 0220 	orr.w	r2, r2, #32
 800300a:	609a      	str	r2, [r3, #8]
      }
    }

    /* Selection of start and stop bits in function of regular or injected group */
    switch(ConversionGroup)
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	2b60      	cmp	r3, #96	@ 0x60
 8003010:	d005      	beq.n	800301e <ADC_ConversionStop+0x102>
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	2b6c      	cmp	r3, #108	@ 0x6c
 8003016:	d105      	bne.n	8003024 <ADC_ConversionStop+0x108>
    {
    case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8003018:	230c      	movs	r3, #12
 800301a:	617b      	str	r3, [r7, #20]
        break;
 800301c:	e005      	b.n	800302a <ADC_ConversionStop+0x10e>
    case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800301e:	2308      	movs	r3, #8
 8003020:	617b      	str	r3, [r7, #20]
        break;
 8003022:	e002      	b.n	800302a <ADC_ConversionStop+0x10e>
    /* Case ADC_REGULAR_GROUP */
    default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8003024:	2304      	movs	r3, #4
 8003026:	617b      	str	r3, [r7, #20]
        break;
 8003028:	bf00      	nop
    }
    
    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800302a:	f7fe fe4b 	bl	8001cc4 <HAL_GetTick>
 800302e:	60f8      	str	r0, [r7, #12]
      
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8003030:	e01b      	b.n	800306a <ADC_ConversionStop+0x14e>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003032:	f7fe fe47 	bl	8001cc4 <HAL_GetTick>
 8003036:	4602      	mov	r2, r0
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	1ad3      	subs	r3, r2, r3
 800303c:	2b0b      	cmp	r3, #11
 800303e:	d914      	bls.n	800306a <ADC_ConversionStop+0x14e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	689a      	ldr	r2, [r3, #8]
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	4013      	ands	r3, r2
 800304a:	2b00      	cmp	r3, #0
 800304c:	d00d      	beq.n	800306a <ADC_ConversionStop+0x14e>
        {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003052:	f043 0210 	orr.w	r2, r3, #16
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800305e:	f043 0201 	orr.w	r2, r3, #1
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	645a      	str	r2, [r3, #68]	@ 0x44
        
        return HAL_ERROR;
 8003066:	2301      	movs	r3, #1
 8003068:	e007      	b.n	800307a <ADC_ConversionStop+0x15e>
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	689a      	ldr	r2, [r3, #8]
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	4013      	ands	r3, r2
 8003074:	2b00      	cmp	r3, #0
 8003076:	d1dc      	bne.n	8003032 <ADC_ConversionStop+0x116>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003078:	2300      	movs	r3, #0
}
 800307a:	4618      	mov	r0, r3
 800307c:	3718      	adds	r7, #24
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}
 8003082:	bf00      	nop
 8003084:	000993ff 	.word	0x000993ff

08003088 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003088:	b480      	push	{r7}
 800308a:	b085      	sub	sp, #20
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	f003 0307 	and.w	r3, r3, #7
 8003096:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003098:	4b0c      	ldr	r3, [pc, #48]	@ (80030cc <__NVIC_SetPriorityGrouping+0x44>)
 800309a:	68db      	ldr	r3, [r3, #12]
 800309c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800309e:	68ba      	ldr	r2, [r7, #8]
 80030a0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80030a4:	4013      	ands	r3, r2
 80030a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80030b0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80030b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80030b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80030ba:	4a04      	ldr	r2, [pc, #16]	@ (80030cc <__NVIC_SetPriorityGrouping+0x44>)
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	60d3      	str	r3, [r2, #12]
}
 80030c0:	bf00      	nop
 80030c2:	3714      	adds	r7, #20
 80030c4:	46bd      	mov	sp, r7
 80030c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ca:	4770      	bx	lr
 80030cc:	e000ed00 	.word	0xe000ed00

080030d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80030d0:	b480      	push	{r7}
 80030d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80030d4:	4b04      	ldr	r3, [pc, #16]	@ (80030e8 <__NVIC_GetPriorityGrouping+0x18>)
 80030d6:	68db      	ldr	r3, [r3, #12]
 80030d8:	0a1b      	lsrs	r3, r3, #8
 80030da:	f003 0307 	and.w	r3, r3, #7
}
 80030de:	4618      	mov	r0, r3
 80030e0:	46bd      	mov	sp, r7
 80030e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e6:	4770      	bx	lr
 80030e8:	e000ed00 	.word	0xe000ed00

080030ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b083      	sub	sp, #12
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	4603      	mov	r3, r0
 80030f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	db0b      	blt.n	8003116 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030fe:	79fb      	ldrb	r3, [r7, #7]
 8003100:	f003 021f 	and.w	r2, r3, #31
 8003104:	4907      	ldr	r1, [pc, #28]	@ (8003124 <__NVIC_EnableIRQ+0x38>)
 8003106:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800310a:	095b      	lsrs	r3, r3, #5
 800310c:	2001      	movs	r0, #1
 800310e:	fa00 f202 	lsl.w	r2, r0, r2
 8003112:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003116:	bf00      	nop
 8003118:	370c      	adds	r7, #12
 800311a:	46bd      	mov	sp, r7
 800311c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003120:	4770      	bx	lr
 8003122:	bf00      	nop
 8003124:	e000e100 	.word	0xe000e100

08003128 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003128:	b480      	push	{r7}
 800312a:	b083      	sub	sp, #12
 800312c:	af00      	add	r7, sp, #0
 800312e:	4603      	mov	r3, r0
 8003130:	6039      	str	r1, [r7, #0]
 8003132:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003134:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003138:	2b00      	cmp	r3, #0
 800313a:	db0a      	blt.n	8003152 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	b2da      	uxtb	r2, r3
 8003140:	490c      	ldr	r1, [pc, #48]	@ (8003174 <__NVIC_SetPriority+0x4c>)
 8003142:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003146:	0112      	lsls	r2, r2, #4
 8003148:	b2d2      	uxtb	r2, r2
 800314a:	440b      	add	r3, r1
 800314c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003150:	e00a      	b.n	8003168 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	b2da      	uxtb	r2, r3
 8003156:	4908      	ldr	r1, [pc, #32]	@ (8003178 <__NVIC_SetPriority+0x50>)
 8003158:	79fb      	ldrb	r3, [r7, #7]
 800315a:	f003 030f 	and.w	r3, r3, #15
 800315e:	3b04      	subs	r3, #4
 8003160:	0112      	lsls	r2, r2, #4
 8003162:	b2d2      	uxtb	r2, r2
 8003164:	440b      	add	r3, r1
 8003166:	761a      	strb	r2, [r3, #24]
}
 8003168:	bf00      	nop
 800316a:	370c      	adds	r7, #12
 800316c:	46bd      	mov	sp, r7
 800316e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003172:	4770      	bx	lr
 8003174:	e000e100 	.word	0xe000e100
 8003178:	e000ed00 	.word	0xe000ed00

0800317c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800317c:	b480      	push	{r7}
 800317e:	b089      	sub	sp, #36	@ 0x24
 8003180:	af00      	add	r7, sp, #0
 8003182:	60f8      	str	r0, [r7, #12]
 8003184:	60b9      	str	r1, [r7, #8]
 8003186:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	f003 0307 	and.w	r3, r3, #7
 800318e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003190:	69fb      	ldr	r3, [r7, #28]
 8003192:	f1c3 0307 	rsb	r3, r3, #7
 8003196:	2b04      	cmp	r3, #4
 8003198:	bf28      	it	cs
 800319a:	2304      	movcs	r3, #4
 800319c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800319e:	69fb      	ldr	r3, [r7, #28]
 80031a0:	3304      	adds	r3, #4
 80031a2:	2b06      	cmp	r3, #6
 80031a4:	d902      	bls.n	80031ac <NVIC_EncodePriority+0x30>
 80031a6:	69fb      	ldr	r3, [r7, #28]
 80031a8:	3b03      	subs	r3, #3
 80031aa:	e000      	b.n	80031ae <NVIC_EncodePriority+0x32>
 80031ac:	2300      	movs	r3, #0
 80031ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031b0:	f04f 32ff 	mov.w	r2, #4294967295
 80031b4:	69bb      	ldr	r3, [r7, #24]
 80031b6:	fa02 f303 	lsl.w	r3, r2, r3
 80031ba:	43da      	mvns	r2, r3
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	401a      	ands	r2, r3
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80031c4:	f04f 31ff 	mov.w	r1, #4294967295
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	fa01 f303 	lsl.w	r3, r1, r3
 80031ce:	43d9      	mvns	r1, r3
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031d4:	4313      	orrs	r3, r2
         );
}
 80031d6:	4618      	mov	r0, r3
 80031d8:	3724      	adds	r7, #36	@ 0x24
 80031da:	46bd      	mov	sp, r7
 80031dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e0:	4770      	bx	lr
	...

080031e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b082      	sub	sp, #8
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	3b01      	subs	r3, #1
 80031f0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80031f4:	d301      	bcc.n	80031fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80031f6:	2301      	movs	r3, #1
 80031f8:	e00f      	b.n	800321a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80031fa:	4a0a      	ldr	r2, [pc, #40]	@ (8003224 <SysTick_Config+0x40>)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	3b01      	subs	r3, #1
 8003200:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003202:	210f      	movs	r1, #15
 8003204:	f04f 30ff 	mov.w	r0, #4294967295
 8003208:	f7ff ff8e 	bl	8003128 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800320c:	4b05      	ldr	r3, [pc, #20]	@ (8003224 <SysTick_Config+0x40>)
 800320e:	2200      	movs	r2, #0
 8003210:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003212:	4b04      	ldr	r3, [pc, #16]	@ (8003224 <SysTick_Config+0x40>)
 8003214:	2207      	movs	r2, #7
 8003216:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003218:	2300      	movs	r3, #0
}
 800321a:	4618      	mov	r0, r3
 800321c:	3708      	adds	r7, #8
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}
 8003222:	bf00      	nop
 8003224:	e000e010 	.word	0xe000e010

08003228 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b082      	sub	sp, #8
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003230:	6878      	ldr	r0, [r7, #4]
 8003232:	f7ff ff29 	bl	8003088 <__NVIC_SetPriorityGrouping>
}
 8003236:	bf00      	nop
 8003238:	3708      	adds	r7, #8
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}

0800323e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800323e:	b580      	push	{r7, lr}
 8003240:	b086      	sub	sp, #24
 8003242:	af00      	add	r7, sp, #0
 8003244:	4603      	mov	r3, r0
 8003246:	60b9      	str	r1, [r7, #8]
 8003248:	607a      	str	r2, [r7, #4]
 800324a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800324c:	2300      	movs	r3, #0
 800324e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003250:	f7ff ff3e 	bl	80030d0 <__NVIC_GetPriorityGrouping>
 8003254:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003256:	687a      	ldr	r2, [r7, #4]
 8003258:	68b9      	ldr	r1, [r7, #8]
 800325a:	6978      	ldr	r0, [r7, #20]
 800325c:	f7ff ff8e 	bl	800317c <NVIC_EncodePriority>
 8003260:	4602      	mov	r2, r0
 8003262:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003266:	4611      	mov	r1, r2
 8003268:	4618      	mov	r0, r3
 800326a:	f7ff ff5d 	bl	8003128 <__NVIC_SetPriority>
}
 800326e:	bf00      	nop
 8003270:	3718      	adds	r7, #24
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}

08003276 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003276:	b580      	push	{r7, lr}
 8003278:	b082      	sub	sp, #8
 800327a:	af00      	add	r7, sp, #0
 800327c:	4603      	mov	r3, r0
 800327e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003280:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003284:	4618      	mov	r0, r3
 8003286:	f7ff ff31 	bl	80030ec <__NVIC_EnableIRQ>
}
 800328a:	bf00      	nop
 800328c:	3708      	adds	r7, #8
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}

08003292 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003292:	b580      	push	{r7, lr}
 8003294:	b082      	sub	sp, #8
 8003296:	af00      	add	r7, sp, #0
 8003298:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	f7ff ffa2 	bl	80031e4 <SysTick_Config>
 80032a0:	4603      	mov	r3, r0
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	3708      	adds	r7, #8
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}
	...

080032ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b087      	sub	sp, #28
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
 80032b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80032b6:	2300      	movs	r3, #0
 80032b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80032ba:	e160      	b.n	800357e <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	681a      	ldr	r2, [r3, #0]
 80032c0:	2101      	movs	r1, #1
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	fa01 f303 	lsl.w	r3, r1, r3
 80032c8:	4013      	ands	r3, r2
 80032ca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	f000 8152 	beq.w	8003578 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	f003 0303 	and.w	r3, r3, #3
 80032dc:	2b01      	cmp	r3, #1
 80032de:	d005      	beq.n	80032ec <HAL_GPIO_Init+0x40>
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	f003 0303 	and.w	r3, r3, #3
 80032e8:	2b02      	cmp	r3, #2
 80032ea:	d130      	bne.n	800334e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	005b      	lsls	r3, r3, #1
 80032f6:	2203      	movs	r2, #3
 80032f8:	fa02 f303 	lsl.w	r3, r2, r3
 80032fc:	43db      	mvns	r3, r3
 80032fe:	693a      	ldr	r2, [r7, #16]
 8003300:	4013      	ands	r3, r2
 8003302:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	68da      	ldr	r2, [r3, #12]
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	005b      	lsls	r3, r3, #1
 800330c:	fa02 f303 	lsl.w	r3, r2, r3
 8003310:	693a      	ldr	r2, [r7, #16]
 8003312:	4313      	orrs	r3, r2
 8003314:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	693a      	ldr	r2, [r7, #16]
 800331a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003322:	2201      	movs	r2, #1
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	fa02 f303 	lsl.w	r3, r2, r3
 800332a:	43db      	mvns	r3, r3
 800332c:	693a      	ldr	r2, [r7, #16]
 800332e:	4013      	ands	r3, r2
 8003330:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	091b      	lsrs	r3, r3, #4
 8003338:	f003 0201 	and.w	r2, r3, #1
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	fa02 f303 	lsl.w	r3, r2, r3
 8003342:	693a      	ldr	r2, [r7, #16]
 8003344:	4313      	orrs	r3, r2
 8003346:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	693a      	ldr	r2, [r7, #16]
 800334c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	f003 0303 	and.w	r3, r3, #3
 8003356:	2b03      	cmp	r3, #3
 8003358:	d017      	beq.n	800338a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	68db      	ldr	r3, [r3, #12]
 800335e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003360:	697b      	ldr	r3, [r7, #20]
 8003362:	005b      	lsls	r3, r3, #1
 8003364:	2203      	movs	r2, #3
 8003366:	fa02 f303 	lsl.w	r3, r2, r3
 800336a:	43db      	mvns	r3, r3
 800336c:	693a      	ldr	r2, [r7, #16]
 800336e:	4013      	ands	r3, r2
 8003370:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	689a      	ldr	r2, [r3, #8]
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	005b      	lsls	r3, r3, #1
 800337a:	fa02 f303 	lsl.w	r3, r2, r3
 800337e:	693a      	ldr	r2, [r7, #16]
 8003380:	4313      	orrs	r3, r2
 8003382:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	693a      	ldr	r2, [r7, #16]
 8003388:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	f003 0303 	and.w	r3, r3, #3
 8003392:	2b02      	cmp	r3, #2
 8003394:	d123      	bne.n	80033de <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	08da      	lsrs	r2, r3, #3
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	3208      	adds	r2, #8
 800339e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033a2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	f003 0307 	and.w	r3, r3, #7
 80033aa:	009b      	lsls	r3, r3, #2
 80033ac:	220f      	movs	r2, #15
 80033ae:	fa02 f303 	lsl.w	r3, r2, r3
 80033b2:	43db      	mvns	r3, r3
 80033b4:	693a      	ldr	r2, [r7, #16]
 80033b6:	4013      	ands	r3, r2
 80033b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	691a      	ldr	r2, [r3, #16]
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	f003 0307 	and.w	r3, r3, #7
 80033c4:	009b      	lsls	r3, r3, #2
 80033c6:	fa02 f303 	lsl.w	r3, r2, r3
 80033ca:	693a      	ldr	r2, [r7, #16]
 80033cc:	4313      	orrs	r3, r2
 80033ce:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	08da      	lsrs	r2, r3, #3
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	3208      	adds	r2, #8
 80033d8:	6939      	ldr	r1, [r7, #16]
 80033da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	005b      	lsls	r3, r3, #1
 80033e8:	2203      	movs	r2, #3
 80033ea:	fa02 f303 	lsl.w	r3, r2, r3
 80033ee:	43db      	mvns	r3, r3
 80033f0:	693a      	ldr	r2, [r7, #16]
 80033f2:	4013      	ands	r3, r2
 80033f4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	f003 0203 	and.w	r2, r3, #3
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	005b      	lsls	r3, r3, #1
 8003402:	fa02 f303 	lsl.w	r3, r2, r3
 8003406:	693a      	ldr	r2, [r7, #16]
 8003408:	4313      	orrs	r3, r2
 800340a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	693a      	ldr	r2, [r7, #16]
 8003410:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800341a:	2b00      	cmp	r3, #0
 800341c:	f000 80ac 	beq.w	8003578 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003420:	4b5e      	ldr	r3, [pc, #376]	@ (800359c <HAL_GPIO_Init+0x2f0>)
 8003422:	699b      	ldr	r3, [r3, #24]
 8003424:	4a5d      	ldr	r2, [pc, #372]	@ (800359c <HAL_GPIO_Init+0x2f0>)
 8003426:	f043 0301 	orr.w	r3, r3, #1
 800342a:	6193      	str	r3, [r2, #24]
 800342c:	4b5b      	ldr	r3, [pc, #364]	@ (800359c <HAL_GPIO_Init+0x2f0>)
 800342e:	699b      	ldr	r3, [r3, #24]
 8003430:	f003 0301 	and.w	r3, r3, #1
 8003434:	60bb      	str	r3, [r7, #8]
 8003436:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003438:	4a59      	ldr	r2, [pc, #356]	@ (80035a0 <HAL_GPIO_Init+0x2f4>)
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	089b      	lsrs	r3, r3, #2
 800343e:	3302      	adds	r3, #2
 8003440:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003444:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003446:	697b      	ldr	r3, [r7, #20]
 8003448:	f003 0303 	and.w	r3, r3, #3
 800344c:	009b      	lsls	r3, r3, #2
 800344e:	220f      	movs	r2, #15
 8003450:	fa02 f303 	lsl.w	r3, r2, r3
 8003454:	43db      	mvns	r3, r3
 8003456:	693a      	ldr	r2, [r7, #16]
 8003458:	4013      	ands	r3, r2
 800345a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003462:	d025      	beq.n	80034b0 <HAL_GPIO_Init+0x204>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	4a4f      	ldr	r2, [pc, #316]	@ (80035a4 <HAL_GPIO_Init+0x2f8>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d01f      	beq.n	80034ac <HAL_GPIO_Init+0x200>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	4a4e      	ldr	r2, [pc, #312]	@ (80035a8 <HAL_GPIO_Init+0x2fc>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d019      	beq.n	80034a8 <HAL_GPIO_Init+0x1fc>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	4a4d      	ldr	r2, [pc, #308]	@ (80035ac <HAL_GPIO_Init+0x300>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d013      	beq.n	80034a4 <HAL_GPIO_Init+0x1f8>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	4a4c      	ldr	r2, [pc, #304]	@ (80035b0 <HAL_GPIO_Init+0x304>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d00d      	beq.n	80034a0 <HAL_GPIO_Init+0x1f4>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	4a4b      	ldr	r2, [pc, #300]	@ (80035b4 <HAL_GPIO_Init+0x308>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d007      	beq.n	800349c <HAL_GPIO_Init+0x1f0>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	4a4a      	ldr	r2, [pc, #296]	@ (80035b8 <HAL_GPIO_Init+0x30c>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d101      	bne.n	8003498 <HAL_GPIO_Init+0x1ec>
 8003494:	2306      	movs	r3, #6
 8003496:	e00c      	b.n	80034b2 <HAL_GPIO_Init+0x206>
 8003498:	2307      	movs	r3, #7
 800349a:	e00a      	b.n	80034b2 <HAL_GPIO_Init+0x206>
 800349c:	2305      	movs	r3, #5
 800349e:	e008      	b.n	80034b2 <HAL_GPIO_Init+0x206>
 80034a0:	2304      	movs	r3, #4
 80034a2:	e006      	b.n	80034b2 <HAL_GPIO_Init+0x206>
 80034a4:	2303      	movs	r3, #3
 80034a6:	e004      	b.n	80034b2 <HAL_GPIO_Init+0x206>
 80034a8:	2302      	movs	r3, #2
 80034aa:	e002      	b.n	80034b2 <HAL_GPIO_Init+0x206>
 80034ac:	2301      	movs	r3, #1
 80034ae:	e000      	b.n	80034b2 <HAL_GPIO_Init+0x206>
 80034b0:	2300      	movs	r3, #0
 80034b2:	697a      	ldr	r2, [r7, #20]
 80034b4:	f002 0203 	and.w	r2, r2, #3
 80034b8:	0092      	lsls	r2, r2, #2
 80034ba:	4093      	lsls	r3, r2
 80034bc:	693a      	ldr	r2, [r7, #16]
 80034be:	4313      	orrs	r3, r2
 80034c0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80034c2:	4937      	ldr	r1, [pc, #220]	@ (80035a0 <HAL_GPIO_Init+0x2f4>)
 80034c4:	697b      	ldr	r3, [r7, #20]
 80034c6:	089b      	lsrs	r3, r3, #2
 80034c8:	3302      	adds	r3, #2
 80034ca:	693a      	ldr	r2, [r7, #16]
 80034cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80034d0:	4b3a      	ldr	r3, [pc, #232]	@ (80035bc <HAL_GPIO_Init+0x310>)
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	43db      	mvns	r3, r3
 80034da:	693a      	ldr	r2, [r7, #16]
 80034dc:	4013      	ands	r3, r2
 80034de:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d003      	beq.n	80034f4 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 80034ec:	693a      	ldr	r2, [r7, #16]
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	4313      	orrs	r3, r2
 80034f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80034f4:	4a31      	ldr	r2, [pc, #196]	@ (80035bc <HAL_GPIO_Init+0x310>)
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80034fa:	4b30      	ldr	r3, [pc, #192]	@ (80035bc <HAL_GPIO_Init+0x310>)
 80034fc:	68db      	ldr	r3, [r3, #12]
 80034fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	43db      	mvns	r3, r3
 8003504:	693a      	ldr	r2, [r7, #16]
 8003506:	4013      	ands	r3, r2
 8003508:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003512:	2b00      	cmp	r3, #0
 8003514:	d003      	beq.n	800351e <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8003516:	693a      	ldr	r2, [r7, #16]
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	4313      	orrs	r3, r2
 800351c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800351e:	4a27      	ldr	r2, [pc, #156]	@ (80035bc <HAL_GPIO_Init+0x310>)
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003524:	4b25      	ldr	r3, [pc, #148]	@ (80035bc <HAL_GPIO_Init+0x310>)
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	43db      	mvns	r3, r3
 800352e:	693a      	ldr	r2, [r7, #16]
 8003530:	4013      	ands	r3, r2
 8003532:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800353c:	2b00      	cmp	r3, #0
 800353e:	d003      	beq.n	8003548 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8003540:	693a      	ldr	r2, [r7, #16]
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	4313      	orrs	r3, r2
 8003546:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003548:	4a1c      	ldr	r2, [pc, #112]	@ (80035bc <HAL_GPIO_Init+0x310>)
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800354e:	4b1b      	ldr	r3, [pc, #108]	@ (80035bc <HAL_GPIO_Init+0x310>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	43db      	mvns	r3, r3
 8003558:	693a      	ldr	r2, [r7, #16]
 800355a:	4013      	ands	r3, r2
 800355c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003566:	2b00      	cmp	r3, #0
 8003568:	d003      	beq.n	8003572 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 800356a:	693a      	ldr	r2, [r7, #16]
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	4313      	orrs	r3, r2
 8003570:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003572:	4a12      	ldr	r2, [pc, #72]	@ (80035bc <HAL_GPIO_Init+0x310>)
 8003574:	693b      	ldr	r3, [r7, #16]
 8003576:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	3301      	adds	r3, #1
 800357c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	681a      	ldr	r2, [r3, #0]
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	fa22 f303 	lsr.w	r3, r2, r3
 8003588:	2b00      	cmp	r3, #0
 800358a:	f47f ae97 	bne.w	80032bc <HAL_GPIO_Init+0x10>
  }
}
 800358e:	bf00      	nop
 8003590:	bf00      	nop
 8003592:	371c      	adds	r7, #28
 8003594:	46bd      	mov	sp, r7
 8003596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359a:	4770      	bx	lr
 800359c:	40021000 	.word	0x40021000
 80035a0:	40010000 	.word	0x40010000
 80035a4:	48000400 	.word	0x48000400
 80035a8:	48000800 	.word	0x48000800
 80035ac:	48000c00 	.word	0x48000c00
 80035b0:	48001000 	.word	0x48001000
 80035b4:	48001400 	.word	0x48001400
 80035b8:	48001800 	.word	0x48001800
 80035bc:	40010400 	.word	0x40010400

080035c0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80035c0:	b480      	push	{r7}
 80035c2:	b085      	sub	sp, #20
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
 80035c8:	460b      	mov	r3, r1
 80035ca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	691a      	ldr	r2, [r3, #16]
 80035d0:	887b      	ldrh	r3, [r7, #2]
 80035d2:	4013      	ands	r3, r2
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d002      	beq.n	80035de <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80035d8:	2301      	movs	r3, #1
 80035da:	73fb      	strb	r3, [r7, #15]
 80035dc:	e001      	b.n	80035e2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80035de:	2300      	movs	r3, #0
 80035e0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80035e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	3714      	adds	r7, #20
 80035e8:	46bd      	mov	sp, r7
 80035ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ee:	4770      	bx	lr

080035f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80035f0:	b480      	push	{r7}
 80035f2:	b083      	sub	sp, #12
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
 80035f8:	460b      	mov	r3, r1
 80035fa:	807b      	strh	r3, [r7, #2]
 80035fc:	4613      	mov	r3, r2
 80035fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003600:	787b      	ldrb	r3, [r7, #1]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d003      	beq.n	800360e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003606:	887a      	ldrh	r2, [r7, #2]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800360c:	e002      	b.n	8003614 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800360e:	887a      	ldrh	r2, [r7, #2]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003614:	bf00      	nop
 8003616:	370c      	adds	r7, #12
 8003618:	46bd      	mov	sp, r7
 800361a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361e:	4770      	bx	lr

08003620 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b082      	sub	sp, #8
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d101      	bne.n	8003632 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	e08d      	b.n	800374e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003638:	b2db      	uxtb	r3, r3
 800363a:	2b00      	cmp	r3, #0
 800363c:	d106      	bne.n	800364c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2200      	movs	r2, #0
 8003642:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003646:	6878      	ldr	r0, [r7, #4]
 8003648:	f7fe f870 	bl	800172c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2224      	movs	r2, #36	@ 0x24
 8003650:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	681a      	ldr	r2, [r3, #0]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f022 0201 	bic.w	r2, r2, #1
 8003662:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	685a      	ldr	r2, [r3, #4]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003670:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	689a      	ldr	r2, [r3, #8]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003680:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	68db      	ldr	r3, [r3, #12]
 8003686:	2b01      	cmp	r3, #1
 8003688:	d107      	bne.n	800369a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	689a      	ldr	r2, [r3, #8]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003696:	609a      	str	r2, [r3, #8]
 8003698:	e006      	b.n	80036a8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	689a      	ldr	r2, [r3, #8]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80036a6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	68db      	ldr	r3, [r3, #12]
 80036ac:	2b02      	cmp	r3, #2
 80036ae:	d108      	bne.n	80036c2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	685a      	ldr	r2, [r3, #4]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80036be:	605a      	str	r2, [r3, #4]
 80036c0:	e007      	b.n	80036d2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	685a      	ldr	r2, [r3, #4]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80036d0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	687a      	ldr	r2, [r7, #4]
 80036da:	6812      	ldr	r2, [r2, #0]
 80036dc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80036e0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80036e4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	68da      	ldr	r2, [r3, #12]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80036f4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	691a      	ldr	r2, [r3, #16]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	695b      	ldr	r3, [r3, #20]
 80036fe:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	699b      	ldr	r3, [r3, #24]
 8003706:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	430a      	orrs	r2, r1
 800370e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	69d9      	ldr	r1, [r3, #28]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6a1a      	ldr	r2, [r3, #32]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	430a      	orrs	r2, r1
 800371e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	681a      	ldr	r2, [r3, #0]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f042 0201 	orr.w	r2, r2, #1
 800372e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2200      	movs	r2, #0
 8003734:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2220      	movs	r2, #32
 800373a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2200      	movs	r2, #0
 8003742:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2200      	movs	r2, #0
 8003748:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800374c:	2300      	movs	r3, #0
}
 800374e:	4618      	mov	r0, r3
 8003750:	3708      	adds	r7, #8
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}
	...

08003758 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b088      	sub	sp, #32
 800375c:	af02      	add	r7, sp, #8
 800375e:	60f8      	str	r0, [r7, #12]
 8003760:	607a      	str	r2, [r7, #4]
 8003762:	461a      	mov	r2, r3
 8003764:	460b      	mov	r3, r1
 8003766:	817b      	strh	r3, [r7, #10]
 8003768:	4613      	mov	r3, r2
 800376a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003772:	b2db      	uxtb	r3, r3
 8003774:	2b20      	cmp	r3, #32
 8003776:	f040 80fd 	bne.w	8003974 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003780:	2b01      	cmp	r3, #1
 8003782:	d101      	bne.n	8003788 <HAL_I2C_Master_Transmit+0x30>
 8003784:	2302      	movs	r3, #2
 8003786:	e0f6      	b.n	8003976 <HAL_I2C_Master_Transmit+0x21e>
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	2201      	movs	r2, #1
 800378c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003790:	f7fe fa98 	bl	8001cc4 <HAL_GetTick>
 8003794:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	9300      	str	r3, [sp, #0]
 800379a:	2319      	movs	r3, #25
 800379c:	2201      	movs	r2, #1
 800379e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80037a2:	68f8      	ldr	r0, [r7, #12]
 80037a4:	f000 fce0 	bl	8004168 <I2C_WaitOnFlagUntilTimeout>
 80037a8:	4603      	mov	r3, r0
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d001      	beq.n	80037b2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	e0e1      	b.n	8003976 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	2221      	movs	r2, #33	@ 0x21
 80037b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	2210      	movs	r2, #16
 80037be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2200      	movs	r2, #0
 80037c6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	687a      	ldr	r2, [r7, #4]
 80037cc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	893a      	ldrh	r2, [r7, #8]
 80037d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	2200      	movs	r2, #0
 80037d8:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037de:	b29b      	uxth	r3, r3
 80037e0:	2bff      	cmp	r3, #255	@ 0xff
 80037e2:	d906      	bls.n	80037f2 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	22ff      	movs	r2, #255	@ 0xff
 80037e8:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80037ea:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80037ee:	617b      	str	r3, [r7, #20]
 80037f0:	e007      	b.n	8003802 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037f6:	b29a      	uxth	r2, r3
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80037fc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003800:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003806:	2b00      	cmp	r3, #0
 8003808:	d024      	beq.n	8003854 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800380e:	781a      	ldrb	r2, [r3, #0]
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800381a:	1c5a      	adds	r2, r3, #1
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003824:	b29b      	uxth	r3, r3
 8003826:	3b01      	subs	r3, #1
 8003828:	b29a      	uxth	r2, r3
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003832:	3b01      	subs	r3, #1
 8003834:	b29a      	uxth	r2, r3
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800383e:	b2db      	uxtb	r3, r3
 8003840:	3301      	adds	r3, #1
 8003842:	b2da      	uxtb	r2, r3
 8003844:	8979      	ldrh	r1, [r7, #10]
 8003846:	4b4e      	ldr	r3, [pc, #312]	@ (8003980 <HAL_I2C_Master_Transmit+0x228>)
 8003848:	9300      	str	r3, [sp, #0]
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	68f8      	ldr	r0, [r7, #12]
 800384e:	f000 fedb 	bl	8004608 <I2C_TransferConfig>
 8003852:	e066      	b.n	8003922 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003858:	b2da      	uxtb	r2, r3
 800385a:	8979      	ldrh	r1, [r7, #10]
 800385c:	4b48      	ldr	r3, [pc, #288]	@ (8003980 <HAL_I2C_Master_Transmit+0x228>)
 800385e:	9300      	str	r3, [sp, #0]
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	68f8      	ldr	r0, [r7, #12]
 8003864:	f000 fed0 	bl	8004608 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003868:	e05b      	b.n	8003922 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800386a:	693a      	ldr	r2, [r7, #16]
 800386c:	6a39      	ldr	r1, [r7, #32]
 800386e:	68f8      	ldr	r0, [r7, #12]
 8003870:	f000 fcd3 	bl	800421a <I2C_WaitOnTXISFlagUntilTimeout>
 8003874:	4603      	mov	r3, r0
 8003876:	2b00      	cmp	r3, #0
 8003878:	d001      	beq.n	800387e <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	e07b      	b.n	8003976 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003882:	781a      	ldrb	r2, [r3, #0]
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800388e:	1c5a      	adds	r2, r3, #1
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003898:	b29b      	uxth	r3, r3
 800389a:	3b01      	subs	r3, #1
 800389c:	b29a      	uxth	r2, r3
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038a6:	3b01      	subs	r3, #1
 80038a8:	b29a      	uxth	r2, r3
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038b2:	b29b      	uxth	r3, r3
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d034      	beq.n	8003922 <HAL_I2C_Master_Transmit+0x1ca>
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d130      	bne.n	8003922 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	9300      	str	r3, [sp, #0]
 80038c4:	6a3b      	ldr	r3, [r7, #32]
 80038c6:	2200      	movs	r2, #0
 80038c8:	2180      	movs	r1, #128	@ 0x80
 80038ca:	68f8      	ldr	r0, [r7, #12]
 80038cc:	f000 fc4c 	bl	8004168 <I2C_WaitOnFlagUntilTimeout>
 80038d0:	4603      	mov	r3, r0
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d001      	beq.n	80038da <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
 80038d8:	e04d      	b.n	8003976 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038de:	b29b      	uxth	r3, r3
 80038e0:	2bff      	cmp	r3, #255	@ 0xff
 80038e2:	d90e      	bls.n	8003902 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	22ff      	movs	r2, #255	@ 0xff
 80038e8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038ee:	b2da      	uxtb	r2, r3
 80038f0:	8979      	ldrh	r1, [r7, #10]
 80038f2:	2300      	movs	r3, #0
 80038f4:	9300      	str	r3, [sp, #0]
 80038f6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80038fa:	68f8      	ldr	r0, [r7, #12]
 80038fc:	f000 fe84 	bl	8004608 <I2C_TransferConfig>
 8003900:	e00f      	b.n	8003922 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003906:	b29a      	uxth	r2, r3
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003910:	b2da      	uxtb	r2, r3
 8003912:	8979      	ldrh	r1, [r7, #10]
 8003914:	2300      	movs	r3, #0
 8003916:	9300      	str	r3, [sp, #0]
 8003918:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800391c:	68f8      	ldr	r0, [r7, #12]
 800391e:	f000 fe73 	bl	8004608 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003926:	b29b      	uxth	r3, r3
 8003928:	2b00      	cmp	r3, #0
 800392a:	d19e      	bne.n	800386a <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800392c:	693a      	ldr	r2, [r7, #16]
 800392e:	6a39      	ldr	r1, [r7, #32]
 8003930:	68f8      	ldr	r0, [r7, #12]
 8003932:	f000 fcb9 	bl	80042a8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003936:	4603      	mov	r3, r0
 8003938:	2b00      	cmp	r3, #0
 800393a:	d001      	beq.n	8003940 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 800393c:	2301      	movs	r3, #1
 800393e:	e01a      	b.n	8003976 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	2220      	movs	r2, #32
 8003946:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	6859      	ldr	r1, [r3, #4]
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681a      	ldr	r2, [r3, #0]
 8003952:	4b0c      	ldr	r3, [pc, #48]	@ (8003984 <HAL_I2C_Master_Transmit+0x22c>)
 8003954:	400b      	ands	r3, r1
 8003956:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	2220      	movs	r2, #32
 800395c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	2200      	movs	r2, #0
 8003964:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	2200      	movs	r2, #0
 800396c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003970:	2300      	movs	r3, #0
 8003972:	e000      	b.n	8003976 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8003974:	2302      	movs	r3, #2
  }
}
 8003976:	4618      	mov	r0, r3
 8003978:	3718      	adds	r7, #24
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}
 800397e:	bf00      	nop
 8003980:	80002000 	.word	0x80002000
 8003984:	fe00e800 	.word	0xfe00e800

08003988 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b088      	sub	sp, #32
 800398c:	af02      	add	r7, sp, #8
 800398e:	60f8      	str	r0, [r7, #12]
 8003990:	607a      	str	r2, [r7, #4]
 8003992:	461a      	mov	r2, r3
 8003994:	460b      	mov	r3, r1
 8003996:	817b      	strh	r3, [r7, #10]
 8003998:	4613      	mov	r3, r2
 800399a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80039a2:	b2db      	uxtb	r3, r3
 80039a4:	2b20      	cmp	r3, #32
 80039a6:	f040 80db 	bne.w	8003b60 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80039b0:	2b01      	cmp	r3, #1
 80039b2:	d101      	bne.n	80039b8 <HAL_I2C_Master_Receive+0x30>
 80039b4:	2302      	movs	r3, #2
 80039b6:	e0d4      	b.n	8003b62 <HAL_I2C_Master_Receive+0x1da>
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	2201      	movs	r2, #1
 80039bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80039c0:	f7fe f980 	bl	8001cc4 <HAL_GetTick>
 80039c4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80039c6:	697b      	ldr	r3, [r7, #20]
 80039c8:	9300      	str	r3, [sp, #0]
 80039ca:	2319      	movs	r3, #25
 80039cc:	2201      	movs	r2, #1
 80039ce:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80039d2:	68f8      	ldr	r0, [r7, #12]
 80039d4:	f000 fbc8 	bl	8004168 <I2C_WaitOnFlagUntilTimeout>
 80039d8:	4603      	mov	r3, r0
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d001      	beq.n	80039e2 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80039de:	2301      	movs	r3, #1
 80039e0:	e0bf      	b.n	8003b62 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	2222      	movs	r2, #34	@ 0x22
 80039e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	2210      	movs	r2, #16
 80039ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	2200      	movs	r2, #0
 80039f6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	687a      	ldr	r2, [r7, #4]
 80039fc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	893a      	ldrh	r2, [r7, #8]
 8003a02:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	2200      	movs	r2, #0
 8003a08:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a0e:	b29b      	uxth	r3, r3
 8003a10:	2bff      	cmp	r3, #255	@ 0xff
 8003a12:	d90e      	bls.n	8003a32 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = 1U;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	2201      	movs	r2, #1
 8003a18:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a1e:	b2da      	uxtb	r2, r3
 8003a20:	8979      	ldrh	r1, [r7, #10]
 8003a22:	4b52      	ldr	r3, [pc, #328]	@ (8003b6c <HAL_I2C_Master_Receive+0x1e4>)
 8003a24:	9300      	str	r3, [sp, #0]
 8003a26:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003a2a:	68f8      	ldr	r0, [r7, #12]
 8003a2c:	f000 fdec 	bl	8004608 <I2C_TransferConfig>
 8003a30:	e06d      	b.n	8003b0e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a36:	b29a      	uxth	r2, r3
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a40:	b2da      	uxtb	r2, r3
 8003a42:	8979      	ldrh	r1, [r7, #10]
 8003a44:	4b49      	ldr	r3, [pc, #292]	@ (8003b6c <HAL_I2C_Master_Receive+0x1e4>)
 8003a46:	9300      	str	r3, [sp, #0]
 8003a48:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003a4c:	68f8      	ldr	r0, [r7, #12]
 8003a4e:	f000 fddb 	bl	8004608 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8003a52:	e05c      	b.n	8003b0e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a54:	697a      	ldr	r2, [r7, #20]
 8003a56:	6a39      	ldr	r1, [r7, #32]
 8003a58:	68f8      	ldr	r0, [r7, #12]
 8003a5a:	f000 fc69 	bl	8004330 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d001      	beq.n	8003a68 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8003a64:	2301      	movs	r3, #1
 8003a66:	e07c      	b.n	8003b62 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a72:	b2d2      	uxtb	r2, r2
 8003a74:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a7a:	1c5a      	adds	r2, r3, #1
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a84:	3b01      	subs	r3, #1
 8003a86:	b29a      	uxth	r2, r3
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a90:	b29b      	uxth	r3, r3
 8003a92:	3b01      	subs	r3, #1
 8003a94:	b29a      	uxth	r2, r3
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a9e:	b29b      	uxth	r3, r3
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d034      	beq.n	8003b0e <HAL_I2C_Master_Receive+0x186>
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d130      	bne.n	8003b0e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	9300      	str	r3, [sp, #0]
 8003ab0:	6a3b      	ldr	r3, [r7, #32]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	2180      	movs	r1, #128	@ 0x80
 8003ab6:	68f8      	ldr	r0, [r7, #12]
 8003ab8:	f000 fb56 	bl	8004168 <I2C_WaitOnFlagUntilTimeout>
 8003abc:	4603      	mov	r3, r0
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d001      	beq.n	8003ac6 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e04d      	b.n	8003b62 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003aca:	b29b      	uxth	r3, r3
 8003acc:	2bff      	cmp	r3, #255	@ 0xff
 8003ace:	d90e      	bls.n	8003aee <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	22ff      	movs	r2, #255	@ 0xff
 8003ad4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ada:	b2da      	uxtb	r2, r3
 8003adc:	8979      	ldrh	r1, [r7, #10]
 8003ade:	2300      	movs	r3, #0
 8003ae0:	9300      	str	r3, [sp, #0]
 8003ae2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003ae6:	68f8      	ldr	r0, [r7, #12]
 8003ae8:	f000 fd8e 	bl	8004608 <I2C_TransferConfig>
 8003aec:	e00f      	b.n	8003b0e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003af2:	b29a      	uxth	r2, r3
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003afc:	b2da      	uxtb	r2, r3
 8003afe:	8979      	ldrh	r1, [r7, #10]
 8003b00:	2300      	movs	r3, #0
 8003b02:	9300      	str	r3, [sp, #0]
 8003b04:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003b08:	68f8      	ldr	r0, [r7, #12]
 8003b0a:	f000 fd7d 	bl	8004608 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b12:	b29b      	uxth	r3, r3
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d19d      	bne.n	8003a54 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b18:	697a      	ldr	r2, [r7, #20]
 8003b1a:	6a39      	ldr	r1, [r7, #32]
 8003b1c:	68f8      	ldr	r0, [r7, #12]
 8003b1e:	f000 fbc3 	bl	80042a8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003b22:	4603      	mov	r3, r0
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d001      	beq.n	8003b2c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	e01a      	b.n	8003b62 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	2220      	movs	r2, #32
 8003b32:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	6859      	ldr	r1, [r3, #4]
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681a      	ldr	r2, [r3, #0]
 8003b3e:	4b0c      	ldr	r3, [pc, #48]	@ (8003b70 <HAL_I2C_Master_Receive+0x1e8>)
 8003b40:	400b      	ands	r3, r1
 8003b42:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	2220      	movs	r2, #32
 8003b48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	2200      	movs	r2, #0
 8003b58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	e000      	b.n	8003b62 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8003b60:	2302      	movs	r3, #2
  }
}
 8003b62:	4618      	mov	r0, r3
 8003b64:	3718      	adds	r7, #24
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}
 8003b6a:	bf00      	nop
 8003b6c:	80002400 	.word	0x80002400
 8003b70:	fe00e800 	.word	0xfe00e800

08003b74 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b088      	sub	sp, #32
 8003b78:	af02      	add	r7, sp, #8
 8003b7a:	60f8      	str	r0, [r7, #12]
 8003b7c:	4608      	mov	r0, r1
 8003b7e:	4611      	mov	r1, r2
 8003b80:	461a      	mov	r2, r3
 8003b82:	4603      	mov	r3, r0
 8003b84:	817b      	strh	r3, [r7, #10]
 8003b86:	460b      	mov	r3, r1
 8003b88:	813b      	strh	r3, [r7, #8]
 8003b8a:	4613      	mov	r3, r2
 8003b8c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b94:	b2db      	uxtb	r3, r3
 8003b96:	2b20      	cmp	r3, #32
 8003b98:	f040 80f9 	bne.w	8003d8e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b9c:	6a3b      	ldr	r3, [r7, #32]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d002      	beq.n	8003ba8 <HAL_I2C_Mem_Write+0x34>
 8003ba2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d105      	bne.n	8003bb4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003bae:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	e0ed      	b.n	8003d90 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003bba:	2b01      	cmp	r3, #1
 8003bbc:	d101      	bne.n	8003bc2 <HAL_I2C_Mem_Write+0x4e>
 8003bbe:	2302      	movs	r3, #2
 8003bc0:	e0e6      	b.n	8003d90 <HAL_I2C_Mem_Write+0x21c>
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	2201      	movs	r2, #1
 8003bc6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003bca:	f7fe f87b 	bl	8001cc4 <HAL_GetTick>
 8003bce:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003bd0:	697b      	ldr	r3, [r7, #20]
 8003bd2:	9300      	str	r3, [sp, #0]
 8003bd4:	2319      	movs	r3, #25
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003bdc:	68f8      	ldr	r0, [r7, #12]
 8003bde:	f000 fac3 	bl	8004168 <I2C_WaitOnFlagUntilTimeout>
 8003be2:	4603      	mov	r3, r0
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d001      	beq.n	8003bec <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003be8:	2301      	movs	r3, #1
 8003bea:	e0d1      	b.n	8003d90 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	2221      	movs	r2, #33	@ 0x21
 8003bf0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	2240      	movs	r2, #64	@ 0x40
 8003bf8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	6a3a      	ldr	r2, [r7, #32]
 8003c06:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003c0c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	2200      	movs	r2, #0
 8003c12:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003c14:	88f8      	ldrh	r0, [r7, #6]
 8003c16:	893a      	ldrh	r2, [r7, #8]
 8003c18:	8979      	ldrh	r1, [r7, #10]
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	9301      	str	r3, [sp, #4]
 8003c1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c20:	9300      	str	r3, [sp, #0]
 8003c22:	4603      	mov	r3, r0
 8003c24:	68f8      	ldr	r0, [r7, #12]
 8003c26:	f000 f9d3 	bl	8003fd0 <I2C_RequestMemoryWrite>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d005      	beq.n	8003c3c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	2200      	movs	r2, #0
 8003c34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	e0a9      	b.n	8003d90 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c40:	b29b      	uxth	r3, r3
 8003c42:	2bff      	cmp	r3, #255	@ 0xff
 8003c44:	d90e      	bls.n	8003c64 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	22ff      	movs	r2, #255	@ 0xff
 8003c4a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c50:	b2da      	uxtb	r2, r3
 8003c52:	8979      	ldrh	r1, [r7, #10]
 8003c54:	2300      	movs	r3, #0
 8003c56:	9300      	str	r3, [sp, #0]
 8003c58:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003c5c:	68f8      	ldr	r0, [r7, #12]
 8003c5e:	f000 fcd3 	bl	8004608 <I2C_TransferConfig>
 8003c62:	e00f      	b.n	8003c84 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c68:	b29a      	uxth	r2, r3
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c72:	b2da      	uxtb	r2, r3
 8003c74:	8979      	ldrh	r1, [r7, #10]
 8003c76:	2300      	movs	r3, #0
 8003c78:	9300      	str	r3, [sp, #0]
 8003c7a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003c7e:	68f8      	ldr	r0, [r7, #12]
 8003c80:	f000 fcc2 	bl	8004608 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c84:	697a      	ldr	r2, [r7, #20]
 8003c86:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003c88:	68f8      	ldr	r0, [r7, #12]
 8003c8a:	f000 fac6 	bl	800421a <I2C_WaitOnTXISFlagUntilTimeout>
 8003c8e:	4603      	mov	r3, r0
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d001      	beq.n	8003c98 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003c94:	2301      	movs	r3, #1
 8003c96:	e07b      	b.n	8003d90 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c9c:	781a      	ldrb	r2, [r3, #0]
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ca8:	1c5a      	adds	r2, r3, #1
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cb2:	b29b      	uxth	r3, r3
 8003cb4:	3b01      	subs	r3, #1
 8003cb6:	b29a      	uxth	r2, r3
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cc0:	3b01      	subs	r3, #1
 8003cc2:	b29a      	uxth	r2, r3
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ccc:	b29b      	uxth	r3, r3
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d034      	beq.n	8003d3c <HAL_I2C_Mem_Write+0x1c8>
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d130      	bne.n	8003d3c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	9300      	str	r3, [sp, #0]
 8003cde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	2180      	movs	r1, #128	@ 0x80
 8003ce4:	68f8      	ldr	r0, [r7, #12]
 8003ce6:	f000 fa3f 	bl	8004168 <I2C_WaitOnFlagUntilTimeout>
 8003cea:	4603      	mov	r3, r0
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d001      	beq.n	8003cf4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	e04d      	b.n	8003d90 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cf8:	b29b      	uxth	r3, r3
 8003cfa:	2bff      	cmp	r3, #255	@ 0xff
 8003cfc:	d90e      	bls.n	8003d1c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	22ff      	movs	r2, #255	@ 0xff
 8003d02:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d08:	b2da      	uxtb	r2, r3
 8003d0a:	8979      	ldrh	r1, [r7, #10]
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	9300      	str	r3, [sp, #0]
 8003d10:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003d14:	68f8      	ldr	r0, [r7, #12]
 8003d16:	f000 fc77 	bl	8004608 <I2C_TransferConfig>
 8003d1a:	e00f      	b.n	8003d3c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d20:	b29a      	uxth	r2, r3
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d2a:	b2da      	uxtb	r2, r3
 8003d2c:	8979      	ldrh	r1, [r7, #10]
 8003d2e:	2300      	movs	r3, #0
 8003d30:	9300      	str	r3, [sp, #0]
 8003d32:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003d36:	68f8      	ldr	r0, [r7, #12]
 8003d38:	f000 fc66 	bl	8004608 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d40:	b29b      	uxth	r3, r3
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d19e      	bne.n	8003c84 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d46:	697a      	ldr	r2, [r7, #20]
 8003d48:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003d4a:	68f8      	ldr	r0, [r7, #12]
 8003d4c:	f000 faac 	bl	80042a8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003d50:	4603      	mov	r3, r0
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d001      	beq.n	8003d5a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003d56:	2301      	movs	r3, #1
 8003d58:	e01a      	b.n	8003d90 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	2220      	movs	r2, #32
 8003d60:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	6859      	ldr	r1, [r3, #4]
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681a      	ldr	r2, [r3, #0]
 8003d6c:	4b0a      	ldr	r3, [pc, #40]	@ (8003d98 <HAL_I2C_Mem_Write+0x224>)
 8003d6e:	400b      	ands	r3, r1
 8003d70:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	2220      	movs	r2, #32
 8003d76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	2200      	movs	r2, #0
 8003d86:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	e000      	b.n	8003d90 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003d8e:	2302      	movs	r3, #2
  }
}
 8003d90:	4618      	mov	r0, r3
 8003d92:	3718      	adds	r7, #24
 8003d94:	46bd      	mov	sp, r7
 8003d96:	bd80      	pop	{r7, pc}
 8003d98:	fe00e800 	.word	0xfe00e800

08003d9c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b088      	sub	sp, #32
 8003da0:	af02      	add	r7, sp, #8
 8003da2:	60f8      	str	r0, [r7, #12]
 8003da4:	4608      	mov	r0, r1
 8003da6:	4611      	mov	r1, r2
 8003da8:	461a      	mov	r2, r3
 8003daa:	4603      	mov	r3, r0
 8003dac:	817b      	strh	r3, [r7, #10]
 8003dae:	460b      	mov	r3, r1
 8003db0:	813b      	strh	r3, [r7, #8]
 8003db2:	4613      	mov	r3, r2
 8003db4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003dbc:	b2db      	uxtb	r3, r3
 8003dbe:	2b20      	cmp	r3, #32
 8003dc0:	f040 80fd 	bne.w	8003fbe <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003dc4:	6a3b      	ldr	r3, [r7, #32]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d002      	beq.n	8003dd0 <HAL_I2C_Mem_Read+0x34>
 8003dca:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d105      	bne.n	8003ddc <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003dd6:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	e0f1      	b.n	8003fc0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003de2:	2b01      	cmp	r3, #1
 8003de4:	d101      	bne.n	8003dea <HAL_I2C_Mem_Read+0x4e>
 8003de6:	2302      	movs	r3, #2
 8003de8:	e0ea      	b.n	8003fc0 <HAL_I2C_Mem_Read+0x224>
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	2201      	movs	r2, #1
 8003dee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003df2:	f7fd ff67 	bl	8001cc4 <HAL_GetTick>
 8003df6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	9300      	str	r3, [sp, #0]
 8003dfc:	2319      	movs	r3, #25
 8003dfe:	2201      	movs	r2, #1
 8003e00:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003e04:	68f8      	ldr	r0, [r7, #12]
 8003e06:	f000 f9af 	bl	8004168 <I2C_WaitOnFlagUntilTimeout>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d001      	beq.n	8003e14 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003e10:	2301      	movs	r3, #1
 8003e12:	e0d5      	b.n	8003fc0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	2222      	movs	r2, #34	@ 0x22
 8003e18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	2240      	movs	r2, #64	@ 0x40
 8003e20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	2200      	movs	r2, #0
 8003e28:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	6a3a      	ldr	r2, [r7, #32]
 8003e2e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003e34:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003e3c:	88f8      	ldrh	r0, [r7, #6]
 8003e3e:	893a      	ldrh	r2, [r7, #8]
 8003e40:	8979      	ldrh	r1, [r7, #10]
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	9301      	str	r3, [sp, #4]
 8003e46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e48:	9300      	str	r3, [sp, #0]
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	68f8      	ldr	r0, [r7, #12]
 8003e4e:	f000 f913 	bl	8004078 <I2C_RequestMemoryRead>
 8003e52:	4603      	mov	r3, r0
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d005      	beq.n	8003e64 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8003e60:	2301      	movs	r3, #1
 8003e62:	e0ad      	b.n	8003fc0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e68:	b29b      	uxth	r3, r3
 8003e6a:	2bff      	cmp	r3, #255	@ 0xff
 8003e6c:	d90e      	bls.n	8003e8c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	2201      	movs	r2, #1
 8003e72:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e78:	b2da      	uxtb	r2, r3
 8003e7a:	8979      	ldrh	r1, [r7, #10]
 8003e7c:	4b52      	ldr	r3, [pc, #328]	@ (8003fc8 <HAL_I2C_Mem_Read+0x22c>)
 8003e7e:	9300      	str	r3, [sp, #0]
 8003e80:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003e84:	68f8      	ldr	r0, [r7, #12]
 8003e86:	f000 fbbf 	bl	8004608 <I2C_TransferConfig>
 8003e8a:	e00f      	b.n	8003eac <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e90:	b29a      	uxth	r2, r3
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e9a:	b2da      	uxtb	r2, r3
 8003e9c:	8979      	ldrh	r1, [r7, #10]
 8003e9e:	4b4a      	ldr	r3, [pc, #296]	@ (8003fc8 <HAL_I2C_Mem_Read+0x22c>)
 8003ea0:	9300      	str	r3, [sp, #0]
 8003ea2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003ea6:	68f8      	ldr	r0, [r7, #12]
 8003ea8:	f000 fbae 	bl	8004608 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003eac:	697b      	ldr	r3, [r7, #20]
 8003eae:	9300      	str	r3, [sp, #0]
 8003eb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	2104      	movs	r1, #4
 8003eb6:	68f8      	ldr	r0, [r7, #12]
 8003eb8:	f000 f956 	bl	8004168 <I2C_WaitOnFlagUntilTimeout>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d001      	beq.n	8003ec6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	e07c      	b.n	8003fc0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ed0:	b2d2      	uxtb	r2, r2
 8003ed2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ed8:	1c5a      	adds	r2, r3, #1
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ee2:	3b01      	subs	r3, #1
 8003ee4:	b29a      	uxth	r2, r3
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003eee:	b29b      	uxth	r3, r3
 8003ef0:	3b01      	subs	r3, #1
 8003ef2:	b29a      	uxth	r2, r3
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003efc:	b29b      	uxth	r3, r3
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d034      	beq.n	8003f6c <HAL_I2C_Mem_Read+0x1d0>
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d130      	bne.n	8003f6c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	9300      	str	r3, [sp, #0]
 8003f0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f10:	2200      	movs	r2, #0
 8003f12:	2180      	movs	r1, #128	@ 0x80
 8003f14:	68f8      	ldr	r0, [r7, #12]
 8003f16:	f000 f927 	bl	8004168 <I2C_WaitOnFlagUntilTimeout>
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d001      	beq.n	8003f24 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003f20:	2301      	movs	r3, #1
 8003f22:	e04d      	b.n	8003fc0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f28:	b29b      	uxth	r3, r3
 8003f2a:	2bff      	cmp	r3, #255	@ 0xff
 8003f2c:	d90e      	bls.n	8003f4c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	2201      	movs	r2, #1
 8003f32:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f38:	b2da      	uxtb	r2, r3
 8003f3a:	8979      	ldrh	r1, [r7, #10]
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	9300      	str	r3, [sp, #0]
 8003f40:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003f44:	68f8      	ldr	r0, [r7, #12]
 8003f46:	f000 fb5f 	bl	8004608 <I2C_TransferConfig>
 8003f4a:	e00f      	b.n	8003f6c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f50:	b29a      	uxth	r2, r3
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f5a:	b2da      	uxtb	r2, r3
 8003f5c:	8979      	ldrh	r1, [r7, #10]
 8003f5e:	2300      	movs	r3, #0
 8003f60:	9300      	str	r3, [sp, #0]
 8003f62:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003f66:	68f8      	ldr	r0, [r7, #12]
 8003f68:	f000 fb4e 	bl	8004608 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f70:	b29b      	uxth	r3, r3
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d19a      	bne.n	8003eac <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f76:	697a      	ldr	r2, [r7, #20]
 8003f78:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003f7a:	68f8      	ldr	r0, [r7, #12]
 8003f7c:	f000 f994 	bl	80042a8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003f80:	4603      	mov	r3, r0
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d001      	beq.n	8003f8a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
 8003f88:	e01a      	b.n	8003fc0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	2220      	movs	r2, #32
 8003f90:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	6859      	ldr	r1, [r3, #4]
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681a      	ldr	r2, [r3, #0]
 8003f9c:	4b0b      	ldr	r3, [pc, #44]	@ (8003fcc <HAL_I2C_Mem_Read+0x230>)
 8003f9e:	400b      	ands	r3, r1
 8003fa0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	2220      	movs	r2, #32
 8003fa6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	2200      	movs	r2, #0
 8003fae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003fba:	2300      	movs	r3, #0
 8003fbc:	e000      	b.n	8003fc0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003fbe:	2302      	movs	r3, #2
  }
}
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	3718      	adds	r7, #24
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	bd80      	pop	{r7, pc}
 8003fc8:	80002400 	.word	0x80002400
 8003fcc:	fe00e800 	.word	0xfe00e800

08003fd0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b086      	sub	sp, #24
 8003fd4:	af02      	add	r7, sp, #8
 8003fd6:	60f8      	str	r0, [r7, #12]
 8003fd8:	4608      	mov	r0, r1
 8003fda:	4611      	mov	r1, r2
 8003fdc:	461a      	mov	r2, r3
 8003fde:	4603      	mov	r3, r0
 8003fe0:	817b      	strh	r3, [r7, #10]
 8003fe2:	460b      	mov	r3, r1
 8003fe4:	813b      	strh	r3, [r7, #8]
 8003fe6:	4613      	mov	r3, r2
 8003fe8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003fea:	88fb      	ldrh	r3, [r7, #6]
 8003fec:	b2da      	uxtb	r2, r3
 8003fee:	8979      	ldrh	r1, [r7, #10]
 8003ff0:	4b20      	ldr	r3, [pc, #128]	@ (8004074 <I2C_RequestMemoryWrite+0xa4>)
 8003ff2:	9300      	str	r3, [sp, #0]
 8003ff4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003ff8:	68f8      	ldr	r0, [r7, #12]
 8003ffa:	f000 fb05 	bl	8004608 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ffe:	69fa      	ldr	r2, [r7, #28]
 8004000:	69b9      	ldr	r1, [r7, #24]
 8004002:	68f8      	ldr	r0, [r7, #12]
 8004004:	f000 f909 	bl	800421a <I2C_WaitOnTXISFlagUntilTimeout>
 8004008:	4603      	mov	r3, r0
 800400a:	2b00      	cmp	r3, #0
 800400c:	d001      	beq.n	8004012 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800400e:	2301      	movs	r3, #1
 8004010:	e02c      	b.n	800406c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004012:	88fb      	ldrh	r3, [r7, #6]
 8004014:	2b01      	cmp	r3, #1
 8004016:	d105      	bne.n	8004024 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004018:	893b      	ldrh	r3, [r7, #8]
 800401a:	b2da      	uxtb	r2, r3
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	629a      	str	r2, [r3, #40]	@ 0x28
 8004022:	e015      	b.n	8004050 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004024:	893b      	ldrh	r3, [r7, #8]
 8004026:	0a1b      	lsrs	r3, r3, #8
 8004028:	b29b      	uxth	r3, r3
 800402a:	b2da      	uxtb	r2, r3
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004032:	69fa      	ldr	r2, [r7, #28]
 8004034:	69b9      	ldr	r1, [r7, #24]
 8004036:	68f8      	ldr	r0, [r7, #12]
 8004038:	f000 f8ef 	bl	800421a <I2C_WaitOnTXISFlagUntilTimeout>
 800403c:	4603      	mov	r3, r0
 800403e:	2b00      	cmp	r3, #0
 8004040:	d001      	beq.n	8004046 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004042:	2301      	movs	r3, #1
 8004044:	e012      	b.n	800406c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004046:	893b      	ldrh	r3, [r7, #8]
 8004048:	b2da      	uxtb	r2, r3
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004050:	69fb      	ldr	r3, [r7, #28]
 8004052:	9300      	str	r3, [sp, #0]
 8004054:	69bb      	ldr	r3, [r7, #24]
 8004056:	2200      	movs	r2, #0
 8004058:	2180      	movs	r1, #128	@ 0x80
 800405a:	68f8      	ldr	r0, [r7, #12]
 800405c:	f000 f884 	bl	8004168 <I2C_WaitOnFlagUntilTimeout>
 8004060:	4603      	mov	r3, r0
 8004062:	2b00      	cmp	r3, #0
 8004064:	d001      	beq.n	800406a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004066:	2301      	movs	r3, #1
 8004068:	e000      	b.n	800406c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800406a:	2300      	movs	r3, #0
}
 800406c:	4618      	mov	r0, r3
 800406e:	3710      	adds	r7, #16
 8004070:	46bd      	mov	sp, r7
 8004072:	bd80      	pop	{r7, pc}
 8004074:	80002000 	.word	0x80002000

08004078 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b086      	sub	sp, #24
 800407c:	af02      	add	r7, sp, #8
 800407e:	60f8      	str	r0, [r7, #12]
 8004080:	4608      	mov	r0, r1
 8004082:	4611      	mov	r1, r2
 8004084:	461a      	mov	r2, r3
 8004086:	4603      	mov	r3, r0
 8004088:	817b      	strh	r3, [r7, #10]
 800408a:	460b      	mov	r3, r1
 800408c:	813b      	strh	r3, [r7, #8]
 800408e:	4613      	mov	r3, r2
 8004090:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004092:	88fb      	ldrh	r3, [r7, #6]
 8004094:	b2da      	uxtb	r2, r3
 8004096:	8979      	ldrh	r1, [r7, #10]
 8004098:	4b20      	ldr	r3, [pc, #128]	@ (800411c <I2C_RequestMemoryRead+0xa4>)
 800409a:	9300      	str	r3, [sp, #0]
 800409c:	2300      	movs	r3, #0
 800409e:	68f8      	ldr	r0, [r7, #12]
 80040a0:	f000 fab2 	bl	8004608 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80040a4:	69fa      	ldr	r2, [r7, #28]
 80040a6:	69b9      	ldr	r1, [r7, #24]
 80040a8:	68f8      	ldr	r0, [r7, #12]
 80040aa:	f000 f8b6 	bl	800421a <I2C_WaitOnTXISFlagUntilTimeout>
 80040ae:	4603      	mov	r3, r0
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d001      	beq.n	80040b8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80040b4:	2301      	movs	r3, #1
 80040b6:	e02c      	b.n	8004112 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80040b8:	88fb      	ldrh	r3, [r7, #6]
 80040ba:	2b01      	cmp	r3, #1
 80040bc:	d105      	bne.n	80040ca <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80040be:	893b      	ldrh	r3, [r7, #8]
 80040c0:	b2da      	uxtb	r2, r3
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	629a      	str	r2, [r3, #40]	@ 0x28
 80040c8:	e015      	b.n	80040f6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80040ca:	893b      	ldrh	r3, [r7, #8]
 80040cc:	0a1b      	lsrs	r3, r3, #8
 80040ce:	b29b      	uxth	r3, r3
 80040d0:	b2da      	uxtb	r2, r3
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80040d8:	69fa      	ldr	r2, [r7, #28]
 80040da:	69b9      	ldr	r1, [r7, #24]
 80040dc:	68f8      	ldr	r0, [r7, #12]
 80040de:	f000 f89c 	bl	800421a <I2C_WaitOnTXISFlagUntilTimeout>
 80040e2:	4603      	mov	r3, r0
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d001      	beq.n	80040ec <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80040e8:	2301      	movs	r3, #1
 80040ea:	e012      	b.n	8004112 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80040ec:	893b      	ldrh	r3, [r7, #8]
 80040ee:	b2da      	uxtb	r2, r3
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80040f6:	69fb      	ldr	r3, [r7, #28]
 80040f8:	9300      	str	r3, [sp, #0]
 80040fa:	69bb      	ldr	r3, [r7, #24]
 80040fc:	2200      	movs	r2, #0
 80040fe:	2140      	movs	r1, #64	@ 0x40
 8004100:	68f8      	ldr	r0, [r7, #12]
 8004102:	f000 f831 	bl	8004168 <I2C_WaitOnFlagUntilTimeout>
 8004106:	4603      	mov	r3, r0
 8004108:	2b00      	cmp	r3, #0
 800410a:	d001      	beq.n	8004110 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800410c:	2301      	movs	r3, #1
 800410e:	e000      	b.n	8004112 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004110:	2300      	movs	r3, #0
}
 8004112:	4618      	mov	r0, r3
 8004114:	3710      	adds	r7, #16
 8004116:	46bd      	mov	sp, r7
 8004118:	bd80      	pop	{r7, pc}
 800411a:	bf00      	nop
 800411c:	80002000 	.word	0x80002000

08004120 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004120:	b480      	push	{r7}
 8004122:	b083      	sub	sp, #12
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	699b      	ldr	r3, [r3, #24]
 800412e:	f003 0302 	and.w	r3, r3, #2
 8004132:	2b02      	cmp	r3, #2
 8004134:	d103      	bne.n	800413e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	2200      	movs	r2, #0
 800413c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	699b      	ldr	r3, [r3, #24]
 8004144:	f003 0301 	and.w	r3, r3, #1
 8004148:	2b01      	cmp	r3, #1
 800414a:	d007      	beq.n	800415c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	699a      	ldr	r2, [r3, #24]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f042 0201 	orr.w	r2, r2, #1
 800415a:	619a      	str	r2, [r3, #24]
  }
}
 800415c:	bf00      	nop
 800415e:	370c      	adds	r7, #12
 8004160:	46bd      	mov	sp, r7
 8004162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004166:	4770      	bx	lr

08004168 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b084      	sub	sp, #16
 800416c:	af00      	add	r7, sp, #0
 800416e:	60f8      	str	r0, [r7, #12]
 8004170:	60b9      	str	r1, [r7, #8]
 8004172:	603b      	str	r3, [r7, #0]
 8004174:	4613      	mov	r3, r2
 8004176:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004178:	e03b      	b.n	80041f2 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800417a:	69ba      	ldr	r2, [r7, #24]
 800417c:	6839      	ldr	r1, [r7, #0]
 800417e:	68f8      	ldr	r0, [r7, #12]
 8004180:	f000 f962 	bl	8004448 <I2C_IsErrorOccurred>
 8004184:	4603      	mov	r3, r0
 8004186:	2b00      	cmp	r3, #0
 8004188:	d001      	beq.n	800418e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800418a:	2301      	movs	r3, #1
 800418c:	e041      	b.n	8004212 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004194:	d02d      	beq.n	80041f2 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004196:	f7fd fd95 	bl	8001cc4 <HAL_GetTick>
 800419a:	4602      	mov	r2, r0
 800419c:	69bb      	ldr	r3, [r7, #24]
 800419e:	1ad3      	subs	r3, r2, r3
 80041a0:	683a      	ldr	r2, [r7, #0]
 80041a2:	429a      	cmp	r2, r3
 80041a4:	d302      	bcc.n	80041ac <I2C_WaitOnFlagUntilTimeout+0x44>
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d122      	bne.n	80041f2 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	699a      	ldr	r2, [r3, #24]
 80041b2:	68bb      	ldr	r3, [r7, #8]
 80041b4:	4013      	ands	r3, r2
 80041b6:	68ba      	ldr	r2, [r7, #8]
 80041b8:	429a      	cmp	r2, r3
 80041ba:	bf0c      	ite	eq
 80041bc:	2301      	moveq	r3, #1
 80041be:	2300      	movne	r3, #0
 80041c0:	b2db      	uxtb	r3, r3
 80041c2:	461a      	mov	r2, r3
 80041c4:	79fb      	ldrb	r3, [r7, #7]
 80041c6:	429a      	cmp	r2, r3
 80041c8:	d113      	bne.n	80041f2 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041ce:	f043 0220 	orr.w	r2, r3, #32
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	2220      	movs	r2, #32
 80041da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	2200      	movs	r2, #0
 80041e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	2200      	movs	r2, #0
 80041ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80041ee:	2301      	movs	r3, #1
 80041f0:	e00f      	b.n	8004212 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	699a      	ldr	r2, [r3, #24]
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	4013      	ands	r3, r2
 80041fc:	68ba      	ldr	r2, [r7, #8]
 80041fe:	429a      	cmp	r2, r3
 8004200:	bf0c      	ite	eq
 8004202:	2301      	moveq	r3, #1
 8004204:	2300      	movne	r3, #0
 8004206:	b2db      	uxtb	r3, r3
 8004208:	461a      	mov	r2, r3
 800420a:	79fb      	ldrb	r3, [r7, #7]
 800420c:	429a      	cmp	r2, r3
 800420e:	d0b4      	beq.n	800417a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004210:	2300      	movs	r3, #0
}
 8004212:	4618      	mov	r0, r3
 8004214:	3710      	adds	r7, #16
 8004216:	46bd      	mov	sp, r7
 8004218:	bd80      	pop	{r7, pc}

0800421a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800421a:	b580      	push	{r7, lr}
 800421c:	b084      	sub	sp, #16
 800421e:	af00      	add	r7, sp, #0
 8004220:	60f8      	str	r0, [r7, #12]
 8004222:	60b9      	str	r1, [r7, #8]
 8004224:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004226:	e033      	b.n	8004290 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004228:	687a      	ldr	r2, [r7, #4]
 800422a:	68b9      	ldr	r1, [r7, #8]
 800422c:	68f8      	ldr	r0, [r7, #12]
 800422e:	f000 f90b 	bl	8004448 <I2C_IsErrorOccurred>
 8004232:	4603      	mov	r3, r0
 8004234:	2b00      	cmp	r3, #0
 8004236:	d001      	beq.n	800423c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004238:	2301      	movs	r3, #1
 800423a:	e031      	b.n	80042a0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800423c:	68bb      	ldr	r3, [r7, #8]
 800423e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004242:	d025      	beq.n	8004290 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004244:	f7fd fd3e 	bl	8001cc4 <HAL_GetTick>
 8004248:	4602      	mov	r2, r0
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	1ad3      	subs	r3, r2, r3
 800424e:	68ba      	ldr	r2, [r7, #8]
 8004250:	429a      	cmp	r2, r3
 8004252:	d302      	bcc.n	800425a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d11a      	bne.n	8004290 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	699b      	ldr	r3, [r3, #24]
 8004260:	f003 0302 	and.w	r3, r3, #2
 8004264:	2b02      	cmp	r3, #2
 8004266:	d013      	beq.n	8004290 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800426c:	f043 0220 	orr.w	r2, r3, #32
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	2220      	movs	r2, #32
 8004278:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	2200      	movs	r2, #0
 8004280:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	2200      	movs	r2, #0
 8004288:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800428c:	2301      	movs	r3, #1
 800428e:	e007      	b.n	80042a0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	699b      	ldr	r3, [r3, #24]
 8004296:	f003 0302 	and.w	r3, r3, #2
 800429a:	2b02      	cmp	r3, #2
 800429c:	d1c4      	bne.n	8004228 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800429e:	2300      	movs	r3, #0
}
 80042a0:	4618      	mov	r0, r3
 80042a2:	3710      	adds	r7, #16
 80042a4:	46bd      	mov	sp, r7
 80042a6:	bd80      	pop	{r7, pc}

080042a8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b084      	sub	sp, #16
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	60f8      	str	r0, [r7, #12]
 80042b0:	60b9      	str	r1, [r7, #8]
 80042b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80042b4:	e02f      	b.n	8004316 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80042b6:	687a      	ldr	r2, [r7, #4]
 80042b8:	68b9      	ldr	r1, [r7, #8]
 80042ba:	68f8      	ldr	r0, [r7, #12]
 80042bc:	f000 f8c4 	bl	8004448 <I2C_IsErrorOccurred>
 80042c0:	4603      	mov	r3, r0
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d001      	beq.n	80042ca <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80042c6:	2301      	movs	r3, #1
 80042c8:	e02d      	b.n	8004326 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042ca:	f7fd fcfb 	bl	8001cc4 <HAL_GetTick>
 80042ce:	4602      	mov	r2, r0
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	1ad3      	subs	r3, r2, r3
 80042d4:	68ba      	ldr	r2, [r7, #8]
 80042d6:	429a      	cmp	r2, r3
 80042d8:	d302      	bcc.n	80042e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d11a      	bne.n	8004316 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	699b      	ldr	r3, [r3, #24]
 80042e6:	f003 0320 	and.w	r3, r3, #32
 80042ea:	2b20      	cmp	r3, #32
 80042ec:	d013      	beq.n	8004316 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042f2:	f043 0220 	orr.w	r2, r3, #32
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	2220      	movs	r2, #32
 80042fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	2200      	movs	r2, #0
 8004306:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	2200      	movs	r2, #0
 800430e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8004312:	2301      	movs	r3, #1
 8004314:	e007      	b.n	8004326 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	699b      	ldr	r3, [r3, #24]
 800431c:	f003 0320 	and.w	r3, r3, #32
 8004320:	2b20      	cmp	r3, #32
 8004322:	d1c8      	bne.n	80042b6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004324:	2300      	movs	r3, #0
}
 8004326:	4618      	mov	r0, r3
 8004328:	3710      	adds	r7, #16
 800432a:	46bd      	mov	sp, r7
 800432c:	bd80      	pop	{r7, pc}
	...

08004330 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b086      	sub	sp, #24
 8004334:	af00      	add	r7, sp, #0
 8004336:	60f8      	str	r0, [r7, #12]
 8004338:	60b9      	str	r1, [r7, #8]
 800433a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800433c:	2300      	movs	r3, #0
 800433e:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8004340:	e071      	b.n	8004426 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004342:	687a      	ldr	r2, [r7, #4]
 8004344:	68b9      	ldr	r1, [r7, #8]
 8004346:	68f8      	ldr	r0, [r7, #12]
 8004348:	f000 f87e 	bl	8004448 <I2C_IsErrorOccurred>
 800434c:	4603      	mov	r3, r0
 800434e:	2b00      	cmp	r3, #0
 8004350:	d001      	beq.n	8004356 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8004352:	2301      	movs	r3, #1
 8004354:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	699b      	ldr	r3, [r3, #24]
 800435c:	f003 0320 	and.w	r3, r3, #32
 8004360:	2b20      	cmp	r3, #32
 8004362:	d13b      	bne.n	80043dc <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8004364:	7dfb      	ldrb	r3, [r7, #23]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d138      	bne.n	80043dc <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	699b      	ldr	r3, [r3, #24]
 8004370:	f003 0304 	and.w	r3, r3, #4
 8004374:	2b04      	cmp	r3, #4
 8004376:	d105      	bne.n	8004384 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800437c:	2b00      	cmp	r3, #0
 800437e:	d001      	beq.n	8004384 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8004380:	2300      	movs	r3, #0
 8004382:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	699b      	ldr	r3, [r3, #24]
 800438a:	f003 0310 	and.w	r3, r3, #16
 800438e:	2b10      	cmp	r3, #16
 8004390:	d121      	bne.n	80043d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	2210      	movs	r2, #16
 8004398:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	2204      	movs	r2, #4
 800439e:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	2220      	movs	r2, #32
 80043a6:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	6859      	ldr	r1, [r3, #4]
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681a      	ldr	r2, [r3, #0]
 80043b2:	4b24      	ldr	r3, [pc, #144]	@ (8004444 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 80043b4:	400b      	ands	r3, r1
 80043b6:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	2220      	movs	r2, #32
 80043bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	2200      	movs	r2, #0
 80043c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	2200      	movs	r2, #0
 80043cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 80043d0:	2301      	movs	r3, #1
 80043d2:	75fb      	strb	r3, [r7, #23]
 80043d4:	e002      	b.n	80043dc <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	2200      	movs	r2, #0
 80043da:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 80043dc:	f7fd fc72 	bl	8001cc4 <HAL_GetTick>
 80043e0:	4602      	mov	r2, r0
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	1ad3      	subs	r3, r2, r3
 80043e6:	68ba      	ldr	r2, [r7, #8]
 80043e8:	429a      	cmp	r2, r3
 80043ea:	d302      	bcc.n	80043f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d119      	bne.n	8004426 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 80043f2:	7dfb      	ldrb	r3, [r7, #23]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d116      	bne.n	8004426 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	699b      	ldr	r3, [r3, #24]
 80043fe:	f003 0304 	and.w	r3, r3, #4
 8004402:	2b04      	cmp	r3, #4
 8004404:	d00f      	beq.n	8004426 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800440a:	f043 0220 	orr.w	r2, r3, #32
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	2220      	movs	r2, #32
 8004416:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	2200      	movs	r2, #0
 800441e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8004422:	2301      	movs	r3, #1
 8004424:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	699b      	ldr	r3, [r3, #24]
 800442c:	f003 0304 	and.w	r3, r3, #4
 8004430:	2b04      	cmp	r3, #4
 8004432:	d002      	beq.n	800443a <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8004434:	7dfb      	ldrb	r3, [r7, #23]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d083      	beq.n	8004342 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 800443a:	7dfb      	ldrb	r3, [r7, #23]
}
 800443c:	4618      	mov	r0, r3
 800443e:	3718      	adds	r7, #24
 8004440:	46bd      	mov	sp, r7
 8004442:	bd80      	pop	{r7, pc}
 8004444:	fe00e800 	.word	0xfe00e800

08004448 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b08a      	sub	sp, #40	@ 0x28
 800444c:	af00      	add	r7, sp, #0
 800444e:	60f8      	str	r0, [r7, #12]
 8004450:	60b9      	str	r1, [r7, #8]
 8004452:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004454:	2300      	movs	r3, #0
 8004456:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	699b      	ldr	r3, [r3, #24]
 8004460:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004462:	2300      	movs	r3, #0
 8004464:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800446a:	69bb      	ldr	r3, [r7, #24]
 800446c:	f003 0310 	and.w	r3, r3, #16
 8004470:	2b00      	cmp	r3, #0
 8004472:	d068      	beq.n	8004546 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	2210      	movs	r2, #16
 800447a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800447c:	e049      	b.n	8004512 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800447e:	68bb      	ldr	r3, [r7, #8]
 8004480:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004484:	d045      	beq.n	8004512 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004486:	f7fd fc1d 	bl	8001cc4 <HAL_GetTick>
 800448a:	4602      	mov	r2, r0
 800448c:	69fb      	ldr	r3, [r7, #28]
 800448e:	1ad3      	subs	r3, r2, r3
 8004490:	68ba      	ldr	r2, [r7, #8]
 8004492:	429a      	cmp	r2, r3
 8004494:	d302      	bcc.n	800449c <I2C_IsErrorOccurred+0x54>
 8004496:	68bb      	ldr	r3, [r7, #8]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d13a      	bne.n	8004512 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80044a6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80044ae:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	699b      	ldr	r3, [r3, #24]
 80044b6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80044ba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80044be:	d121      	bne.n	8004504 <I2C_IsErrorOccurred+0xbc>
 80044c0:	697b      	ldr	r3, [r7, #20]
 80044c2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80044c6:	d01d      	beq.n	8004504 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80044c8:	7cfb      	ldrb	r3, [r7, #19]
 80044ca:	2b20      	cmp	r3, #32
 80044cc:	d01a      	beq.n	8004504 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	685a      	ldr	r2, [r3, #4]
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80044dc:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80044de:	f7fd fbf1 	bl	8001cc4 <HAL_GetTick>
 80044e2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80044e4:	e00e      	b.n	8004504 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80044e6:	f7fd fbed 	bl	8001cc4 <HAL_GetTick>
 80044ea:	4602      	mov	r2, r0
 80044ec:	69fb      	ldr	r3, [r7, #28]
 80044ee:	1ad3      	subs	r3, r2, r3
 80044f0:	2b19      	cmp	r3, #25
 80044f2:	d907      	bls.n	8004504 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80044f4:	6a3b      	ldr	r3, [r7, #32]
 80044f6:	f043 0320 	orr.w	r3, r3, #32
 80044fa:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80044fc:	2301      	movs	r3, #1
 80044fe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8004502:	e006      	b.n	8004512 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	699b      	ldr	r3, [r3, #24]
 800450a:	f003 0320 	and.w	r3, r3, #32
 800450e:	2b20      	cmp	r3, #32
 8004510:	d1e9      	bne.n	80044e6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	699b      	ldr	r3, [r3, #24]
 8004518:	f003 0320 	and.w	r3, r3, #32
 800451c:	2b20      	cmp	r3, #32
 800451e:	d003      	beq.n	8004528 <I2C_IsErrorOccurred+0xe0>
 8004520:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004524:	2b00      	cmp	r3, #0
 8004526:	d0aa      	beq.n	800447e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004528:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800452c:	2b00      	cmp	r3, #0
 800452e:	d103      	bne.n	8004538 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	2220      	movs	r2, #32
 8004536:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004538:	6a3b      	ldr	r3, [r7, #32]
 800453a:	f043 0304 	orr.w	r3, r3, #4
 800453e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004540:	2301      	movs	r3, #1
 8004542:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	699b      	ldr	r3, [r3, #24]
 800454c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800454e:	69bb      	ldr	r3, [r7, #24]
 8004550:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004554:	2b00      	cmp	r3, #0
 8004556:	d00b      	beq.n	8004570 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004558:	6a3b      	ldr	r3, [r7, #32]
 800455a:	f043 0301 	orr.w	r3, r3, #1
 800455e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004568:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800456a:	2301      	movs	r3, #1
 800456c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004570:	69bb      	ldr	r3, [r7, #24]
 8004572:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004576:	2b00      	cmp	r3, #0
 8004578:	d00b      	beq.n	8004592 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800457a:	6a3b      	ldr	r3, [r7, #32]
 800457c:	f043 0308 	orr.w	r3, r3, #8
 8004580:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800458a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800458c:	2301      	movs	r3, #1
 800458e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004592:	69bb      	ldr	r3, [r7, #24]
 8004594:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004598:	2b00      	cmp	r3, #0
 800459a:	d00b      	beq.n	80045b4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800459c:	6a3b      	ldr	r3, [r7, #32]
 800459e:	f043 0302 	orr.w	r3, r3, #2
 80045a2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80045ac:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80045ae:	2301      	movs	r3, #1
 80045b0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80045b4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d01c      	beq.n	80045f6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80045bc:	68f8      	ldr	r0, [r7, #12]
 80045be:	f7ff fdaf 	bl	8004120 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	6859      	ldr	r1, [r3, #4]
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681a      	ldr	r2, [r3, #0]
 80045cc:	4b0d      	ldr	r3, [pc, #52]	@ (8004604 <I2C_IsErrorOccurred+0x1bc>)
 80045ce:	400b      	ands	r3, r1
 80045d0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80045d6:	6a3b      	ldr	r3, [r7, #32]
 80045d8:	431a      	orrs	r2, r3
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	2220      	movs	r2, #32
 80045e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	2200      	movs	r2, #0
 80045ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	2200      	movs	r2, #0
 80045f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80045f6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80045fa:	4618      	mov	r0, r3
 80045fc:	3728      	adds	r7, #40	@ 0x28
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd80      	pop	{r7, pc}
 8004602:	bf00      	nop
 8004604:	fe00e800 	.word	0xfe00e800

08004608 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004608:	b480      	push	{r7}
 800460a:	b087      	sub	sp, #28
 800460c:	af00      	add	r7, sp, #0
 800460e:	60f8      	str	r0, [r7, #12]
 8004610:	607b      	str	r3, [r7, #4]
 8004612:	460b      	mov	r3, r1
 8004614:	817b      	strh	r3, [r7, #10]
 8004616:	4613      	mov	r3, r2
 8004618:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800461a:	897b      	ldrh	r3, [r7, #10]
 800461c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004620:	7a7b      	ldrb	r3, [r7, #9]
 8004622:	041b      	lsls	r3, r3, #16
 8004624:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004628:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800462e:	6a3b      	ldr	r3, [r7, #32]
 8004630:	4313      	orrs	r3, r2
 8004632:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004636:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	685a      	ldr	r2, [r3, #4]
 800463e:	6a3b      	ldr	r3, [r7, #32]
 8004640:	0d5b      	lsrs	r3, r3, #21
 8004642:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8004646:	4b08      	ldr	r3, [pc, #32]	@ (8004668 <I2C_TransferConfig+0x60>)
 8004648:	430b      	orrs	r3, r1
 800464a:	43db      	mvns	r3, r3
 800464c:	ea02 0103 	and.w	r1, r2, r3
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	697a      	ldr	r2, [r7, #20]
 8004656:	430a      	orrs	r2, r1
 8004658:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800465a:	bf00      	nop
 800465c:	371c      	adds	r7, #28
 800465e:	46bd      	mov	sp, r7
 8004660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004664:	4770      	bx	lr
 8004666:	bf00      	nop
 8004668:	03ff63ff 	.word	0x03ff63ff

0800466c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800466c:	b480      	push	{r7}
 800466e:	b083      	sub	sp, #12
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
 8004674:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800467c:	b2db      	uxtb	r3, r3
 800467e:	2b20      	cmp	r3, #32
 8004680:	d138      	bne.n	80046f4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004688:	2b01      	cmp	r3, #1
 800468a:	d101      	bne.n	8004690 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800468c:	2302      	movs	r3, #2
 800468e:	e032      	b.n	80046f6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2201      	movs	r2, #1
 8004694:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2224      	movs	r2, #36	@ 0x24
 800469c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	681a      	ldr	r2, [r3, #0]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f022 0201 	bic.w	r2, r2, #1
 80046ae:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	681a      	ldr	r2, [r3, #0]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80046be:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	6819      	ldr	r1, [r3, #0]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	683a      	ldr	r2, [r7, #0]
 80046cc:	430a      	orrs	r2, r1
 80046ce:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	681a      	ldr	r2, [r3, #0]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f042 0201 	orr.w	r2, r2, #1
 80046de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2220      	movs	r2, #32
 80046e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2200      	movs	r2, #0
 80046ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80046f0:	2300      	movs	r3, #0
 80046f2:	e000      	b.n	80046f6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80046f4:	2302      	movs	r3, #2
  }
}
 80046f6:	4618      	mov	r0, r3
 80046f8:	370c      	adds	r7, #12
 80046fa:	46bd      	mov	sp, r7
 80046fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004700:	4770      	bx	lr

08004702 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004702:	b480      	push	{r7}
 8004704:	b085      	sub	sp, #20
 8004706:	af00      	add	r7, sp, #0
 8004708:	6078      	str	r0, [r7, #4]
 800470a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004712:	b2db      	uxtb	r3, r3
 8004714:	2b20      	cmp	r3, #32
 8004716:	d139      	bne.n	800478c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800471e:	2b01      	cmp	r3, #1
 8004720:	d101      	bne.n	8004726 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004722:	2302      	movs	r3, #2
 8004724:	e033      	b.n	800478e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2201      	movs	r2, #1
 800472a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2224      	movs	r2, #36	@ 0x24
 8004732:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	681a      	ldr	r2, [r3, #0]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f022 0201 	bic.w	r2, r2, #1
 8004744:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004754:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	021b      	lsls	r3, r3, #8
 800475a:	68fa      	ldr	r2, [r7, #12]
 800475c:	4313      	orrs	r3, r2
 800475e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	68fa      	ldr	r2, [r7, #12]
 8004766:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	681a      	ldr	r2, [r3, #0]
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f042 0201 	orr.w	r2, r2, #1
 8004776:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2220      	movs	r2, #32
 800477c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2200      	movs	r2, #0
 8004784:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004788:	2300      	movs	r3, #0
 800478a:	e000      	b.n	800478e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800478c:	2302      	movs	r3, #2
  }
}
 800478e:	4618      	mov	r0, r3
 8004790:	3714      	adds	r7, #20
 8004792:	46bd      	mov	sp, r7
 8004794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004798:	4770      	bx	lr
	...

0800479c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 80047a2:	af00      	add	r7, sp, #0
 80047a4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80047a8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80047ac:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80047ae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80047b2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d102      	bne.n	80047c2 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80047bc:	2301      	movs	r3, #1
 80047be:	f001 b83a 	b.w	8005836 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80047c2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80047c6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f003 0301 	and.w	r3, r3, #1
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	f000 816f 	beq.w	8004ab6 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80047d8:	4bb5      	ldr	r3, [pc, #724]	@ (8004ab0 <HAL_RCC_OscConfig+0x314>)
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	f003 030c 	and.w	r3, r3, #12
 80047e0:	2b04      	cmp	r3, #4
 80047e2:	d00c      	beq.n	80047fe <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80047e4:	4bb2      	ldr	r3, [pc, #712]	@ (8004ab0 <HAL_RCC_OscConfig+0x314>)
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	f003 030c 	and.w	r3, r3, #12
 80047ec:	2b08      	cmp	r3, #8
 80047ee:	d15c      	bne.n	80048aa <HAL_RCC_OscConfig+0x10e>
 80047f0:	4baf      	ldr	r3, [pc, #700]	@ (8004ab0 <HAL_RCC_OscConfig+0x314>)
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 80047f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80047fc:	d155      	bne.n	80048aa <HAL_RCC_OscConfig+0x10e>
 80047fe:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004802:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004806:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 800480a:	fa93 f3a3 	rbit	r3, r3
 800480e:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004812:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004816:	fab3 f383 	clz	r3, r3
 800481a:	b2db      	uxtb	r3, r3
 800481c:	095b      	lsrs	r3, r3, #5
 800481e:	b2db      	uxtb	r3, r3
 8004820:	f043 0301 	orr.w	r3, r3, #1
 8004824:	b2db      	uxtb	r3, r3
 8004826:	2b01      	cmp	r3, #1
 8004828:	d102      	bne.n	8004830 <HAL_RCC_OscConfig+0x94>
 800482a:	4ba1      	ldr	r3, [pc, #644]	@ (8004ab0 <HAL_RCC_OscConfig+0x314>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	e015      	b.n	800485c <HAL_RCC_OscConfig+0xc0>
 8004830:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004834:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004838:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 800483c:	fa93 f3a3 	rbit	r3, r3
 8004840:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 8004844:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004848:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 800484c:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8004850:	fa93 f3a3 	rbit	r3, r3
 8004854:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8004858:	4b95      	ldr	r3, [pc, #596]	@ (8004ab0 <HAL_RCC_OscConfig+0x314>)
 800485a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800485c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004860:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 8004864:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 8004868:	fa92 f2a2 	rbit	r2, r2
 800486c:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return result;
 8004870:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8004874:	fab2 f282 	clz	r2, r2
 8004878:	b2d2      	uxtb	r2, r2
 800487a:	f042 0220 	orr.w	r2, r2, #32
 800487e:	b2d2      	uxtb	r2, r2
 8004880:	f002 021f 	and.w	r2, r2, #31
 8004884:	2101      	movs	r1, #1
 8004886:	fa01 f202 	lsl.w	r2, r1, r2
 800488a:	4013      	ands	r3, r2
 800488c:	2b00      	cmp	r3, #0
 800488e:	f000 8111 	beq.w	8004ab4 <HAL_RCC_OscConfig+0x318>
 8004892:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004896:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	f040 8108 	bne.w	8004ab4 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 80048a4:	2301      	movs	r3, #1
 80048a6:	f000 bfc6 	b.w	8005836 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80048aa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80048ae:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80048ba:	d106      	bne.n	80048ca <HAL_RCC_OscConfig+0x12e>
 80048bc:	4b7c      	ldr	r3, [pc, #496]	@ (8004ab0 <HAL_RCC_OscConfig+0x314>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a7b      	ldr	r2, [pc, #492]	@ (8004ab0 <HAL_RCC_OscConfig+0x314>)
 80048c2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80048c6:	6013      	str	r3, [r2, #0]
 80048c8:	e036      	b.n	8004938 <HAL_RCC_OscConfig+0x19c>
 80048ca:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80048ce:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d10c      	bne.n	80048f4 <HAL_RCC_OscConfig+0x158>
 80048da:	4b75      	ldr	r3, [pc, #468]	@ (8004ab0 <HAL_RCC_OscConfig+0x314>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4a74      	ldr	r2, [pc, #464]	@ (8004ab0 <HAL_RCC_OscConfig+0x314>)
 80048e0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80048e4:	6013      	str	r3, [r2, #0]
 80048e6:	4b72      	ldr	r3, [pc, #456]	@ (8004ab0 <HAL_RCC_OscConfig+0x314>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a71      	ldr	r2, [pc, #452]	@ (8004ab0 <HAL_RCC_OscConfig+0x314>)
 80048ec:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80048f0:	6013      	str	r3, [r2, #0]
 80048f2:	e021      	b.n	8004938 <HAL_RCC_OscConfig+0x19c>
 80048f4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80048f8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004904:	d10c      	bne.n	8004920 <HAL_RCC_OscConfig+0x184>
 8004906:	4b6a      	ldr	r3, [pc, #424]	@ (8004ab0 <HAL_RCC_OscConfig+0x314>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4a69      	ldr	r2, [pc, #420]	@ (8004ab0 <HAL_RCC_OscConfig+0x314>)
 800490c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004910:	6013      	str	r3, [r2, #0]
 8004912:	4b67      	ldr	r3, [pc, #412]	@ (8004ab0 <HAL_RCC_OscConfig+0x314>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4a66      	ldr	r2, [pc, #408]	@ (8004ab0 <HAL_RCC_OscConfig+0x314>)
 8004918:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800491c:	6013      	str	r3, [r2, #0]
 800491e:	e00b      	b.n	8004938 <HAL_RCC_OscConfig+0x19c>
 8004920:	4b63      	ldr	r3, [pc, #396]	@ (8004ab0 <HAL_RCC_OscConfig+0x314>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4a62      	ldr	r2, [pc, #392]	@ (8004ab0 <HAL_RCC_OscConfig+0x314>)
 8004926:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800492a:	6013      	str	r3, [r2, #0]
 800492c:	4b60      	ldr	r3, [pc, #384]	@ (8004ab0 <HAL_RCC_OscConfig+0x314>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a5f      	ldr	r2, [pc, #380]	@ (8004ab0 <HAL_RCC_OscConfig+0x314>)
 8004932:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004936:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004938:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800493c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d059      	beq.n	80049fc <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004948:	f7fd f9bc 	bl	8001cc4 <HAL_GetTick>
 800494c:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004950:	e00a      	b.n	8004968 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004952:	f7fd f9b7 	bl	8001cc4 <HAL_GetTick>
 8004956:	4602      	mov	r2, r0
 8004958:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800495c:	1ad3      	subs	r3, r2, r3
 800495e:	2b64      	cmp	r3, #100	@ 0x64
 8004960:	d902      	bls.n	8004968 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8004962:	2303      	movs	r3, #3
 8004964:	f000 bf67 	b.w	8005836 <HAL_RCC_OscConfig+0x109a>
 8004968:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800496c:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004970:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8004974:	fa93 f3a3 	rbit	r3, r3
 8004978:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return result;
 800497c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004980:	fab3 f383 	clz	r3, r3
 8004984:	b2db      	uxtb	r3, r3
 8004986:	095b      	lsrs	r3, r3, #5
 8004988:	b2db      	uxtb	r3, r3
 800498a:	f043 0301 	orr.w	r3, r3, #1
 800498e:	b2db      	uxtb	r3, r3
 8004990:	2b01      	cmp	r3, #1
 8004992:	d102      	bne.n	800499a <HAL_RCC_OscConfig+0x1fe>
 8004994:	4b46      	ldr	r3, [pc, #280]	@ (8004ab0 <HAL_RCC_OscConfig+0x314>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	e015      	b.n	80049c6 <HAL_RCC_OscConfig+0x22a>
 800499a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800499e:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049a2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 80049a6:	fa93 f3a3 	rbit	r3, r3
 80049aa:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 80049ae:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80049b2:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 80049b6:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 80049ba:	fa93 f3a3 	rbit	r3, r3
 80049be:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 80049c2:	4b3b      	ldr	r3, [pc, #236]	@ (8004ab0 <HAL_RCC_OscConfig+0x314>)
 80049c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049c6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80049ca:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 80049ce:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 80049d2:	fa92 f2a2 	rbit	r2, r2
 80049d6:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return result;
 80049da:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 80049de:	fab2 f282 	clz	r2, r2
 80049e2:	b2d2      	uxtb	r2, r2
 80049e4:	f042 0220 	orr.w	r2, r2, #32
 80049e8:	b2d2      	uxtb	r2, r2
 80049ea:	f002 021f 	and.w	r2, r2, #31
 80049ee:	2101      	movs	r1, #1
 80049f0:	fa01 f202 	lsl.w	r2, r1, r2
 80049f4:	4013      	ands	r3, r2
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d0ab      	beq.n	8004952 <HAL_RCC_OscConfig+0x1b6>
 80049fa:	e05c      	b.n	8004ab6 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049fc:	f7fd f962 	bl	8001cc4 <HAL_GetTick>
 8004a00:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a04:	e00a      	b.n	8004a1c <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a06:	f7fd f95d 	bl	8001cc4 <HAL_GetTick>
 8004a0a:	4602      	mov	r2, r0
 8004a0c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8004a10:	1ad3      	subs	r3, r2, r3
 8004a12:	2b64      	cmp	r3, #100	@ 0x64
 8004a14:	d902      	bls.n	8004a1c <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8004a16:	2303      	movs	r3, #3
 8004a18:	f000 bf0d 	b.w	8005836 <HAL_RCC_OscConfig+0x109a>
 8004a1c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004a20:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a24:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8004a28:	fa93 f3a3 	rbit	r3, r3
 8004a2c:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return result;
 8004a30:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a34:	fab3 f383 	clz	r3, r3
 8004a38:	b2db      	uxtb	r3, r3
 8004a3a:	095b      	lsrs	r3, r3, #5
 8004a3c:	b2db      	uxtb	r3, r3
 8004a3e:	f043 0301 	orr.w	r3, r3, #1
 8004a42:	b2db      	uxtb	r3, r3
 8004a44:	2b01      	cmp	r3, #1
 8004a46:	d102      	bne.n	8004a4e <HAL_RCC_OscConfig+0x2b2>
 8004a48:	4b19      	ldr	r3, [pc, #100]	@ (8004ab0 <HAL_RCC_OscConfig+0x314>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	e015      	b.n	8004a7a <HAL_RCC_OscConfig+0x2de>
 8004a4e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004a52:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a56:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8004a5a:	fa93 f3a3 	rbit	r3, r3
 8004a5e:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8004a62:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004a66:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8004a6a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8004a6e:	fa93 f3a3 	rbit	r3, r3
 8004a72:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8004a76:	4b0e      	ldr	r3, [pc, #56]	@ (8004ab0 <HAL_RCC_OscConfig+0x314>)
 8004a78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a7a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004a7e:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 8004a82:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 8004a86:	fa92 f2a2 	rbit	r2, r2
 8004a8a:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return result;
 8004a8e:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8004a92:	fab2 f282 	clz	r2, r2
 8004a96:	b2d2      	uxtb	r2, r2
 8004a98:	f042 0220 	orr.w	r2, r2, #32
 8004a9c:	b2d2      	uxtb	r2, r2
 8004a9e:	f002 021f 	and.w	r2, r2, #31
 8004aa2:	2101      	movs	r1, #1
 8004aa4:	fa01 f202 	lsl.w	r2, r1, r2
 8004aa8:	4013      	ands	r3, r2
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d1ab      	bne.n	8004a06 <HAL_RCC_OscConfig+0x26a>
 8004aae:	e002      	b.n	8004ab6 <HAL_RCC_OscConfig+0x31a>
 8004ab0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ab4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ab6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004aba:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f003 0302 	and.w	r3, r3, #2
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	f000 817f 	beq.w	8004dca <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004acc:	4ba7      	ldr	r3, [pc, #668]	@ (8004d6c <HAL_RCC_OscConfig+0x5d0>)
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	f003 030c 	and.w	r3, r3, #12
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d00c      	beq.n	8004af2 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004ad8:	4ba4      	ldr	r3, [pc, #656]	@ (8004d6c <HAL_RCC_OscConfig+0x5d0>)
 8004ada:	685b      	ldr	r3, [r3, #4]
 8004adc:	f003 030c 	and.w	r3, r3, #12
 8004ae0:	2b08      	cmp	r3, #8
 8004ae2:	d173      	bne.n	8004bcc <HAL_RCC_OscConfig+0x430>
 8004ae4:	4ba1      	ldr	r3, [pc, #644]	@ (8004d6c <HAL_RCC_OscConfig+0x5d0>)
 8004ae6:	685b      	ldr	r3, [r3, #4]
 8004ae8:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8004aec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004af0:	d16c      	bne.n	8004bcc <HAL_RCC_OscConfig+0x430>
 8004af2:	2302      	movs	r3, #2
 8004af4:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004af8:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8004afc:	fa93 f3a3 	rbit	r3, r3
 8004b00:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return result;
 8004b04:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b08:	fab3 f383 	clz	r3, r3
 8004b0c:	b2db      	uxtb	r3, r3
 8004b0e:	095b      	lsrs	r3, r3, #5
 8004b10:	b2db      	uxtb	r3, r3
 8004b12:	f043 0301 	orr.w	r3, r3, #1
 8004b16:	b2db      	uxtb	r3, r3
 8004b18:	2b01      	cmp	r3, #1
 8004b1a:	d102      	bne.n	8004b22 <HAL_RCC_OscConfig+0x386>
 8004b1c:	4b93      	ldr	r3, [pc, #588]	@ (8004d6c <HAL_RCC_OscConfig+0x5d0>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	e013      	b.n	8004b4a <HAL_RCC_OscConfig+0x3ae>
 8004b22:	2302      	movs	r3, #2
 8004b24:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b28:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8004b2c:	fa93 f3a3 	rbit	r3, r3
 8004b30:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 8004b34:	2302      	movs	r3, #2
 8004b36:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8004b3a:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8004b3e:	fa93 f3a3 	rbit	r3, r3
 8004b42:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8004b46:	4b89      	ldr	r3, [pc, #548]	@ (8004d6c <HAL_RCC_OscConfig+0x5d0>)
 8004b48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b4a:	2202      	movs	r2, #2
 8004b4c:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 8004b50:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 8004b54:	fa92 f2a2 	rbit	r2, r2
 8004b58:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return result;
 8004b5c:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8004b60:	fab2 f282 	clz	r2, r2
 8004b64:	b2d2      	uxtb	r2, r2
 8004b66:	f042 0220 	orr.w	r2, r2, #32
 8004b6a:	b2d2      	uxtb	r2, r2
 8004b6c:	f002 021f 	and.w	r2, r2, #31
 8004b70:	2101      	movs	r1, #1
 8004b72:	fa01 f202 	lsl.w	r2, r1, r2
 8004b76:	4013      	ands	r3, r2
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d00a      	beq.n	8004b92 <HAL_RCC_OscConfig+0x3f6>
 8004b7c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004b80:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	68db      	ldr	r3, [r3, #12]
 8004b88:	2b01      	cmp	r3, #1
 8004b8a:	d002      	beq.n	8004b92 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	f000 be52 	b.w	8005836 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b92:	4b76      	ldr	r3, [pc, #472]	@ (8004d6c <HAL_RCC_OscConfig+0x5d0>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004b9a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004b9e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	691b      	ldr	r3, [r3, #16]
 8004ba6:	21f8      	movs	r1, #248	@ 0xf8
 8004ba8:	f8c7 1174 	str.w	r1, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bac:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 8004bb0:	fa91 f1a1 	rbit	r1, r1
 8004bb4:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
  return result;
 8004bb8:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8004bbc:	fab1 f181 	clz	r1, r1
 8004bc0:	b2c9      	uxtb	r1, r1
 8004bc2:	408b      	lsls	r3, r1
 8004bc4:	4969      	ldr	r1, [pc, #420]	@ (8004d6c <HAL_RCC_OscConfig+0x5d0>)
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004bca:	e0fe      	b.n	8004dca <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004bcc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004bd0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	68db      	ldr	r3, [r3, #12]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	f000 8088 	beq.w	8004cee <HAL_RCC_OscConfig+0x552>
 8004bde:	2301      	movs	r3, #1
 8004be0:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004be4:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8004be8:	fa93 f3a3 	rbit	r3, r3
 8004bec:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return result;
 8004bf0:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004bf4:	fab3 f383 	clz	r3, r3
 8004bf8:	b2db      	uxtb	r3, r3
 8004bfa:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004bfe:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004c02:	009b      	lsls	r3, r3, #2
 8004c04:	461a      	mov	r2, r3
 8004c06:	2301      	movs	r3, #1
 8004c08:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c0a:	f7fd f85b 	bl	8001cc4 <HAL_GetTick>
 8004c0e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c12:	e00a      	b.n	8004c2a <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c14:	f7fd f856 	bl	8001cc4 <HAL_GetTick>
 8004c18:	4602      	mov	r2, r0
 8004c1a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8004c1e:	1ad3      	subs	r3, r2, r3
 8004c20:	2b02      	cmp	r3, #2
 8004c22:	d902      	bls.n	8004c2a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8004c24:	2303      	movs	r3, #3
 8004c26:	f000 be06 	b.w	8005836 <HAL_RCC_OscConfig+0x109a>
 8004c2a:	2302      	movs	r3, #2
 8004c2c:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c30:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8004c34:	fa93 f3a3 	rbit	r3, r3
 8004c38:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return result;
 8004c3c:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c40:	fab3 f383 	clz	r3, r3
 8004c44:	b2db      	uxtb	r3, r3
 8004c46:	095b      	lsrs	r3, r3, #5
 8004c48:	b2db      	uxtb	r3, r3
 8004c4a:	f043 0301 	orr.w	r3, r3, #1
 8004c4e:	b2db      	uxtb	r3, r3
 8004c50:	2b01      	cmp	r3, #1
 8004c52:	d102      	bne.n	8004c5a <HAL_RCC_OscConfig+0x4be>
 8004c54:	4b45      	ldr	r3, [pc, #276]	@ (8004d6c <HAL_RCC_OscConfig+0x5d0>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	e013      	b.n	8004c82 <HAL_RCC_OscConfig+0x4e6>
 8004c5a:	2302      	movs	r3, #2
 8004c5c:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c60:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8004c64:	fa93 f3a3 	rbit	r3, r3
 8004c68:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8004c6c:	2302      	movs	r3, #2
 8004c6e:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8004c72:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8004c76:	fa93 f3a3 	rbit	r3, r3
 8004c7a:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8004c7e:	4b3b      	ldr	r3, [pc, #236]	@ (8004d6c <HAL_RCC_OscConfig+0x5d0>)
 8004c80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c82:	2202      	movs	r2, #2
 8004c84:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8004c88:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8004c8c:	fa92 f2a2 	rbit	r2, r2
 8004c90:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return result;
 8004c94:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8004c98:	fab2 f282 	clz	r2, r2
 8004c9c:	b2d2      	uxtb	r2, r2
 8004c9e:	f042 0220 	orr.w	r2, r2, #32
 8004ca2:	b2d2      	uxtb	r2, r2
 8004ca4:	f002 021f 	and.w	r2, r2, #31
 8004ca8:	2101      	movs	r1, #1
 8004caa:	fa01 f202 	lsl.w	r2, r1, r2
 8004cae:	4013      	ands	r3, r2
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d0af      	beq.n	8004c14 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cb4:	4b2d      	ldr	r3, [pc, #180]	@ (8004d6c <HAL_RCC_OscConfig+0x5d0>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004cbc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004cc0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	691b      	ldr	r3, [r3, #16]
 8004cc8:	21f8      	movs	r1, #248	@ 0xf8
 8004cca:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cce:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 8004cd2:	fa91 f1a1 	rbit	r1, r1
 8004cd6:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
  return result;
 8004cda:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8004cde:	fab1 f181 	clz	r1, r1
 8004ce2:	b2c9      	uxtb	r1, r1
 8004ce4:	408b      	lsls	r3, r1
 8004ce6:	4921      	ldr	r1, [pc, #132]	@ (8004d6c <HAL_RCC_OscConfig+0x5d0>)
 8004ce8:	4313      	orrs	r3, r2
 8004cea:	600b      	str	r3, [r1, #0]
 8004cec:	e06d      	b.n	8004dca <HAL_RCC_OscConfig+0x62e>
 8004cee:	2301      	movs	r3, #1
 8004cf0:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cf4:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8004cf8:	fa93 f3a3 	rbit	r3, r3
 8004cfc:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return result;
 8004d00:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d04:	fab3 f383 	clz	r3, r3
 8004d08:	b2db      	uxtb	r3, r3
 8004d0a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004d0e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004d12:	009b      	lsls	r3, r3, #2
 8004d14:	461a      	mov	r2, r3
 8004d16:	2300      	movs	r3, #0
 8004d18:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d1a:	f7fc ffd3 	bl	8001cc4 <HAL_GetTick>
 8004d1e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d22:	e00a      	b.n	8004d3a <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d24:	f7fc ffce 	bl	8001cc4 <HAL_GetTick>
 8004d28:	4602      	mov	r2, r0
 8004d2a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8004d2e:	1ad3      	subs	r3, r2, r3
 8004d30:	2b02      	cmp	r3, #2
 8004d32:	d902      	bls.n	8004d3a <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8004d34:	2303      	movs	r3, #3
 8004d36:	f000 bd7e 	b.w	8005836 <HAL_RCC_OscConfig+0x109a>
 8004d3a:	2302      	movs	r3, #2
 8004d3c:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d40:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8004d44:	fa93 f3a3 	rbit	r3, r3
 8004d48:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return result;
 8004d4c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d50:	fab3 f383 	clz	r3, r3
 8004d54:	b2db      	uxtb	r3, r3
 8004d56:	095b      	lsrs	r3, r3, #5
 8004d58:	b2db      	uxtb	r3, r3
 8004d5a:	f043 0301 	orr.w	r3, r3, #1
 8004d5e:	b2db      	uxtb	r3, r3
 8004d60:	2b01      	cmp	r3, #1
 8004d62:	d105      	bne.n	8004d70 <HAL_RCC_OscConfig+0x5d4>
 8004d64:	4b01      	ldr	r3, [pc, #4]	@ (8004d6c <HAL_RCC_OscConfig+0x5d0>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	e016      	b.n	8004d98 <HAL_RCC_OscConfig+0x5fc>
 8004d6a:	bf00      	nop
 8004d6c:	40021000 	.word	0x40021000
 8004d70:	2302      	movs	r3, #2
 8004d72:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d76:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8004d7a:	fa93 f3a3 	rbit	r3, r3
 8004d7e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8004d82:	2302      	movs	r3, #2
 8004d84:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8004d88:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8004d8c:	fa93 f3a3 	rbit	r3, r3
 8004d90:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8004d94:	4bbf      	ldr	r3, [pc, #764]	@ (8005094 <HAL_RCC_OscConfig+0x8f8>)
 8004d96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d98:	2202      	movs	r2, #2
 8004d9a:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8004d9e:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8004da2:	fa92 f2a2 	rbit	r2, r2
 8004da6:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return result;
 8004daa:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8004dae:	fab2 f282 	clz	r2, r2
 8004db2:	b2d2      	uxtb	r2, r2
 8004db4:	f042 0220 	orr.w	r2, r2, #32
 8004db8:	b2d2      	uxtb	r2, r2
 8004dba:	f002 021f 	and.w	r2, r2, #31
 8004dbe:	2101      	movs	r1, #1
 8004dc0:	fa01 f202 	lsl.w	r2, r1, r2
 8004dc4:	4013      	ands	r3, r2
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d1ac      	bne.n	8004d24 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004dca:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004dce:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f003 0308 	and.w	r3, r3, #8
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	f000 8113 	beq.w	8005006 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004de0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004de4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	695b      	ldr	r3, [r3, #20]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d07c      	beq.n	8004eea <HAL_RCC_OscConfig+0x74e>
 8004df0:	2301      	movs	r3, #1
 8004df2:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004df6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004dfa:	fa93 f3a3 	rbit	r3, r3
 8004dfe:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return result;
 8004e02:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e06:	fab3 f383 	clz	r3, r3
 8004e0a:	b2db      	uxtb	r3, r3
 8004e0c:	461a      	mov	r2, r3
 8004e0e:	4ba2      	ldr	r3, [pc, #648]	@ (8005098 <HAL_RCC_OscConfig+0x8fc>)
 8004e10:	4413      	add	r3, r2
 8004e12:	009b      	lsls	r3, r3, #2
 8004e14:	461a      	mov	r2, r3
 8004e16:	2301      	movs	r3, #1
 8004e18:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e1a:	f7fc ff53 	bl	8001cc4 <HAL_GetTick>
 8004e1e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e22:	e00a      	b.n	8004e3a <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e24:	f7fc ff4e 	bl	8001cc4 <HAL_GetTick>
 8004e28:	4602      	mov	r2, r0
 8004e2a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8004e2e:	1ad3      	subs	r3, r2, r3
 8004e30:	2b02      	cmp	r3, #2
 8004e32:	d902      	bls.n	8004e3a <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8004e34:	2303      	movs	r3, #3
 8004e36:	f000 bcfe 	b.w	8005836 <HAL_RCC_OscConfig+0x109a>
 8004e3a:	2302      	movs	r3, #2
 8004e3c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e40:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004e44:	fa93 f2a3 	rbit	r2, r3
 8004e48:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004e4c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8004e50:	601a      	str	r2, [r3, #0]
 8004e52:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004e56:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004e5a:	2202      	movs	r2, #2
 8004e5c:	601a      	str	r2, [r3, #0]
 8004e5e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004e62:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	fa93 f2a3 	rbit	r2, r3
 8004e6c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004e70:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004e74:	601a      	str	r2, [r3, #0]
 8004e76:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004e7a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8004e7e:	2202      	movs	r2, #2
 8004e80:	601a      	str	r2, [r3, #0]
 8004e82:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004e86:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	fa93 f2a3 	rbit	r2, r3
 8004e90:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004e94:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8004e98:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e9a:	4b7e      	ldr	r3, [pc, #504]	@ (8005094 <HAL_RCC_OscConfig+0x8f8>)
 8004e9c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004e9e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004ea2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8004ea6:	2102      	movs	r1, #2
 8004ea8:	6019      	str	r1, [r3, #0]
 8004eaa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004eae:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	fa93 f1a3 	rbit	r1, r3
 8004eb8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004ebc:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004ec0:	6019      	str	r1, [r3, #0]
  return result;
 8004ec2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004ec6:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	fab3 f383 	clz	r3, r3
 8004ed0:	b2db      	uxtb	r3, r3
 8004ed2:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8004ed6:	b2db      	uxtb	r3, r3
 8004ed8:	f003 031f 	and.w	r3, r3, #31
 8004edc:	2101      	movs	r1, #1
 8004ede:	fa01 f303 	lsl.w	r3, r1, r3
 8004ee2:	4013      	ands	r3, r2
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d09d      	beq.n	8004e24 <HAL_RCC_OscConfig+0x688>
 8004ee8:	e08d      	b.n	8005006 <HAL_RCC_OscConfig+0x86a>
 8004eea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004eee:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8004ef2:	2201      	movs	r2, #1
 8004ef4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ef6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004efa:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	fa93 f2a3 	rbit	r2, r3
 8004f04:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004f08:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8004f0c:	601a      	str	r2, [r3, #0]
  return result;
 8004f0e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004f12:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8004f16:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f18:	fab3 f383 	clz	r3, r3
 8004f1c:	b2db      	uxtb	r3, r3
 8004f1e:	461a      	mov	r2, r3
 8004f20:	4b5d      	ldr	r3, [pc, #372]	@ (8005098 <HAL_RCC_OscConfig+0x8fc>)
 8004f22:	4413      	add	r3, r2
 8004f24:	009b      	lsls	r3, r3, #2
 8004f26:	461a      	mov	r2, r3
 8004f28:	2300      	movs	r3, #0
 8004f2a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f2c:	f7fc feca 	bl	8001cc4 <HAL_GetTick>
 8004f30:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f34:	e00a      	b.n	8004f4c <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004f36:	f7fc fec5 	bl	8001cc4 <HAL_GetTick>
 8004f3a:	4602      	mov	r2, r0
 8004f3c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8004f40:	1ad3      	subs	r3, r2, r3
 8004f42:	2b02      	cmp	r3, #2
 8004f44:	d902      	bls.n	8004f4c <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8004f46:	2303      	movs	r3, #3
 8004f48:	f000 bc75 	b.w	8005836 <HAL_RCC_OscConfig+0x109a>
 8004f4c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004f50:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8004f54:	2202      	movs	r2, #2
 8004f56:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f58:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004f5c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	fa93 f2a3 	rbit	r2, r3
 8004f66:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004f6a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8004f6e:	601a      	str	r2, [r3, #0]
 8004f70:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004f74:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8004f78:	2202      	movs	r2, #2
 8004f7a:	601a      	str	r2, [r3, #0]
 8004f7c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004f80:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	fa93 f2a3 	rbit	r2, r3
 8004f8a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004f8e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8004f92:	601a      	str	r2, [r3, #0]
 8004f94:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004f98:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8004f9c:	2202      	movs	r2, #2
 8004f9e:	601a      	str	r2, [r3, #0]
 8004fa0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004fa4:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	fa93 f2a3 	rbit	r2, r3
 8004fae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004fb2:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8004fb6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004fb8:	4b36      	ldr	r3, [pc, #216]	@ (8005094 <HAL_RCC_OscConfig+0x8f8>)
 8004fba:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004fbc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004fc0:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8004fc4:	2102      	movs	r1, #2
 8004fc6:	6019      	str	r1, [r3, #0]
 8004fc8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004fcc:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	fa93 f1a3 	rbit	r1, r3
 8004fd6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004fda:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8004fde:	6019      	str	r1, [r3, #0]
  return result;
 8004fe0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004fe4:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	fab3 f383 	clz	r3, r3
 8004fee:	b2db      	uxtb	r3, r3
 8004ff0:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8004ff4:	b2db      	uxtb	r3, r3
 8004ff6:	f003 031f 	and.w	r3, r3, #31
 8004ffa:	2101      	movs	r1, #1
 8004ffc:	fa01 f303 	lsl.w	r3, r1, r3
 8005000:	4013      	ands	r3, r2
 8005002:	2b00      	cmp	r3, #0
 8005004:	d197      	bne.n	8004f36 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005006:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800500a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f003 0304 	and.w	r3, r3, #4
 8005016:	2b00      	cmp	r3, #0
 8005018:	f000 81a5 	beq.w	8005366 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800501c:	2300      	movs	r3, #0
 800501e:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005022:	4b1c      	ldr	r3, [pc, #112]	@ (8005094 <HAL_RCC_OscConfig+0x8f8>)
 8005024:	69db      	ldr	r3, [r3, #28]
 8005026:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800502a:	2b00      	cmp	r3, #0
 800502c:	d116      	bne.n	800505c <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800502e:	4b19      	ldr	r3, [pc, #100]	@ (8005094 <HAL_RCC_OscConfig+0x8f8>)
 8005030:	69db      	ldr	r3, [r3, #28]
 8005032:	4a18      	ldr	r2, [pc, #96]	@ (8005094 <HAL_RCC_OscConfig+0x8f8>)
 8005034:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005038:	61d3      	str	r3, [r2, #28]
 800503a:	4b16      	ldr	r3, [pc, #88]	@ (8005094 <HAL_RCC_OscConfig+0x8f8>)
 800503c:	69db      	ldr	r3, [r3, #28]
 800503e:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8005042:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005046:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800504a:	601a      	str	r2, [r3, #0]
 800504c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005050:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005054:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8005056:	2301      	movs	r3, #1
 8005058:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800505c:	4b0f      	ldr	r3, [pc, #60]	@ (800509c <HAL_RCC_OscConfig+0x900>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005064:	2b00      	cmp	r3, #0
 8005066:	d121      	bne.n	80050ac <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005068:	4b0c      	ldr	r3, [pc, #48]	@ (800509c <HAL_RCC_OscConfig+0x900>)
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4a0b      	ldr	r2, [pc, #44]	@ (800509c <HAL_RCC_OscConfig+0x900>)
 800506e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005072:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005074:	f7fc fe26 	bl	8001cc4 <HAL_GetTick>
 8005078:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800507c:	e010      	b.n	80050a0 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800507e:	f7fc fe21 	bl	8001cc4 <HAL_GetTick>
 8005082:	4602      	mov	r2, r0
 8005084:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8005088:	1ad3      	subs	r3, r2, r3
 800508a:	2b64      	cmp	r3, #100	@ 0x64
 800508c:	d908      	bls.n	80050a0 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 800508e:	2303      	movs	r3, #3
 8005090:	e3d1      	b.n	8005836 <HAL_RCC_OscConfig+0x109a>
 8005092:	bf00      	nop
 8005094:	40021000 	.word	0x40021000
 8005098:	10908120 	.word	0x10908120
 800509c:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050a0:	4b8d      	ldr	r3, [pc, #564]	@ (80052d8 <HAL_RCC_OscConfig+0xb3c>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d0e8      	beq.n	800507e <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80050ac:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80050b0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	689b      	ldr	r3, [r3, #8]
 80050b8:	2b01      	cmp	r3, #1
 80050ba:	d106      	bne.n	80050ca <HAL_RCC_OscConfig+0x92e>
 80050bc:	4b87      	ldr	r3, [pc, #540]	@ (80052dc <HAL_RCC_OscConfig+0xb40>)
 80050be:	6a1b      	ldr	r3, [r3, #32]
 80050c0:	4a86      	ldr	r2, [pc, #536]	@ (80052dc <HAL_RCC_OscConfig+0xb40>)
 80050c2:	f043 0301 	orr.w	r3, r3, #1
 80050c6:	6213      	str	r3, [r2, #32]
 80050c8:	e035      	b.n	8005136 <HAL_RCC_OscConfig+0x99a>
 80050ca:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80050ce:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	689b      	ldr	r3, [r3, #8]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d10c      	bne.n	80050f4 <HAL_RCC_OscConfig+0x958>
 80050da:	4b80      	ldr	r3, [pc, #512]	@ (80052dc <HAL_RCC_OscConfig+0xb40>)
 80050dc:	6a1b      	ldr	r3, [r3, #32]
 80050de:	4a7f      	ldr	r2, [pc, #508]	@ (80052dc <HAL_RCC_OscConfig+0xb40>)
 80050e0:	f023 0301 	bic.w	r3, r3, #1
 80050e4:	6213      	str	r3, [r2, #32]
 80050e6:	4b7d      	ldr	r3, [pc, #500]	@ (80052dc <HAL_RCC_OscConfig+0xb40>)
 80050e8:	6a1b      	ldr	r3, [r3, #32]
 80050ea:	4a7c      	ldr	r2, [pc, #496]	@ (80052dc <HAL_RCC_OscConfig+0xb40>)
 80050ec:	f023 0304 	bic.w	r3, r3, #4
 80050f0:	6213      	str	r3, [r2, #32]
 80050f2:	e020      	b.n	8005136 <HAL_RCC_OscConfig+0x99a>
 80050f4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80050f8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	689b      	ldr	r3, [r3, #8]
 8005100:	2b05      	cmp	r3, #5
 8005102:	d10c      	bne.n	800511e <HAL_RCC_OscConfig+0x982>
 8005104:	4b75      	ldr	r3, [pc, #468]	@ (80052dc <HAL_RCC_OscConfig+0xb40>)
 8005106:	6a1b      	ldr	r3, [r3, #32]
 8005108:	4a74      	ldr	r2, [pc, #464]	@ (80052dc <HAL_RCC_OscConfig+0xb40>)
 800510a:	f043 0304 	orr.w	r3, r3, #4
 800510e:	6213      	str	r3, [r2, #32]
 8005110:	4b72      	ldr	r3, [pc, #456]	@ (80052dc <HAL_RCC_OscConfig+0xb40>)
 8005112:	6a1b      	ldr	r3, [r3, #32]
 8005114:	4a71      	ldr	r2, [pc, #452]	@ (80052dc <HAL_RCC_OscConfig+0xb40>)
 8005116:	f043 0301 	orr.w	r3, r3, #1
 800511a:	6213      	str	r3, [r2, #32]
 800511c:	e00b      	b.n	8005136 <HAL_RCC_OscConfig+0x99a>
 800511e:	4b6f      	ldr	r3, [pc, #444]	@ (80052dc <HAL_RCC_OscConfig+0xb40>)
 8005120:	6a1b      	ldr	r3, [r3, #32]
 8005122:	4a6e      	ldr	r2, [pc, #440]	@ (80052dc <HAL_RCC_OscConfig+0xb40>)
 8005124:	f023 0301 	bic.w	r3, r3, #1
 8005128:	6213      	str	r3, [r2, #32]
 800512a:	4b6c      	ldr	r3, [pc, #432]	@ (80052dc <HAL_RCC_OscConfig+0xb40>)
 800512c:	6a1b      	ldr	r3, [r3, #32]
 800512e:	4a6b      	ldr	r2, [pc, #428]	@ (80052dc <HAL_RCC_OscConfig+0xb40>)
 8005130:	f023 0304 	bic.w	r3, r3, #4
 8005134:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005136:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800513a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	689b      	ldr	r3, [r3, #8]
 8005142:	2b00      	cmp	r3, #0
 8005144:	f000 8081 	beq.w	800524a <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005148:	f7fc fdbc 	bl	8001cc4 <HAL_GetTick>
 800514c:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005150:	e00b      	b.n	800516a <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005152:	f7fc fdb7 	bl	8001cc4 <HAL_GetTick>
 8005156:	4602      	mov	r2, r0
 8005158:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800515c:	1ad3      	subs	r3, r2, r3
 800515e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005162:	4293      	cmp	r3, r2
 8005164:	d901      	bls.n	800516a <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8005166:	2303      	movs	r3, #3
 8005168:	e365      	b.n	8005836 <HAL_RCC_OscConfig+0x109a>
 800516a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800516e:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8005172:	2202      	movs	r2, #2
 8005174:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005176:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800517a:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	fa93 f2a3 	rbit	r2, r3
 8005184:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005188:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800518c:	601a      	str	r2, [r3, #0]
 800518e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005192:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8005196:	2202      	movs	r2, #2
 8005198:	601a      	str	r2, [r3, #0]
 800519a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800519e:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	fa93 f2a3 	rbit	r2, r3
 80051a8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80051ac:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80051b0:	601a      	str	r2, [r3, #0]
  return result;
 80051b2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80051b6:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80051ba:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051bc:	fab3 f383 	clz	r3, r3
 80051c0:	b2db      	uxtb	r3, r3
 80051c2:	095b      	lsrs	r3, r3, #5
 80051c4:	b2db      	uxtb	r3, r3
 80051c6:	f043 0302 	orr.w	r3, r3, #2
 80051ca:	b2db      	uxtb	r3, r3
 80051cc:	2b02      	cmp	r3, #2
 80051ce:	d102      	bne.n	80051d6 <HAL_RCC_OscConfig+0xa3a>
 80051d0:	4b42      	ldr	r3, [pc, #264]	@ (80052dc <HAL_RCC_OscConfig+0xb40>)
 80051d2:	6a1b      	ldr	r3, [r3, #32]
 80051d4:	e013      	b.n	80051fe <HAL_RCC_OscConfig+0xa62>
 80051d6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80051da:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80051de:	2202      	movs	r2, #2
 80051e0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051e2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80051e6:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	fa93 f2a3 	rbit	r2, r3
 80051f0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80051f4:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 80051f8:	601a      	str	r2, [r3, #0]
 80051fa:	4b38      	ldr	r3, [pc, #224]	@ (80052dc <HAL_RCC_OscConfig+0xb40>)
 80051fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051fe:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8005202:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8005206:	2102      	movs	r1, #2
 8005208:	6011      	str	r1, [r2, #0]
 800520a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800520e:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8005212:	6812      	ldr	r2, [r2, #0]
 8005214:	fa92 f1a2 	rbit	r1, r2
 8005218:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800521c:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8005220:	6011      	str	r1, [r2, #0]
  return result;
 8005222:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8005226:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 800522a:	6812      	ldr	r2, [r2, #0]
 800522c:	fab2 f282 	clz	r2, r2
 8005230:	b2d2      	uxtb	r2, r2
 8005232:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005236:	b2d2      	uxtb	r2, r2
 8005238:	f002 021f 	and.w	r2, r2, #31
 800523c:	2101      	movs	r1, #1
 800523e:	fa01 f202 	lsl.w	r2, r1, r2
 8005242:	4013      	ands	r3, r2
 8005244:	2b00      	cmp	r3, #0
 8005246:	d084      	beq.n	8005152 <HAL_RCC_OscConfig+0x9b6>
 8005248:	e083      	b.n	8005352 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800524a:	f7fc fd3b 	bl	8001cc4 <HAL_GetTick>
 800524e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005252:	e00b      	b.n	800526c <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005254:	f7fc fd36 	bl	8001cc4 <HAL_GetTick>
 8005258:	4602      	mov	r2, r0
 800525a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800525e:	1ad3      	subs	r3, r2, r3
 8005260:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005264:	4293      	cmp	r3, r2
 8005266:	d901      	bls.n	800526c <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8005268:	2303      	movs	r3, #3
 800526a:	e2e4      	b.n	8005836 <HAL_RCC_OscConfig+0x109a>
 800526c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005270:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8005274:	2202      	movs	r2, #2
 8005276:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005278:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800527c:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	fa93 f2a3 	rbit	r2, r3
 8005286:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800528a:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800528e:	601a      	str	r2, [r3, #0]
 8005290:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005294:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8005298:	2202      	movs	r2, #2
 800529a:	601a      	str	r2, [r3, #0]
 800529c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80052a0:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	fa93 f2a3 	rbit	r2, r3
 80052aa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80052ae:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80052b2:	601a      	str	r2, [r3, #0]
  return result;
 80052b4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80052b8:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80052bc:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80052be:	fab3 f383 	clz	r3, r3
 80052c2:	b2db      	uxtb	r3, r3
 80052c4:	095b      	lsrs	r3, r3, #5
 80052c6:	b2db      	uxtb	r3, r3
 80052c8:	f043 0302 	orr.w	r3, r3, #2
 80052cc:	b2db      	uxtb	r3, r3
 80052ce:	2b02      	cmp	r3, #2
 80052d0:	d106      	bne.n	80052e0 <HAL_RCC_OscConfig+0xb44>
 80052d2:	4b02      	ldr	r3, [pc, #8]	@ (80052dc <HAL_RCC_OscConfig+0xb40>)
 80052d4:	6a1b      	ldr	r3, [r3, #32]
 80052d6:	e017      	b.n	8005308 <HAL_RCC_OscConfig+0xb6c>
 80052d8:	40007000 	.word	0x40007000
 80052dc:	40021000 	.word	0x40021000
 80052e0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80052e4:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80052e8:	2202      	movs	r2, #2
 80052ea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052ec:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80052f0:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	fa93 f2a3 	rbit	r2, r3
 80052fa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80052fe:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8005302:	601a      	str	r2, [r3, #0]
 8005304:	4bb3      	ldr	r3, [pc, #716]	@ (80055d4 <HAL_RCC_OscConfig+0xe38>)
 8005306:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005308:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800530c:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8005310:	2102      	movs	r1, #2
 8005312:	6011      	str	r1, [r2, #0]
 8005314:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8005318:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800531c:	6812      	ldr	r2, [r2, #0]
 800531e:	fa92 f1a2 	rbit	r1, r2
 8005322:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8005326:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 800532a:	6011      	str	r1, [r2, #0]
  return result;
 800532c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8005330:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8005334:	6812      	ldr	r2, [r2, #0]
 8005336:	fab2 f282 	clz	r2, r2
 800533a:	b2d2      	uxtb	r2, r2
 800533c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005340:	b2d2      	uxtb	r2, r2
 8005342:	f002 021f 	and.w	r2, r2, #31
 8005346:	2101      	movs	r1, #1
 8005348:	fa01 f202 	lsl.w	r2, r1, r2
 800534c:	4013      	ands	r3, r2
 800534e:	2b00      	cmp	r3, #0
 8005350:	d180      	bne.n	8005254 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005352:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 8005356:	2b01      	cmp	r3, #1
 8005358:	d105      	bne.n	8005366 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800535a:	4b9e      	ldr	r3, [pc, #632]	@ (80055d4 <HAL_RCC_OscConfig+0xe38>)
 800535c:	69db      	ldr	r3, [r3, #28]
 800535e:	4a9d      	ldr	r2, [pc, #628]	@ (80055d4 <HAL_RCC_OscConfig+0xe38>)
 8005360:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005364:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005366:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800536a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	699b      	ldr	r3, [r3, #24]
 8005372:	2b00      	cmp	r3, #0
 8005374:	f000 825e 	beq.w	8005834 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005378:	4b96      	ldr	r3, [pc, #600]	@ (80055d4 <HAL_RCC_OscConfig+0xe38>)
 800537a:	685b      	ldr	r3, [r3, #4]
 800537c:	f003 030c 	and.w	r3, r3, #12
 8005380:	2b08      	cmp	r3, #8
 8005382:	f000 821f 	beq.w	80057c4 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005386:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800538a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	699b      	ldr	r3, [r3, #24]
 8005392:	2b02      	cmp	r3, #2
 8005394:	f040 8170 	bne.w	8005678 <HAL_RCC_OscConfig+0xedc>
 8005398:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800539c:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80053a0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80053a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053a6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80053aa:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	fa93 f2a3 	rbit	r2, r3
 80053b4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80053b8:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80053bc:	601a      	str	r2, [r3, #0]
  return result;
 80053be:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80053c2:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80053c6:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053c8:	fab3 f383 	clz	r3, r3
 80053cc:	b2db      	uxtb	r3, r3
 80053ce:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80053d2:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80053d6:	009b      	lsls	r3, r3, #2
 80053d8:	461a      	mov	r2, r3
 80053da:	2300      	movs	r3, #0
 80053dc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053de:	f7fc fc71 	bl	8001cc4 <HAL_GetTick>
 80053e2:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80053e6:	e009      	b.n	80053fc <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80053e8:	f7fc fc6c 	bl	8001cc4 <HAL_GetTick>
 80053ec:	4602      	mov	r2, r0
 80053ee:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80053f2:	1ad3      	subs	r3, r2, r3
 80053f4:	2b02      	cmp	r3, #2
 80053f6:	d901      	bls.n	80053fc <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 80053f8:	2303      	movs	r3, #3
 80053fa:	e21c      	b.n	8005836 <HAL_RCC_OscConfig+0x109a>
 80053fc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005400:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8005404:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005408:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800540a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800540e:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	fa93 f2a3 	rbit	r2, r3
 8005418:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800541c:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8005420:	601a      	str	r2, [r3, #0]
  return result;
 8005422:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005426:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800542a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800542c:	fab3 f383 	clz	r3, r3
 8005430:	b2db      	uxtb	r3, r3
 8005432:	095b      	lsrs	r3, r3, #5
 8005434:	b2db      	uxtb	r3, r3
 8005436:	f043 0301 	orr.w	r3, r3, #1
 800543a:	b2db      	uxtb	r3, r3
 800543c:	2b01      	cmp	r3, #1
 800543e:	d102      	bne.n	8005446 <HAL_RCC_OscConfig+0xcaa>
 8005440:	4b64      	ldr	r3, [pc, #400]	@ (80055d4 <HAL_RCC_OscConfig+0xe38>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	e027      	b.n	8005496 <HAL_RCC_OscConfig+0xcfa>
 8005446:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800544a:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 800544e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005452:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005454:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005458:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	fa93 f2a3 	rbit	r2, r3
 8005462:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005466:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800546a:	601a      	str	r2, [r3, #0]
 800546c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005470:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8005474:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005478:	601a      	str	r2, [r3, #0]
 800547a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800547e:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	fa93 f2a3 	rbit	r2, r3
 8005488:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800548c:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8005490:	601a      	str	r2, [r3, #0]
 8005492:	4b50      	ldr	r3, [pc, #320]	@ (80055d4 <HAL_RCC_OscConfig+0xe38>)
 8005494:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005496:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800549a:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 800549e:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80054a2:	6011      	str	r1, [r2, #0]
 80054a4:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80054a8:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80054ac:	6812      	ldr	r2, [r2, #0]
 80054ae:	fa92 f1a2 	rbit	r1, r2
 80054b2:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80054b6:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 80054ba:	6011      	str	r1, [r2, #0]
  return result;
 80054bc:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80054c0:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 80054c4:	6812      	ldr	r2, [r2, #0]
 80054c6:	fab2 f282 	clz	r2, r2
 80054ca:	b2d2      	uxtb	r2, r2
 80054cc:	f042 0220 	orr.w	r2, r2, #32
 80054d0:	b2d2      	uxtb	r2, r2
 80054d2:	f002 021f 	and.w	r2, r2, #31
 80054d6:	2101      	movs	r1, #1
 80054d8:	fa01 f202 	lsl.w	r2, r1, r2
 80054dc:	4013      	ands	r3, r2
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d182      	bne.n	80053e8 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80054e2:	4b3c      	ldr	r3, [pc, #240]	@ (80055d4 <HAL_RCC_OscConfig+0xe38>)
 80054e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054e6:	f023 020f 	bic.w	r2, r3, #15
 80054ea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80054ee:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054f6:	4937      	ldr	r1, [pc, #220]	@ (80055d4 <HAL_RCC_OscConfig+0xe38>)
 80054f8:	4313      	orrs	r3, r2
 80054fa:	62cb      	str	r3, [r1, #44]	@ 0x2c
 80054fc:	4b35      	ldr	r3, [pc, #212]	@ (80055d4 <HAL_RCC_OscConfig+0xe38>)
 80054fe:	685b      	ldr	r3, [r3, #4]
 8005500:	f423 1276 	bic.w	r2, r3, #4030464	@ 0x3d8000
 8005504:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005508:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	6a19      	ldr	r1, [r3, #32]
 8005510:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005514:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	69db      	ldr	r3, [r3, #28]
 800551c:	430b      	orrs	r3, r1
 800551e:	492d      	ldr	r1, [pc, #180]	@ (80055d4 <HAL_RCC_OscConfig+0xe38>)
 8005520:	4313      	orrs	r3, r2
 8005522:	604b      	str	r3, [r1, #4]
 8005524:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005528:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 800552c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005530:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005532:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005536:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	fa93 f2a3 	rbit	r2, r3
 8005540:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005544:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8005548:	601a      	str	r2, [r3, #0]
  return result;
 800554a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800554e:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8005552:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005554:	fab3 f383 	clz	r3, r3
 8005558:	b2db      	uxtb	r3, r3
 800555a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800555e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8005562:	009b      	lsls	r3, r3, #2
 8005564:	461a      	mov	r2, r3
 8005566:	2301      	movs	r3, #1
 8005568:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800556a:	f7fc fbab 	bl	8001cc4 <HAL_GetTick>
 800556e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005572:	e009      	b.n	8005588 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005574:	f7fc fba6 	bl	8001cc4 <HAL_GetTick>
 8005578:	4602      	mov	r2, r0
 800557a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800557e:	1ad3      	subs	r3, r2, r3
 8005580:	2b02      	cmp	r3, #2
 8005582:	d901      	bls.n	8005588 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8005584:	2303      	movs	r3, #3
 8005586:	e156      	b.n	8005836 <HAL_RCC_OscConfig+0x109a>
 8005588:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800558c:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8005590:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005594:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005596:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800559a:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	fa93 f2a3 	rbit	r2, r3
 80055a4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80055a8:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80055ac:	601a      	str	r2, [r3, #0]
  return result;
 80055ae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80055b2:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80055b6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80055b8:	fab3 f383 	clz	r3, r3
 80055bc:	b2db      	uxtb	r3, r3
 80055be:	095b      	lsrs	r3, r3, #5
 80055c0:	b2db      	uxtb	r3, r3
 80055c2:	f043 0301 	orr.w	r3, r3, #1
 80055c6:	b2db      	uxtb	r3, r3
 80055c8:	2b01      	cmp	r3, #1
 80055ca:	d105      	bne.n	80055d8 <HAL_RCC_OscConfig+0xe3c>
 80055cc:	4b01      	ldr	r3, [pc, #4]	@ (80055d4 <HAL_RCC_OscConfig+0xe38>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	e02a      	b.n	8005628 <HAL_RCC_OscConfig+0xe8c>
 80055d2:	bf00      	nop
 80055d4:	40021000 	.word	0x40021000
 80055d8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80055dc:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80055e0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80055e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055e6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80055ea:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	fa93 f2a3 	rbit	r2, r3
 80055f4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80055f8:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80055fc:	601a      	str	r2, [r3, #0]
 80055fe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005602:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8005606:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800560a:	601a      	str	r2, [r3, #0]
 800560c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005610:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	fa93 f2a3 	rbit	r2, r3
 800561a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800561e:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8005622:	601a      	str	r2, [r3, #0]
 8005624:	4b86      	ldr	r3, [pc, #536]	@ (8005840 <HAL_RCC_OscConfig+0x10a4>)
 8005626:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005628:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800562c:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8005630:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8005634:	6011      	str	r1, [r2, #0]
 8005636:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800563a:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 800563e:	6812      	ldr	r2, [r2, #0]
 8005640:	fa92 f1a2 	rbit	r1, r2
 8005644:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8005648:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 800564c:	6011      	str	r1, [r2, #0]
  return result;
 800564e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8005652:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8005656:	6812      	ldr	r2, [r2, #0]
 8005658:	fab2 f282 	clz	r2, r2
 800565c:	b2d2      	uxtb	r2, r2
 800565e:	f042 0220 	orr.w	r2, r2, #32
 8005662:	b2d2      	uxtb	r2, r2
 8005664:	f002 021f 	and.w	r2, r2, #31
 8005668:	2101      	movs	r1, #1
 800566a:	fa01 f202 	lsl.w	r2, r1, r2
 800566e:	4013      	ands	r3, r2
 8005670:	2b00      	cmp	r3, #0
 8005672:	f43f af7f 	beq.w	8005574 <HAL_RCC_OscConfig+0xdd8>
 8005676:	e0dd      	b.n	8005834 <HAL_RCC_OscConfig+0x1098>
 8005678:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800567c:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8005680:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005684:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005686:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800568a:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	fa93 f2a3 	rbit	r2, r3
 8005694:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005698:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800569c:	601a      	str	r2, [r3, #0]
  return result;
 800569e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80056a2:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80056a6:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056a8:	fab3 f383 	clz	r3, r3
 80056ac:	b2db      	uxtb	r3, r3
 80056ae:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80056b2:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80056b6:	009b      	lsls	r3, r3, #2
 80056b8:	461a      	mov	r2, r3
 80056ba:	2300      	movs	r3, #0
 80056bc:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056be:	f7fc fb01 	bl	8001cc4 <HAL_GetTick>
 80056c2:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80056c6:	e009      	b.n	80056dc <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80056c8:	f7fc fafc 	bl	8001cc4 <HAL_GetTick>
 80056cc:	4602      	mov	r2, r0
 80056ce:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80056d2:	1ad3      	subs	r3, r2, r3
 80056d4:	2b02      	cmp	r3, #2
 80056d6:	d901      	bls.n	80056dc <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 80056d8:	2303      	movs	r3, #3
 80056da:	e0ac      	b.n	8005836 <HAL_RCC_OscConfig+0x109a>
 80056dc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80056e0:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80056e4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80056e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056ea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80056ee:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	fa93 f2a3 	rbit	r2, r3
 80056f8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80056fc:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8005700:	601a      	str	r2, [r3, #0]
  return result;
 8005702:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005706:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800570a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800570c:	fab3 f383 	clz	r3, r3
 8005710:	b2db      	uxtb	r3, r3
 8005712:	095b      	lsrs	r3, r3, #5
 8005714:	b2db      	uxtb	r3, r3
 8005716:	f043 0301 	orr.w	r3, r3, #1
 800571a:	b2db      	uxtb	r3, r3
 800571c:	2b01      	cmp	r3, #1
 800571e:	d102      	bne.n	8005726 <HAL_RCC_OscConfig+0xf8a>
 8005720:	4b47      	ldr	r3, [pc, #284]	@ (8005840 <HAL_RCC_OscConfig+0x10a4>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	e027      	b.n	8005776 <HAL_RCC_OscConfig+0xfda>
 8005726:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800572a:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 800572e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005732:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005734:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005738:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	fa93 f2a3 	rbit	r2, r3
 8005742:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005746:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 800574a:	601a      	str	r2, [r3, #0]
 800574c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005750:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8005754:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005758:	601a      	str	r2, [r3, #0]
 800575a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800575e:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	fa93 f2a3 	rbit	r2, r3
 8005768:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800576c:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8005770:	601a      	str	r2, [r3, #0]
 8005772:	4b33      	ldr	r3, [pc, #204]	@ (8005840 <HAL_RCC_OscConfig+0x10a4>)
 8005774:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005776:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800577a:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 800577e:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8005782:	6011      	str	r1, [r2, #0]
 8005784:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8005788:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 800578c:	6812      	ldr	r2, [r2, #0]
 800578e:	fa92 f1a2 	rbit	r1, r2
 8005792:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8005796:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 800579a:	6011      	str	r1, [r2, #0]
  return result;
 800579c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80057a0:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 80057a4:	6812      	ldr	r2, [r2, #0]
 80057a6:	fab2 f282 	clz	r2, r2
 80057aa:	b2d2      	uxtb	r2, r2
 80057ac:	f042 0220 	orr.w	r2, r2, #32
 80057b0:	b2d2      	uxtb	r2, r2
 80057b2:	f002 021f 	and.w	r2, r2, #31
 80057b6:	2101      	movs	r1, #1
 80057b8:	fa01 f202 	lsl.w	r2, r1, r2
 80057bc:	4013      	ands	r3, r2
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d182      	bne.n	80056c8 <HAL_RCC_OscConfig+0xf2c>
 80057c2:	e037      	b.n	8005834 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80057c4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80057c8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	699b      	ldr	r3, [r3, #24]
 80057d0:	2b01      	cmp	r3, #1
 80057d2:	d101      	bne.n	80057d8 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 80057d4:	2301      	movs	r3, #1
 80057d6:	e02e      	b.n	8005836 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80057d8:	4b19      	ldr	r3, [pc, #100]	@ (8005840 <HAL_RCC_OscConfig+0x10a4>)
 80057da:	685b      	ldr	r3, [r3, #4]
 80057dc:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 80057e0:	4b17      	ldr	r3, [pc, #92]	@ (8005840 <HAL_RCC_OscConfig+0x10a4>)
 80057e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057e4:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80057e8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80057ec:	f403 32c0 	and.w	r2, r3, #98304	@ 0x18000
 80057f0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80057f4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	69db      	ldr	r3, [r3, #28]
 80057fc:	429a      	cmp	r2, r3
 80057fe:	d117      	bne.n	8005830 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8005800:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8005804:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8005808:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800580c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005814:	429a      	cmp	r2, r3
 8005816:	d10b      	bne.n	8005830 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8005818:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800581c:	f003 020f 	and.w	r2, r3, #15
 8005820:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005824:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 800582c:	429a      	cmp	r2, r3
 800582e:	d001      	beq.n	8005834 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8005830:	2301      	movs	r3, #1
 8005832:	e000      	b.n	8005836 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8005834:	2300      	movs	r3, #0
}
 8005836:	4618      	mov	r0, r3
 8005838:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 800583c:	46bd      	mov	sp, r7
 800583e:	bd80      	pop	{r7, pc}
 8005840:	40021000 	.word	0x40021000

08005844 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b09e      	sub	sp, #120	@ 0x78
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
 800584c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800584e:	2300      	movs	r3, #0
 8005850:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d101      	bne.n	800585c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005858:	2301      	movs	r3, #1
 800585a:	e162      	b.n	8005b22 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800585c:	4b90      	ldr	r3, [pc, #576]	@ (8005aa0 <HAL_RCC_ClockConfig+0x25c>)
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f003 0307 	and.w	r3, r3, #7
 8005864:	683a      	ldr	r2, [r7, #0]
 8005866:	429a      	cmp	r2, r3
 8005868:	d910      	bls.n	800588c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800586a:	4b8d      	ldr	r3, [pc, #564]	@ (8005aa0 <HAL_RCC_ClockConfig+0x25c>)
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f023 0207 	bic.w	r2, r3, #7
 8005872:	498b      	ldr	r1, [pc, #556]	@ (8005aa0 <HAL_RCC_ClockConfig+0x25c>)
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	4313      	orrs	r3, r2
 8005878:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800587a:	4b89      	ldr	r3, [pc, #548]	@ (8005aa0 <HAL_RCC_ClockConfig+0x25c>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f003 0307 	and.w	r3, r3, #7
 8005882:	683a      	ldr	r2, [r7, #0]
 8005884:	429a      	cmp	r2, r3
 8005886:	d001      	beq.n	800588c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005888:	2301      	movs	r3, #1
 800588a:	e14a      	b.n	8005b22 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f003 0302 	and.w	r3, r3, #2
 8005894:	2b00      	cmp	r3, #0
 8005896:	d008      	beq.n	80058aa <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005898:	4b82      	ldr	r3, [pc, #520]	@ (8005aa4 <HAL_RCC_ClockConfig+0x260>)
 800589a:	685b      	ldr	r3, [r3, #4]
 800589c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	689b      	ldr	r3, [r3, #8]
 80058a4:	497f      	ldr	r1, [pc, #508]	@ (8005aa4 <HAL_RCC_ClockConfig+0x260>)
 80058a6:	4313      	orrs	r3, r2
 80058a8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f003 0301 	and.w	r3, r3, #1
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	f000 80dc 	beq.w	8005a70 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	685b      	ldr	r3, [r3, #4]
 80058bc:	2b01      	cmp	r3, #1
 80058be:	d13c      	bne.n	800593a <HAL_RCC_ClockConfig+0xf6>
 80058c0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80058c4:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058c6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80058c8:	fa93 f3a3 	rbit	r3, r3
 80058cc:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80058ce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80058d0:	fab3 f383 	clz	r3, r3
 80058d4:	b2db      	uxtb	r3, r3
 80058d6:	095b      	lsrs	r3, r3, #5
 80058d8:	b2db      	uxtb	r3, r3
 80058da:	f043 0301 	orr.w	r3, r3, #1
 80058de:	b2db      	uxtb	r3, r3
 80058e0:	2b01      	cmp	r3, #1
 80058e2:	d102      	bne.n	80058ea <HAL_RCC_ClockConfig+0xa6>
 80058e4:	4b6f      	ldr	r3, [pc, #444]	@ (8005aa4 <HAL_RCC_ClockConfig+0x260>)
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	e00f      	b.n	800590a <HAL_RCC_ClockConfig+0xc6>
 80058ea:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80058ee:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058f0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80058f2:	fa93 f3a3 	rbit	r3, r3
 80058f6:	667b      	str	r3, [r7, #100]	@ 0x64
 80058f8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80058fc:	663b      	str	r3, [r7, #96]	@ 0x60
 80058fe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005900:	fa93 f3a3 	rbit	r3, r3
 8005904:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005906:	4b67      	ldr	r3, [pc, #412]	@ (8005aa4 <HAL_RCC_ClockConfig+0x260>)
 8005908:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800590a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800590e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005910:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005912:	fa92 f2a2 	rbit	r2, r2
 8005916:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8005918:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800591a:	fab2 f282 	clz	r2, r2
 800591e:	b2d2      	uxtb	r2, r2
 8005920:	f042 0220 	orr.w	r2, r2, #32
 8005924:	b2d2      	uxtb	r2, r2
 8005926:	f002 021f 	and.w	r2, r2, #31
 800592a:	2101      	movs	r1, #1
 800592c:	fa01 f202 	lsl.w	r2, r1, r2
 8005930:	4013      	ands	r3, r2
 8005932:	2b00      	cmp	r3, #0
 8005934:	d17b      	bne.n	8005a2e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005936:	2301      	movs	r3, #1
 8005938:	e0f3      	b.n	8005b22 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	685b      	ldr	r3, [r3, #4]
 800593e:	2b02      	cmp	r3, #2
 8005940:	d13c      	bne.n	80059bc <HAL_RCC_ClockConfig+0x178>
 8005942:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005946:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005948:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800594a:	fa93 f3a3 	rbit	r3, r3
 800594e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8005950:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005952:	fab3 f383 	clz	r3, r3
 8005956:	b2db      	uxtb	r3, r3
 8005958:	095b      	lsrs	r3, r3, #5
 800595a:	b2db      	uxtb	r3, r3
 800595c:	f043 0301 	orr.w	r3, r3, #1
 8005960:	b2db      	uxtb	r3, r3
 8005962:	2b01      	cmp	r3, #1
 8005964:	d102      	bne.n	800596c <HAL_RCC_ClockConfig+0x128>
 8005966:	4b4f      	ldr	r3, [pc, #316]	@ (8005aa4 <HAL_RCC_ClockConfig+0x260>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	e00f      	b.n	800598c <HAL_RCC_ClockConfig+0x148>
 800596c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005970:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005972:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005974:	fa93 f3a3 	rbit	r3, r3
 8005978:	647b      	str	r3, [r7, #68]	@ 0x44
 800597a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800597e:	643b      	str	r3, [r7, #64]	@ 0x40
 8005980:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005982:	fa93 f3a3 	rbit	r3, r3
 8005986:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005988:	4b46      	ldr	r3, [pc, #280]	@ (8005aa4 <HAL_RCC_ClockConfig+0x260>)
 800598a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800598c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005990:	63ba      	str	r2, [r7, #56]	@ 0x38
 8005992:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005994:	fa92 f2a2 	rbit	r2, r2
 8005998:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 800599a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800599c:	fab2 f282 	clz	r2, r2
 80059a0:	b2d2      	uxtb	r2, r2
 80059a2:	f042 0220 	orr.w	r2, r2, #32
 80059a6:	b2d2      	uxtb	r2, r2
 80059a8:	f002 021f 	and.w	r2, r2, #31
 80059ac:	2101      	movs	r1, #1
 80059ae:	fa01 f202 	lsl.w	r2, r1, r2
 80059b2:	4013      	ands	r3, r2
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d13a      	bne.n	8005a2e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80059b8:	2301      	movs	r3, #1
 80059ba:	e0b2      	b.n	8005b22 <HAL_RCC_ClockConfig+0x2de>
 80059bc:	2302      	movs	r3, #2
 80059be:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059c2:	fa93 f3a3 	rbit	r3, r3
 80059c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80059c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80059ca:	fab3 f383 	clz	r3, r3
 80059ce:	b2db      	uxtb	r3, r3
 80059d0:	095b      	lsrs	r3, r3, #5
 80059d2:	b2db      	uxtb	r3, r3
 80059d4:	f043 0301 	orr.w	r3, r3, #1
 80059d8:	b2db      	uxtb	r3, r3
 80059da:	2b01      	cmp	r3, #1
 80059dc:	d102      	bne.n	80059e4 <HAL_RCC_ClockConfig+0x1a0>
 80059de:	4b31      	ldr	r3, [pc, #196]	@ (8005aa4 <HAL_RCC_ClockConfig+0x260>)
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	e00d      	b.n	8005a00 <HAL_RCC_ClockConfig+0x1bc>
 80059e4:	2302      	movs	r3, #2
 80059e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059ea:	fa93 f3a3 	rbit	r3, r3
 80059ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80059f0:	2302      	movs	r3, #2
 80059f2:	623b      	str	r3, [r7, #32]
 80059f4:	6a3b      	ldr	r3, [r7, #32]
 80059f6:	fa93 f3a3 	rbit	r3, r3
 80059fa:	61fb      	str	r3, [r7, #28]
 80059fc:	4b29      	ldr	r3, [pc, #164]	@ (8005aa4 <HAL_RCC_ClockConfig+0x260>)
 80059fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a00:	2202      	movs	r2, #2
 8005a02:	61ba      	str	r2, [r7, #24]
 8005a04:	69ba      	ldr	r2, [r7, #24]
 8005a06:	fa92 f2a2 	rbit	r2, r2
 8005a0a:	617a      	str	r2, [r7, #20]
  return result;
 8005a0c:	697a      	ldr	r2, [r7, #20]
 8005a0e:	fab2 f282 	clz	r2, r2
 8005a12:	b2d2      	uxtb	r2, r2
 8005a14:	f042 0220 	orr.w	r2, r2, #32
 8005a18:	b2d2      	uxtb	r2, r2
 8005a1a:	f002 021f 	and.w	r2, r2, #31
 8005a1e:	2101      	movs	r1, #1
 8005a20:	fa01 f202 	lsl.w	r2, r1, r2
 8005a24:	4013      	ands	r3, r2
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d101      	bne.n	8005a2e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	e079      	b.n	8005b22 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005a2e:	4b1d      	ldr	r3, [pc, #116]	@ (8005aa4 <HAL_RCC_ClockConfig+0x260>)
 8005a30:	685b      	ldr	r3, [r3, #4]
 8005a32:	f023 0203 	bic.w	r2, r3, #3
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	685b      	ldr	r3, [r3, #4]
 8005a3a:	491a      	ldr	r1, [pc, #104]	@ (8005aa4 <HAL_RCC_ClockConfig+0x260>)
 8005a3c:	4313      	orrs	r3, r2
 8005a3e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005a40:	f7fc f940 	bl	8001cc4 <HAL_GetTick>
 8005a44:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a46:	e00a      	b.n	8005a5e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a48:	f7fc f93c 	bl	8001cc4 <HAL_GetTick>
 8005a4c:	4602      	mov	r2, r0
 8005a4e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005a50:	1ad3      	subs	r3, r2, r3
 8005a52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d901      	bls.n	8005a5e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8005a5a:	2303      	movs	r3, #3
 8005a5c:	e061      	b.n	8005b22 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a5e:	4b11      	ldr	r3, [pc, #68]	@ (8005aa4 <HAL_RCC_ClockConfig+0x260>)
 8005a60:	685b      	ldr	r3, [r3, #4]
 8005a62:	f003 020c 	and.w	r2, r3, #12
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	685b      	ldr	r3, [r3, #4]
 8005a6a:	009b      	lsls	r3, r3, #2
 8005a6c:	429a      	cmp	r2, r3
 8005a6e:	d1eb      	bne.n	8005a48 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005a70:	4b0b      	ldr	r3, [pc, #44]	@ (8005aa0 <HAL_RCC_ClockConfig+0x25c>)
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f003 0307 	and.w	r3, r3, #7
 8005a78:	683a      	ldr	r2, [r7, #0]
 8005a7a:	429a      	cmp	r2, r3
 8005a7c:	d214      	bcs.n	8005aa8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a7e:	4b08      	ldr	r3, [pc, #32]	@ (8005aa0 <HAL_RCC_ClockConfig+0x25c>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f023 0207 	bic.w	r2, r3, #7
 8005a86:	4906      	ldr	r1, [pc, #24]	@ (8005aa0 <HAL_RCC_ClockConfig+0x25c>)
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	4313      	orrs	r3, r2
 8005a8c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a8e:	4b04      	ldr	r3, [pc, #16]	@ (8005aa0 <HAL_RCC_ClockConfig+0x25c>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f003 0307 	and.w	r3, r3, #7
 8005a96:	683a      	ldr	r2, [r7, #0]
 8005a98:	429a      	cmp	r2, r3
 8005a9a:	d005      	beq.n	8005aa8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8005a9c:	2301      	movs	r3, #1
 8005a9e:	e040      	b.n	8005b22 <HAL_RCC_ClockConfig+0x2de>
 8005aa0:	40022000 	.word	0x40022000
 8005aa4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f003 0304 	and.w	r3, r3, #4
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d008      	beq.n	8005ac6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005ab4:	4b1d      	ldr	r3, [pc, #116]	@ (8005b2c <HAL_RCC_ClockConfig+0x2e8>)
 8005ab6:	685b      	ldr	r3, [r3, #4]
 8005ab8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	68db      	ldr	r3, [r3, #12]
 8005ac0:	491a      	ldr	r1, [pc, #104]	@ (8005b2c <HAL_RCC_ClockConfig+0x2e8>)
 8005ac2:	4313      	orrs	r3, r2
 8005ac4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f003 0308 	and.w	r3, r3, #8
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d009      	beq.n	8005ae6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005ad2:	4b16      	ldr	r3, [pc, #88]	@ (8005b2c <HAL_RCC_ClockConfig+0x2e8>)
 8005ad4:	685b      	ldr	r3, [r3, #4]
 8005ad6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	691b      	ldr	r3, [r3, #16]
 8005ade:	00db      	lsls	r3, r3, #3
 8005ae0:	4912      	ldr	r1, [pc, #72]	@ (8005b2c <HAL_RCC_ClockConfig+0x2e8>)
 8005ae2:	4313      	orrs	r3, r2
 8005ae4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8005ae6:	f000 f829 	bl	8005b3c <HAL_RCC_GetSysClockFreq>
 8005aea:	4601      	mov	r1, r0
 8005aec:	4b0f      	ldr	r3, [pc, #60]	@ (8005b2c <HAL_RCC_ClockConfig+0x2e8>)
 8005aee:	685b      	ldr	r3, [r3, #4]
 8005af0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005af4:	22f0      	movs	r2, #240	@ 0xf0
 8005af6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005af8:	693a      	ldr	r2, [r7, #16]
 8005afa:	fa92 f2a2 	rbit	r2, r2
 8005afe:	60fa      	str	r2, [r7, #12]
  return result;
 8005b00:	68fa      	ldr	r2, [r7, #12]
 8005b02:	fab2 f282 	clz	r2, r2
 8005b06:	b2d2      	uxtb	r2, r2
 8005b08:	40d3      	lsrs	r3, r2
 8005b0a:	4a09      	ldr	r2, [pc, #36]	@ (8005b30 <HAL_RCC_ClockConfig+0x2ec>)
 8005b0c:	5cd3      	ldrb	r3, [r2, r3]
 8005b0e:	fa21 f303 	lsr.w	r3, r1, r3
 8005b12:	4a08      	ldr	r2, [pc, #32]	@ (8005b34 <HAL_RCC_ClockConfig+0x2f0>)
 8005b14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8005b16:	4b08      	ldr	r3, [pc, #32]	@ (8005b38 <HAL_RCC_ClockConfig+0x2f4>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	f7fc f88e 	bl	8001c3c <HAL_InitTick>
  
  return HAL_OK;
 8005b20:	2300      	movs	r3, #0
}
 8005b22:	4618      	mov	r0, r3
 8005b24:	3778      	adds	r7, #120	@ 0x78
 8005b26:	46bd      	mov	sp, r7
 8005b28:	bd80      	pop	{r7, pc}
 8005b2a:	bf00      	nop
 8005b2c:	40021000 	.word	0x40021000
 8005b30:	0800c640 	.word	0x0800c640
 8005b34:	20000000 	.word	0x20000000
 8005b38:	20000004 	.word	0x20000004

08005b3c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	b087      	sub	sp, #28
 8005b40:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005b42:	2300      	movs	r3, #0
 8005b44:	60fb      	str	r3, [r7, #12]
 8005b46:	2300      	movs	r3, #0
 8005b48:	60bb      	str	r3, [r7, #8]
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	617b      	str	r3, [r7, #20]
 8005b4e:	2300      	movs	r3, #0
 8005b50:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005b52:	2300      	movs	r3, #0
 8005b54:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8005b56:	4b1f      	ldr	r3, [pc, #124]	@ (8005bd4 <HAL_RCC_GetSysClockFreq+0x98>)
 8005b58:	685b      	ldr	r3, [r3, #4]
 8005b5a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	f003 030c 	and.w	r3, r3, #12
 8005b62:	2b04      	cmp	r3, #4
 8005b64:	d002      	beq.n	8005b6c <HAL_RCC_GetSysClockFreq+0x30>
 8005b66:	2b08      	cmp	r3, #8
 8005b68:	d003      	beq.n	8005b72 <HAL_RCC_GetSysClockFreq+0x36>
 8005b6a:	e029      	b.n	8005bc0 <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005b6c:	4b1a      	ldr	r3, [pc, #104]	@ (8005bd8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005b6e:	613b      	str	r3, [r7, #16]
      break;
 8005b70:	e029      	b.n	8005bc6 <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	0c9b      	lsrs	r3, r3, #18
 8005b76:	f003 030f 	and.w	r3, r3, #15
 8005b7a:	4a18      	ldr	r2, [pc, #96]	@ (8005bdc <HAL_RCC_GetSysClockFreq+0xa0>)
 8005b7c:	5cd3      	ldrb	r3, [r2, r3]
 8005b7e:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8005b80:	4b14      	ldr	r3, [pc, #80]	@ (8005bd4 <HAL_RCC_GetSysClockFreq+0x98>)
 8005b82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b84:	f003 030f 	and.w	r3, r3, #15
 8005b88:	4a15      	ldr	r2, [pc, #84]	@ (8005be0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005b8a:	5cd3      	ldrb	r3, [r2, r3]
 8005b8c:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d008      	beq.n	8005baa <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005b98:	4a0f      	ldr	r2, [pc, #60]	@ (8005bd8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005b9a:	68bb      	ldr	r3, [r7, #8]
 8005b9c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	fb02 f303 	mul.w	r3, r2, r3
 8005ba6:	617b      	str	r3, [r7, #20]
 8005ba8:	e007      	b.n	8005bba <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005baa:	4a0b      	ldr	r2, [pc, #44]	@ (8005bd8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005bac:	68bb      	ldr	r3, [r7, #8]
 8005bae:	fbb2 f2f3 	udiv	r2, r2, r3
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	fb02 f303 	mul.w	r3, r2, r3
 8005bb8:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8005bba:	697b      	ldr	r3, [r7, #20]
 8005bbc:	613b      	str	r3, [r7, #16]
      break;
 8005bbe:	e002      	b.n	8005bc6 <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005bc0:	4b05      	ldr	r3, [pc, #20]	@ (8005bd8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005bc2:	613b      	str	r3, [r7, #16]
      break;
 8005bc4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005bc6:	693b      	ldr	r3, [r7, #16]
}
 8005bc8:	4618      	mov	r0, r3
 8005bca:	371c      	adds	r7, #28
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd2:	4770      	bx	lr
 8005bd4:	40021000 	.word	0x40021000
 8005bd8:	007a1200 	.word	0x007a1200
 8005bdc:	0800c658 	.word	0x0800c658
 8005be0:	0800c668 	.word	0x0800c668

08005be4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005be4:	b480      	push	{r7}
 8005be6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005be8:	4b03      	ldr	r3, [pc, #12]	@ (8005bf8 <HAL_RCC_GetHCLKFreq+0x14>)
 8005bea:	681b      	ldr	r3, [r3, #0]
}
 8005bec:	4618      	mov	r0, r3
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf4:	4770      	bx	lr
 8005bf6:	bf00      	nop
 8005bf8:	20000000 	.word	0x20000000

08005bfc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b082      	sub	sp, #8
 8005c00:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8005c02:	f7ff ffef 	bl	8005be4 <HAL_RCC_GetHCLKFreq>
 8005c06:	4601      	mov	r1, r0
 8005c08:	4b0b      	ldr	r3, [pc, #44]	@ (8005c38 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8005c0a:	685b      	ldr	r3, [r3, #4]
 8005c0c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005c10:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8005c14:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c16:	687a      	ldr	r2, [r7, #4]
 8005c18:	fa92 f2a2 	rbit	r2, r2
 8005c1c:	603a      	str	r2, [r7, #0]
  return result;
 8005c1e:	683a      	ldr	r2, [r7, #0]
 8005c20:	fab2 f282 	clz	r2, r2
 8005c24:	b2d2      	uxtb	r2, r2
 8005c26:	40d3      	lsrs	r3, r2
 8005c28:	4a04      	ldr	r2, [pc, #16]	@ (8005c3c <HAL_RCC_GetPCLK1Freq+0x40>)
 8005c2a:	5cd3      	ldrb	r3, [r2, r3]
 8005c2c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8005c30:	4618      	mov	r0, r3
 8005c32:	3708      	adds	r7, #8
 8005c34:	46bd      	mov	sp, r7
 8005c36:	bd80      	pop	{r7, pc}
 8005c38:	40021000 	.word	0x40021000
 8005c3c:	0800c650 	.word	0x0800c650

08005c40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b082      	sub	sp, #8
 8005c44:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8005c46:	f7ff ffcd 	bl	8005be4 <HAL_RCC_GetHCLKFreq>
 8005c4a:	4601      	mov	r1, r0
 8005c4c:	4b0b      	ldr	r3, [pc, #44]	@ (8005c7c <HAL_RCC_GetPCLK2Freq+0x3c>)
 8005c4e:	685b      	ldr	r3, [r3, #4]
 8005c50:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8005c54:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8005c58:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c5a:	687a      	ldr	r2, [r7, #4]
 8005c5c:	fa92 f2a2 	rbit	r2, r2
 8005c60:	603a      	str	r2, [r7, #0]
  return result;
 8005c62:	683a      	ldr	r2, [r7, #0]
 8005c64:	fab2 f282 	clz	r2, r2
 8005c68:	b2d2      	uxtb	r2, r2
 8005c6a:	40d3      	lsrs	r3, r2
 8005c6c:	4a04      	ldr	r2, [pc, #16]	@ (8005c80 <HAL_RCC_GetPCLK2Freq+0x40>)
 8005c6e:	5cd3      	ldrb	r3, [r2, r3]
 8005c70:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8005c74:	4618      	mov	r0, r3
 8005c76:	3708      	adds	r7, #8
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	bd80      	pop	{r7, pc}
 8005c7c:	40021000 	.word	0x40021000
 8005c80:	0800c650 	.word	0x0800c650

08005c84 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b092      	sub	sp, #72	@ 0x48
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8005c90:	2300      	movs	r3, #0
 8005c92:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8005c94:	2300      	movs	r3, #0
 8005c96:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	f000 80d4 	beq.w	8005e50 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005ca8:	4b4e      	ldr	r3, [pc, #312]	@ (8005de4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005caa:	69db      	ldr	r3, [r3, #28]
 8005cac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d10e      	bne.n	8005cd2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005cb4:	4b4b      	ldr	r3, [pc, #300]	@ (8005de4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005cb6:	69db      	ldr	r3, [r3, #28]
 8005cb8:	4a4a      	ldr	r2, [pc, #296]	@ (8005de4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005cba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005cbe:	61d3      	str	r3, [r2, #28]
 8005cc0:	4b48      	ldr	r3, [pc, #288]	@ (8005de4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005cc2:	69db      	ldr	r3, [r3, #28]
 8005cc4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005cc8:	60bb      	str	r3, [r7, #8]
 8005cca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005ccc:	2301      	movs	r3, #1
 8005cce:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005cd2:	4b45      	ldr	r3, [pc, #276]	@ (8005de8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d118      	bne.n	8005d10 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005cde:	4b42      	ldr	r3, [pc, #264]	@ (8005de8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	4a41      	ldr	r2, [pc, #260]	@ (8005de8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005ce4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005ce8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005cea:	f7fb ffeb 	bl	8001cc4 <HAL_GetTick>
 8005cee:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005cf0:	e008      	b.n	8005d04 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005cf2:	f7fb ffe7 	bl	8001cc4 <HAL_GetTick>
 8005cf6:	4602      	mov	r2, r0
 8005cf8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005cfa:	1ad3      	subs	r3, r2, r3
 8005cfc:	2b64      	cmp	r3, #100	@ 0x64
 8005cfe:	d901      	bls.n	8005d04 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8005d00:	2303      	movs	r3, #3
 8005d02:	e1d6      	b.n	80060b2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d04:	4b38      	ldr	r3, [pc, #224]	@ (8005de8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d0f0      	beq.n	8005cf2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005d10:	4b34      	ldr	r3, [pc, #208]	@ (8005de4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d12:	6a1b      	ldr	r3, [r3, #32]
 8005d14:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005d18:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005d1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	f000 8084 	beq.w	8005e2a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	685b      	ldr	r3, [r3, #4]
 8005d26:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005d2a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005d2c:	429a      	cmp	r2, r3
 8005d2e:	d07c      	beq.n	8005e2a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005d30:	4b2c      	ldr	r3, [pc, #176]	@ (8005de4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d32:	6a1b      	ldr	r3, [r3, #32]
 8005d34:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005d38:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005d3a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005d3e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d42:	fa93 f3a3 	rbit	r3, r3
 8005d46:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8005d48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005d4a:	fab3 f383 	clz	r3, r3
 8005d4e:	b2db      	uxtb	r3, r3
 8005d50:	461a      	mov	r2, r3
 8005d52:	4b26      	ldr	r3, [pc, #152]	@ (8005dec <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005d54:	4413      	add	r3, r2
 8005d56:	009b      	lsls	r3, r3, #2
 8005d58:	461a      	mov	r2, r3
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	6013      	str	r3, [r2, #0]
 8005d5e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005d62:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d66:	fa93 f3a3 	rbit	r3, r3
 8005d6a:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8005d6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005d6e:	fab3 f383 	clz	r3, r3
 8005d72:	b2db      	uxtb	r3, r3
 8005d74:	461a      	mov	r2, r3
 8005d76:	4b1d      	ldr	r3, [pc, #116]	@ (8005dec <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005d78:	4413      	add	r3, r2
 8005d7a:	009b      	lsls	r3, r3, #2
 8005d7c:	461a      	mov	r2, r3
 8005d7e:	2300      	movs	r3, #0
 8005d80:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005d82:	4a18      	ldr	r2, [pc, #96]	@ (8005de4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d86:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005d88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d8a:	f003 0301 	and.w	r3, r3, #1
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d04b      	beq.n	8005e2a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d92:	f7fb ff97 	bl	8001cc4 <HAL_GetTick>
 8005d96:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d98:	e00a      	b.n	8005db0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d9a:	f7fb ff93 	bl	8001cc4 <HAL_GetTick>
 8005d9e:	4602      	mov	r2, r0
 8005da0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005da2:	1ad3      	subs	r3, r2, r3
 8005da4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d901      	bls.n	8005db0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8005dac:	2303      	movs	r3, #3
 8005dae:	e180      	b.n	80060b2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8005db0:	2302      	movs	r3, #2
 8005db2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005db4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005db6:	fa93 f3a3 	rbit	r3, r3
 8005dba:	627b      	str	r3, [r7, #36]	@ 0x24
 8005dbc:	2302      	movs	r3, #2
 8005dbe:	623b      	str	r3, [r7, #32]
 8005dc0:	6a3b      	ldr	r3, [r7, #32]
 8005dc2:	fa93 f3a3 	rbit	r3, r3
 8005dc6:	61fb      	str	r3, [r7, #28]
  return result;
 8005dc8:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005dca:	fab3 f383 	clz	r3, r3
 8005dce:	b2db      	uxtb	r3, r3
 8005dd0:	095b      	lsrs	r3, r3, #5
 8005dd2:	b2db      	uxtb	r3, r3
 8005dd4:	f043 0302 	orr.w	r3, r3, #2
 8005dd8:	b2db      	uxtb	r3, r3
 8005dda:	2b02      	cmp	r3, #2
 8005ddc:	d108      	bne.n	8005df0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8005dde:	4b01      	ldr	r3, [pc, #4]	@ (8005de4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005de0:	6a1b      	ldr	r3, [r3, #32]
 8005de2:	e00d      	b.n	8005e00 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8005de4:	40021000 	.word	0x40021000
 8005de8:	40007000 	.word	0x40007000
 8005dec:	10908100 	.word	0x10908100
 8005df0:	2302      	movs	r3, #2
 8005df2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005df4:	69bb      	ldr	r3, [r7, #24]
 8005df6:	fa93 f3a3 	rbit	r3, r3
 8005dfa:	617b      	str	r3, [r7, #20]
 8005dfc:	4b9a      	ldr	r3, [pc, #616]	@ (8006068 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005dfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e00:	2202      	movs	r2, #2
 8005e02:	613a      	str	r2, [r7, #16]
 8005e04:	693a      	ldr	r2, [r7, #16]
 8005e06:	fa92 f2a2 	rbit	r2, r2
 8005e0a:	60fa      	str	r2, [r7, #12]
  return result;
 8005e0c:	68fa      	ldr	r2, [r7, #12]
 8005e0e:	fab2 f282 	clz	r2, r2
 8005e12:	b2d2      	uxtb	r2, r2
 8005e14:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005e18:	b2d2      	uxtb	r2, r2
 8005e1a:	f002 021f 	and.w	r2, r2, #31
 8005e1e:	2101      	movs	r1, #1
 8005e20:	fa01 f202 	lsl.w	r2, r1, r2
 8005e24:	4013      	ands	r3, r2
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d0b7      	beq.n	8005d9a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8005e2a:	4b8f      	ldr	r3, [pc, #572]	@ (8006068 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005e2c:	6a1b      	ldr	r3, [r3, #32]
 8005e2e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	685b      	ldr	r3, [r3, #4]
 8005e36:	498c      	ldr	r1, [pc, #560]	@ (8006068 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005e38:	4313      	orrs	r3, r2
 8005e3a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005e3c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8005e40:	2b01      	cmp	r3, #1
 8005e42:	d105      	bne.n	8005e50 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e44:	4b88      	ldr	r3, [pc, #544]	@ (8006068 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005e46:	69db      	ldr	r3, [r3, #28]
 8005e48:	4a87      	ldr	r2, [pc, #540]	@ (8006068 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005e4a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005e4e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f003 0301 	and.w	r3, r3, #1
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d008      	beq.n	8005e6e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005e5c:	4b82      	ldr	r3, [pc, #520]	@ (8006068 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005e5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e60:	f023 0203 	bic.w	r2, r3, #3
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	689b      	ldr	r3, [r3, #8]
 8005e68:	497f      	ldr	r1, [pc, #508]	@ (8006068 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005e6a:	4313      	orrs	r3, r2
 8005e6c:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f003 0302 	and.w	r3, r3, #2
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d008      	beq.n	8005e8c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005e7a:	4b7b      	ldr	r3, [pc, #492]	@ (8006068 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005e7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e7e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	68db      	ldr	r3, [r3, #12]
 8005e86:	4978      	ldr	r1, [pc, #480]	@ (8006068 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005e88:	4313      	orrs	r3, r2
 8005e8a:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f003 0304 	and.w	r3, r3, #4
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d008      	beq.n	8005eaa <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005e98:	4b73      	ldr	r3, [pc, #460]	@ (8006068 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005e9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e9c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	691b      	ldr	r3, [r3, #16]
 8005ea4:	4970      	ldr	r1, [pc, #448]	@ (8006068 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005ea6:	4313      	orrs	r3, r2
 8005ea8:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f003 0320 	and.w	r3, r3, #32
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d008      	beq.n	8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005eb6:	4b6c      	ldr	r3, [pc, #432]	@ (8006068 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005eb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005eba:	f023 0210 	bic.w	r2, r3, #16
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	69db      	ldr	r3, [r3, #28]
 8005ec2:	4969      	ldr	r1, [pc, #420]	@ (8006068 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005ec4:	4313      	orrs	r3, r2
 8005ec6:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d008      	beq.n	8005ee6 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8005ed4:	4b64      	ldr	r3, [pc, #400]	@ (8006068 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005ed6:	685b      	ldr	r3, [r3, #4]
 8005ed8:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ee0:	4961      	ldr	r1, [pc, #388]	@ (8006068 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005ee2:	4313      	orrs	r3, r2
 8005ee4:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d008      	beq.n	8005f04 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005ef2:	4b5d      	ldr	r3, [pc, #372]	@ (8006068 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005ef4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ef6:	f023 0220 	bic.w	r2, r3, #32
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6a1b      	ldr	r3, [r3, #32]
 8005efe:	495a      	ldr	r1, [pc, #360]	@ (8006068 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005f00:	4313      	orrs	r3, r2
 8005f02:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d008      	beq.n	8005f22 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005f10:	4b55      	ldr	r3, [pc, #340]	@ (8006068 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005f12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f14:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f1c:	4952      	ldr	r1, [pc, #328]	@ (8006068 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005f1e:	4313      	orrs	r3, r2
 8005f20:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f003 0308 	and.w	r3, r3, #8
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d008      	beq.n	8005f40 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005f2e:	4b4e      	ldr	r3, [pc, #312]	@ (8006068 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005f30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f32:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	695b      	ldr	r3, [r3, #20]
 8005f3a:	494b      	ldr	r1, [pc, #300]	@ (8006068 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005f3c:	4313      	orrs	r3, r2
 8005f3e:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f003 0310 	and.w	r3, r3, #16
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d008      	beq.n	8005f5e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005f4c:	4b46      	ldr	r3, [pc, #280]	@ (8006068 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005f4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f50:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	699b      	ldr	r3, [r3, #24]
 8005f58:	4943      	ldr	r1, [pc, #268]	@ (8006068 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005f5a:	4313      	orrs	r3, r2
 8005f5c:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d008      	beq.n	8005f7c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005f6a:	4b3f      	ldr	r3, [pc, #252]	@ (8006068 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005f6c:	685b      	ldr	r3, [r3, #4]
 8005f6e:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f76:	493c      	ldr	r1, [pc, #240]	@ (8006068 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005f78:	4313      	orrs	r3, r2
 8005f7a:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d008      	beq.n	8005f9a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005f88:	4b37      	ldr	r3, [pc, #220]	@ (8006068 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005f8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f8c:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f94:	4934      	ldr	r1, [pc, #208]	@ (8006068 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005f96:	4313      	orrs	r3, r2
 8005f98:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d008      	beq.n	8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8005fa6:	4b30      	ldr	r3, [pc, #192]	@ (8006068 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005fa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005faa:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fb2:	492d      	ldr	r1, [pc, #180]	@ (8006068 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005fb4:	4313      	orrs	r3, r2
 8005fb6:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d008      	beq.n	8005fd6 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005fc4:	4b28      	ldr	r3, [pc, #160]	@ (8006068 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005fc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fc8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005fd0:	4925      	ldr	r1, [pc, #148]	@ (8006068 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005fd2:	4313      	orrs	r3, r2
 8005fd4:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d008      	beq.n	8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8005fe2:	4b21      	ldr	r3, [pc, #132]	@ (8006068 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005fe4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fe6:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fee:	491e      	ldr	r1, [pc, #120]	@ (8006068 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005ff0:	4313      	orrs	r3, r2
 8005ff2:	630b      	str	r3, [r1, #48]	@ 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d008      	beq.n	8006012 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8006000:	4b19      	ldr	r3, [pc, #100]	@ (8006068 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006002:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006004:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800600c:	4916      	ldr	r1, [pc, #88]	@ (8006068 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800600e:	4313      	orrs	r3, r2
 8006010:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800601a:	2b00      	cmp	r3, #0
 800601c:	d008      	beq.n	8006030 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 800601e:	4b12      	ldr	r3, [pc, #72]	@ (8006068 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006020:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006022:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800602a:	490f      	ldr	r1, [pc, #60]	@ (8006068 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800602c:	4313      	orrs	r3, r2
 800602e:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006038:	2b00      	cmp	r3, #0
 800603a:	d008      	beq.n	800604e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800603c:	4b0a      	ldr	r3, [pc, #40]	@ (8006068 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800603e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006040:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006048:	4907      	ldr	r1, [pc, #28]	@ (8006068 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800604a:	4313      	orrs	r3, r2
 800604c:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006056:	2b00      	cmp	r3, #0
 8006058:	d00c      	beq.n	8006074 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800605a:	4b03      	ldr	r3, [pc, #12]	@ (8006068 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800605c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800605e:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	e002      	b.n	800606c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8006066:	bf00      	nop
 8006068:	40021000 	.word	0x40021000
 800606c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800606e:	4913      	ldr	r1, [pc, #76]	@ (80060bc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006070:	4313      	orrs	r3, r2
 8006072:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800607c:	2b00      	cmp	r3, #0
 800607e:	d008      	beq.n	8006092 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8006080:	4b0e      	ldr	r3, [pc, #56]	@ (80060bc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006082:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006084:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800608c:	490b      	ldr	r1, [pc, #44]	@ (80060bc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800608e:	4313      	orrs	r3, r2
 8006090:	630b      	str	r3, [r1, #48]	@ 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800609a:	2b00      	cmp	r3, #0
 800609c:	d008      	beq.n	80060b0 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 800609e:	4b07      	ldr	r3, [pc, #28]	@ (80060bc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80060a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060a2:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80060aa:	4904      	ldr	r1, [pc, #16]	@ (80060bc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80060ac:	4313      	orrs	r3, r2
 80060ae:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80060b0:	2300      	movs	r3, #0
}
 80060b2:	4618      	mov	r0, r3
 80060b4:	3748      	adds	r7, #72	@ 0x48
 80060b6:	46bd      	mov	sp, r7
 80060b8:	bd80      	pop	{r7, pc}
 80060ba:	bf00      	nop
 80060bc:	40021000 	.word	0x40021000

080060c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b082      	sub	sp, #8
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d101      	bne.n	80060d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80060ce:	2301      	movs	r3, #1
 80060d0:	e049      	b.n	8006166 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80060d8:	b2db      	uxtb	r3, r3
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d106      	bne.n	80060ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2200      	movs	r2, #0
 80060e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80060e6:	6878      	ldr	r0, [r7, #4]
 80060e8:	f7fb fb64 	bl	80017b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2202      	movs	r2, #2
 80060f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681a      	ldr	r2, [r3, #0]
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	3304      	adds	r3, #4
 80060fc:	4619      	mov	r1, r3
 80060fe:	4610      	mov	r0, r2
 8006100:	f000 fd60 	bl	8006bc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2201      	movs	r2, #1
 8006108:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2201      	movs	r2, #1
 8006110:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2201      	movs	r2, #1
 8006118:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2201      	movs	r2, #1
 8006120:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2201      	movs	r2, #1
 8006128:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2201      	movs	r2, #1
 8006130:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2201      	movs	r2, #1
 8006138:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2201      	movs	r2, #1
 8006140:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2201      	movs	r2, #1
 8006148:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2201      	movs	r2, #1
 8006150:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2201      	movs	r2, #1
 8006158:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2201      	movs	r2, #1
 8006160:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006164:	2300      	movs	r3, #0
}
 8006166:	4618      	mov	r0, r3
 8006168:	3708      	adds	r7, #8
 800616a:	46bd      	mov	sp, r7
 800616c:	bd80      	pop	{r7, pc}
	...

08006170 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006170:	b480      	push	{r7}
 8006172:	b085      	sub	sp, #20
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800617e:	b2db      	uxtb	r3, r3
 8006180:	2b01      	cmp	r3, #1
 8006182:	d001      	beq.n	8006188 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006184:	2301      	movs	r3, #1
 8006186:	e047      	b.n	8006218 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2202      	movs	r2, #2
 800618c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	4a23      	ldr	r2, [pc, #140]	@ (8006224 <HAL_TIM_Base_Start+0xb4>)
 8006196:	4293      	cmp	r3, r2
 8006198:	d01d      	beq.n	80061d6 <HAL_TIM_Base_Start+0x66>
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80061a2:	d018      	beq.n	80061d6 <HAL_TIM_Base_Start+0x66>
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	4a1f      	ldr	r2, [pc, #124]	@ (8006228 <HAL_TIM_Base_Start+0xb8>)
 80061aa:	4293      	cmp	r3, r2
 80061ac:	d013      	beq.n	80061d6 <HAL_TIM_Base_Start+0x66>
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	4a1e      	ldr	r2, [pc, #120]	@ (800622c <HAL_TIM_Base_Start+0xbc>)
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d00e      	beq.n	80061d6 <HAL_TIM_Base_Start+0x66>
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	4a1c      	ldr	r2, [pc, #112]	@ (8006230 <HAL_TIM_Base_Start+0xc0>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d009      	beq.n	80061d6 <HAL_TIM_Base_Start+0x66>
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	4a1b      	ldr	r2, [pc, #108]	@ (8006234 <HAL_TIM_Base_Start+0xc4>)
 80061c8:	4293      	cmp	r3, r2
 80061ca:	d004      	beq.n	80061d6 <HAL_TIM_Base_Start+0x66>
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	4a19      	ldr	r2, [pc, #100]	@ (8006238 <HAL_TIM_Base_Start+0xc8>)
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d115      	bne.n	8006202 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	689a      	ldr	r2, [r3, #8]
 80061dc:	4b17      	ldr	r3, [pc, #92]	@ (800623c <HAL_TIM_Base_Start+0xcc>)
 80061de:	4013      	ands	r3, r2
 80061e0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	2b06      	cmp	r3, #6
 80061e6:	d015      	beq.n	8006214 <HAL_TIM_Base_Start+0xa4>
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80061ee:	d011      	beq.n	8006214 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	681a      	ldr	r2, [r3, #0]
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f042 0201 	orr.w	r2, r2, #1
 80061fe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006200:	e008      	b.n	8006214 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	681a      	ldr	r2, [r3, #0]
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f042 0201 	orr.w	r2, r2, #1
 8006210:	601a      	str	r2, [r3, #0]
 8006212:	e000      	b.n	8006216 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006214:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006216:	2300      	movs	r3, #0
}
 8006218:	4618      	mov	r0, r3
 800621a:	3714      	adds	r7, #20
 800621c:	46bd      	mov	sp, r7
 800621e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006222:	4770      	bx	lr
 8006224:	40012c00 	.word	0x40012c00
 8006228:	40000400 	.word	0x40000400
 800622c:	40000800 	.word	0x40000800
 8006230:	40013400 	.word	0x40013400
 8006234:	40014000 	.word	0x40014000
 8006238:	40015000 	.word	0x40015000
 800623c:	00010007 	.word	0x00010007

08006240 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006240:	b580      	push	{r7, lr}
 8006242:	b082      	sub	sp, #8
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d101      	bne.n	8006252 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800624e:	2301      	movs	r3, #1
 8006250:	e049      	b.n	80062e6 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006258:	b2db      	uxtb	r3, r3
 800625a:	2b00      	cmp	r3, #0
 800625c:	d106      	bne.n	800626c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2200      	movs	r2, #0
 8006262:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8006266:	6878      	ldr	r0, [r7, #4]
 8006268:	f000 f841 	bl	80062ee <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2202      	movs	r2, #2
 8006270:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681a      	ldr	r2, [r3, #0]
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	3304      	adds	r3, #4
 800627c:	4619      	mov	r1, r3
 800627e:	4610      	mov	r0, r2
 8006280:	f000 fca0 	bl	8006bc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2201      	movs	r2, #1
 8006288:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2201      	movs	r2, #1
 8006290:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2201      	movs	r2, #1
 8006298:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2201      	movs	r2, #1
 80062a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2201      	movs	r2, #1
 80062a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2201      	movs	r2, #1
 80062b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2201      	movs	r2, #1
 80062b8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2201      	movs	r2, #1
 80062c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2201      	movs	r2, #1
 80062c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2201      	movs	r2, #1
 80062d0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2201      	movs	r2, #1
 80062d8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2201      	movs	r2, #1
 80062e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80062e4:	2300      	movs	r3, #0
}
 80062e6:	4618      	mov	r0, r3
 80062e8:	3708      	adds	r7, #8
 80062ea:	46bd      	mov	sp, r7
 80062ec:	bd80      	pop	{r7, pc}

080062ee <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80062ee:	b480      	push	{r7}
 80062f0:	b083      	sub	sp, #12
 80062f2:	af00      	add	r7, sp, #0
 80062f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80062f6:	bf00      	nop
 80062f8:	370c      	adds	r7, #12
 80062fa:	46bd      	mov	sp, r7
 80062fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006300:	4770      	bx	lr
	...

08006304 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006304:	b580      	push	{r7, lr}
 8006306:	b084      	sub	sp, #16
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
 800630c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800630e:	2300      	movs	r3, #0
 8006310:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d104      	bne.n	8006322 <HAL_TIM_IC_Start_IT+0x1e>
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800631e:	b2db      	uxtb	r3, r3
 8006320:	e023      	b.n	800636a <HAL_TIM_IC_Start_IT+0x66>
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	2b04      	cmp	r3, #4
 8006326:	d104      	bne.n	8006332 <HAL_TIM_IC_Start_IT+0x2e>
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800632e:	b2db      	uxtb	r3, r3
 8006330:	e01b      	b.n	800636a <HAL_TIM_IC_Start_IT+0x66>
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	2b08      	cmp	r3, #8
 8006336:	d104      	bne.n	8006342 <HAL_TIM_IC_Start_IT+0x3e>
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800633e:	b2db      	uxtb	r3, r3
 8006340:	e013      	b.n	800636a <HAL_TIM_IC_Start_IT+0x66>
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	2b0c      	cmp	r3, #12
 8006346:	d104      	bne.n	8006352 <HAL_TIM_IC_Start_IT+0x4e>
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800634e:	b2db      	uxtb	r3, r3
 8006350:	e00b      	b.n	800636a <HAL_TIM_IC_Start_IT+0x66>
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	2b10      	cmp	r3, #16
 8006356:	d104      	bne.n	8006362 <HAL_TIM_IC_Start_IT+0x5e>
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800635e:	b2db      	uxtb	r3, r3
 8006360:	e003      	b.n	800636a <HAL_TIM_IC_Start_IT+0x66>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8006368:	b2db      	uxtb	r3, r3
 800636a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d104      	bne.n	800637c <HAL_TIM_IC_Start_IT+0x78>
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006378:	b2db      	uxtb	r3, r3
 800637a:	e013      	b.n	80063a4 <HAL_TIM_IC_Start_IT+0xa0>
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	2b04      	cmp	r3, #4
 8006380:	d104      	bne.n	800638c <HAL_TIM_IC_Start_IT+0x88>
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006388:	b2db      	uxtb	r3, r3
 800638a:	e00b      	b.n	80063a4 <HAL_TIM_IC_Start_IT+0xa0>
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	2b08      	cmp	r3, #8
 8006390:	d104      	bne.n	800639c <HAL_TIM_IC_Start_IT+0x98>
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8006398:	b2db      	uxtb	r3, r3
 800639a:	e003      	b.n	80063a4 <HAL_TIM_IC_Start_IT+0xa0>
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 80063a2:	b2db      	uxtb	r3, r3
 80063a4:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80063a6:	7bbb      	ldrb	r3, [r7, #14]
 80063a8:	2b01      	cmp	r3, #1
 80063aa:	d102      	bne.n	80063b2 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80063ac:	7b7b      	ldrb	r3, [r7, #13]
 80063ae:	2b01      	cmp	r3, #1
 80063b0:	d001      	beq.n	80063b6 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 80063b2:	2301      	movs	r3, #1
 80063b4:	e0dd      	b.n	8006572 <HAL_TIM_IC_Start_IT+0x26e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d104      	bne.n	80063c6 <HAL_TIM_IC_Start_IT+0xc2>
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2202      	movs	r2, #2
 80063c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80063c4:	e023      	b.n	800640e <HAL_TIM_IC_Start_IT+0x10a>
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	2b04      	cmp	r3, #4
 80063ca:	d104      	bne.n	80063d6 <HAL_TIM_IC_Start_IT+0xd2>
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2202      	movs	r2, #2
 80063d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80063d4:	e01b      	b.n	800640e <HAL_TIM_IC_Start_IT+0x10a>
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	2b08      	cmp	r3, #8
 80063da:	d104      	bne.n	80063e6 <HAL_TIM_IC_Start_IT+0xe2>
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2202      	movs	r2, #2
 80063e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80063e4:	e013      	b.n	800640e <HAL_TIM_IC_Start_IT+0x10a>
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	2b0c      	cmp	r3, #12
 80063ea:	d104      	bne.n	80063f6 <HAL_TIM_IC_Start_IT+0xf2>
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2202      	movs	r2, #2
 80063f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80063f4:	e00b      	b.n	800640e <HAL_TIM_IC_Start_IT+0x10a>
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	2b10      	cmp	r3, #16
 80063fa:	d104      	bne.n	8006406 <HAL_TIM_IC_Start_IT+0x102>
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2202      	movs	r2, #2
 8006400:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006404:	e003      	b.n	800640e <HAL_TIM_IC_Start_IT+0x10a>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	2202      	movs	r2, #2
 800640a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d104      	bne.n	800641e <HAL_TIM_IC_Start_IT+0x11a>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2202      	movs	r2, #2
 8006418:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800641c:	e013      	b.n	8006446 <HAL_TIM_IC_Start_IT+0x142>
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	2b04      	cmp	r3, #4
 8006422:	d104      	bne.n	800642e <HAL_TIM_IC_Start_IT+0x12a>
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2202      	movs	r2, #2
 8006428:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800642c:	e00b      	b.n	8006446 <HAL_TIM_IC_Start_IT+0x142>
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	2b08      	cmp	r3, #8
 8006432:	d104      	bne.n	800643e <HAL_TIM_IC_Start_IT+0x13a>
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2202      	movs	r2, #2
 8006438:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800643c:	e003      	b.n	8006446 <HAL_TIM_IC_Start_IT+0x142>
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	2202      	movs	r2, #2
 8006442:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  switch (Channel)
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	2b0c      	cmp	r3, #12
 800644a:	d841      	bhi.n	80064d0 <HAL_TIM_IC_Start_IT+0x1cc>
 800644c:	a201      	add	r2, pc, #4	@ (adr r2, 8006454 <HAL_TIM_IC_Start_IT+0x150>)
 800644e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006452:	bf00      	nop
 8006454:	08006489 	.word	0x08006489
 8006458:	080064d1 	.word	0x080064d1
 800645c:	080064d1 	.word	0x080064d1
 8006460:	080064d1 	.word	0x080064d1
 8006464:	0800649b 	.word	0x0800649b
 8006468:	080064d1 	.word	0x080064d1
 800646c:	080064d1 	.word	0x080064d1
 8006470:	080064d1 	.word	0x080064d1
 8006474:	080064ad 	.word	0x080064ad
 8006478:	080064d1 	.word	0x080064d1
 800647c:	080064d1 	.word	0x080064d1
 8006480:	080064d1 	.word	0x080064d1
 8006484:	080064bf 	.word	0x080064bf
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	68da      	ldr	r2, [r3, #12]
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f042 0202 	orr.w	r2, r2, #2
 8006496:	60da      	str	r2, [r3, #12]
      break;
 8006498:	e01d      	b.n	80064d6 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	68da      	ldr	r2, [r3, #12]
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f042 0204 	orr.w	r2, r2, #4
 80064a8:	60da      	str	r2, [r3, #12]
      break;
 80064aa:	e014      	b.n	80064d6 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	68da      	ldr	r2, [r3, #12]
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f042 0208 	orr.w	r2, r2, #8
 80064ba:	60da      	str	r2, [r3, #12]
      break;
 80064bc:	e00b      	b.n	80064d6 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	68da      	ldr	r2, [r3, #12]
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f042 0210 	orr.w	r2, r2, #16
 80064cc:	60da      	str	r2, [r3, #12]
      break;
 80064ce:	e002      	b.n	80064d6 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 80064d0:	2301      	movs	r3, #1
 80064d2:	73fb      	strb	r3, [r7, #15]
      break;
 80064d4:	bf00      	nop
  }

  if (status == HAL_OK)
 80064d6:	7bfb      	ldrb	r3, [r7, #15]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d149      	bne.n	8006570 <HAL_TIM_IC_Start_IT+0x26c>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	2201      	movs	r2, #1
 80064e2:	6839      	ldr	r1, [r7, #0]
 80064e4:	4618      	mov	r0, r3
 80064e6:	f000 fe69 	bl	80071bc <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	4a23      	ldr	r2, [pc, #140]	@ (800657c <HAL_TIM_IC_Start_IT+0x278>)
 80064f0:	4293      	cmp	r3, r2
 80064f2:	d01d      	beq.n	8006530 <HAL_TIM_IC_Start_IT+0x22c>
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80064fc:	d018      	beq.n	8006530 <HAL_TIM_IC_Start_IT+0x22c>
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	4a1f      	ldr	r2, [pc, #124]	@ (8006580 <HAL_TIM_IC_Start_IT+0x27c>)
 8006504:	4293      	cmp	r3, r2
 8006506:	d013      	beq.n	8006530 <HAL_TIM_IC_Start_IT+0x22c>
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	4a1d      	ldr	r2, [pc, #116]	@ (8006584 <HAL_TIM_IC_Start_IT+0x280>)
 800650e:	4293      	cmp	r3, r2
 8006510:	d00e      	beq.n	8006530 <HAL_TIM_IC_Start_IT+0x22c>
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	4a1c      	ldr	r2, [pc, #112]	@ (8006588 <HAL_TIM_IC_Start_IT+0x284>)
 8006518:	4293      	cmp	r3, r2
 800651a:	d009      	beq.n	8006530 <HAL_TIM_IC_Start_IT+0x22c>
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	4a1a      	ldr	r2, [pc, #104]	@ (800658c <HAL_TIM_IC_Start_IT+0x288>)
 8006522:	4293      	cmp	r3, r2
 8006524:	d004      	beq.n	8006530 <HAL_TIM_IC_Start_IT+0x22c>
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	4a19      	ldr	r2, [pc, #100]	@ (8006590 <HAL_TIM_IC_Start_IT+0x28c>)
 800652c:	4293      	cmp	r3, r2
 800652e:	d115      	bne.n	800655c <HAL_TIM_IC_Start_IT+0x258>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	689a      	ldr	r2, [r3, #8]
 8006536:	4b17      	ldr	r3, [pc, #92]	@ (8006594 <HAL_TIM_IC_Start_IT+0x290>)
 8006538:	4013      	ands	r3, r2
 800653a:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800653c:	68bb      	ldr	r3, [r7, #8]
 800653e:	2b06      	cmp	r3, #6
 8006540:	d015      	beq.n	800656e <HAL_TIM_IC_Start_IT+0x26a>
 8006542:	68bb      	ldr	r3, [r7, #8]
 8006544:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006548:	d011      	beq.n	800656e <HAL_TIM_IC_Start_IT+0x26a>
      {
        __HAL_TIM_ENABLE(htim);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	681a      	ldr	r2, [r3, #0]
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f042 0201 	orr.w	r2, r2, #1
 8006558:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800655a:	e008      	b.n	800656e <HAL_TIM_IC_Start_IT+0x26a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	681a      	ldr	r2, [r3, #0]
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f042 0201 	orr.w	r2, r2, #1
 800656a:	601a      	str	r2, [r3, #0]
 800656c:	e000      	b.n	8006570 <HAL_TIM_IC_Start_IT+0x26c>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800656e:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8006570:	7bfb      	ldrb	r3, [r7, #15]
}
 8006572:	4618      	mov	r0, r3
 8006574:	3710      	adds	r7, #16
 8006576:	46bd      	mov	sp, r7
 8006578:	bd80      	pop	{r7, pc}
 800657a:	bf00      	nop
 800657c:	40012c00 	.word	0x40012c00
 8006580:	40000400 	.word	0x40000400
 8006584:	40000800 	.word	0x40000800
 8006588:	40013400 	.word	0x40013400
 800658c:	40014000 	.word	0x40014000
 8006590:	40015000 	.word	0x40015000
 8006594:	00010007 	.word	0x00010007

08006598 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b084      	sub	sp, #16
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	68db      	ldr	r3, [r3, #12]
 80065a6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	691b      	ldr	r3, [r3, #16]
 80065ae:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80065b0:	68bb      	ldr	r3, [r7, #8]
 80065b2:	f003 0302 	and.w	r3, r3, #2
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d020      	beq.n	80065fc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	f003 0302 	and.w	r3, r3, #2
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d01b      	beq.n	80065fc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f06f 0202 	mvn.w	r2, #2
 80065cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2201      	movs	r2, #1
 80065d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	699b      	ldr	r3, [r3, #24]
 80065da:	f003 0303 	and.w	r3, r3, #3
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d003      	beq.n	80065ea <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80065e2:	6878      	ldr	r0, [r7, #4]
 80065e4:	f7fa fb38 	bl	8000c58 <HAL_TIM_IC_CaptureCallback>
 80065e8:	e005      	b.n	80065f6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80065ea:	6878      	ldr	r0, [r7, #4]
 80065ec:	f000 facc 	bl	8006b88 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065f0:	6878      	ldr	r0, [r7, #4]
 80065f2:	f000 fad3 	bl	8006b9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	2200      	movs	r2, #0
 80065fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80065fc:	68bb      	ldr	r3, [r7, #8]
 80065fe:	f003 0304 	and.w	r3, r3, #4
 8006602:	2b00      	cmp	r3, #0
 8006604:	d020      	beq.n	8006648 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	f003 0304 	and.w	r3, r3, #4
 800660c:	2b00      	cmp	r3, #0
 800660e:	d01b      	beq.n	8006648 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f06f 0204 	mvn.w	r2, #4
 8006618:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	2202      	movs	r2, #2
 800661e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	699b      	ldr	r3, [r3, #24]
 8006626:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800662a:	2b00      	cmp	r3, #0
 800662c:	d003      	beq.n	8006636 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800662e:	6878      	ldr	r0, [r7, #4]
 8006630:	f7fa fb12 	bl	8000c58 <HAL_TIM_IC_CaptureCallback>
 8006634:	e005      	b.n	8006642 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006636:	6878      	ldr	r0, [r7, #4]
 8006638:	f000 faa6 	bl	8006b88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800663c:	6878      	ldr	r0, [r7, #4]
 800663e:	f000 faad 	bl	8006b9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2200      	movs	r2, #0
 8006646:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006648:	68bb      	ldr	r3, [r7, #8]
 800664a:	f003 0308 	and.w	r3, r3, #8
 800664e:	2b00      	cmp	r3, #0
 8006650:	d020      	beq.n	8006694 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	f003 0308 	and.w	r3, r3, #8
 8006658:	2b00      	cmp	r3, #0
 800665a:	d01b      	beq.n	8006694 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f06f 0208 	mvn.w	r2, #8
 8006664:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2204      	movs	r2, #4
 800666a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	69db      	ldr	r3, [r3, #28]
 8006672:	f003 0303 	and.w	r3, r3, #3
 8006676:	2b00      	cmp	r3, #0
 8006678:	d003      	beq.n	8006682 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800667a:	6878      	ldr	r0, [r7, #4]
 800667c:	f7fa faec 	bl	8000c58 <HAL_TIM_IC_CaptureCallback>
 8006680:	e005      	b.n	800668e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006682:	6878      	ldr	r0, [r7, #4]
 8006684:	f000 fa80 	bl	8006b88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006688:	6878      	ldr	r0, [r7, #4]
 800668a:	f000 fa87 	bl	8006b9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2200      	movs	r2, #0
 8006692:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006694:	68bb      	ldr	r3, [r7, #8]
 8006696:	f003 0310 	and.w	r3, r3, #16
 800669a:	2b00      	cmp	r3, #0
 800669c:	d020      	beq.n	80066e0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	f003 0310 	and.w	r3, r3, #16
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d01b      	beq.n	80066e0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f06f 0210 	mvn.w	r2, #16
 80066b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2208      	movs	r2, #8
 80066b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	69db      	ldr	r3, [r3, #28]
 80066be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d003      	beq.n	80066ce <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80066c6:	6878      	ldr	r0, [r7, #4]
 80066c8:	f7fa fac6 	bl	8000c58 <HAL_TIM_IC_CaptureCallback>
 80066cc:	e005      	b.n	80066da <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80066ce:	6878      	ldr	r0, [r7, #4]
 80066d0:	f000 fa5a 	bl	8006b88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066d4:	6878      	ldr	r0, [r7, #4]
 80066d6:	f000 fa61 	bl	8006b9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	2200      	movs	r2, #0
 80066de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80066e0:	68bb      	ldr	r3, [r7, #8]
 80066e2:	f003 0301 	and.w	r3, r3, #1
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d00c      	beq.n	8006704 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	f003 0301 	and.w	r3, r3, #1
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d007      	beq.n	8006704 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f06f 0201 	mvn.w	r2, #1
 80066fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80066fe:	6878      	ldr	r0, [r7, #4]
 8006700:	f000 fa38 	bl	8006b74 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006704:	68bb      	ldr	r3, [r7, #8]
 8006706:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800670a:	2b00      	cmp	r3, #0
 800670c:	d00c      	beq.n	8006728 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006714:	2b00      	cmp	r3, #0
 8006716:	d007      	beq.n	8006728 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006720:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006722:	6878      	ldr	r0, [r7, #4]
 8006724:	f000 fe06 	bl	8007334 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006728:	68bb      	ldr	r3, [r7, #8]
 800672a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800672e:	2b00      	cmp	r3, #0
 8006730:	d00c      	beq.n	800674c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006738:	2b00      	cmp	r3, #0
 800673a:	d007      	beq.n	800674c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006744:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006746:	6878      	ldr	r0, [r7, #4]
 8006748:	f000 fdfe 	bl	8007348 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800674c:	68bb      	ldr	r3, [r7, #8]
 800674e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006752:	2b00      	cmp	r3, #0
 8006754:	d00c      	beq.n	8006770 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800675c:	2b00      	cmp	r3, #0
 800675e:	d007      	beq.n	8006770 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006768:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800676a:	6878      	ldr	r0, [r7, #4]
 800676c:	f000 fa20 	bl	8006bb0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006770:	68bb      	ldr	r3, [r7, #8]
 8006772:	f003 0320 	and.w	r3, r3, #32
 8006776:	2b00      	cmp	r3, #0
 8006778:	d00c      	beq.n	8006794 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	f003 0320 	and.w	r3, r3, #32
 8006780:	2b00      	cmp	r3, #0
 8006782:	d007      	beq.n	8006794 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f06f 0220 	mvn.w	r2, #32
 800678c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800678e:	6878      	ldr	r0, [r7, #4]
 8006790:	f000 fdc6 	bl	8007320 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006794:	bf00      	nop
 8006796:	3710      	adds	r7, #16
 8006798:	46bd      	mov	sp, r7
 800679a:	bd80      	pop	{r7, pc}

0800679c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b086      	sub	sp, #24
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	60f8      	str	r0, [r7, #12]
 80067a4:	60b9      	str	r1, [r7, #8]
 80067a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80067a8:	2300      	movs	r3, #0
 80067aa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80067b2:	2b01      	cmp	r3, #1
 80067b4:	d101      	bne.n	80067ba <HAL_TIM_IC_ConfigChannel+0x1e>
 80067b6:	2302      	movs	r3, #2
 80067b8:	e088      	b.n	80068cc <HAL_TIM_IC_ConfigChannel+0x130>
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	2201      	movs	r2, #1
 80067be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d11b      	bne.n	8006800 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80067cc:	68bb      	ldr	r3, [r7, #8]
 80067ce:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80067d0:	68bb      	ldr	r3, [r7, #8]
 80067d2:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80067d4:	68bb      	ldr	r3, [r7, #8]
 80067d6:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80067d8:	f000 fb32 	bl	8006e40 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	699a      	ldr	r2, [r3, #24]
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	f022 020c 	bic.w	r2, r2, #12
 80067ea:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	6999      	ldr	r1, [r3, #24]
 80067f2:	68bb      	ldr	r3, [r7, #8]
 80067f4:	689a      	ldr	r2, [r3, #8]
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	430a      	orrs	r2, r1
 80067fc:	619a      	str	r2, [r3, #24]
 80067fe:	e060      	b.n	80068c2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2b04      	cmp	r3, #4
 8006804:	d11c      	bne.n	8006840 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800680a:	68bb      	ldr	r3, [r7, #8]
 800680c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800680e:	68bb      	ldr	r3, [r7, #8]
 8006810:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006812:	68bb      	ldr	r3, [r7, #8]
 8006814:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8006816:	f000 fbb0 	bl	8006f7a <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	699a      	ldr	r2, [r3, #24]
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8006828:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	6999      	ldr	r1, [r3, #24]
 8006830:	68bb      	ldr	r3, [r7, #8]
 8006832:	689b      	ldr	r3, [r3, #8]
 8006834:	021a      	lsls	r2, r3, #8
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	430a      	orrs	r2, r1
 800683c:	619a      	str	r2, [r3, #24]
 800683e:	e040      	b.n	80068c2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2b08      	cmp	r3, #8
 8006844:	d11b      	bne.n	800687e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800684a:	68bb      	ldr	r3, [r7, #8]
 800684c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800684e:	68bb      	ldr	r3, [r7, #8]
 8006850:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006852:	68bb      	ldr	r3, [r7, #8]
 8006854:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8006856:	f000 fbfd 	bl	8007054 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	69da      	ldr	r2, [r3, #28]
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f022 020c 	bic.w	r2, r2, #12
 8006868:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	69d9      	ldr	r1, [r3, #28]
 8006870:	68bb      	ldr	r3, [r7, #8]
 8006872:	689a      	ldr	r2, [r3, #8]
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	430a      	orrs	r2, r1
 800687a:	61da      	str	r2, [r3, #28]
 800687c:	e021      	b.n	80068c2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2b0c      	cmp	r3, #12
 8006882:	d11c      	bne.n	80068be <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006888:	68bb      	ldr	r3, [r7, #8]
 800688a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800688c:	68bb      	ldr	r3, [r7, #8]
 800688e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006890:	68bb      	ldr	r3, [r7, #8]
 8006892:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8006894:	f000 fc1a 	bl	80070cc <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	69da      	ldr	r2, [r3, #28]
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80068a6:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	69d9      	ldr	r1, [r3, #28]
 80068ae:	68bb      	ldr	r3, [r7, #8]
 80068b0:	689b      	ldr	r3, [r3, #8]
 80068b2:	021a      	lsls	r2, r3, #8
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	430a      	orrs	r2, r1
 80068ba:	61da      	str	r2, [r3, #28]
 80068bc:	e001      	b.n	80068c2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80068be:	2301      	movs	r3, #1
 80068c0:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	2200      	movs	r2, #0
 80068c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80068ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80068cc:	4618      	mov	r0, r3
 80068ce:	3718      	adds	r7, #24
 80068d0:	46bd      	mov	sp, r7
 80068d2:	bd80      	pop	{r7, pc}

080068d4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b084      	sub	sp, #16
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
 80068dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80068de:	2300      	movs	r3, #0
 80068e0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80068e8:	2b01      	cmp	r3, #1
 80068ea:	d101      	bne.n	80068f0 <HAL_TIM_ConfigClockSource+0x1c>
 80068ec:	2302      	movs	r3, #2
 80068ee:	e0b6      	b.n	8006a5e <HAL_TIM_ConfigClockSource+0x18a>
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2201      	movs	r2, #1
 80068f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2202      	movs	r2, #2
 80068fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	689b      	ldr	r3, [r3, #8]
 8006906:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006908:	68bb      	ldr	r3, [r7, #8]
 800690a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800690e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006912:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006914:	68bb      	ldr	r3, [r7, #8]
 8006916:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800691a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	68ba      	ldr	r2, [r7, #8]
 8006922:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800692c:	d03e      	beq.n	80069ac <HAL_TIM_ConfigClockSource+0xd8>
 800692e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006932:	f200 8087 	bhi.w	8006a44 <HAL_TIM_ConfigClockSource+0x170>
 8006936:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800693a:	f000 8086 	beq.w	8006a4a <HAL_TIM_ConfigClockSource+0x176>
 800693e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006942:	d87f      	bhi.n	8006a44 <HAL_TIM_ConfigClockSource+0x170>
 8006944:	2b70      	cmp	r3, #112	@ 0x70
 8006946:	d01a      	beq.n	800697e <HAL_TIM_ConfigClockSource+0xaa>
 8006948:	2b70      	cmp	r3, #112	@ 0x70
 800694a:	d87b      	bhi.n	8006a44 <HAL_TIM_ConfigClockSource+0x170>
 800694c:	2b60      	cmp	r3, #96	@ 0x60
 800694e:	d050      	beq.n	80069f2 <HAL_TIM_ConfigClockSource+0x11e>
 8006950:	2b60      	cmp	r3, #96	@ 0x60
 8006952:	d877      	bhi.n	8006a44 <HAL_TIM_ConfigClockSource+0x170>
 8006954:	2b50      	cmp	r3, #80	@ 0x50
 8006956:	d03c      	beq.n	80069d2 <HAL_TIM_ConfigClockSource+0xfe>
 8006958:	2b50      	cmp	r3, #80	@ 0x50
 800695a:	d873      	bhi.n	8006a44 <HAL_TIM_ConfigClockSource+0x170>
 800695c:	2b40      	cmp	r3, #64	@ 0x40
 800695e:	d058      	beq.n	8006a12 <HAL_TIM_ConfigClockSource+0x13e>
 8006960:	2b40      	cmp	r3, #64	@ 0x40
 8006962:	d86f      	bhi.n	8006a44 <HAL_TIM_ConfigClockSource+0x170>
 8006964:	2b30      	cmp	r3, #48	@ 0x30
 8006966:	d064      	beq.n	8006a32 <HAL_TIM_ConfigClockSource+0x15e>
 8006968:	2b30      	cmp	r3, #48	@ 0x30
 800696a:	d86b      	bhi.n	8006a44 <HAL_TIM_ConfigClockSource+0x170>
 800696c:	2b20      	cmp	r3, #32
 800696e:	d060      	beq.n	8006a32 <HAL_TIM_ConfigClockSource+0x15e>
 8006970:	2b20      	cmp	r3, #32
 8006972:	d867      	bhi.n	8006a44 <HAL_TIM_ConfigClockSource+0x170>
 8006974:	2b00      	cmp	r3, #0
 8006976:	d05c      	beq.n	8006a32 <HAL_TIM_ConfigClockSource+0x15e>
 8006978:	2b10      	cmp	r3, #16
 800697a:	d05a      	beq.n	8006a32 <HAL_TIM_ConfigClockSource+0x15e>
 800697c:	e062      	b.n	8006a44 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800698e:	f000 fbf5 	bl	800717c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	689b      	ldr	r3, [r3, #8]
 8006998:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800699a:	68bb      	ldr	r3, [r7, #8]
 800699c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80069a0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	68ba      	ldr	r2, [r7, #8]
 80069a8:	609a      	str	r2, [r3, #8]
      break;
 80069aa:	e04f      	b.n	8006a4c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80069bc:	f000 fbde 	bl	800717c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	689a      	ldr	r2, [r3, #8]
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80069ce:	609a      	str	r2, [r3, #8]
      break;
 80069d0:	e03c      	b.n	8006a4c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80069de:	461a      	mov	r2, r3
 80069e0:	f000 fa9c 	bl	8006f1c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	2150      	movs	r1, #80	@ 0x50
 80069ea:	4618      	mov	r0, r3
 80069ec:	f000 fbab 	bl	8007146 <TIM_ITRx_SetConfig>
      break;
 80069f0:	e02c      	b.n	8006a4c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80069fe:	461a      	mov	r2, r3
 8006a00:	f000 faf8 	bl	8006ff4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	2160      	movs	r1, #96	@ 0x60
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	f000 fb9b 	bl	8007146 <TIM_ITRx_SetConfig>
      break;
 8006a10:	e01c      	b.n	8006a4c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a1e:	461a      	mov	r2, r3
 8006a20:	f000 fa7c 	bl	8006f1c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	2140      	movs	r1, #64	@ 0x40
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	f000 fb8b 	bl	8007146 <TIM_ITRx_SetConfig>
      break;
 8006a30:	e00c      	b.n	8006a4c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681a      	ldr	r2, [r3, #0]
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	4619      	mov	r1, r3
 8006a3c:	4610      	mov	r0, r2
 8006a3e:	f000 fb82 	bl	8007146 <TIM_ITRx_SetConfig>
      break;
 8006a42:	e003      	b.n	8006a4c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8006a44:	2301      	movs	r3, #1
 8006a46:	73fb      	strb	r3, [r7, #15]
      break;
 8006a48:	e000      	b.n	8006a4c <HAL_TIM_ConfigClockSource+0x178>
      break;
 8006a4a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2201      	movs	r2, #1
 8006a50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2200      	movs	r2, #0
 8006a58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006a5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a5e:	4618      	mov	r0, r3
 8006a60:	3710      	adds	r7, #16
 8006a62:	46bd      	mov	sp, r7
 8006a64:	bd80      	pop	{r7, pc}

08006a66 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8006a66:	b580      	push	{r7, lr}
 8006a68:	b082      	sub	sp, #8
 8006a6a:	af00      	add	r7, sp, #0
 8006a6c:	6078      	str	r0, [r7, #4]
 8006a6e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006a76:	2b01      	cmp	r3, #1
 8006a78:	d101      	bne.n	8006a7e <HAL_TIM_SlaveConfigSynchro+0x18>
 8006a7a:	2302      	movs	r3, #2
 8006a7c:	e031      	b.n	8006ae2 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	2201      	movs	r2, #1
 8006a82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	2202      	movs	r2, #2
 8006a8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8006a8e:	6839      	ldr	r1, [r7, #0]
 8006a90:	6878      	ldr	r0, [r7, #4]
 8006a92:	f000 f941 	bl	8006d18 <TIM_SlaveTimer_SetConfig>
 8006a96:	4603      	mov	r3, r0
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d009      	beq.n	8006ab0 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2201      	movs	r2, #1
 8006aa0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8006aac:	2301      	movs	r3, #1
 8006aae:	e018      	b.n	8006ae2 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	68da      	ldr	r2, [r3, #12]
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006abe:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	68da      	ldr	r2, [r3, #12]
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006ace:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2201      	movs	r2, #1
 8006ad4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2200      	movs	r2, #0
 8006adc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006ae0:	2300      	movs	r3, #0
}
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	3708      	adds	r7, #8
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	bd80      	pop	{r7, pc}
	...

08006aec <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006aec:	b480      	push	{r7}
 8006aee:	b085      	sub	sp, #20
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
 8006af4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8006af6:	2300      	movs	r3, #0
 8006af8:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	2b0c      	cmp	r3, #12
 8006afe:	d831      	bhi.n	8006b64 <HAL_TIM_ReadCapturedValue+0x78>
 8006b00:	a201      	add	r2, pc, #4	@ (adr r2, 8006b08 <HAL_TIM_ReadCapturedValue+0x1c>)
 8006b02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b06:	bf00      	nop
 8006b08:	08006b3d 	.word	0x08006b3d
 8006b0c:	08006b65 	.word	0x08006b65
 8006b10:	08006b65 	.word	0x08006b65
 8006b14:	08006b65 	.word	0x08006b65
 8006b18:	08006b47 	.word	0x08006b47
 8006b1c:	08006b65 	.word	0x08006b65
 8006b20:	08006b65 	.word	0x08006b65
 8006b24:	08006b65 	.word	0x08006b65
 8006b28:	08006b51 	.word	0x08006b51
 8006b2c:	08006b65 	.word	0x08006b65
 8006b30:	08006b65 	.word	0x08006b65
 8006b34:	08006b65 	.word	0x08006b65
 8006b38:	08006b5b 	.word	0x08006b5b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b42:	60fb      	str	r3, [r7, #12]

      break;
 8006b44:	e00f      	b.n	8006b66 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b4c:	60fb      	str	r3, [r7, #12]

      break;
 8006b4e:	e00a      	b.n	8006b66 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b56:	60fb      	str	r3, [r7, #12]

      break;
 8006b58:	e005      	b.n	8006b66 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b60:	60fb      	str	r3, [r7, #12]

      break;
 8006b62:	e000      	b.n	8006b66 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8006b64:	bf00      	nop
  }

  return tmpreg;
 8006b66:	68fb      	ldr	r3, [r7, #12]
}
 8006b68:	4618      	mov	r0, r3
 8006b6a:	3714      	adds	r7, #20
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b72:	4770      	bx	lr

08006b74 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006b74:	b480      	push	{r7}
 8006b76:	b083      	sub	sp, #12
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006b7c:	bf00      	nop
 8006b7e:	370c      	adds	r7, #12
 8006b80:	46bd      	mov	sp, r7
 8006b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b86:	4770      	bx	lr

08006b88 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006b88:	b480      	push	{r7}
 8006b8a:	b083      	sub	sp, #12
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006b90:	bf00      	nop
 8006b92:	370c      	adds	r7, #12
 8006b94:	46bd      	mov	sp, r7
 8006b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9a:	4770      	bx	lr

08006b9c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006b9c:	b480      	push	{r7}
 8006b9e:	b083      	sub	sp, #12
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006ba4:	bf00      	nop
 8006ba6:	370c      	adds	r7, #12
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bae:	4770      	bx	lr

08006bb0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006bb0:	b480      	push	{r7}
 8006bb2:	b083      	sub	sp, #12
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006bb8:	bf00      	nop
 8006bba:	370c      	adds	r7, #12
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc2:	4770      	bx	lr

08006bc4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006bc4:	b480      	push	{r7}
 8006bc6:	b085      	sub	sp, #20
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
 8006bcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	4a48      	ldr	r2, [pc, #288]	@ (8006cf8 <TIM_Base_SetConfig+0x134>)
 8006bd8:	4293      	cmp	r3, r2
 8006bda:	d013      	beq.n	8006c04 <TIM_Base_SetConfig+0x40>
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006be2:	d00f      	beq.n	8006c04 <TIM_Base_SetConfig+0x40>
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	4a45      	ldr	r2, [pc, #276]	@ (8006cfc <TIM_Base_SetConfig+0x138>)
 8006be8:	4293      	cmp	r3, r2
 8006bea:	d00b      	beq.n	8006c04 <TIM_Base_SetConfig+0x40>
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	4a44      	ldr	r2, [pc, #272]	@ (8006d00 <TIM_Base_SetConfig+0x13c>)
 8006bf0:	4293      	cmp	r3, r2
 8006bf2:	d007      	beq.n	8006c04 <TIM_Base_SetConfig+0x40>
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	4a43      	ldr	r2, [pc, #268]	@ (8006d04 <TIM_Base_SetConfig+0x140>)
 8006bf8:	4293      	cmp	r3, r2
 8006bfa:	d003      	beq.n	8006c04 <TIM_Base_SetConfig+0x40>
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	4a42      	ldr	r2, [pc, #264]	@ (8006d08 <TIM_Base_SetConfig+0x144>)
 8006c00:	4293      	cmp	r3, r2
 8006c02:	d108      	bne.n	8006c16 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	685b      	ldr	r3, [r3, #4]
 8006c10:	68fa      	ldr	r2, [r7, #12]
 8006c12:	4313      	orrs	r3, r2
 8006c14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	4a37      	ldr	r2, [pc, #220]	@ (8006cf8 <TIM_Base_SetConfig+0x134>)
 8006c1a:	4293      	cmp	r3, r2
 8006c1c:	d01f      	beq.n	8006c5e <TIM_Base_SetConfig+0x9a>
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006c24:	d01b      	beq.n	8006c5e <TIM_Base_SetConfig+0x9a>
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	4a34      	ldr	r2, [pc, #208]	@ (8006cfc <TIM_Base_SetConfig+0x138>)
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	d017      	beq.n	8006c5e <TIM_Base_SetConfig+0x9a>
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	4a33      	ldr	r2, [pc, #204]	@ (8006d00 <TIM_Base_SetConfig+0x13c>)
 8006c32:	4293      	cmp	r3, r2
 8006c34:	d013      	beq.n	8006c5e <TIM_Base_SetConfig+0x9a>
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	4a32      	ldr	r2, [pc, #200]	@ (8006d04 <TIM_Base_SetConfig+0x140>)
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	d00f      	beq.n	8006c5e <TIM_Base_SetConfig+0x9a>
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	4a32      	ldr	r2, [pc, #200]	@ (8006d0c <TIM_Base_SetConfig+0x148>)
 8006c42:	4293      	cmp	r3, r2
 8006c44:	d00b      	beq.n	8006c5e <TIM_Base_SetConfig+0x9a>
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	4a31      	ldr	r2, [pc, #196]	@ (8006d10 <TIM_Base_SetConfig+0x14c>)
 8006c4a:	4293      	cmp	r3, r2
 8006c4c:	d007      	beq.n	8006c5e <TIM_Base_SetConfig+0x9a>
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	4a30      	ldr	r2, [pc, #192]	@ (8006d14 <TIM_Base_SetConfig+0x150>)
 8006c52:	4293      	cmp	r3, r2
 8006c54:	d003      	beq.n	8006c5e <TIM_Base_SetConfig+0x9a>
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	4a2b      	ldr	r2, [pc, #172]	@ (8006d08 <TIM_Base_SetConfig+0x144>)
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	d108      	bne.n	8006c70 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006c64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	68db      	ldr	r3, [r3, #12]
 8006c6a:	68fa      	ldr	r2, [r7, #12]
 8006c6c:	4313      	orrs	r3, r2
 8006c6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	695b      	ldr	r3, [r3, #20]
 8006c7a:	4313      	orrs	r3, r2
 8006c7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	68fa      	ldr	r2, [r7, #12]
 8006c82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	689a      	ldr	r2, [r3, #8]
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	681a      	ldr	r2, [r3, #0]
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	4a18      	ldr	r2, [pc, #96]	@ (8006cf8 <TIM_Base_SetConfig+0x134>)
 8006c98:	4293      	cmp	r3, r2
 8006c9a:	d013      	beq.n	8006cc4 <TIM_Base_SetConfig+0x100>
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	4a19      	ldr	r2, [pc, #100]	@ (8006d04 <TIM_Base_SetConfig+0x140>)
 8006ca0:	4293      	cmp	r3, r2
 8006ca2:	d00f      	beq.n	8006cc4 <TIM_Base_SetConfig+0x100>
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	4a19      	ldr	r2, [pc, #100]	@ (8006d0c <TIM_Base_SetConfig+0x148>)
 8006ca8:	4293      	cmp	r3, r2
 8006caa:	d00b      	beq.n	8006cc4 <TIM_Base_SetConfig+0x100>
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	4a18      	ldr	r2, [pc, #96]	@ (8006d10 <TIM_Base_SetConfig+0x14c>)
 8006cb0:	4293      	cmp	r3, r2
 8006cb2:	d007      	beq.n	8006cc4 <TIM_Base_SetConfig+0x100>
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	4a17      	ldr	r2, [pc, #92]	@ (8006d14 <TIM_Base_SetConfig+0x150>)
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	d003      	beq.n	8006cc4 <TIM_Base_SetConfig+0x100>
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	4a12      	ldr	r2, [pc, #72]	@ (8006d08 <TIM_Base_SetConfig+0x144>)
 8006cc0:	4293      	cmp	r3, r2
 8006cc2:	d103      	bne.n	8006ccc <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006cc4:	683b      	ldr	r3, [r7, #0]
 8006cc6:	691a      	ldr	r2, [r3, #16]
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2201      	movs	r2, #1
 8006cd0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	691b      	ldr	r3, [r3, #16]
 8006cd6:	f003 0301 	and.w	r3, r3, #1
 8006cda:	2b01      	cmp	r3, #1
 8006cdc:	d105      	bne.n	8006cea <TIM_Base_SetConfig+0x126>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	691b      	ldr	r3, [r3, #16]
 8006ce2:	f023 0201 	bic.w	r2, r3, #1
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	611a      	str	r2, [r3, #16]
  }
}
 8006cea:	bf00      	nop
 8006cec:	3714      	adds	r7, #20
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf4:	4770      	bx	lr
 8006cf6:	bf00      	nop
 8006cf8:	40012c00 	.word	0x40012c00
 8006cfc:	40000400 	.word	0x40000400
 8006d00:	40000800 	.word	0x40000800
 8006d04:	40013400 	.word	0x40013400
 8006d08:	40015000 	.word	0x40015000
 8006d0c:	40014000 	.word	0x40014000
 8006d10:	40014400 	.word	0x40014400
 8006d14:	40014800 	.word	0x40014800

08006d18 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b086      	sub	sp, #24
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
 8006d20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006d22:	2300      	movs	r3, #0
 8006d24:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	689b      	ldr	r3, [r3, #8]
 8006d2c:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006d2e:	693b      	ldr	r3, [r7, #16]
 8006d30:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d34:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	685b      	ldr	r3, [r3, #4]
 8006d3a:	693a      	ldr	r2, [r7, #16]
 8006d3c:	4313      	orrs	r3, r2
 8006d3e:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8006d40:	693b      	ldr	r3, [r7, #16]
 8006d42:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006d46:	f023 0307 	bic.w	r3, r3, #7
 8006d4a:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	693a      	ldr	r2, [r7, #16]
 8006d52:	4313      	orrs	r3, r2
 8006d54:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	693a      	ldr	r2, [r7, #16]
 8006d5c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	685b      	ldr	r3, [r3, #4]
 8006d62:	2b70      	cmp	r3, #112	@ 0x70
 8006d64:	d01a      	beq.n	8006d9c <TIM_SlaveTimer_SetConfig+0x84>
 8006d66:	2b70      	cmp	r3, #112	@ 0x70
 8006d68:	d860      	bhi.n	8006e2c <TIM_SlaveTimer_SetConfig+0x114>
 8006d6a:	2b60      	cmp	r3, #96	@ 0x60
 8006d6c:	d054      	beq.n	8006e18 <TIM_SlaveTimer_SetConfig+0x100>
 8006d6e:	2b60      	cmp	r3, #96	@ 0x60
 8006d70:	d85c      	bhi.n	8006e2c <TIM_SlaveTimer_SetConfig+0x114>
 8006d72:	2b50      	cmp	r3, #80	@ 0x50
 8006d74:	d046      	beq.n	8006e04 <TIM_SlaveTimer_SetConfig+0xec>
 8006d76:	2b50      	cmp	r3, #80	@ 0x50
 8006d78:	d858      	bhi.n	8006e2c <TIM_SlaveTimer_SetConfig+0x114>
 8006d7a:	2b40      	cmp	r3, #64	@ 0x40
 8006d7c:	d019      	beq.n	8006db2 <TIM_SlaveTimer_SetConfig+0x9a>
 8006d7e:	2b40      	cmp	r3, #64	@ 0x40
 8006d80:	d854      	bhi.n	8006e2c <TIM_SlaveTimer_SetConfig+0x114>
 8006d82:	2b30      	cmp	r3, #48	@ 0x30
 8006d84:	d055      	beq.n	8006e32 <TIM_SlaveTimer_SetConfig+0x11a>
 8006d86:	2b30      	cmp	r3, #48	@ 0x30
 8006d88:	d850      	bhi.n	8006e2c <TIM_SlaveTimer_SetConfig+0x114>
 8006d8a:	2b20      	cmp	r3, #32
 8006d8c:	d051      	beq.n	8006e32 <TIM_SlaveTimer_SetConfig+0x11a>
 8006d8e:	2b20      	cmp	r3, #32
 8006d90:	d84c      	bhi.n	8006e2c <TIM_SlaveTimer_SetConfig+0x114>
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d04d      	beq.n	8006e32 <TIM_SlaveTimer_SetConfig+0x11a>
 8006d96:	2b10      	cmp	r3, #16
 8006d98:	d04b      	beq.n	8006e32 <TIM_SlaveTimer_SetConfig+0x11a>
 8006d9a:	e047      	b.n	8006e2c <TIM_SlaveTimer_SetConfig+0x114>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8006dac:	f000 f9e6 	bl	800717c <TIM_ETR_SetConfig>
      break;
 8006db0:	e040      	b.n	8006e34 <TIM_SlaveTimer_SetConfig+0x11c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	2b05      	cmp	r3, #5
 8006db8:	d101      	bne.n	8006dbe <TIM_SlaveTimer_SetConfig+0xa6>
      {
        return HAL_ERROR;
 8006dba:	2301      	movs	r3, #1
 8006dbc:	e03b      	b.n	8006e36 <TIM_SlaveTimer_SetConfig+0x11e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	6a1b      	ldr	r3, [r3, #32]
 8006dc4:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	6a1a      	ldr	r2, [r3, #32]
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f022 0201 	bic.w	r2, r2, #1
 8006dd4:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	699b      	ldr	r3, [r3, #24]
 8006ddc:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006dde:	68bb      	ldr	r3, [r7, #8]
 8006de0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006de4:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	691b      	ldr	r3, [r3, #16]
 8006dea:	011b      	lsls	r3, r3, #4
 8006dec:	68ba      	ldr	r2, [r7, #8]
 8006dee:	4313      	orrs	r3, r2
 8006df0:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	68ba      	ldr	r2, [r7, #8]
 8006df8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	68fa      	ldr	r2, [r7, #12]
 8006e00:	621a      	str	r2, [r3, #32]
      break;
 8006e02:	e017      	b.n	8006e34 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e10:	461a      	mov	r2, r3
 8006e12:	f000 f883 	bl	8006f1c <TIM_TI1_ConfigInputStage>
      break;
 8006e16:	e00d      	b.n	8006e34 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006e24:	461a      	mov	r2, r3
 8006e26:	f000 f8e5 	bl	8006ff4 <TIM_TI2_ConfigInputStage>
      break;
 8006e2a:	e003      	b.n	8006e34 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8006e2c:	2301      	movs	r3, #1
 8006e2e:	75fb      	strb	r3, [r7, #23]
      break;
 8006e30:	e000      	b.n	8006e34 <TIM_SlaveTimer_SetConfig+0x11c>
      break;
 8006e32:	bf00      	nop
  }

  return status;
 8006e34:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e36:	4618      	mov	r0, r3
 8006e38:	3718      	adds	r7, #24
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	bd80      	pop	{r7, pc}
	...

08006e40 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006e40:	b480      	push	{r7}
 8006e42:	b087      	sub	sp, #28
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	60f8      	str	r0, [r7, #12]
 8006e48:	60b9      	str	r1, [r7, #8]
 8006e4a:	607a      	str	r2, [r7, #4]
 8006e4c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	6a1b      	ldr	r3, [r3, #32]
 8006e52:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	6a1b      	ldr	r3, [r3, #32]
 8006e58:	f023 0201 	bic.w	r2, r3, #1
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	699b      	ldr	r3, [r3, #24]
 8006e64:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	4a26      	ldr	r2, [pc, #152]	@ (8006f04 <TIM_TI1_SetConfig+0xc4>)
 8006e6a:	4293      	cmp	r3, r2
 8006e6c:	d017      	beq.n	8006e9e <TIM_TI1_SetConfig+0x5e>
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006e74:	d013      	beq.n	8006e9e <TIM_TI1_SetConfig+0x5e>
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	4a23      	ldr	r2, [pc, #140]	@ (8006f08 <TIM_TI1_SetConfig+0xc8>)
 8006e7a:	4293      	cmp	r3, r2
 8006e7c:	d00f      	beq.n	8006e9e <TIM_TI1_SetConfig+0x5e>
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	4a22      	ldr	r2, [pc, #136]	@ (8006f0c <TIM_TI1_SetConfig+0xcc>)
 8006e82:	4293      	cmp	r3, r2
 8006e84:	d00b      	beq.n	8006e9e <TIM_TI1_SetConfig+0x5e>
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	4a21      	ldr	r2, [pc, #132]	@ (8006f10 <TIM_TI1_SetConfig+0xd0>)
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	d007      	beq.n	8006e9e <TIM_TI1_SetConfig+0x5e>
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	4a20      	ldr	r2, [pc, #128]	@ (8006f14 <TIM_TI1_SetConfig+0xd4>)
 8006e92:	4293      	cmp	r3, r2
 8006e94:	d003      	beq.n	8006e9e <TIM_TI1_SetConfig+0x5e>
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	4a1f      	ldr	r2, [pc, #124]	@ (8006f18 <TIM_TI1_SetConfig+0xd8>)
 8006e9a:	4293      	cmp	r3, r2
 8006e9c:	d101      	bne.n	8006ea2 <TIM_TI1_SetConfig+0x62>
 8006e9e:	2301      	movs	r3, #1
 8006ea0:	e000      	b.n	8006ea4 <TIM_TI1_SetConfig+0x64>
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d008      	beq.n	8006eba <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006ea8:	697b      	ldr	r3, [r7, #20]
 8006eaa:	f023 0303 	bic.w	r3, r3, #3
 8006eae:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006eb0:	697a      	ldr	r2, [r7, #20]
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	4313      	orrs	r3, r2
 8006eb6:	617b      	str	r3, [r7, #20]
 8006eb8:	e003      	b.n	8006ec2 <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006eba:	697b      	ldr	r3, [r7, #20]
 8006ebc:	f043 0301 	orr.w	r3, r3, #1
 8006ec0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006ec2:	697b      	ldr	r3, [r7, #20]
 8006ec4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006ec8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	011b      	lsls	r3, r3, #4
 8006ece:	b2db      	uxtb	r3, r3
 8006ed0:	697a      	ldr	r2, [r7, #20]
 8006ed2:	4313      	orrs	r3, r2
 8006ed4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006ed6:	693b      	ldr	r3, [r7, #16]
 8006ed8:	f023 030a 	bic.w	r3, r3, #10
 8006edc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006ede:	68bb      	ldr	r3, [r7, #8]
 8006ee0:	f003 030a 	and.w	r3, r3, #10
 8006ee4:	693a      	ldr	r2, [r7, #16]
 8006ee6:	4313      	orrs	r3, r2
 8006ee8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	697a      	ldr	r2, [r7, #20]
 8006eee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	693a      	ldr	r2, [r7, #16]
 8006ef4:	621a      	str	r2, [r3, #32]
}
 8006ef6:	bf00      	nop
 8006ef8:	371c      	adds	r7, #28
 8006efa:	46bd      	mov	sp, r7
 8006efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f00:	4770      	bx	lr
 8006f02:	bf00      	nop
 8006f04:	40012c00 	.word	0x40012c00
 8006f08:	40000400 	.word	0x40000400
 8006f0c:	40000800 	.word	0x40000800
 8006f10:	40013400 	.word	0x40013400
 8006f14:	40014000 	.word	0x40014000
 8006f18:	40015000 	.word	0x40015000

08006f1c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006f1c:	b480      	push	{r7}
 8006f1e:	b087      	sub	sp, #28
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	60f8      	str	r0, [r7, #12]
 8006f24:	60b9      	str	r1, [r7, #8]
 8006f26:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	6a1b      	ldr	r3, [r3, #32]
 8006f2c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	6a1b      	ldr	r3, [r3, #32]
 8006f32:	f023 0201 	bic.w	r2, r3, #1
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	699b      	ldr	r3, [r3, #24]
 8006f3e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006f40:	693b      	ldr	r3, [r7, #16]
 8006f42:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006f46:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	011b      	lsls	r3, r3, #4
 8006f4c:	693a      	ldr	r2, [r7, #16]
 8006f4e:	4313      	orrs	r3, r2
 8006f50:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006f52:	697b      	ldr	r3, [r7, #20]
 8006f54:	f023 030a 	bic.w	r3, r3, #10
 8006f58:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006f5a:	697a      	ldr	r2, [r7, #20]
 8006f5c:	68bb      	ldr	r3, [r7, #8]
 8006f5e:	4313      	orrs	r3, r2
 8006f60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	693a      	ldr	r2, [r7, #16]
 8006f66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	697a      	ldr	r2, [r7, #20]
 8006f6c:	621a      	str	r2, [r3, #32]
}
 8006f6e:	bf00      	nop
 8006f70:	371c      	adds	r7, #28
 8006f72:	46bd      	mov	sp, r7
 8006f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f78:	4770      	bx	lr

08006f7a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006f7a:	b480      	push	{r7}
 8006f7c:	b087      	sub	sp, #28
 8006f7e:	af00      	add	r7, sp, #0
 8006f80:	60f8      	str	r0, [r7, #12]
 8006f82:	60b9      	str	r1, [r7, #8]
 8006f84:	607a      	str	r2, [r7, #4]
 8006f86:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	6a1b      	ldr	r3, [r3, #32]
 8006f8c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	6a1b      	ldr	r3, [r3, #32]
 8006f92:	f023 0210 	bic.w	r2, r3, #16
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	699b      	ldr	r3, [r3, #24]
 8006f9e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006fa0:	693b      	ldr	r3, [r7, #16]
 8006fa2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006fa6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	021b      	lsls	r3, r3, #8
 8006fac:	693a      	ldr	r2, [r7, #16]
 8006fae:	4313      	orrs	r3, r2
 8006fb0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006fb2:	693b      	ldr	r3, [r7, #16]
 8006fb4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006fb8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006fba:	683b      	ldr	r3, [r7, #0]
 8006fbc:	031b      	lsls	r3, r3, #12
 8006fbe:	b29b      	uxth	r3, r3
 8006fc0:	693a      	ldr	r2, [r7, #16]
 8006fc2:	4313      	orrs	r3, r2
 8006fc4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006fc6:	697b      	ldr	r3, [r7, #20]
 8006fc8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006fcc:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006fce:	68bb      	ldr	r3, [r7, #8]
 8006fd0:	011b      	lsls	r3, r3, #4
 8006fd2:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8006fd6:	697a      	ldr	r2, [r7, #20]
 8006fd8:	4313      	orrs	r3, r2
 8006fda:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	693a      	ldr	r2, [r7, #16]
 8006fe0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	697a      	ldr	r2, [r7, #20]
 8006fe6:	621a      	str	r2, [r3, #32]
}
 8006fe8:	bf00      	nop
 8006fea:	371c      	adds	r7, #28
 8006fec:	46bd      	mov	sp, r7
 8006fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff2:	4770      	bx	lr

08006ff4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006ff4:	b480      	push	{r7}
 8006ff6:	b087      	sub	sp, #28
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	60f8      	str	r0, [r7, #12]
 8006ffc:	60b9      	str	r1, [r7, #8]
 8006ffe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	6a1b      	ldr	r3, [r3, #32]
 8007004:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	6a1b      	ldr	r3, [r3, #32]
 800700a:	f023 0210 	bic.w	r2, r3, #16
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	699b      	ldr	r3, [r3, #24]
 8007016:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007018:	693b      	ldr	r3, [r7, #16]
 800701a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800701e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	031b      	lsls	r3, r3, #12
 8007024:	693a      	ldr	r2, [r7, #16]
 8007026:	4313      	orrs	r3, r2
 8007028:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800702a:	697b      	ldr	r3, [r7, #20]
 800702c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007030:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007032:	68bb      	ldr	r3, [r7, #8]
 8007034:	011b      	lsls	r3, r3, #4
 8007036:	697a      	ldr	r2, [r7, #20]
 8007038:	4313      	orrs	r3, r2
 800703a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	693a      	ldr	r2, [r7, #16]
 8007040:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	697a      	ldr	r2, [r7, #20]
 8007046:	621a      	str	r2, [r3, #32]
}
 8007048:	bf00      	nop
 800704a:	371c      	adds	r7, #28
 800704c:	46bd      	mov	sp, r7
 800704e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007052:	4770      	bx	lr

08007054 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007054:	b480      	push	{r7}
 8007056:	b087      	sub	sp, #28
 8007058:	af00      	add	r7, sp, #0
 800705a:	60f8      	str	r0, [r7, #12]
 800705c:	60b9      	str	r1, [r7, #8]
 800705e:	607a      	str	r2, [r7, #4]
 8007060:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	6a1b      	ldr	r3, [r3, #32]
 8007066:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	6a1b      	ldr	r3, [r3, #32]
 800706c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	69db      	ldr	r3, [r3, #28]
 8007078:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800707a:	693b      	ldr	r3, [r7, #16]
 800707c:	f023 0303 	bic.w	r3, r3, #3
 8007080:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8007082:	693a      	ldr	r2, [r7, #16]
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	4313      	orrs	r3, r2
 8007088:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800708a:	693b      	ldr	r3, [r7, #16]
 800708c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007090:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	011b      	lsls	r3, r3, #4
 8007096:	b2db      	uxtb	r3, r3
 8007098:	693a      	ldr	r2, [r7, #16]
 800709a:	4313      	orrs	r3, r2
 800709c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800709e:	697b      	ldr	r3, [r7, #20]
 80070a0:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 80070a4:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80070a6:	68bb      	ldr	r3, [r7, #8]
 80070a8:	021b      	lsls	r3, r3, #8
 80070aa:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 80070ae:	697a      	ldr	r2, [r7, #20]
 80070b0:	4313      	orrs	r3, r2
 80070b2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	693a      	ldr	r2, [r7, #16]
 80070b8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	697a      	ldr	r2, [r7, #20]
 80070be:	621a      	str	r2, [r3, #32]
}
 80070c0:	bf00      	nop
 80070c2:	371c      	adds	r7, #28
 80070c4:	46bd      	mov	sp, r7
 80070c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ca:	4770      	bx	lr

080070cc <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80070cc:	b480      	push	{r7}
 80070ce:	b087      	sub	sp, #28
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	60f8      	str	r0, [r7, #12]
 80070d4:	60b9      	str	r1, [r7, #8]
 80070d6:	607a      	str	r2, [r7, #4]
 80070d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	6a1b      	ldr	r3, [r3, #32]
 80070de:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	6a1b      	ldr	r3, [r3, #32]
 80070e4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	69db      	ldr	r3, [r3, #28]
 80070f0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80070f2:	693b      	ldr	r3, [r7, #16]
 80070f4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80070f8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	021b      	lsls	r3, r3, #8
 80070fe:	693a      	ldr	r2, [r7, #16]
 8007100:	4313      	orrs	r3, r2
 8007102:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8007104:	693b      	ldr	r3, [r7, #16]
 8007106:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800710a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800710c:	683b      	ldr	r3, [r7, #0]
 800710e:	031b      	lsls	r3, r3, #12
 8007110:	b29b      	uxth	r3, r3
 8007112:	693a      	ldr	r2, [r7, #16]
 8007114:	4313      	orrs	r3, r2
 8007116:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8007118:	697b      	ldr	r3, [r7, #20]
 800711a:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 800711e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8007120:	68bb      	ldr	r3, [r7, #8]
 8007122:	031b      	lsls	r3, r3, #12
 8007124:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8007128:	697a      	ldr	r2, [r7, #20]
 800712a:	4313      	orrs	r3, r2
 800712c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	693a      	ldr	r2, [r7, #16]
 8007132:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	697a      	ldr	r2, [r7, #20]
 8007138:	621a      	str	r2, [r3, #32]
}
 800713a:	bf00      	nop
 800713c:	371c      	adds	r7, #28
 800713e:	46bd      	mov	sp, r7
 8007140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007144:	4770      	bx	lr

08007146 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007146:	b480      	push	{r7}
 8007148:	b085      	sub	sp, #20
 800714a:	af00      	add	r7, sp, #0
 800714c:	6078      	str	r0, [r7, #4]
 800714e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	689b      	ldr	r3, [r3, #8]
 8007154:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800715c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800715e:	683a      	ldr	r2, [r7, #0]
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	4313      	orrs	r3, r2
 8007164:	f043 0307 	orr.w	r3, r3, #7
 8007168:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	68fa      	ldr	r2, [r7, #12]
 800716e:	609a      	str	r2, [r3, #8]
}
 8007170:	bf00      	nop
 8007172:	3714      	adds	r7, #20
 8007174:	46bd      	mov	sp, r7
 8007176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717a:	4770      	bx	lr

0800717c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800717c:	b480      	push	{r7}
 800717e:	b087      	sub	sp, #28
 8007180:	af00      	add	r7, sp, #0
 8007182:	60f8      	str	r0, [r7, #12]
 8007184:	60b9      	str	r1, [r7, #8]
 8007186:	607a      	str	r2, [r7, #4]
 8007188:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	689b      	ldr	r3, [r3, #8]
 800718e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007190:	697b      	ldr	r3, [r7, #20]
 8007192:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007196:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	021a      	lsls	r2, r3, #8
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	431a      	orrs	r2, r3
 80071a0:	68bb      	ldr	r3, [r7, #8]
 80071a2:	4313      	orrs	r3, r2
 80071a4:	697a      	ldr	r2, [r7, #20]
 80071a6:	4313      	orrs	r3, r2
 80071a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	697a      	ldr	r2, [r7, #20]
 80071ae:	609a      	str	r2, [r3, #8]
}
 80071b0:	bf00      	nop
 80071b2:	371c      	adds	r7, #28
 80071b4:	46bd      	mov	sp, r7
 80071b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ba:	4770      	bx	lr

080071bc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80071bc:	b480      	push	{r7}
 80071be:	b087      	sub	sp, #28
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	60f8      	str	r0, [r7, #12]
 80071c4:	60b9      	str	r1, [r7, #8]
 80071c6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80071c8:	68bb      	ldr	r3, [r7, #8]
 80071ca:	f003 031f 	and.w	r3, r3, #31
 80071ce:	2201      	movs	r2, #1
 80071d0:	fa02 f303 	lsl.w	r3, r2, r3
 80071d4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	6a1a      	ldr	r2, [r3, #32]
 80071da:	697b      	ldr	r3, [r7, #20]
 80071dc:	43db      	mvns	r3, r3
 80071de:	401a      	ands	r2, r3
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	6a1a      	ldr	r2, [r3, #32]
 80071e8:	68bb      	ldr	r3, [r7, #8]
 80071ea:	f003 031f 	and.w	r3, r3, #31
 80071ee:	6879      	ldr	r1, [r7, #4]
 80071f0:	fa01 f303 	lsl.w	r3, r1, r3
 80071f4:	431a      	orrs	r2, r3
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	621a      	str	r2, [r3, #32]
}
 80071fa:	bf00      	nop
 80071fc:	371c      	adds	r7, #28
 80071fe:	46bd      	mov	sp, r7
 8007200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007204:	4770      	bx	lr
	...

08007208 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007208:	b480      	push	{r7}
 800720a:	b085      	sub	sp, #20
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
 8007210:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007218:	2b01      	cmp	r3, #1
 800721a:	d101      	bne.n	8007220 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800721c:	2302      	movs	r3, #2
 800721e:	e06d      	b.n	80072fc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2201      	movs	r2, #1
 8007224:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2202      	movs	r2, #2
 800722c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	685b      	ldr	r3, [r3, #4]
 8007236:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	689b      	ldr	r3, [r3, #8]
 800723e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	4a30      	ldr	r2, [pc, #192]	@ (8007308 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007246:	4293      	cmp	r3, r2
 8007248:	d009      	beq.n	800725e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	4a2f      	ldr	r2, [pc, #188]	@ (800730c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007250:	4293      	cmp	r3, r2
 8007252:	d004      	beq.n	800725e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	4a2d      	ldr	r2, [pc, #180]	@ (8007310 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800725a:	4293      	cmp	r3, r2
 800725c:	d108      	bne.n	8007270 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007264:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	685b      	ldr	r3, [r3, #4]
 800726a:	68fa      	ldr	r2, [r7, #12]
 800726c:	4313      	orrs	r3, r2
 800726e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007276:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	68fa      	ldr	r2, [r7, #12]
 800727e:	4313      	orrs	r3, r2
 8007280:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	68fa      	ldr	r2, [r7, #12]
 8007288:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	4a1e      	ldr	r2, [pc, #120]	@ (8007308 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007290:	4293      	cmp	r3, r2
 8007292:	d01d      	beq.n	80072d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800729c:	d018      	beq.n	80072d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	4a1c      	ldr	r2, [pc, #112]	@ (8007314 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80072a4:	4293      	cmp	r3, r2
 80072a6:	d013      	beq.n	80072d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	4a1a      	ldr	r2, [pc, #104]	@ (8007318 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80072ae:	4293      	cmp	r3, r2
 80072b0:	d00e      	beq.n	80072d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	4a15      	ldr	r2, [pc, #84]	@ (800730c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80072b8:	4293      	cmp	r3, r2
 80072ba:	d009      	beq.n	80072d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	4a16      	ldr	r2, [pc, #88]	@ (800731c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80072c2:	4293      	cmp	r3, r2
 80072c4:	d004      	beq.n	80072d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	4a11      	ldr	r2, [pc, #68]	@ (8007310 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80072cc:	4293      	cmp	r3, r2
 80072ce:	d10c      	bne.n	80072ea <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80072d0:	68bb      	ldr	r3, [r7, #8]
 80072d2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80072d6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	689b      	ldr	r3, [r3, #8]
 80072dc:	68ba      	ldr	r2, [r7, #8]
 80072de:	4313      	orrs	r3, r2
 80072e0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	68ba      	ldr	r2, [r7, #8]
 80072e8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	2201      	movs	r2, #1
 80072ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	2200      	movs	r2, #0
 80072f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80072fa:	2300      	movs	r3, #0
}
 80072fc:	4618      	mov	r0, r3
 80072fe:	3714      	adds	r7, #20
 8007300:	46bd      	mov	sp, r7
 8007302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007306:	4770      	bx	lr
 8007308:	40012c00 	.word	0x40012c00
 800730c:	40013400 	.word	0x40013400
 8007310:	40015000 	.word	0x40015000
 8007314:	40000400 	.word	0x40000400
 8007318:	40000800 	.word	0x40000800
 800731c:	40014000 	.word	0x40014000

08007320 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007320:	b480      	push	{r7}
 8007322:	b083      	sub	sp, #12
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007328:	bf00      	nop
 800732a:	370c      	adds	r7, #12
 800732c:	46bd      	mov	sp, r7
 800732e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007332:	4770      	bx	lr

08007334 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007334:	b480      	push	{r7}
 8007336:	b083      	sub	sp, #12
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800733c:	bf00      	nop
 800733e:	370c      	adds	r7, #12
 8007340:	46bd      	mov	sp, r7
 8007342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007346:	4770      	bx	lr

08007348 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007348:	b480      	push	{r7}
 800734a:	b083      	sub	sp, #12
 800734c:	af00      	add	r7, sp, #0
 800734e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007350:	bf00      	nop
 8007352:	370c      	adds	r7, #12
 8007354:	46bd      	mov	sp, r7
 8007356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735a:	4770      	bx	lr

0800735c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800735c:	b580      	push	{r7, lr}
 800735e:	b082      	sub	sp, #8
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d101      	bne.n	800736e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800736a:	2301      	movs	r3, #1
 800736c:	e040      	b.n	80073f0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007372:	2b00      	cmp	r3, #0
 8007374:	d106      	bne.n	8007384 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	2200      	movs	r2, #0
 800737a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800737e:	6878      	ldr	r0, [r7, #4]
 8007380:	f7fa fa76 	bl	8001870 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2224      	movs	r2, #36	@ 0x24
 8007388:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	681a      	ldr	r2, [r3, #0]
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	f022 0201 	bic.w	r2, r2, #1
 8007398:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d002      	beq.n	80073a8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80073a2:	6878      	ldr	r0, [r7, #4]
 80073a4:	f000 fa86 	bl	80078b4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80073a8:	6878      	ldr	r0, [r7, #4]
 80073aa:	f000 f8af 	bl	800750c <UART_SetConfig>
 80073ae:	4603      	mov	r3, r0
 80073b0:	2b01      	cmp	r3, #1
 80073b2:	d101      	bne.n	80073b8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80073b4:	2301      	movs	r3, #1
 80073b6:	e01b      	b.n	80073f0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	685a      	ldr	r2, [r3, #4]
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80073c6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	689a      	ldr	r2, [r3, #8]
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80073d6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	681a      	ldr	r2, [r3, #0]
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	f042 0201 	orr.w	r2, r2, #1
 80073e6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80073e8:	6878      	ldr	r0, [r7, #4]
 80073ea:	f000 fb05 	bl	80079f8 <UART_CheckIdleState>
 80073ee:	4603      	mov	r3, r0
}
 80073f0:	4618      	mov	r0, r3
 80073f2:	3708      	adds	r7, #8
 80073f4:	46bd      	mov	sp, r7
 80073f6:	bd80      	pop	{r7, pc}

080073f8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b08a      	sub	sp, #40	@ 0x28
 80073fc:	af02      	add	r7, sp, #8
 80073fe:	60f8      	str	r0, [r7, #12]
 8007400:	60b9      	str	r1, [r7, #8]
 8007402:	603b      	str	r3, [r7, #0]
 8007404:	4613      	mov	r3, r2
 8007406:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800740c:	2b20      	cmp	r3, #32
 800740e:	d177      	bne.n	8007500 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8007410:	68bb      	ldr	r3, [r7, #8]
 8007412:	2b00      	cmp	r3, #0
 8007414:	d002      	beq.n	800741c <HAL_UART_Transmit+0x24>
 8007416:	88fb      	ldrh	r3, [r7, #6]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d101      	bne.n	8007420 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800741c:	2301      	movs	r3, #1
 800741e:	e070      	b.n	8007502 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	2200      	movs	r2, #0
 8007424:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	2221      	movs	r2, #33	@ 0x21
 800742c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800742e:	f7fa fc49 	bl	8001cc4 <HAL_GetTick>
 8007432:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	88fa      	ldrh	r2, [r7, #6]
 8007438:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	88fa      	ldrh	r2, [r7, #6]
 8007440:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	689b      	ldr	r3, [r3, #8]
 8007448:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800744c:	d108      	bne.n	8007460 <HAL_UART_Transmit+0x68>
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	691b      	ldr	r3, [r3, #16]
 8007452:	2b00      	cmp	r3, #0
 8007454:	d104      	bne.n	8007460 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8007456:	2300      	movs	r3, #0
 8007458:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800745a:	68bb      	ldr	r3, [r7, #8]
 800745c:	61bb      	str	r3, [r7, #24]
 800745e:	e003      	b.n	8007468 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8007460:	68bb      	ldr	r3, [r7, #8]
 8007462:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007464:	2300      	movs	r3, #0
 8007466:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007468:	e02f      	b.n	80074ca <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800746a:	683b      	ldr	r3, [r7, #0]
 800746c:	9300      	str	r3, [sp, #0]
 800746e:	697b      	ldr	r3, [r7, #20]
 8007470:	2200      	movs	r2, #0
 8007472:	2180      	movs	r1, #128	@ 0x80
 8007474:	68f8      	ldr	r0, [r7, #12]
 8007476:	f000 fb67 	bl	8007b48 <UART_WaitOnFlagUntilTimeout>
 800747a:	4603      	mov	r3, r0
 800747c:	2b00      	cmp	r3, #0
 800747e:	d004      	beq.n	800748a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	2220      	movs	r2, #32
 8007484:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8007486:	2303      	movs	r3, #3
 8007488:	e03b      	b.n	8007502 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800748a:	69fb      	ldr	r3, [r7, #28]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d10b      	bne.n	80074a8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007490:	69bb      	ldr	r3, [r7, #24]
 8007492:	881a      	ldrh	r2, [r3, #0]
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800749c:	b292      	uxth	r2, r2
 800749e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80074a0:	69bb      	ldr	r3, [r7, #24]
 80074a2:	3302      	adds	r3, #2
 80074a4:	61bb      	str	r3, [r7, #24]
 80074a6:	e007      	b.n	80074b8 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80074a8:	69fb      	ldr	r3, [r7, #28]
 80074aa:	781a      	ldrb	r2, [r3, #0]
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80074b2:	69fb      	ldr	r3, [r7, #28]
 80074b4:	3301      	adds	r3, #1
 80074b6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80074be:	b29b      	uxth	r3, r3
 80074c0:	3b01      	subs	r3, #1
 80074c2:	b29a      	uxth	r2, r3
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80074d0:	b29b      	uxth	r3, r3
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d1c9      	bne.n	800746a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80074d6:	683b      	ldr	r3, [r7, #0]
 80074d8:	9300      	str	r3, [sp, #0]
 80074da:	697b      	ldr	r3, [r7, #20]
 80074dc:	2200      	movs	r2, #0
 80074de:	2140      	movs	r1, #64	@ 0x40
 80074e0:	68f8      	ldr	r0, [r7, #12]
 80074e2:	f000 fb31 	bl	8007b48 <UART_WaitOnFlagUntilTimeout>
 80074e6:	4603      	mov	r3, r0
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d004      	beq.n	80074f6 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	2220      	movs	r2, #32
 80074f0:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80074f2:	2303      	movs	r3, #3
 80074f4:	e005      	b.n	8007502 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	2220      	movs	r2, #32
 80074fa:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80074fc:	2300      	movs	r3, #0
 80074fe:	e000      	b.n	8007502 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8007500:	2302      	movs	r3, #2
  }
}
 8007502:	4618      	mov	r0, r3
 8007504:	3720      	adds	r7, #32
 8007506:	46bd      	mov	sp, r7
 8007508:	bd80      	pop	{r7, pc}
	...

0800750c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800750c:	b580      	push	{r7, lr}
 800750e:	b088      	sub	sp, #32
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007514:	2300      	movs	r3, #0
 8007516:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	689a      	ldr	r2, [r3, #8]
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	691b      	ldr	r3, [r3, #16]
 8007520:	431a      	orrs	r2, r3
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	695b      	ldr	r3, [r3, #20]
 8007526:	431a      	orrs	r2, r3
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	69db      	ldr	r3, [r3, #28]
 800752c:	4313      	orrs	r3, r2
 800752e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	681a      	ldr	r2, [r3, #0]
 8007536:	4b92      	ldr	r3, [pc, #584]	@ (8007780 <UART_SetConfig+0x274>)
 8007538:	4013      	ands	r3, r2
 800753a:	687a      	ldr	r2, [r7, #4]
 800753c:	6812      	ldr	r2, [r2, #0]
 800753e:	6979      	ldr	r1, [r7, #20]
 8007540:	430b      	orrs	r3, r1
 8007542:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	685b      	ldr	r3, [r3, #4]
 800754a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	68da      	ldr	r2, [r3, #12]
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	430a      	orrs	r2, r1
 8007558:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	699b      	ldr	r3, [r3, #24]
 800755e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	6a1b      	ldr	r3, [r3, #32]
 8007564:	697a      	ldr	r2, [r7, #20]
 8007566:	4313      	orrs	r3, r2
 8007568:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	689b      	ldr	r3, [r3, #8]
 8007570:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	697a      	ldr	r2, [r7, #20]
 800757a:	430a      	orrs	r2, r1
 800757c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	4a80      	ldr	r2, [pc, #512]	@ (8007784 <UART_SetConfig+0x278>)
 8007584:	4293      	cmp	r3, r2
 8007586:	d120      	bne.n	80075ca <UART_SetConfig+0xbe>
 8007588:	4b7f      	ldr	r3, [pc, #508]	@ (8007788 <UART_SetConfig+0x27c>)
 800758a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800758c:	f003 0303 	and.w	r3, r3, #3
 8007590:	2b03      	cmp	r3, #3
 8007592:	d817      	bhi.n	80075c4 <UART_SetConfig+0xb8>
 8007594:	a201      	add	r2, pc, #4	@ (adr r2, 800759c <UART_SetConfig+0x90>)
 8007596:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800759a:	bf00      	nop
 800759c:	080075ad 	.word	0x080075ad
 80075a0:	080075b9 	.word	0x080075b9
 80075a4:	080075bf 	.word	0x080075bf
 80075a8:	080075b3 	.word	0x080075b3
 80075ac:	2301      	movs	r3, #1
 80075ae:	77fb      	strb	r3, [r7, #31]
 80075b0:	e0b5      	b.n	800771e <UART_SetConfig+0x212>
 80075b2:	2302      	movs	r3, #2
 80075b4:	77fb      	strb	r3, [r7, #31]
 80075b6:	e0b2      	b.n	800771e <UART_SetConfig+0x212>
 80075b8:	2304      	movs	r3, #4
 80075ba:	77fb      	strb	r3, [r7, #31]
 80075bc:	e0af      	b.n	800771e <UART_SetConfig+0x212>
 80075be:	2308      	movs	r3, #8
 80075c0:	77fb      	strb	r3, [r7, #31]
 80075c2:	e0ac      	b.n	800771e <UART_SetConfig+0x212>
 80075c4:	2310      	movs	r3, #16
 80075c6:	77fb      	strb	r3, [r7, #31]
 80075c8:	e0a9      	b.n	800771e <UART_SetConfig+0x212>
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	4a6f      	ldr	r2, [pc, #444]	@ (800778c <UART_SetConfig+0x280>)
 80075d0:	4293      	cmp	r3, r2
 80075d2:	d124      	bne.n	800761e <UART_SetConfig+0x112>
 80075d4:	4b6c      	ldr	r3, [pc, #432]	@ (8007788 <UART_SetConfig+0x27c>)
 80075d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075d8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80075dc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80075e0:	d011      	beq.n	8007606 <UART_SetConfig+0xfa>
 80075e2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80075e6:	d817      	bhi.n	8007618 <UART_SetConfig+0x10c>
 80075e8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80075ec:	d011      	beq.n	8007612 <UART_SetConfig+0x106>
 80075ee:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80075f2:	d811      	bhi.n	8007618 <UART_SetConfig+0x10c>
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d003      	beq.n	8007600 <UART_SetConfig+0xf4>
 80075f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80075fc:	d006      	beq.n	800760c <UART_SetConfig+0x100>
 80075fe:	e00b      	b.n	8007618 <UART_SetConfig+0x10c>
 8007600:	2300      	movs	r3, #0
 8007602:	77fb      	strb	r3, [r7, #31]
 8007604:	e08b      	b.n	800771e <UART_SetConfig+0x212>
 8007606:	2302      	movs	r3, #2
 8007608:	77fb      	strb	r3, [r7, #31]
 800760a:	e088      	b.n	800771e <UART_SetConfig+0x212>
 800760c:	2304      	movs	r3, #4
 800760e:	77fb      	strb	r3, [r7, #31]
 8007610:	e085      	b.n	800771e <UART_SetConfig+0x212>
 8007612:	2308      	movs	r3, #8
 8007614:	77fb      	strb	r3, [r7, #31]
 8007616:	e082      	b.n	800771e <UART_SetConfig+0x212>
 8007618:	2310      	movs	r3, #16
 800761a:	77fb      	strb	r3, [r7, #31]
 800761c:	e07f      	b.n	800771e <UART_SetConfig+0x212>
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	4a5b      	ldr	r2, [pc, #364]	@ (8007790 <UART_SetConfig+0x284>)
 8007624:	4293      	cmp	r3, r2
 8007626:	d124      	bne.n	8007672 <UART_SetConfig+0x166>
 8007628:	4b57      	ldr	r3, [pc, #348]	@ (8007788 <UART_SetConfig+0x27c>)
 800762a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800762c:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8007630:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8007634:	d011      	beq.n	800765a <UART_SetConfig+0x14e>
 8007636:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800763a:	d817      	bhi.n	800766c <UART_SetConfig+0x160>
 800763c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8007640:	d011      	beq.n	8007666 <UART_SetConfig+0x15a>
 8007642:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8007646:	d811      	bhi.n	800766c <UART_SetConfig+0x160>
 8007648:	2b00      	cmp	r3, #0
 800764a:	d003      	beq.n	8007654 <UART_SetConfig+0x148>
 800764c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007650:	d006      	beq.n	8007660 <UART_SetConfig+0x154>
 8007652:	e00b      	b.n	800766c <UART_SetConfig+0x160>
 8007654:	2300      	movs	r3, #0
 8007656:	77fb      	strb	r3, [r7, #31]
 8007658:	e061      	b.n	800771e <UART_SetConfig+0x212>
 800765a:	2302      	movs	r3, #2
 800765c:	77fb      	strb	r3, [r7, #31]
 800765e:	e05e      	b.n	800771e <UART_SetConfig+0x212>
 8007660:	2304      	movs	r3, #4
 8007662:	77fb      	strb	r3, [r7, #31]
 8007664:	e05b      	b.n	800771e <UART_SetConfig+0x212>
 8007666:	2308      	movs	r3, #8
 8007668:	77fb      	strb	r3, [r7, #31]
 800766a:	e058      	b.n	800771e <UART_SetConfig+0x212>
 800766c:	2310      	movs	r3, #16
 800766e:	77fb      	strb	r3, [r7, #31]
 8007670:	e055      	b.n	800771e <UART_SetConfig+0x212>
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	4a47      	ldr	r2, [pc, #284]	@ (8007794 <UART_SetConfig+0x288>)
 8007678:	4293      	cmp	r3, r2
 800767a:	d124      	bne.n	80076c6 <UART_SetConfig+0x1ba>
 800767c:	4b42      	ldr	r3, [pc, #264]	@ (8007788 <UART_SetConfig+0x27c>)
 800767e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007680:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8007684:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007688:	d011      	beq.n	80076ae <UART_SetConfig+0x1a2>
 800768a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800768e:	d817      	bhi.n	80076c0 <UART_SetConfig+0x1b4>
 8007690:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007694:	d011      	beq.n	80076ba <UART_SetConfig+0x1ae>
 8007696:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800769a:	d811      	bhi.n	80076c0 <UART_SetConfig+0x1b4>
 800769c:	2b00      	cmp	r3, #0
 800769e:	d003      	beq.n	80076a8 <UART_SetConfig+0x19c>
 80076a0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80076a4:	d006      	beq.n	80076b4 <UART_SetConfig+0x1a8>
 80076a6:	e00b      	b.n	80076c0 <UART_SetConfig+0x1b4>
 80076a8:	2300      	movs	r3, #0
 80076aa:	77fb      	strb	r3, [r7, #31]
 80076ac:	e037      	b.n	800771e <UART_SetConfig+0x212>
 80076ae:	2302      	movs	r3, #2
 80076b0:	77fb      	strb	r3, [r7, #31]
 80076b2:	e034      	b.n	800771e <UART_SetConfig+0x212>
 80076b4:	2304      	movs	r3, #4
 80076b6:	77fb      	strb	r3, [r7, #31]
 80076b8:	e031      	b.n	800771e <UART_SetConfig+0x212>
 80076ba:	2308      	movs	r3, #8
 80076bc:	77fb      	strb	r3, [r7, #31]
 80076be:	e02e      	b.n	800771e <UART_SetConfig+0x212>
 80076c0:	2310      	movs	r3, #16
 80076c2:	77fb      	strb	r3, [r7, #31]
 80076c4:	e02b      	b.n	800771e <UART_SetConfig+0x212>
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	4a33      	ldr	r2, [pc, #204]	@ (8007798 <UART_SetConfig+0x28c>)
 80076cc:	4293      	cmp	r3, r2
 80076ce:	d124      	bne.n	800771a <UART_SetConfig+0x20e>
 80076d0:	4b2d      	ldr	r3, [pc, #180]	@ (8007788 <UART_SetConfig+0x27c>)
 80076d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076d4:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 80076d8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80076dc:	d011      	beq.n	8007702 <UART_SetConfig+0x1f6>
 80076de:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80076e2:	d817      	bhi.n	8007714 <UART_SetConfig+0x208>
 80076e4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80076e8:	d011      	beq.n	800770e <UART_SetConfig+0x202>
 80076ea:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80076ee:	d811      	bhi.n	8007714 <UART_SetConfig+0x208>
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d003      	beq.n	80076fc <UART_SetConfig+0x1f0>
 80076f4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80076f8:	d006      	beq.n	8007708 <UART_SetConfig+0x1fc>
 80076fa:	e00b      	b.n	8007714 <UART_SetConfig+0x208>
 80076fc:	2300      	movs	r3, #0
 80076fe:	77fb      	strb	r3, [r7, #31]
 8007700:	e00d      	b.n	800771e <UART_SetConfig+0x212>
 8007702:	2302      	movs	r3, #2
 8007704:	77fb      	strb	r3, [r7, #31]
 8007706:	e00a      	b.n	800771e <UART_SetConfig+0x212>
 8007708:	2304      	movs	r3, #4
 800770a:	77fb      	strb	r3, [r7, #31]
 800770c:	e007      	b.n	800771e <UART_SetConfig+0x212>
 800770e:	2308      	movs	r3, #8
 8007710:	77fb      	strb	r3, [r7, #31]
 8007712:	e004      	b.n	800771e <UART_SetConfig+0x212>
 8007714:	2310      	movs	r3, #16
 8007716:	77fb      	strb	r3, [r7, #31]
 8007718:	e001      	b.n	800771e <UART_SetConfig+0x212>
 800771a:	2310      	movs	r3, #16
 800771c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	69db      	ldr	r3, [r3, #28]
 8007722:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007726:	d16b      	bne.n	8007800 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8007728:	7ffb      	ldrb	r3, [r7, #31]
 800772a:	2b08      	cmp	r3, #8
 800772c:	d838      	bhi.n	80077a0 <UART_SetConfig+0x294>
 800772e:	a201      	add	r2, pc, #4	@ (adr r2, 8007734 <UART_SetConfig+0x228>)
 8007730:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007734:	08007759 	.word	0x08007759
 8007738:	08007761 	.word	0x08007761
 800773c:	08007769 	.word	0x08007769
 8007740:	080077a1 	.word	0x080077a1
 8007744:	0800776f 	.word	0x0800776f
 8007748:	080077a1 	.word	0x080077a1
 800774c:	080077a1 	.word	0x080077a1
 8007750:	080077a1 	.word	0x080077a1
 8007754:	08007777 	.word	0x08007777
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007758:	f7fe fa50 	bl	8005bfc <HAL_RCC_GetPCLK1Freq>
 800775c:	61b8      	str	r0, [r7, #24]
        break;
 800775e:	e024      	b.n	80077aa <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007760:	f7fe fa6e 	bl	8005c40 <HAL_RCC_GetPCLK2Freq>
 8007764:	61b8      	str	r0, [r7, #24]
        break;
 8007766:	e020      	b.n	80077aa <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007768:	4b0c      	ldr	r3, [pc, #48]	@ (800779c <UART_SetConfig+0x290>)
 800776a:	61bb      	str	r3, [r7, #24]
        break;
 800776c:	e01d      	b.n	80077aa <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800776e:	f7fe f9e5 	bl	8005b3c <HAL_RCC_GetSysClockFreq>
 8007772:	61b8      	str	r0, [r7, #24]
        break;
 8007774:	e019      	b.n	80077aa <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007776:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800777a:	61bb      	str	r3, [r7, #24]
        break;
 800777c:	e015      	b.n	80077aa <UART_SetConfig+0x29e>
 800777e:	bf00      	nop
 8007780:	efff69f3 	.word	0xefff69f3
 8007784:	40013800 	.word	0x40013800
 8007788:	40021000 	.word	0x40021000
 800778c:	40004400 	.word	0x40004400
 8007790:	40004800 	.word	0x40004800
 8007794:	40004c00 	.word	0x40004c00
 8007798:	40005000 	.word	0x40005000
 800779c:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 80077a0:	2300      	movs	r3, #0
 80077a2:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80077a4:	2301      	movs	r3, #1
 80077a6:	77bb      	strb	r3, [r7, #30]
        break;
 80077a8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80077aa:	69bb      	ldr	r3, [r7, #24]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d073      	beq.n	8007898 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80077b0:	69bb      	ldr	r3, [r7, #24]
 80077b2:	005a      	lsls	r2, r3, #1
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	685b      	ldr	r3, [r3, #4]
 80077b8:	085b      	lsrs	r3, r3, #1
 80077ba:	441a      	add	r2, r3
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	685b      	ldr	r3, [r3, #4]
 80077c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80077c4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80077c6:	693b      	ldr	r3, [r7, #16]
 80077c8:	2b0f      	cmp	r3, #15
 80077ca:	d916      	bls.n	80077fa <UART_SetConfig+0x2ee>
 80077cc:	693b      	ldr	r3, [r7, #16]
 80077ce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80077d2:	d212      	bcs.n	80077fa <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80077d4:	693b      	ldr	r3, [r7, #16]
 80077d6:	b29b      	uxth	r3, r3
 80077d8:	f023 030f 	bic.w	r3, r3, #15
 80077dc:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80077de:	693b      	ldr	r3, [r7, #16]
 80077e0:	085b      	lsrs	r3, r3, #1
 80077e2:	b29b      	uxth	r3, r3
 80077e4:	f003 0307 	and.w	r3, r3, #7
 80077e8:	b29a      	uxth	r2, r3
 80077ea:	89fb      	ldrh	r3, [r7, #14]
 80077ec:	4313      	orrs	r3, r2
 80077ee:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	89fa      	ldrh	r2, [r7, #14]
 80077f6:	60da      	str	r2, [r3, #12]
 80077f8:	e04e      	b.n	8007898 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80077fa:	2301      	movs	r3, #1
 80077fc:	77bb      	strb	r3, [r7, #30]
 80077fe:	e04b      	b.n	8007898 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007800:	7ffb      	ldrb	r3, [r7, #31]
 8007802:	2b08      	cmp	r3, #8
 8007804:	d827      	bhi.n	8007856 <UART_SetConfig+0x34a>
 8007806:	a201      	add	r2, pc, #4	@ (adr r2, 800780c <UART_SetConfig+0x300>)
 8007808:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800780c:	08007831 	.word	0x08007831
 8007810:	08007839 	.word	0x08007839
 8007814:	08007841 	.word	0x08007841
 8007818:	08007857 	.word	0x08007857
 800781c:	08007847 	.word	0x08007847
 8007820:	08007857 	.word	0x08007857
 8007824:	08007857 	.word	0x08007857
 8007828:	08007857 	.word	0x08007857
 800782c:	0800784f 	.word	0x0800784f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007830:	f7fe f9e4 	bl	8005bfc <HAL_RCC_GetPCLK1Freq>
 8007834:	61b8      	str	r0, [r7, #24]
        break;
 8007836:	e013      	b.n	8007860 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007838:	f7fe fa02 	bl	8005c40 <HAL_RCC_GetPCLK2Freq>
 800783c:	61b8      	str	r0, [r7, #24]
        break;
 800783e:	e00f      	b.n	8007860 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007840:	4b1b      	ldr	r3, [pc, #108]	@ (80078b0 <UART_SetConfig+0x3a4>)
 8007842:	61bb      	str	r3, [r7, #24]
        break;
 8007844:	e00c      	b.n	8007860 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007846:	f7fe f979 	bl	8005b3c <HAL_RCC_GetSysClockFreq>
 800784a:	61b8      	str	r0, [r7, #24]
        break;
 800784c:	e008      	b.n	8007860 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800784e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007852:	61bb      	str	r3, [r7, #24]
        break;
 8007854:	e004      	b.n	8007860 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8007856:	2300      	movs	r3, #0
 8007858:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800785a:	2301      	movs	r3, #1
 800785c:	77bb      	strb	r3, [r7, #30]
        break;
 800785e:	bf00      	nop
    }

    if (pclk != 0U)
 8007860:	69bb      	ldr	r3, [r7, #24]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d018      	beq.n	8007898 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	685b      	ldr	r3, [r3, #4]
 800786a:	085a      	lsrs	r2, r3, #1
 800786c:	69bb      	ldr	r3, [r7, #24]
 800786e:	441a      	add	r2, r3
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	685b      	ldr	r3, [r3, #4]
 8007874:	fbb2 f3f3 	udiv	r3, r2, r3
 8007878:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800787a:	693b      	ldr	r3, [r7, #16]
 800787c:	2b0f      	cmp	r3, #15
 800787e:	d909      	bls.n	8007894 <UART_SetConfig+0x388>
 8007880:	693b      	ldr	r3, [r7, #16]
 8007882:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007886:	d205      	bcs.n	8007894 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007888:	693b      	ldr	r3, [r7, #16]
 800788a:	b29a      	uxth	r2, r3
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	60da      	str	r2, [r3, #12]
 8007892:	e001      	b.n	8007898 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8007894:	2301      	movs	r3, #1
 8007896:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	2200      	movs	r2, #0
 800789c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	2200      	movs	r2, #0
 80078a2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80078a4:	7fbb      	ldrb	r3, [r7, #30]
}
 80078a6:	4618      	mov	r0, r3
 80078a8:	3720      	adds	r7, #32
 80078aa:	46bd      	mov	sp, r7
 80078ac:	bd80      	pop	{r7, pc}
 80078ae:	bf00      	nop
 80078b0:	007a1200 	.word	0x007a1200

080078b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80078b4:	b480      	push	{r7}
 80078b6:	b083      	sub	sp, #12
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078c0:	f003 0308 	and.w	r3, r3, #8
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d00a      	beq.n	80078de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	685b      	ldr	r3, [r3, #4]
 80078ce:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	430a      	orrs	r2, r1
 80078dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078e2:	f003 0301 	and.w	r3, r3, #1
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d00a      	beq.n	8007900 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	685b      	ldr	r3, [r3, #4]
 80078f0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	430a      	orrs	r2, r1
 80078fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007904:	f003 0302 	and.w	r3, r3, #2
 8007908:	2b00      	cmp	r3, #0
 800790a:	d00a      	beq.n	8007922 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	685b      	ldr	r3, [r3, #4]
 8007912:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	430a      	orrs	r2, r1
 8007920:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007926:	f003 0304 	and.w	r3, r3, #4
 800792a:	2b00      	cmp	r3, #0
 800792c:	d00a      	beq.n	8007944 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	685b      	ldr	r3, [r3, #4]
 8007934:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	430a      	orrs	r2, r1
 8007942:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007948:	f003 0310 	and.w	r3, r3, #16
 800794c:	2b00      	cmp	r3, #0
 800794e:	d00a      	beq.n	8007966 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	689b      	ldr	r3, [r3, #8]
 8007956:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	430a      	orrs	r2, r1
 8007964:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800796a:	f003 0320 	and.w	r3, r3, #32
 800796e:	2b00      	cmp	r3, #0
 8007970:	d00a      	beq.n	8007988 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	689b      	ldr	r3, [r3, #8]
 8007978:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	430a      	orrs	r2, r1
 8007986:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800798c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007990:	2b00      	cmp	r3, #0
 8007992:	d01a      	beq.n	80079ca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	685b      	ldr	r3, [r3, #4]
 800799a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	430a      	orrs	r2, r1
 80079a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079ae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80079b2:	d10a      	bne.n	80079ca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	685b      	ldr	r3, [r3, #4]
 80079ba:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	430a      	orrs	r2, r1
 80079c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d00a      	beq.n	80079ec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	685b      	ldr	r3, [r3, #4]
 80079dc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	430a      	orrs	r2, r1
 80079ea:	605a      	str	r2, [r3, #4]
  }
}
 80079ec:	bf00      	nop
 80079ee:	370c      	adds	r7, #12
 80079f0:	46bd      	mov	sp, r7
 80079f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f6:	4770      	bx	lr

080079f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b098      	sub	sp, #96	@ 0x60
 80079fc:	af02      	add	r7, sp, #8
 80079fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2200      	movs	r2, #0
 8007a04:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007a08:	f7fa f95c 	bl	8001cc4 <HAL_GetTick>
 8007a0c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	f003 0308 	and.w	r3, r3, #8
 8007a18:	2b08      	cmp	r3, #8
 8007a1a:	d12e      	bne.n	8007a7a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007a1c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007a20:	9300      	str	r3, [sp, #0]
 8007a22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007a24:	2200      	movs	r2, #0
 8007a26:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007a2a:	6878      	ldr	r0, [r7, #4]
 8007a2c:	f000 f88c 	bl	8007b48 <UART_WaitOnFlagUntilTimeout>
 8007a30:	4603      	mov	r3, r0
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d021      	beq.n	8007a7a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a3e:	e853 3f00 	ldrex	r3, [r3]
 8007a42:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007a44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a46:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007a4a:	653b      	str	r3, [r7, #80]	@ 0x50
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	461a      	mov	r2, r3
 8007a52:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007a54:	647b      	str	r3, [r7, #68]	@ 0x44
 8007a56:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a58:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007a5a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007a5c:	e841 2300 	strex	r3, r2, [r1]
 8007a60:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007a62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d1e6      	bne.n	8007a36 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2220      	movs	r2, #32
 8007a6c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	2200      	movs	r2, #0
 8007a72:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007a76:	2303      	movs	r3, #3
 8007a78:	e062      	b.n	8007b40 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	f003 0304 	and.w	r3, r3, #4
 8007a84:	2b04      	cmp	r3, #4
 8007a86:	d149      	bne.n	8007b1c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007a88:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007a8c:	9300      	str	r3, [sp, #0]
 8007a8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007a90:	2200      	movs	r2, #0
 8007a92:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007a96:	6878      	ldr	r0, [r7, #4]
 8007a98:	f000 f856 	bl	8007b48 <UART_WaitOnFlagUntilTimeout>
 8007a9c:	4603      	mov	r3, r0
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d03c      	beq.n	8007b1c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007aa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007aaa:	e853 3f00 	ldrex	r3, [r3]
 8007aae:	623b      	str	r3, [r7, #32]
   return(result);
 8007ab0:	6a3b      	ldr	r3, [r7, #32]
 8007ab2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007ab6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	461a      	mov	r2, r3
 8007abe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007ac0:	633b      	str	r3, [r7, #48]	@ 0x30
 8007ac2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ac4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007ac6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007ac8:	e841 2300 	strex	r3, r2, [r1]
 8007acc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007ace:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d1e6      	bne.n	8007aa2 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	3308      	adds	r3, #8
 8007ada:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007adc:	693b      	ldr	r3, [r7, #16]
 8007ade:	e853 3f00 	ldrex	r3, [r3]
 8007ae2:	60fb      	str	r3, [r7, #12]
   return(result);
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	f023 0301 	bic.w	r3, r3, #1
 8007aea:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	3308      	adds	r3, #8
 8007af2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007af4:	61fa      	str	r2, [r7, #28]
 8007af6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007af8:	69b9      	ldr	r1, [r7, #24]
 8007afa:	69fa      	ldr	r2, [r7, #28]
 8007afc:	e841 2300 	strex	r3, r2, [r1]
 8007b00:	617b      	str	r3, [r7, #20]
   return(result);
 8007b02:	697b      	ldr	r3, [r7, #20]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d1e5      	bne.n	8007ad4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	2220      	movs	r2, #32
 8007b0c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	2200      	movs	r2, #0
 8007b14:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007b18:	2303      	movs	r3, #3
 8007b1a:	e011      	b.n	8007b40 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2220      	movs	r2, #32
 8007b20:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	2220      	movs	r2, #32
 8007b26:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	2200      	movs	r2, #0
 8007b2e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	2200      	movs	r2, #0
 8007b34:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	2200      	movs	r2, #0
 8007b3a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8007b3e:	2300      	movs	r3, #0
}
 8007b40:	4618      	mov	r0, r3
 8007b42:	3758      	adds	r7, #88	@ 0x58
 8007b44:	46bd      	mov	sp, r7
 8007b46:	bd80      	pop	{r7, pc}

08007b48 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	b084      	sub	sp, #16
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	60f8      	str	r0, [r7, #12]
 8007b50:	60b9      	str	r1, [r7, #8]
 8007b52:	603b      	str	r3, [r7, #0]
 8007b54:	4613      	mov	r3, r2
 8007b56:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b58:	e04f      	b.n	8007bfa <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007b5a:	69bb      	ldr	r3, [r7, #24]
 8007b5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b60:	d04b      	beq.n	8007bfa <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007b62:	f7fa f8af 	bl	8001cc4 <HAL_GetTick>
 8007b66:	4602      	mov	r2, r0
 8007b68:	683b      	ldr	r3, [r7, #0]
 8007b6a:	1ad3      	subs	r3, r2, r3
 8007b6c:	69ba      	ldr	r2, [r7, #24]
 8007b6e:	429a      	cmp	r2, r3
 8007b70:	d302      	bcc.n	8007b78 <UART_WaitOnFlagUntilTimeout+0x30>
 8007b72:	69bb      	ldr	r3, [r7, #24]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d101      	bne.n	8007b7c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007b78:	2303      	movs	r3, #3
 8007b7a:	e04e      	b.n	8007c1a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	f003 0304 	and.w	r3, r3, #4
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d037      	beq.n	8007bfa <UART_WaitOnFlagUntilTimeout+0xb2>
 8007b8a:	68bb      	ldr	r3, [r7, #8]
 8007b8c:	2b80      	cmp	r3, #128	@ 0x80
 8007b8e:	d034      	beq.n	8007bfa <UART_WaitOnFlagUntilTimeout+0xb2>
 8007b90:	68bb      	ldr	r3, [r7, #8]
 8007b92:	2b40      	cmp	r3, #64	@ 0x40
 8007b94:	d031      	beq.n	8007bfa <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	69db      	ldr	r3, [r3, #28]
 8007b9c:	f003 0308 	and.w	r3, r3, #8
 8007ba0:	2b08      	cmp	r3, #8
 8007ba2:	d110      	bne.n	8007bc6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	2208      	movs	r2, #8
 8007baa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007bac:	68f8      	ldr	r0, [r7, #12]
 8007bae:	f000 f838 	bl	8007c22 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	2208      	movs	r2, #8
 8007bb6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	2200      	movs	r2, #0
 8007bbe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8007bc2:	2301      	movs	r3, #1
 8007bc4:	e029      	b.n	8007c1a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	69db      	ldr	r3, [r3, #28]
 8007bcc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007bd0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007bd4:	d111      	bne.n	8007bfa <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007bde:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007be0:	68f8      	ldr	r0, [r7, #12]
 8007be2:	f000 f81e 	bl	8007c22 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	2220      	movs	r2, #32
 8007bea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8007bf6:	2303      	movs	r3, #3
 8007bf8:	e00f      	b.n	8007c1a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	69da      	ldr	r2, [r3, #28]
 8007c00:	68bb      	ldr	r3, [r7, #8]
 8007c02:	4013      	ands	r3, r2
 8007c04:	68ba      	ldr	r2, [r7, #8]
 8007c06:	429a      	cmp	r2, r3
 8007c08:	bf0c      	ite	eq
 8007c0a:	2301      	moveq	r3, #1
 8007c0c:	2300      	movne	r3, #0
 8007c0e:	b2db      	uxtb	r3, r3
 8007c10:	461a      	mov	r2, r3
 8007c12:	79fb      	ldrb	r3, [r7, #7]
 8007c14:	429a      	cmp	r2, r3
 8007c16:	d0a0      	beq.n	8007b5a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007c18:	2300      	movs	r3, #0
}
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	3710      	adds	r7, #16
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	bd80      	pop	{r7, pc}

08007c22 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007c22:	b480      	push	{r7}
 8007c24:	b095      	sub	sp, #84	@ 0x54
 8007c26:	af00      	add	r7, sp, #0
 8007c28:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c32:	e853 3f00 	ldrex	r3, [r3]
 8007c36:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007c38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c3a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007c3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	461a      	mov	r2, r3
 8007c46:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007c48:	643b      	str	r3, [r7, #64]	@ 0x40
 8007c4a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c4c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007c4e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007c50:	e841 2300 	strex	r3, r2, [r1]
 8007c54:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007c56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d1e6      	bne.n	8007c2a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	3308      	adds	r3, #8
 8007c62:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c64:	6a3b      	ldr	r3, [r7, #32]
 8007c66:	e853 3f00 	ldrex	r3, [r3]
 8007c6a:	61fb      	str	r3, [r7, #28]
   return(result);
 8007c6c:	69fb      	ldr	r3, [r7, #28]
 8007c6e:	f023 0301 	bic.w	r3, r3, #1
 8007c72:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	3308      	adds	r3, #8
 8007c7a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007c7c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007c7e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c80:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007c82:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007c84:	e841 2300 	strex	r3, r2, [r1]
 8007c88:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007c8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d1e5      	bne.n	8007c5c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007c94:	2b01      	cmp	r3, #1
 8007c96:	d118      	bne.n	8007cca <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	e853 3f00 	ldrex	r3, [r3]
 8007ca4:	60bb      	str	r3, [r7, #8]
   return(result);
 8007ca6:	68bb      	ldr	r3, [r7, #8]
 8007ca8:	f023 0310 	bic.w	r3, r3, #16
 8007cac:	647b      	str	r3, [r7, #68]	@ 0x44
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	461a      	mov	r2, r3
 8007cb4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007cb6:	61bb      	str	r3, [r7, #24]
 8007cb8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cba:	6979      	ldr	r1, [r7, #20]
 8007cbc:	69ba      	ldr	r2, [r7, #24]
 8007cbe:	e841 2300 	strex	r3, r2, [r1]
 8007cc2:	613b      	str	r3, [r7, #16]
   return(result);
 8007cc4:	693b      	ldr	r3, [r7, #16]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d1e6      	bne.n	8007c98 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	2220      	movs	r2, #32
 8007cce:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	2200      	movs	r2, #0
 8007cdc:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8007cde:	bf00      	nop
 8007ce0:	3754      	adds	r7, #84	@ 0x54
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce8:	4770      	bx	lr
	...

08007cec <get_ut>:
	MC  = ((uint16_t)calib_data[18]<<8) | calib_data[19];
	MD  = ((uint16_t)calib_data[20]<<8) | calib_data[21];
}


uint16_t get_ut (void) {
 8007cec:	b580      	push	{r7, lr}
 8007cee:	b086      	sub	sp, #24
 8007cf0:	af04      	add	r7, sp, #16
	uint8_t data = 0x2E;
 8007cf2:	232e      	movs	r3, #46	@ 0x2e
 8007cf4:	717b      	strb	r3, [r7, #5]
	uint8_t ut_data[2] = {0};
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	803b      	strh	r3, [r7, #0]
	uint16_t temp;

	HAL_I2C_Mem_Write(&hi2c1, BMP180_ADDRESS, CTRL_MEAS, 1, &data, 1, HAL_MAX_DELAY);
 8007cfa:	f04f 33ff 	mov.w	r3, #4294967295
 8007cfe:	9302      	str	r3, [sp, #8]
 8007d00:	2301      	movs	r3, #1
 8007d02:	9301      	str	r3, [sp, #4]
 8007d04:	1d7b      	adds	r3, r7, #5
 8007d06:	9300      	str	r3, [sp, #0]
 8007d08:	2301      	movs	r3, #1
 8007d0a:	22f4      	movs	r2, #244	@ 0xf4
 8007d0c:	21ee      	movs	r1, #238	@ 0xee
 8007d0e:	4810      	ldr	r0, [pc, #64]	@ (8007d50 <get_ut+0x64>)
 8007d10:	f7fb ff30 	bl	8003b74 <HAL_I2C_Mem_Write>
	HAL_Delay(5);
 8007d14:	2005      	movs	r0, #5
 8007d16:	f7f9 ffe1 	bl	8001cdc <HAL_Delay>
	HAL_I2C_Mem_Read(&hi2c1, BMP180_ADDRESS, OUT_MSB, 1, ut_data, 2, HAL_MAX_DELAY);
 8007d1a:	f04f 33ff 	mov.w	r3, #4294967295
 8007d1e:	9302      	str	r3, [sp, #8]
 8007d20:	2302      	movs	r3, #2
 8007d22:	9301      	str	r3, [sp, #4]
 8007d24:	463b      	mov	r3, r7
 8007d26:	9300      	str	r3, [sp, #0]
 8007d28:	2301      	movs	r3, #1
 8007d2a:	22f6      	movs	r2, #246	@ 0xf6
 8007d2c:	21ee      	movs	r1, #238	@ 0xee
 8007d2e:	4808      	ldr	r0, [pc, #32]	@ (8007d50 <get_ut+0x64>)
 8007d30:	f7fc f834 	bl	8003d9c <HAL_I2C_Mem_Read>

	temp = ((uint16_t)ut_data[0]<<8) | ut_data[1];
 8007d34:	783b      	ldrb	r3, [r7, #0]
 8007d36:	021b      	lsls	r3, r3, #8
 8007d38:	b21a      	sxth	r2, r3
 8007d3a:	787b      	ldrb	r3, [r7, #1]
 8007d3c:	b21b      	sxth	r3, r3
 8007d3e:	4313      	orrs	r3, r2
 8007d40:	b21b      	sxth	r3, r3
 8007d42:	80fb      	strh	r3, [r7, #6]

	return temp;
 8007d44:	88fb      	ldrh	r3, [r7, #6]
}
 8007d46:	4618      	mov	r0, r3
 8007d48:	3708      	adds	r7, #8
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	bd80      	pop	{r7, pc}
 8007d4e:	bf00      	nop
 8007d50:	200002a4 	.word	0x200002a4

08007d54 <get_temp>:



float get_temp(void) {
 8007d54:	b480      	push	{r7}
 8007d56:	b083      	sub	sp, #12
 8007d58:	af00      	add	r7, sp, #0
    long temp;

//    UT = get_ut();

    X1 = ((UT - (long)AC6) * (long)AC5) >> 15;
 8007d5a:	4b1c      	ldr	r3, [pc, #112]	@ (8007dcc <get_temp+0x78>)
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	4a1c      	ldr	r2, [pc, #112]	@ (8007dd0 <get_temp+0x7c>)
 8007d60:	8812      	ldrh	r2, [r2, #0]
 8007d62:	1a9b      	subs	r3, r3, r2
 8007d64:	4a1b      	ldr	r2, [pc, #108]	@ (8007dd4 <get_temp+0x80>)
 8007d66:	8812      	ldrh	r2, [r2, #0]
 8007d68:	fb02 f303 	mul.w	r3, r2, r3
 8007d6c:	13db      	asrs	r3, r3, #15
 8007d6e:	4a1a      	ldr	r2, [pc, #104]	@ (8007dd8 <get_temp+0x84>)
 8007d70:	6013      	str	r3, [r2, #0]
    X2 = ((long)MC << 11) / (X1 + (long)MD);
 8007d72:	4b1a      	ldr	r3, [pc, #104]	@ (8007ddc <get_temp+0x88>)
 8007d74:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007d78:	02da      	lsls	r2, r3, #11
 8007d7a:	4b19      	ldr	r3, [pc, #100]	@ (8007de0 <get_temp+0x8c>)
 8007d7c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007d80:	4619      	mov	r1, r3
 8007d82:	4b15      	ldr	r3, [pc, #84]	@ (8007dd8 <get_temp+0x84>)
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	440b      	add	r3, r1
 8007d88:	fb92 f3f3 	sdiv	r3, r2, r3
 8007d8c:	4a15      	ldr	r2, [pc, #84]	@ (8007de4 <get_temp+0x90>)
 8007d8e:	6013      	str	r3, [r2, #0]
    B5 = X1 + X2;
 8007d90:	4b11      	ldr	r3, [pc, #68]	@ (8007dd8 <get_temp+0x84>)
 8007d92:	681a      	ldr	r2, [r3, #0]
 8007d94:	4b13      	ldr	r3, [pc, #76]	@ (8007de4 <get_temp+0x90>)
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	4413      	add	r3, r2
 8007d9a:	4a13      	ldr	r2, [pc, #76]	@ (8007de8 <get_temp+0x94>)
 8007d9c:	6013      	str	r3, [r2, #0]
    temp = (B5 + 8) >> 4;
 8007d9e:	4b12      	ldr	r3, [pc, #72]	@ (8007de8 <get_temp+0x94>)
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	3308      	adds	r3, #8
 8007da4:	111b      	asrs	r3, r3, #4
 8007da6:	607b      	str	r3, [r7, #4]

    return temp / 10.0f;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	ee07 3a90 	vmov	s15, r3
 8007dae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007db2:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8007db6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8007dba:	eef0 7a66 	vmov.f32	s15, s13
}
 8007dbe:	eeb0 0a67 	vmov.f32	s0, s15
 8007dc2:	370c      	adds	r7, #12
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dca:	4770      	bx	lr
 8007dcc:	2000056c 	.word	0x2000056c
 8007dd0:	20000562 	.word	0x20000562
 8007dd4:	20000560 	.word	0x20000560
 8007dd8:	20000574 	.word	0x20000574
 8007ddc:	20000568 	.word	0x20000568
 8007de0:	2000056a 	.word	0x2000056a
 8007de4:	20000578 	.word	0x20000578
 8007de8:	20000584 	.word	0x20000584

08007dec <get_up>:



uint32_t get_up(void) {
 8007dec:	b580      	push	{r7, lr}
 8007dee:	b086      	sub	sp, #24
 8007df0:	af04      	add	r7, sp, #16
	uint8_t data = 0x34 + (OSS<<6);
 8007df2:	2374      	movs	r3, #116	@ 0x74
 8007df4:	70fb      	strb	r3, [r7, #3]
	uint8_t up_data[3];
	uint32_t up;

	HAL_I2C_Mem_Write(&hi2c1, BMP180_ADDRESS, CTRL_MEAS, 1, &data, 1, HAL_MAX_DELAY);
 8007df6:	f04f 33ff 	mov.w	r3, #4294967295
 8007dfa:	9302      	str	r3, [sp, #8]
 8007dfc:	2301      	movs	r3, #1
 8007dfe:	9301      	str	r3, [sp, #4]
 8007e00:	1cfb      	adds	r3, r7, #3
 8007e02:	9300      	str	r3, [sp, #0]
 8007e04:	2301      	movs	r3, #1
 8007e06:	22f4      	movs	r2, #244	@ 0xf4
 8007e08:	21ee      	movs	r1, #238	@ 0xee
 8007e0a:	4810      	ldr	r0, [pc, #64]	@ (8007e4c <get_up+0x60>)
 8007e0c:	f7fb feb2 	bl	8003b74 <HAL_I2C_Mem_Write>
	HAL_Delay(5);
 8007e10:	2005      	movs	r0, #5
 8007e12:	f7f9 ff63 	bl	8001cdc <HAL_Delay>

	HAL_I2C_Mem_Read(&hi2c1, BMP180_ADDRESS, OUT_MSB, 1, up_data, 3, HAL_MAX_DELAY);
 8007e16:	f04f 33ff 	mov.w	r3, #4294967295
 8007e1a:	9302      	str	r3, [sp, #8]
 8007e1c:	2303      	movs	r3, #3
 8007e1e:	9301      	str	r3, [sp, #4]
 8007e20:	463b      	mov	r3, r7
 8007e22:	9300      	str	r3, [sp, #0]
 8007e24:	2301      	movs	r3, #1
 8007e26:	22f6      	movs	r2, #246	@ 0xf6
 8007e28:	21ee      	movs	r1, #238	@ 0xee
 8007e2a:	4808      	ldr	r0, [pc, #32]	@ (8007e4c <get_up+0x60>)
 8007e2c:	f7fb ffb6 	bl	8003d9c <HAL_I2C_Mem_Read>

	up = ((uint32_t)(up_data[0]<<16) + (uint32_t)(up_data[1]<<8) + up_data[2]) >> (8-OSS);
 8007e30:	783b      	ldrb	r3, [r7, #0]
 8007e32:	041a      	lsls	r2, r3, #16
 8007e34:	787b      	ldrb	r3, [r7, #1]
 8007e36:	021b      	lsls	r3, r3, #8
 8007e38:	4413      	add	r3, r2
 8007e3a:	78ba      	ldrb	r2, [r7, #2]
 8007e3c:	4413      	add	r3, r2
 8007e3e:	09db      	lsrs	r3, r3, #7
 8007e40:	607b      	str	r3, [r7, #4]
	return up;
 8007e42:	687b      	ldr	r3, [r7, #4]
}
 8007e44:	4618      	mov	r0, r3
 8007e46:	3708      	adds	r7, #8
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	bd80      	pop	{r7, pc}
 8007e4c:	200002a4 	.word	0x200002a4

08007e50 <get_press>:



long get_press(void) {
 8007e50:	b480      	push	{r7}
 8007e52:	b083      	sub	sp, #12
 8007e54:	af00      	add	r7, sp, #0
    long p;
    B6 = B5 - 4000;
 8007e56:	4b57      	ldr	r3, [pc, #348]	@ (8007fb4 <get_press+0x164>)
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	f5a3 637a 	sub.w	r3, r3, #4000	@ 0xfa0
 8007e5e:	4a56      	ldr	r2, [pc, #344]	@ (8007fb8 <get_press+0x168>)
 8007e60:	6013      	str	r3, [r2, #0]

    X1 = (B2 * ((B6 * B6) >> 12)) >> 11;
 8007e62:	4b56      	ldr	r3, [pc, #344]	@ (8007fbc <get_press+0x16c>)
 8007e64:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007e68:	4619      	mov	r1, r3
 8007e6a:	4b53      	ldr	r3, [pc, #332]	@ (8007fb8 <get_press+0x168>)
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	4a52      	ldr	r2, [pc, #328]	@ (8007fb8 <get_press+0x168>)
 8007e70:	6812      	ldr	r2, [r2, #0]
 8007e72:	fb02 f303 	mul.w	r3, r2, r3
 8007e76:	131b      	asrs	r3, r3, #12
 8007e78:	fb01 f303 	mul.w	r3, r1, r3
 8007e7c:	12db      	asrs	r3, r3, #11
 8007e7e:	4a50      	ldr	r2, [pc, #320]	@ (8007fc0 <get_press+0x170>)
 8007e80:	6013      	str	r3, [r2, #0]
    X2 = (AC2 * B6) >> 11;
 8007e82:	4b50      	ldr	r3, [pc, #320]	@ (8007fc4 <get_press+0x174>)
 8007e84:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007e88:	461a      	mov	r2, r3
 8007e8a:	4b4b      	ldr	r3, [pc, #300]	@ (8007fb8 <get_press+0x168>)
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	fb02 f303 	mul.w	r3, r2, r3
 8007e92:	12db      	asrs	r3, r3, #11
 8007e94:	4a4c      	ldr	r2, [pc, #304]	@ (8007fc8 <get_press+0x178>)
 8007e96:	6013      	str	r3, [r2, #0]
    X3 = X1 + X2;
 8007e98:	4b49      	ldr	r3, [pc, #292]	@ (8007fc0 <get_press+0x170>)
 8007e9a:	681a      	ldr	r2, [r3, #0]
 8007e9c:	4b4a      	ldr	r3, [pc, #296]	@ (8007fc8 <get_press+0x178>)
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	4413      	add	r3, r2
 8007ea2:	4a4a      	ldr	r2, [pc, #296]	@ (8007fcc <get_press+0x17c>)
 8007ea4:	6013      	str	r3, [r2, #0]
    B3 = ((((int32_t)AC1 * 4 + X3) << OSS) + 2) >> 2;
 8007ea6:	4b4a      	ldr	r3, [pc, #296]	@ (8007fd0 <get_press+0x180>)
 8007ea8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007eac:	009a      	lsls	r2, r3, #2
 8007eae:	4b47      	ldr	r3, [pc, #284]	@ (8007fcc <get_press+0x17c>)
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	4413      	add	r3, r2
 8007eb4:	005b      	lsls	r3, r3, #1
 8007eb6:	3302      	adds	r3, #2
 8007eb8:	109b      	asrs	r3, r3, #2
 8007eba:	4a46      	ldr	r2, [pc, #280]	@ (8007fd4 <get_press+0x184>)
 8007ebc:	6013      	str	r3, [r2, #0]

    X1 = (AC3 * B6) >> 13;
 8007ebe:	4b46      	ldr	r3, [pc, #280]	@ (8007fd8 <get_press+0x188>)
 8007ec0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007ec4:	461a      	mov	r2, r3
 8007ec6:	4b3c      	ldr	r3, [pc, #240]	@ (8007fb8 <get_press+0x168>)
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	fb02 f303 	mul.w	r3, r2, r3
 8007ece:	135b      	asrs	r3, r3, #13
 8007ed0:	4a3b      	ldr	r2, [pc, #236]	@ (8007fc0 <get_press+0x170>)
 8007ed2:	6013      	str	r3, [r2, #0]
    X2 = (B1 * ((B6 * B6) >> 12)) >> 16;
 8007ed4:	4b41      	ldr	r3, [pc, #260]	@ (8007fdc <get_press+0x18c>)
 8007ed6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007eda:	4619      	mov	r1, r3
 8007edc:	4b36      	ldr	r3, [pc, #216]	@ (8007fb8 <get_press+0x168>)
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	4a35      	ldr	r2, [pc, #212]	@ (8007fb8 <get_press+0x168>)
 8007ee2:	6812      	ldr	r2, [r2, #0]
 8007ee4:	fb02 f303 	mul.w	r3, r2, r3
 8007ee8:	131b      	asrs	r3, r3, #12
 8007eea:	fb01 f303 	mul.w	r3, r1, r3
 8007eee:	141b      	asrs	r3, r3, #16
 8007ef0:	4a35      	ldr	r2, [pc, #212]	@ (8007fc8 <get_press+0x178>)
 8007ef2:	6013      	str	r3, [r2, #0]
    X3 = ((X1 + X2) + 2) >> 2;
 8007ef4:	4b32      	ldr	r3, [pc, #200]	@ (8007fc0 <get_press+0x170>)
 8007ef6:	681a      	ldr	r2, [r3, #0]
 8007ef8:	4b33      	ldr	r3, [pc, #204]	@ (8007fc8 <get_press+0x178>)
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	4413      	add	r3, r2
 8007efe:	3302      	adds	r3, #2
 8007f00:	109b      	asrs	r3, r3, #2
 8007f02:	4a32      	ldr	r2, [pc, #200]	@ (8007fcc <get_press+0x17c>)
 8007f04:	6013      	str	r3, [r2, #0]

    B4 = (AC4 * (uint32_t)(X3 + 32768)) >> 15;
 8007f06:	4b36      	ldr	r3, [pc, #216]	@ (8007fe0 <get_press+0x190>)
 8007f08:	881b      	ldrh	r3, [r3, #0]
 8007f0a:	461a      	mov	r2, r3
 8007f0c:	4b2f      	ldr	r3, [pc, #188]	@ (8007fcc <get_press+0x17c>)
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8007f14:	fb02 f303 	mul.w	r3, r2, r3
 8007f18:	0bdb      	lsrs	r3, r3, #15
 8007f1a:	4a32      	ldr	r2, [pc, #200]	@ (8007fe4 <get_press+0x194>)
 8007f1c:	6013      	str	r3, [r2, #0]
    B7 = ((uint32_t)UP - B3) * (5000 >> OSS);
 8007f1e:	4b32      	ldr	r3, [pc, #200]	@ (8007fe8 <get_press+0x198>)
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	461a      	mov	r2, r3
 8007f24:	4b2b      	ldr	r3, [pc, #172]	@ (8007fd4 <get_press+0x184>)
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	1ad3      	subs	r3, r2, r3
 8007f2a:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 8007f2e:	fb02 f303 	mul.w	r3, r2, r3
 8007f32:	4a2e      	ldr	r2, [pc, #184]	@ (8007fec <get_press+0x19c>)
 8007f34:	6013      	str	r3, [r2, #0]

    if (B7 < 0x80000000)
 8007f36:	4b2d      	ldr	r3, [pc, #180]	@ (8007fec <get_press+0x19c>)
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	db08      	blt.n	8007f50 <get_press+0x100>
        p = (B7 << 1) / B4;
 8007f3e:	4b2b      	ldr	r3, [pc, #172]	@ (8007fec <get_press+0x19c>)
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	005a      	lsls	r2, r3, #1
 8007f44:	4b27      	ldr	r3, [pc, #156]	@ (8007fe4 <get_press+0x194>)
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f4c:	607b      	str	r3, [r7, #4]
 8007f4e:	e007      	b.n	8007f60 <get_press+0x110>
    else
        p = (B7 / B4) << 1;
 8007f50:	4b26      	ldr	r3, [pc, #152]	@ (8007fec <get_press+0x19c>)
 8007f52:	681a      	ldr	r2, [r3, #0]
 8007f54:	4b23      	ldr	r3, [pc, #140]	@ (8007fe4 <get_press+0x194>)
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f5c:	005b      	lsls	r3, r3, #1
 8007f5e:	607b      	str	r3, [r7, #4]

    X1 = (p >> 8) * (p >> 8);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	121b      	asrs	r3, r3, #8
 8007f64:	687a      	ldr	r2, [r7, #4]
 8007f66:	1212      	asrs	r2, r2, #8
 8007f68:	fb02 f303 	mul.w	r3, r2, r3
 8007f6c:	4a14      	ldr	r2, [pc, #80]	@ (8007fc0 <get_press+0x170>)
 8007f6e:	6013      	str	r3, [r2, #0]
    X1 = (X1 * 3038) >> 16;
 8007f70:	4b13      	ldr	r3, [pc, #76]	@ (8007fc0 <get_press+0x170>)
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	f640 32de 	movw	r2, #3038	@ 0xbde
 8007f78:	fb02 f303 	mul.w	r3, r2, r3
 8007f7c:	141b      	asrs	r3, r3, #16
 8007f7e:	4a10      	ldr	r2, [pc, #64]	@ (8007fc0 <get_press+0x170>)
 8007f80:	6013      	str	r3, [r2, #0]
    X2 = (-7357 * p) >> 16;
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	4a1a      	ldr	r2, [pc, #104]	@ (8007ff0 <get_press+0x1a0>)
 8007f86:	fb02 f303 	mul.w	r3, r2, r3
 8007f8a:	141b      	asrs	r3, r3, #16
 8007f8c:	4a0e      	ldr	r2, [pc, #56]	@ (8007fc8 <get_press+0x178>)
 8007f8e:	6013      	str	r3, [r2, #0]
    p = p + ((X1 + X2 + 3791) >> 4);
 8007f90:	4b0b      	ldr	r3, [pc, #44]	@ (8007fc0 <get_press+0x170>)
 8007f92:	681a      	ldr	r2, [r3, #0]
 8007f94:	4b0c      	ldr	r3, [pc, #48]	@ (8007fc8 <get_press+0x178>)
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	4413      	add	r3, r2
 8007f9a:	f603 63cf 	addw	r3, r3, #3791	@ 0xecf
 8007f9e:	111b      	asrs	r3, r3, #4
 8007fa0:	687a      	ldr	r2, [r7, #4]
 8007fa2:	4413      	add	r3, r2
 8007fa4:	607b      	str	r3, [r7, #4]

    return p;  // pascal
 8007fa6:	687b      	ldr	r3, [r7, #4]
}
 8007fa8:	4618      	mov	r0, r3
 8007faa:	370c      	adds	r7, #12
 8007fac:	46bd      	mov	sp, r7
 8007fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb2:	4770      	bx	lr
 8007fb4:	20000584 	.word	0x20000584
 8007fb8:	2000058c 	.word	0x2000058c
 8007fbc:	20000566 	.word	0x20000566
 8007fc0:	20000574 	.word	0x20000574
 8007fc4:	2000055a 	.word	0x2000055a
 8007fc8:	20000578 	.word	0x20000578
 8007fcc:	2000057c 	.word	0x2000057c
 8007fd0:	20000558 	.word	0x20000558
 8007fd4:	20000580 	.word	0x20000580
 8007fd8:	2000055c 	.word	0x2000055c
 8007fdc:	20000564 	.word	0x20000564
 8007fe0:	2000055e 	.word	0x2000055e
 8007fe4:	20000588 	.word	0x20000588
 8007fe8:	20000570 	.word	0x20000570
 8007fec:	20000590 	.word	0x20000590
 8007ff0:	ffffe343 	.word	0xffffe343

08007ff4 <Delay_us>:

#include "DTH11.h"

extern TIM_HandleTypeDef htim2;

void Delay_us(uint32_t us) {
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	b084      	sub	sp, #16
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Start(&htim2);
 8007ffc:	480a      	ldr	r0, [pc, #40]	@ (8008028 <Delay_us+0x34>)
 8007ffe:	f7fe f8b7 	bl	8006170 <HAL_TIM_Base_Start>
    uint32_t start = __HAL_TIM_GET_COUNTER(&htim2);  // Get current counter value
 8008002:	4b09      	ldr	r3, [pc, #36]	@ (8008028 <Delay_us+0x34>)
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008008:	60fb      	str	r3, [r7, #12]

    while ((__HAL_TIM_GET_COUNTER(&htim2) - start) < us);  // Wait for required delay
 800800a:	bf00      	nop
 800800c:	4b06      	ldr	r3, [pc, #24]	@ (8008028 <Delay_us+0x34>)
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	1ad3      	subs	r3, r2, r3
 8008016:	687a      	ldr	r2, [r7, #4]
 8008018:	429a      	cmp	r2, r3
 800801a:	d8f7      	bhi.n	800800c <Delay_us+0x18>
}
 800801c:	bf00      	nop
 800801e:	bf00      	nop
 8008020:	3710      	adds	r7, #16
 8008022:	46bd      	mov	sp, r7
 8008024:	bd80      	pop	{r7, pc}
 8008026:	bf00      	nop
 8008028:	200002f8 	.word	0x200002f8

0800802c <Set_Pin_Output>:



// Function to set pin as output
void Set_Pin_Output(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 800802c:	b580      	push	{r7, lr}
 800802e:	b088      	sub	sp, #32
 8008030:	af00      	add	r7, sp, #0
 8008032:	6078      	str	r0, [r7, #4]
 8008034:	460b      	mov	r3, r1
 8008036:	807b      	strh	r3, [r7, #2]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008038:	f107 030c 	add.w	r3, r7, #12
 800803c:	2200      	movs	r2, #0
 800803e:	601a      	str	r2, [r3, #0]
 8008040:	605a      	str	r2, [r3, #4]
 8008042:	609a      	str	r2, [r3, #8]
 8008044:	60da      	str	r2, [r3, #12]
 8008046:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Pin = GPIO_Pin;
 8008048:	887b      	ldrh	r3, [r7, #2]
 800804a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800804c:	2301      	movs	r3, #1
 800804e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008050:	2300      	movs	r3, #0
 8008052:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008054:	2300      	movs	r3, #0
 8008056:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8008058:	f107 030c 	add.w	r3, r7, #12
 800805c:	4619      	mov	r1, r3
 800805e:	6878      	ldr	r0, [r7, #4]
 8008060:	f7fb f924 	bl	80032ac <HAL_GPIO_Init>
}
 8008064:	bf00      	nop
 8008066:	3720      	adds	r7, #32
 8008068:	46bd      	mov	sp, r7
 800806a:	bd80      	pop	{r7, pc}

0800806c <Set_Pin_Input>:

// Function to set pin as input
void Set_Pin_Input(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 800806c:	b580      	push	{r7, lr}
 800806e:	b088      	sub	sp, #32
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
 8008074:	460b      	mov	r3, r1
 8008076:	807b      	strh	r3, [r7, #2]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008078:	f107 030c 	add.w	r3, r7, #12
 800807c:	2200      	movs	r2, #0
 800807e:	601a      	str	r2, [r3, #0]
 8008080:	605a      	str	r2, [r3, #4]
 8008082:	609a      	str	r2, [r3, #8]
 8008084:	60da      	str	r2, [r3, #12]
 8008086:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Pin = GPIO_Pin;
 8008088:	887b      	ldrh	r3, [r7, #2]
 800808a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800808c:	2300      	movs	r3, #0
 800808e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008090:	2300      	movs	r3, #0
 8008092:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8008094:	f107 030c 	add.w	r3, r7, #12
 8008098:	4619      	mov	r1, r3
 800809a:	6878      	ldr	r0, [r7, #4]
 800809c:	f7fb f906 	bl	80032ac <HAL_GPIO_Init>
}
 80080a0:	bf00      	nop
 80080a2:	3720      	adds	r7, #32
 80080a4:	46bd      	mov	sp, r7
 80080a6:	bd80      	pop	{r7, pc}

080080a8 <DHT11_Start>:

void DHT11_Start() {
 80080a8:	b580      	push	{r7, lr}
 80080aa:	af00      	add	r7, sp, #0
    Set_Pin_Output(DHT11_GPIO_PORT, DHT11_GPIO_PIN);
 80080ac:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80080b0:	480d      	ldr	r0, [pc, #52]	@ (80080e8 <DHT11_Start+0x40>)
 80080b2:	f7ff ffbb 	bl	800802c <Set_Pin_Output>
    HAL_GPIO_WritePin(DHT11_GPIO_PORT, DHT11_GPIO_PIN, GPIO_PIN_RESET);
 80080b6:	2200      	movs	r2, #0
 80080b8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80080bc:	480a      	ldr	r0, [pc, #40]	@ (80080e8 <DHT11_Start+0x40>)
 80080be:	f7fb fa97 	bl	80035f0 <HAL_GPIO_WritePin>
    HAL_Delay(18);
 80080c2:	2012      	movs	r0, #18
 80080c4:	f7f9 fe0a 	bl	8001cdc <HAL_Delay>
    HAL_GPIO_WritePin(DHT11_GPIO_PORT, DHT11_GPIO_PIN, GPIO_PIN_SET);
 80080c8:	2201      	movs	r2, #1
 80080ca:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80080ce:	4806      	ldr	r0, [pc, #24]	@ (80080e8 <DHT11_Start+0x40>)
 80080d0:	f7fb fa8e 	bl	80035f0 <HAL_GPIO_WritePin>
    Delay_us(40);
 80080d4:	2028      	movs	r0, #40	@ 0x28
 80080d6:	f7ff ff8d 	bl	8007ff4 <Delay_us>
    Set_Pin_Input(DHT11_GPIO_PORT, DHT11_GPIO_PIN);
 80080da:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80080de:	4802      	ldr	r0, [pc, #8]	@ (80080e8 <DHT11_Start+0x40>)
 80080e0:	f7ff ffc4 	bl	800806c <Set_Pin_Input>
}
 80080e4:	bf00      	nop
 80080e6:	bd80      	pop	{r7, pc}
 80080e8:	48000800 	.word	0x48000800

080080ec <DHT11_Check_Response>:

// Function to check DHT11 response
uint8_t DHT11_Check_Response() {
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b082      	sub	sp, #8
 80080f0:	af00      	add	r7, sp, #0
    uint8_t Response = 0;
 80080f2:	2300      	movs	r3, #0
 80080f4:	71fb      	strb	r3, [r7, #7]
    Delay_us(40);			//we are in the middle of 80 us low
 80080f6:	2028      	movs	r0, #40	@ 0x28
 80080f8:	f7ff ff7c 	bl	8007ff4 <Delay_us>

    if (HAL_GPIO_ReadPin(DHT11_GPIO_PORT, DHT11_GPIO_PIN) == 0) {
 80080fc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8008100:	4811      	ldr	r0, [pc, #68]	@ (8008148 <DHT11_Check_Response+0x5c>)
 8008102:	f7fb fa5d 	bl	80035c0 <HAL_GPIO_ReadPin>
 8008106:	4603      	mov	r3, r0
 8008108:	2b00      	cmp	r3, #0
 800810a:	d10f      	bne.n	800812c <DHT11_Check_Response+0x40>
        Delay_us(80);       //we are in the middle of 80 us high
 800810c:	2050      	movs	r0, #80	@ 0x50
 800810e:	f7ff ff71 	bl	8007ff4 <Delay_us>
        if (HAL_GPIO_ReadPin(DHT11_GPIO_PORT, DHT11_GPIO_PIN) == 1) Response = 1;
 8008112:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8008116:	480c      	ldr	r0, [pc, #48]	@ (8008148 <DHT11_Check_Response+0x5c>)
 8008118:	f7fb fa52 	bl	80035c0 <HAL_GPIO_ReadPin>
 800811c:	4603      	mov	r3, r0
 800811e:	2b01      	cmp	r3, #1
 8008120:	d102      	bne.n	8008128 <DHT11_Check_Response+0x3c>
 8008122:	2301      	movs	r3, #1
 8008124:	71fb      	strb	r3, [r7, #7]
 8008126:	e001      	b.n	800812c <DHT11_Check_Response+0x40>
        else Response = 0;
 8008128:	2300      	movs	r3, #0
 800812a:	71fb      	strb	r3, [r7, #7]
    }

    while ((HAL_GPIO_ReadPin(DHT11_GPIO_PORT, DHT11_GPIO_PIN)));	//wait for low
 800812c:	bf00      	nop
 800812e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8008132:	4805      	ldr	r0, [pc, #20]	@ (8008148 <DHT11_Check_Response+0x5c>)
 8008134:	f7fb fa44 	bl	80035c0 <HAL_GPIO_ReadPin>
 8008138:	4603      	mov	r3, r0
 800813a:	2b00      	cmp	r3, #0
 800813c:	d1f7      	bne.n	800812e <DHT11_Check_Response+0x42>
    return Response;
 800813e:	79fb      	ldrb	r3, [r7, #7]
}
 8008140:	4618      	mov	r0, r3
 8008142:	3708      	adds	r7, #8
 8008144:	46bd      	mov	sp, r7
 8008146:	bd80      	pop	{r7, pc}
 8008148:	48000800 	.word	0x48000800

0800814c <DHT11_Read_Byte>:

// Function to read a single byte
uint8_t DHT11_Read_Byte() {
 800814c:	b580      	push	{r7, lr}
 800814e:	b082      	sub	sp, #8
 8008150:	af00      	add	r7, sp, #0
    uint8_t data, i;
    for (i = 0; i < 8; i++) {
 8008152:	2300      	movs	r3, #0
 8008154:	71bb      	strb	r3, [r7, #6]
 8008156:	e03a      	b.n	80081ce <DHT11_Read_Byte+0x82>

        while (HAL_GPIO_ReadPin(DHT11_GPIO_PORT, DHT11_GPIO_PIN) == 0);	//wait for high (50 us low at the start of transmisson)
 8008158:	bf00      	nop
 800815a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800815e:	4820      	ldr	r0, [pc, #128]	@ (80081e0 <DHT11_Read_Byte+0x94>)
 8008160:	f7fb fa2e 	bl	80035c0 <HAL_GPIO_ReadPin>
 8008164:	4603      	mov	r3, r0
 8008166:	2b00      	cmp	r3, #0
 8008168:	d0f7      	beq.n	800815a <DHT11_Read_Byte+0xe>
        Delay_us(40);
 800816a:	2028      	movs	r0, #40	@ 0x28
 800816c:	f7ff ff42 	bl	8007ff4 <Delay_us>

        if (HAL_GPIO_ReadPin(DHT11_GPIO_PORT, DHT11_GPIO_PIN) == 0) {
 8008170:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8008174:	481a      	ldr	r0, [pc, #104]	@ (80081e0 <DHT11_Read_Byte+0x94>)
 8008176:	f7fb fa23 	bl	80035c0 <HAL_GPIO_ReadPin>
 800817a:	4603      	mov	r3, r0
 800817c:	2b00      	cmp	r3, #0
 800817e:	d10e      	bne.n	800819e <DHT11_Read_Byte+0x52>
            data &= ~(1 << (7 - i));
 8008180:	79bb      	ldrb	r3, [r7, #6]
 8008182:	f1c3 0307 	rsb	r3, r3, #7
 8008186:	2201      	movs	r2, #1
 8008188:	fa02 f303 	lsl.w	r3, r2, r3
 800818c:	b25b      	sxtb	r3, r3
 800818e:	43db      	mvns	r3, r3
 8008190:	b25a      	sxtb	r2, r3
 8008192:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008196:	4013      	ands	r3, r2
 8008198:	b25b      	sxtb	r3, r3
 800819a:	71fb      	strb	r3, [r7, #7]
 800819c:	e00b      	b.n	80081b6 <DHT11_Read_Byte+0x6a>
        }
        else {
            data |= (1 << (7 - i));
 800819e:	79bb      	ldrb	r3, [r7, #6]
 80081a0:	f1c3 0307 	rsb	r3, r3, #7
 80081a4:	2201      	movs	r2, #1
 80081a6:	fa02 f303 	lsl.w	r3, r2, r3
 80081aa:	b25a      	sxtb	r2, r3
 80081ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80081b0:	4313      	orrs	r3, r2
 80081b2:	b25b      	sxtb	r3, r3
 80081b4:	71fb      	strb	r3, [r7, #7]
        }
        while (HAL_GPIO_ReadPin(DHT11_GPIO_PORT, DHT11_GPIO_PIN) == 1);	//wait for low
 80081b6:	bf00      	nop
 80081b8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80081bc:	4808      	ldr	r0, [pc, #32]	@ (80081e0 <DHT11_Read_Byte+0x94>)
 80081be:	f7fb f9ff 	bl	80035c0 <HAL_GPIO_ReadPin>
 80081c2:	4603      	mov	r3, r0
 80081c4:	2b01      	cmp	r3, #1
 80081c6:	d0f7      	beq.n	80081b8 <DHT11_Read_Byte+0x6c>
    for (i = 0; i < 8; i++) {
 80081c8:	79bb      	ldrb	r3, [r7, #6]
 80081ca:	3301      	adds	r3, #1
 80081cc:	71bb      	strb	r3, [r7, #6]
 80081ce:	79bb      	ldrb	r3, [r7, #6]
 80081d0:	2b07      	cmp	r3, #7
 80081d2:	d9c1      	bls.n	8008158 <DHT11_Read_Byte+0xc>
    }
    return data;
 80081d4:	79fb      	ldrb	r3, [r7, #7]
}
 80081d6:	4618      	mov	r0, r3
 80081d8:	3708      	adds	r7, #8
 80081da:	46bd      	mov	sp, r7
 80081dc:	bd80      	pop	{r7, pc}
 80081de:	bf00      	nop
 80081e0:	48000800 	.word	0x48000800
 80081e4:	00000000 	.word	0x00000000

080081e8 <Read_NO2>:

#include "MICS-4514.h"

extern I2C_HandleTypeDef hi2c1;

float Read_NO2 () {
 80081e8:	b580      	push	{r7, lr}
 80081ea:	b088      	sub	sp, #32
 80081ec:	af02      	add	r7, sp, #8

	uint8_t ox_data[6], reg;
	uint8_t tx_buf[2] = {POWER_MODE_REGISTER, WAKE_UP_MODE};
 80081ee:	f44f 7385 	mov.w	r3, #266	@ 0x10a
 80081f2:	803b      	strh	r3, [r7, #0]
	uint16_t oxADC, powerADC, Rs;
	float ppm;

	reg = OX_REGISTER_HIGH;
 80081f4:	2304      	movs	r3, #4
 80081f6:	70fb      	strb	r3, [r7, #3]
	HAL_I2C_Master_Transmit(&hi2c1, MICS_4514_ADDRESS, tx_buf, 2, HAL_MAX_DELAY);
 80081f8:	463a      	mov	r2, r7
 80081fa:	f04f 33ff 	mov.w	r3, #4294967295
 80081fe:	9300      	str	r3, [sp, #0]
 8008200:	2302      	movs	r3, #2
 8008202:	21ea      	movs	r1, #234	@ 0xea
 8008204:	4830      	ldr	r0, [pc, #192]	@ (80082c8 <Read_NO2+0xe0>)
 8008206:	f7fb faa7 	bl	8003758 <HAL_I2C_Master_Transmit>

    HAL_I2C_Master_Transmit(&hi2c1, MICS_4514_ADDRESS, &reg, 1, HAL_MAX_DELAY);
 800820a:	1cfa      	adds	r2, r7, #3
 800820c:	f04f 33ff 	mov.w	r3, #4294967295
 8008210:	9300      	str	r3, [sp, #0]
 8008212:	2301      	movs	r3, #1
 8008214:	21ea      	movs	r1, #234	@ 0xea
 8008216:	482c      	ldr	r0, [pc, #176]	@ (80082c8 <Read_NO2+0xe0>)
 8008218:	f7fb fa9e 	bl	8003758 <HAL_I2C_Master_Transmit>
    HAL_Delay(200);
 800821c:	20c8      	movs	r0, #200	@ 0xc8
 800821e:	f7f9 fd5d 	bl	8001cdc <HAL_Delay>
	HAL_I2C_Master_Receive(&hi2c1, MICS_4514_ADDRESS, ox_data, 6, HAL_MAX_DELAY);
 8008222:	1d3a      	adds	r2, r7, #4
 8008224:	f04f 33ff 	mov.w	r3, #4294967295
 8008228:	9300      	str	r3, [sp, #0]
 800822a:	2306      	movs	r3, #6
 800822c:	21ea      	movs	r1, #234	@ 0xea
 800822e:	4826      	ldr	r0, [pc, #152]	@ (80082c8 <Read_NO2+0xe0>)
 8008230:	f7fb fbaa 	bl	8003988 <HAL_I2C_Master_Receive>

	oxADC = ((uint16_t)ox_data[0]<<8) | (uint16_t)ox_data[1];
 8008234:	793b      	ldrb	r3, [r7, #4]
 8008236:	021b      	lsls	r3, r3, #8
 8008238:	b21a      	sxth	r2, r3
 800823a:	797b      	ldrb	r3, [r7, #5]
 800823c:	b21b      	sxth	r3, r3
 800823e:	4313      	orrs	r3, r2
 8008240:	b21b      	sxth	r3, r3
 8008242:	82fb      	strh	r3, [r7, #22]
	powerADC = ((uint16_t)ox_data[4]<<8) | (uint16_t)ox_data[5];
 8008244:	7a3b      	ldrb	r3, [r7, #8]
 8008246:	021b      	lsls	r3, r3, #8
 8008248:	b21a      	sxth	r2, r3
 800824a:	7a7b      	ldrb	r3, [r7, #9]
 800824c:	b21b      	sxth	r3, r3
 800824e:	4313      	orrs	r3, r2
 8008250:	b21b      	sxth	r3, r3
 8008252:	82bb      	strh	r3, [r7, #20]

    Rs = powerADC - oxADC;
 8008254:	8aba      	ldrh	r2, [r7, #20]
 8008256:	8afb      	ldrh	r3, [r7, #22]
 8008258:	1ad3      	subs	r3, r2, r3
 800825a:	827b      	strh	r3, [r7, #18]
    ppm = ((float)Rs / (float)NO2_R0 - 0.045) / 6.13;
 800825c:	8a7b      	ldrh	r3, [r7, #18]
 800825e:	ee07 3a90 	vmov	s15, r3
 8008262:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008266:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 80082cc <Read_NO2+0xe4>
 800826a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800826e:	ee16 0a90 	vmov	r0, s13
 8008272:	f7f8 f971 	bl	8000558 <__aeabi_f2d>
 8008276:	a310      	add	r3, pc, #64	@ (adr r3, 80082b8 <Read_NO2+0xd0>)
 8008278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800827c:	f7f8 f80c 	bl	8000298 <__aeabi_dsub>
 8008280:	4602      	mov	r2, r0
 8008282:	460b      	mov	r3, r1
 8008284:	4610      	mov	r0, r2
 8008286:	4619      	mov	r1, r3
 8008288:	a30d      	add	r3, pc, #52	@ (adr r3, 80082c0 <Read_NO2+0xd8>)
 800828a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800828e:	f7f8 fae5 	bl	800085c <__aeabi_ddiv>
 8008292:	4602      	mov	r2, r0
 8008294:	460b      	mov	r3, r1
 8008296:	4610      	mov	r0, r2
 8008298:	4619      	mov	r1, r3
 800829a:	f7f8 fc8d 	bl	8000bb8 <__aeabi_d2f>
 800829e:	4603      	mov	r3, r0
 80082a0:	60fb      	str	r3, [r7, #12]

    return ppm;
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	ee07 3a90 	vmov	s15, r3
}
 80082a8:	eeb0 0a67 	vmov.f32	s0, s15
 80082ac:	3718      	adds	r7, #24
 80082ae:	46bd      	mov	sp, r7
 80082b0:	bd80      	pop	{r7, pc}
 80082b2:	bf00      	nop
 80082b4:	f3af 8000 	nop.w
 80082b8:	70a3d70a 	.word	0x70a3d70a
 80082bc:	3fa70a3d 	.word	0x3fa70a3d
 80082c0:	b851eb85 	.word	0xb851eb85
 80082c4:	4018851e 	.word	0x4018851e
 80082c8:	200002a4 	.word	0x200002a4
 80082cc:	4437c000 	.word	0x4437c000

080082d0 <Read_NH3>:
#include "MQ135.h"
#include <math.h>

extern ADC_HandleTypeDef hadc3;

float Read_NH3 (){
 80082d0:	b580      	push	{r7, lr}
 80082d2:	b086      	sub	sp, #24
 80082d4:	af00      	add	r7, sp, #0

	uint16_t ADC_Val;
	float  p, Vout, ppm, RS;

	HAL_ADC_Start(&hadc3);
 80082d6:	4842      	ldr	r0, [pc, #264]	@ (80083e0 <Read_NH3+0x110>)
 80082d8:	f7f9 ff1e 	bl	8002118 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc3, 200);
 80082dc:	21c8      	movs	r1, #200	@ 0xc8
 80082de:	4840      	ldr	r0, [pc, #256]	@ (80083e0 <Read_NH3+0x110>)
 80082e0:	f7fa f866 	bl	80023b0 <HAL_ADC_PollForConversion>
	ADC_Val = HAL_ADC_GetValue(&hadc3);
 80082e4:	483e      	ldr	r0, [pc, #248]	@ (80083e0 <Read_NH3+0x110>)
 80082e6:	f7fa f965 	bl	80025b4 <HAL_ADC_GetValue>
 80082ea:	4603      	mov	r3, r0
 80082ec:	82fb      	strh	r3, [r7, #22]
	HAL_ADC_Stop(&hadc3);
 80082ee:	483c      	ldr	r0, [pc, #240]	@ (80083e0 <Read_NH3+0x110>)
 80082f0:	f7fa f828 	bl	8002344 <HAL_ADC_Stop>

	Vout = ADC_Val * MQ135_ADC_VREF / MQ135_ADC_MAX_VALUE;
 80082f4:	8afa      	ldrh	r2, [r7, #22]
 80082f6:	4613      	mov	r3, r2
 80082f8:	009b      	lsls	r3, r3, #2
 80082fa:	4413      	add	r3, r2
 80082fc:	4618      	mov	r0, r3
 80082fe:	f7f8 f919 	bl	8000534 <__aeabi_i2d>
 8008302:	a32f      	add	r3, pc, #188	@ (adr r3, 80083c0 <Read_NH3+0xf0>)
 8008304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008308:	f7f8 faa8 	bl	800085c <__aeabi_ddiv>
 800830c:	4602      	mov	r2, r0
 800830e:	460b      	mov	r3, r1
 8008310:	4610      	mov	r0, r2
 8008312:	4619      	mov	r1, r3
 8008314:	f7f8 fc50 	bl	8000bb8 <__aeabi_d2f>
 8008318:	4603      	mov	r3, r0
 800831a:	613b      	str	r3, [r7, #16]
	RS = ((float)MQ135_ADC_VREF / Vout - 1) * MQ135_RL;
 800831c:	eef1 6a04 	vmov.f32	s13, #20	@ 0x40a00000  5.0
 8008320:	ed97 7a04 	vldr	s14, [r7, #16]
 8008324:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008328:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800832c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008330:	edc7 7a03 	vstr	s15, [r7, #12]

	p = ((log10(RS/MQ135_R0) - 0.2) / -0.415);
 8008334:	68f8      	ldr	r0, [r7, #12]
 8008336:	f7f8 f90f 	bl	8000558 <__aeabi_f2d>
 800833a:	f04f 0200 	mov.w	r2, #0
 800833e:	4b29      	ldr	r3, [pc, #164]	@ (80083e4 <Read_NH3+0x114>)
 8008340:	f7f8 fa8c 	bl	800085c <__aeabi_ddiv>
 8008344:	4602      	mov	r2, r0
 8008346:	460b      	mov	r3, r1
 8008348:	ec43 2b17 	vmov	d7, r2, r3
 800834c:	eeb0 0a47 	vmov.f32	s0, s14
 8008350:	eef0 0a67 	vmov.f32	s1, s15
 8008354:	f002 ff70 	bl	800b238 <log10>
 8008358:	ec51 0b10 	vmov	r0, r1, d0
 800835c:	a31a      	add	r3, pc, #104	@ (adr r3, 80083c8 <Read_NH3+0xf8>)
 800835e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008362:	f7f7 ff99 	bl	8000298 <__aeabi_dsub>
 8008366:	4602      	mov	r2, r0
 8008368:	460b      	mov	r3, r1
 800836a:	4610      	mov	r0, r2
 800836c:	4619      	mov	r1, r3
 800836e:	a318      	add	r3, pc, #96	@ (adr r3, 80083d0 <Read_NH3+0x100>)
 8008370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008374:	f7f8 fa72 	bl	800085c <__aeabi_ddiv>
 8008378:	4602      	mov	r2, r0
 800837a:	460b      	mov	r3, r1
 800837c:	4610      	mov	r0, r2
 800837e:	4619      	mov	r1, r3
 8008380:	f7f8 fc1a 	bl	8000bb8 <__aeabi_d2f>
 8008384:	4603      	mov	r3, r0
 8008386:	60bb      	str	r3, [r7, #8]
	ppm = pow(10.0,p);
 8008388:	68b8      	ldr	r0, [r7, #8]
 800838a:	f7f8 f8e5 	bl	8000558 <__aeabi_f2d>
 800838e:	4602      	mov	r2, r0
 8008390:	460b      	mov	r3, r1
 8008392:	ec43 2b11 	vmov	d1, r2, r3
 8008396:	ed9f 0b10 	vldr	d0, [pc, #64]	@ 80083d8 <Read_NH3+0x108>
 800839a:	f002 ff8b 	bl	800b2b4 <pow>
 800839e:	ec53 2b10 	vmov	r2, r3, d0
 80083a2:	4610      	mov	r0, r2
 80083a4:	4619      	mov	r1, r3
 80083a6:	f7f8 fc07 	bl	8000bb8 <__aeabi_d2f>
 80083aa:	4603      	mov	r3, r0
 80083ac:	607b      	str	r3, [r7, #4]

	return ppm;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	ee07 3a90 	vmov	s15, r3
}
 80083b4:	eeb0 0a67 	vmov.f32	s0, s15
 80083b8:	3718      	adds	r7, #24
 80083ba:	46bd      	mov	sp, r7
 80083bc:	bd80      	pop	{r7, pc}
 80083be:	bf00      	nop
 80083c0:	00000000 	.word	0x00000000
 80083c4:	40affe00 	.word	0x40affe00
 80083c8:	9999999a 	.word	0x9999999a
 80083cc:	3fc99999 	.word	0x3fc99999
 80083d0:	28f5c28f 	.word	0x28f5c28f
 80083d4:	bfda8f5c 	.word	0xbfda8f5c
 80083d8:	00000000 	.word	0x00000000
 80083dc:	40240000 	.word	0x40240000
 80083e0:	20000254 	.word	0x20000254
 80083e4:	40120000 	.word	0x40120000

080083e8 <Read_CH4>:
 *  log(ppm) = (log(RS/R0) - 0.8316) / -0.5991 = (0.8316 - log(RS/R0)) / 0.5991
 *  ppm = pow(10,  (0.8316 - log(RS/R0)) / 0.5991)
 *
 */

float Read_CH4() {
 80083e8:	b580      	push	{r7, lr}
 80083ea:	b084      	sub	sp, #16
 80083ec:	af00      	add	r7, sp, #0

	uint16_t ADC_Val;
	float  Vout, ppm, RS;

	HAL_ADC_Start(&hadc1);
 80083ee:	4842      	ldr	r0, [pc, #264]	@ (80084f8 <Read_CH4+0x110>)
 80083f0:	f7f9 fe92 	bl	8002118 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 200);
 80083f4:	21c8      	movs	r1, #200	@ 0xc8
 80083f6:	4840      	ldr	r0, [pc, #256]	@ (80084f8 <Read_CH4+0x110>)
 80083f8:	f7f9 ffda 	bl	80023b0 <HAL_ADC_PollForConversion>
	ADC_Val = HAL_ADC_GetValue(&hadc1);
 80083fc:	483e      	ldr	r0, [pc, #248]	@ (80084f8 <Read_CH4+0x110>)
 80083fe:	f7fa f8d9 	bl	80025b4 <HAL_ADC_GetValue>
 8008402:	4603      	mov	r3, r0
 8008404:	81fb      	strh	r3, [r7, #14]
	HAL_ADC_Stop(&hadc1);
 8008406:	483c      	ldr	r0, [pc, #240]	@ (80084f8 <Read_CH4+0x110>)
 8008408:	f7f9 ff9c 	bl	8002344 <HAL_ADC_Stop>

	Vout = ADC_Val * MQ4_ADC_VREF / (float)MQ4_ADC_MAX_VALUE;
 800840c:	89fa      	ldrh	r2, [r7, #14]
 800840e:	4613      	mov	r3, r2
 8008410:	009b      	lsls	r3, r3, #2
 8008412:	4413      	add	r3, r2
 8008414:	ee07 3a90 	vmov	s15, r3
 8008418:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800841c:	eddf 6a37 	vldr	s13, [pc, #220]	@ 80084fc <Read_CH4+0x114>
 8008420:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008424:	edc7 7a02 	vstr	s15, [r7, #8]
	RS = ((float) MQ4_ADC_VREF / Vout - 1) * MQ4_RL;
 8008428:	eef1 6a04 	vmov.f32	s13, #20	@ 0x40a00000  5.0
 800842c:	ed97 7a02 	vldr	s14, [r7, #8]
 8008430:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008434:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008438:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800843c:	ee17 0a90 	vmov	r0, s15
 8008440:	f7f8 f88a 	bl	8000558 <__aeabi_f2d>
 8008444:	a324      	add	r3, pc, #144	@ (adr r3, 80084d8 <Read_CH4+0xf0>)
 8008446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800844a:	f7f8 f8dd 	bl	8000608 <__aeabi_dmul>
 800844e:	4602      	mov	r2, r0
 8008450:	460b      	mov	r3, r1
 8008452:	4610      	mov	r0, r2
 8008454:	4619      	mov	r1, r3
 8008456:	f7f8 fbaf 	bl	8000bb8 <__aeabi_d2f>
 800845a:	4603      	mov	r3, r0
 800845c:	607b      	str	r3, [r7, #4]

	ppm = pow(10,  (0.8316f - log(RS/(float)MQ4_R0)) / 0.5991f);
 800845e:	edd7 7a01 	vldr	s15, [r7, #4]
 8008462:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 8008500 <Read_CH4+0x118>
 8008466:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800846a:	ee16 0a90 	vmov	r0, s13
 800846e:	f7f8 f873 	bl	8000558 <__aeabi_f2d>
 8008472:	4602      	mov	r2, r0
 8008474:	460b      	mov	r3, r1
 8008476:	ec43 2b10 	vmov	d0, r2, r3
 800847a:	f002 fe9d 	bl	800b1b8 <log>
 800847e:	ec53 2b10 	vmov	r2, r3, d0
 8008482:	a117      	add	r1, pc, #92	@ (adr r1, 80084e0 <Read_CH4+0xf8>)
 8008484:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008488:	f7f7 ff06 	bl	8000298 <__aeabi_dsub>
 800848c:	4602      	mov	r2, r0
 800848e:	460b      	mov	r3, r1
 8008490:	4610      	mov	r0, r2
 8008492:	4619      	mov	r1, r3
 8008494:	a314      	add	r3, pc, #80	@ (adr r3, 80084e8 <Read_CH4+0x100>)
 8008496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800849a:	f7f8 f9df 	bl	800085c <__aeabi_ddiv>
 800849e:	4602      	mov	r2, r0
 80084a0:	460b      	mov	r3, r1
 80084a2:	ec43 2b17 	vmov	d7, r2, r3
 80084a6:	eeb0 1a47 	vmov.f32	s2, s14
 80084aa:	eef0 1a67 	vmov.f32	s3, s15
 80084ae:	ed9f 0b10 	vldr	d0, [pc, #64]	@ 80084f0 <Read_CH4+0x108>
 80084b2:	f002 feff 	bl	800b2b4 <pow>
 80084b6:	ec53 2b10 	vmov	r2, r3, d0
 80084ba:	4610      	mov	r0, r2
 80084bc:	4619      	mov	r1, r3
 80084be:	f7f8 fb7b 	bl	8000bb8 <__aeabi_d2f>
 80084c2:	4603      	mov	r3, r0
 80084c4:	603b      	str	r3, [r7, #0]

	return ppm;
 80084c6:	683b      	ldr	r3, [r7, #0]
 80084c8:	ee07 3a90 	vmov	s15, r3
}
 80084cc:	eeb0 0a67 	vmov.f32	s0, s15
 80084d0:	3710      	adds	r7, #16
 80084d2:	46bd      	mov	sp, r7
 80084d4:	bd80      	pop	{r7, pc}
 80084d6:	bf00      	nop
 80084d8:	cccccccd 	.word	0xcccccccd
 80084dc:	4012cccc 	.word	0x4012cccc
 80084e0:	a0000000 	.word	0xa0000000
 80084e4:	3fea9c77 	.word	0x3fea9c77
 80084e8:	c0000000 	.word	0xc0000000
 80084ec:	3fe32bd3 	.word	0x3fe32bd3
 80084f0:	00000000 	.word	0x00000000
 80084f4:	40240000 	.word	0x40240000
 80084f8:	20000204 	.word	0x20000204
 80084fc:	457ff000 	.word	0x457ff000
 8008500:	42000000 	.word	0x42000000

08008504 <__cvt>:
 8008504:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008508:	ec57 6b10 	vmov	r6, r7, d0
 800850c:	2f00      	cmp	r7, #0
 800850e:	460c      	mov	r4, r1
 8008510:	4619      	mov	r1, r3
 8008512:	463b      	mov	r3, r7
 8008514:	bfbb      	ittet	lt
 8008516:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800851a:	461f      	movlt	r7, r3
 800851c:	2300      	movge	r3, #0
 800851e:	232d      	movlt	r3, #45	@ 0x2d
 8008520:	700b      	strb	r3, [r1, #0]
 8008522:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008524:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8008528:	4691      	mov	r9, r2
 800852a:	f023 0820 	bic.w	r8, r3, #32
 800852e:	bfbc      	itt	lt
 8008530:	4632      	movlt	r2, r6
 8008532:	4616      	movlt	r6, r2
 8008534:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008538:	d005      	beq.n	8008546 <__cvt+0x42>
 800853a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800853e:	d100      	bne.n	8008542 <__cvt+0x3e>
 8008540:	3401      	adds	r4, #1
 8008542:	2102      	movs	r1, #2
 8008544:	e000      	b.n	8008548 <__cvt+0x44>
 8008546:	2103      	movs	r1, #3
 8008548:	ab03      	add	r3, sp, #12
 800854a:	9301      	str	r3, [sp, #4]
 800854c:	ab02      	add	r3, sp, #8
 800854e:	9300      	str	r3, [sp, #0]
 8008550:	ec47 6b10 	vmov	d0, r6, r7
 8008554:	4653      	mov	r3, sl
 8008556:	4622      	mov	r2, r4
 8008558:	f000 fe6e 	bl	8009238 <_dtoa_r>
 800855c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8008560:	4605      	mov	r5, r0
 8008562:	d119      	bne.n	8008598 <__cvt+0x94>
 8008564:	f019 0f01 	tst.w	r9, #1
 8008568:	d00e      	beq.n	8008588 <__cvt+0x84>
 800856a:	eb00 0904 	add.w	r9, r0, r4
 800856e:	2200      	movs	r2, #0
 8008570:	2300      	movs	r3, #0
 8008572:	4630      	mov	r0, r6
 8008574:	4639      	mov	r1, r7
 8008576:	f7f8 faaf 	bl	8000ad8 <__aeabi_dcmpeq>
 800857a:	b108      	cbz	r0, 8008580 <__cvt+0x7c>
 800857c:	f8cd 900c 	str.w	r9, [sp, #12]
 8008580:	2230      	movs	r2, #48	@ 0x30
 8008582:	9b03      	ldr	r3, [sp, #12]
 8008584:	454b      	cmp	r3, r9
 8008586:	d31e      	bcc.n	80085c6 <__cvt+0xc2>
 8008588:	9b03      	ldr	r3, [sp, #12]
 800858a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800858c:	1b5b      	subs	r3, r3, r5
 800858e:	4628      	mov	r0, r5
 8008590:	6013      	str	r3, [r2, #0]
 8008592:	b004      	add	sp, #16
 8008594:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008598:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800859c:	eb00 0904 	add.w	r9, r0, r4
 80085a0:	d1e5      	bne.n	800856e <__cvt+0x6a>
 80085a2:	7803      	ldrb	r3, [r0, #0]
 80085a4:	2b30      	cmp	r3, #48	@ 0x30
 80085a6:	d10a      	bne.n	80085be <__cvt+0xba>
 80085a8:	2200      	movs	r2, #0
 80085aa:	2300      	movs	r3, #0
 80085ac:	4630      	mov	r0, r6
 80085ae:	4639      	mov	r1, r7
 80085b0:	f7f8 fa92 	bl	8000ad8 <__aeabi_dcmpeq>
 80085b4:	b918      	cbnz	r0, 80085be <__cvt+0xba>
 80085b6:	f1c4 0401 	rsb	r4, r4, #1
 80085ba:	f8ca 4000 	str.w	r4, [sl]
 80085be:	f8da 3000 	ldr.w	r3, [sl]
 80085c2:	4499      	add	r9, r3
 80085c4:	e7d3      	b.n	800856e <__cvt+0x6a>
 80085c6:	1c59      	adds	r1, r3, #1
 80085c8:	9103      	str	r1, [sp, #12]
 80085ca:	701a      	strb	r2, [r3, #0]
 80085cc:	e7d9      	b.n	8008582 <__cvt+0x7e>

080085ce <__exponent>:
 80085ce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80085d0:	2900      	cmp	r1, #0
 80085d2:	bfba      	itte	lt
 80085d4:	4249      	neglt	r1, r1
 80085d6:	232d      	movlt	r3, #45	@ 0x2d
 80085d8:	232b      	movge	r3, #43	@ 0x2b
 80085da:	2909      	cmp	r1, #9
 80085dc:	7002      	strb	r2, [r0, #0]
 80085de:	7043      	strb	r3, [r0, #1]
 80085e0:	dd29      	ble.n	8008636 <__exponent+0x68>
 80085e2:	f10d 0307 	add.w	r3, sp, #7
 80085e6:	461d      	mov	r5, r3
 80085e8:	270a      	movs	r7, #10
 80085ea:	461a      	mov	r2, r3
 80085ec:	fbb1 f6f7 	udiv	r6, r1, r7
 80085f0:	fb07 1416 	mls	r4, r7, r6, r1
 80085f4:	3430      	adds	r4, #48	@ 0x30
 80085f6:	f802 4c01 	strb.w	r4, [r2, #-1]
 80085fa:	460c      	mov	r4, r1
 80085fc:	2c63      	cmp	r4, #99	@ 0x63
 80085fe:	f103 33ff 	add.w	r3, r3, #4294967295
 8008602:	4631      	mov	r1, r6
 8008604:	dcf1      	bgt.n	80085ea <__exponent+0x1c>
 8008606:	3130      	adds	r1, #48	@ 0x30
 8008608:	1e94      	subs	r4, r2, #2
 800860a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800860e:	1c41      	adds	r1, r0, #1
 8008610:	4623      	mov	r3, r4
 8008612:	42ab      	cmp	r3, r5
 8008614:	d30a      	bcc.n	800862c <__exponent+0x5e>
 8008616:	f10d 0309 	add.w	r3, sp, #9
 800861a:	1a9b      	subs	r3, r3, r2
 800861c:	42ac      	cmp	r4, r5
 800861e:	bf88      	it	hi
 8008620:	2300      	movhi	r3, #0
 8008622:	3302      	adds	r3, #2
 8008624:	4403      	add	r3, r0
 8008626:	1a18      	subs	r0, r3, r0
 8008628:	b003      	add	sp, #12
 800862a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800862c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008630:	f801 6f01 	strb.w	r6, [r1, #1]!
 8008634:	e7ed      	b.n	8008612 <__exponent+0x44>
 8008636:	2330      	movs	r3, #48	@ 0x30
 8008638:	3130      	adds	r1, #48	@ 0x30
 800863a:	7083      	strb	r3, [r0, #2]
 800863c:	70c1      	strb	r1, [r0, #3]
 800863e:	1d03      	adds	r3, r0, #4
 8008640:	e7f1      	b.n	8008626 <__exponent+0x58>
	...

08008644 <_printf_float>:
 8008644:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008648:	b08d      	sub	sp, #52	@ 0x34
 800864a:	460c      	mov	r4, r1
 800864c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8008650:	4616      	mov	r6, r2
 8008652:	461f      	mov	r7, r3
 8008654:	4605      	mov	r5, r0
 8008656:	f000 fcef 	bl	8009038 <_localeconv_r>
 800865a:	6803      	ldr	r3, [r0, #0]
 800865c:	9304      	str	r3, [sp, #16]
 800865e:	4618      	mov	r0, r3
 8008660:	f7f7 fe0e 	bl	8000280 <strlen>
 8008664:	2300      	movs	r3, #0
 8008666:	930a      	str	r3, [sp, #40]	@ 0x28
 8008668:	f8d8 3000 	ldr.w	r3, [r8]
 800866c:	9005      	str	r0, [sp, #20]
 800866e:	3307      	adds	r3, #7
 8008670:	f023 0307 	bic.w	r3, r3, #7
 8008674:	f103 0208 	add.w	r2, r3, #8
 8008678:	f894 a018 	ldrb.w	sl, [r4, #24]
 800867c:	f8d4 b000 	ldr.w	fp, [r4]
 8008680:	f8c8 2000 	str.w	r2, [r8]
 8008684:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008688:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800868c:	9307      	str	r3, [sp, #28]
 800868e:	f8cd 8018 	str.w	r8, [sp, #24]
 8008692:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8008696:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800869a:	4b9c      	ldr	r3, [pc, #624]	@ (800890c <_printf_float+0x2c8>)
 800869c:	f04f 32ff 	mov.w	r2, #4294967295
 80086a0:	f7f8 fa4c 	bl	8000b3c <__aeabi_dcmpun>
 80086a4:	bb70      	cbnz	r0, 8008704 <_printf_float+0xc0>
 80086a6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80086aa:	4b98      	ldr	r3, [pc, #608]	@ (800890c <_printf_float+0x2c8>)
 80086ac:	f04f 32ff 	mov.w	r2, #4294967295
 80086b0:	f7f8 fa26 	bl	8000b00 <__aeabi_dcmple>
 80086b4:	bb30      	cbnz	r0, 8008704 <_printf_float+0xc0>
 80086b6:	2200      	movs	r2, #0
 80086b8:	2300      	movs	r3, #0
 80086ba:	4640      	mov	r0, r8
 80086bc:	4649      	mov	r1, r9
 80086be:	f7f8 fa15 	bl	8000aec <__aeabi_dcmplt>
 80086c2:	b110      	cbz	r0, 80086ca <_printf_float+0x86>
 80086c4:	232d      	movs	r3, #45	@ 0x2d
 80086c6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80086ca:	4a91      	ldr	r2, [pc, #580]	@ (8008910 <_printf_float+0x2cc>)
 80086cc:	4b91      	ldr	r3, [pc, #580]	@ (8008914 <_printf_float+0x2d0>)
 80086ce:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80086d2:	bf94      	ite	ls
 80086d4:	4690      	movls	r8, r2
 80086d6:	4698      	movhi	r8, r3
 80086d8:	2303      	movs	r3, #3
 80086da:	6123      	str	r3, [r4, #16]
 80086dc:	f02b 0304 	bic.w	r3, fp, #4
 80086e0:	6023      	str	r3, [r4, #0]
 80086e2:	f04f 0900 	mov.w	r9, #0
 80086e6:	9700      	str	r7, [sp, #0]
 80086e8:	4633      	mov	r3, r6
 80086ea:	aa0b      	add	r2, sp, #44	@ 0x2c
 80086ec:	4621      	mov	r1, r4
 80086ee:	4628      	mov	r0, r5
 80086f0:	f000 f9d2 	bl	8008a98 <_printf_common>
 80086f4:	3001      	adds	r0, #1
 80086f6:	f040 808d 	bne.w	8008814 <_printf_float+0x1d0>
 80086fa:	f04f 30ff 	mov.w	r0, #4294967295
 80086fe:	b00d      	add	sp, #52	@ 0x34
 8008700:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008704:	4642      	mov	r2, r8
 8008706:	464b      	mov	r3, r9
 8008708:	4640      	mov	r0, r8
 800870a:	4649      	mov	r1, r9
 800870c:	f7f8 fa16 	bl	8000b3c <__aeabi_dcmpun>
 8008710:	b140      	cbz	r0, 8008724 <_printf_float+0xe0>
 8008712:	464b      	mov	r3, r9
 8008714:	2b00      	cmp	r3, #0
 8008716:	bfbc      	itt	lt
 8008718:	232d      	movlt	r3, #45	@ 0x2d
 800871a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800871e:	4a7e      	ldr	r2, [pc, #504]	@ (8008918 <_printf_float+0x2d4>)
 8008720:	4b7e      	ldr	r3, [pc, #504]	@ (800891c <_printf_float+0x2d8>)
 8008722:	e7d4      	b.n	80086ce <_printf_float+0x8a>
 8008724:	6863      	ldr	r3, [r4, #4]
 8008726:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800872a:	9206      	str	r2, [sp, #24]
 800872c:	1c5a      	adds	r2, r3, #1
 800872e:	d13b      	bne.n	80087a8 <_printf_float+0x164>
 8008730:	2306      	movs	r3, #6
 8008732:	6063      	str	r3, [r4, #4]
 8008734:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8008738:	2300      	movs	r3, #0
 800873a:	6022      	str	r2, [r4, #0]
 800873c:	9303      	str	r3, [sp, #12]
 800873e:	ab0a      	add	r3, sp, #40	@ 0x28
 8008740:	e9cd a301 	strd	sl, r3, [sp, #4]
 8008744:	ab09      	add	r3, sp, #36	@ 0x24
 8008746:	9300      	str	r3, [sp, #0]
 8008748:	6861      	ldr	r1, [r4, #4]
 800874a:	ec49 8b10 	vmov	d0, r8, r9
 800874e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8008752:	4628      	mov	r0, r5
 8008754:	f7ff fed6 	bl	8008504 <__cvt>
 8008758:	9b06      	ldr	r3, [sp, #24]
 800875a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800875c:	2b47      	cmp	r3, #71	@ 0x47
 800875e:	4680      	mov	r8, r0
 8008760:	d129      	bne.n	80087b6 <_printf_float+0x172>
 8008762:	1cc8      	adds	r0, r1, #3
 8008764:	db02      	blt.n	800876c <_printf_float+0x128>
 8008766:	6863      	ldr	r3, [r4, #4]
 8008768:	4299      	cmp	r1, r3
 800876a:	dd41      	ble.n	80087f0 <_printf_float+0x1ac>
 800876c:	f1aa 0a02 	sub.w	sl, sl, #2
 8008770:	fa5f fa8a 	uxtb.w	sl, sl
 8008774:	3901      	subs	r1, #1
 8008776:	4652      	mov	r2, sl
 8008778:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800877c:	9109      	str	r1, [sp, #36]	@ 0x24
 800877e:	f7ff ff26 	bl	80085ce <__exponent>
 8008782:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008784:	1813      	adds	r3, r2, r0
 8008786:	2a01      	cmp	r2, #1
 8008788:	4681      	mov	r9, r0
 800878a:	6123      	str	r3, [r4, #16]
 800878c:	dc02      	bgt.n	8008794 <_printf_float+0x150>
 800878e:	6822      	ldr	r2, [r4, #0]
 8008790:	07d2      	lsls	r2, r2, #31
 8008792:	d501      	bpl.n	8008798 <_printf_float+0x154>
 8008794:	3301      	adds	r3, #1
 8008796:	6123      	str	r3, [r4, #16]
 8008798:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800879c:	2b00      	cmp	r3, #0
 800879e:	d0a2      	beq.n	80086e6 <_printf_float+0xa2>
 80087a0:	232d      	movs	r3, #45	@ 0x2d
 80087a2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80087a6:	e79e      	b.n	80086e6 <_printf_float+0xa2>
 80087a8:	9a06      	ldr	r2, [sp, #24]
 80087aa:	2a47      	cmp	r2, #71	@ 0x47
 80087ac:	d1c2      	bne.n	8008734 <_printf_float+0xf0>
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d1c0      	bne.n	8008734 <_printf_float+0xf0>
 80087b2:	2301      	movs	r3, #1
 80087b4:	e7bd      	b.n	8008732 <_printf_float+0xee>
 80087b6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80087ba:	d9db      	bls.n	8008774 <_printf_float+0x130>
 80087bc:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80087c0:	d118      	bne.n	80087f4 <_printf_float+0x1b0>
 80087c2:	2900      	cmp	r1, #0
 80087c4:	6863      	ldr	r3, [r4, #4]
 80087c6:	dd0b      	ble.n	80087e0 <_printf_float+0x19c>
 80087c8:	6121      	str	r1, [r4, #16]
 80087ca:	b913      	cbnz	r3, 80087d2 <_printf_float+0x18e>
 80087cc:	6822      	ldr	r2, [r4, #0]
 80087ce:	07d0      	lsls	r0, r2, #31
 80087d0:	d502      	bpl.n	80087d8 <_printf_float+0x194>
 80087d2:	3301      	adds	r3, #1
 80087d4:	440b      	add	r3, r1
 80087d6:	6123      	str	r3, [r4, #16]
 80087d8:	65a1      	str	r1, [r4, #88]	@ 0x58
 80087da:	f04f 0900 	mov.w	r9, #0
 80087de:	e7db      	b.n	8008798 <_printf_float+0x154>
 80087e0:	b913      	cbnz	r3, 80087e8 <_printf_float+0x1a4>
 80087e2:	6822      	ldr	r2, [r4, #0]
 80087e4:	07d2      	lsls	r2, r2, #31
 80087e6:	d501      	bpl.n	80087ec <_printf_float+0x1a8>
 80087e8:	3302      	adds	r3, #2
 80087ea:	e7f4      	b.n	80087d6 <_printf_float+0x192>
 80087ec:	2301      	movs	r3, #1
 80087ee:	e7f2      	b.n	80087d6 <_printf_float+0x192>
 80087f0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80087f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80087f6:	4299      	cmp	r1, r3
 80087f8:	db05      	blt.n	8008806 <_printf_float+0x1c2>
 80087fa:	6823      	ldr	r3, [r4, #0]
 80087fc:	6121      	str	r1, [r4, #16]
 80087fe:	07d8      	lsls	r0, r3, #31
 8008800:	d5ea      	bpl.n	80087d8 <_printf_float+0x194>
 8008802:	1c4b      	adds	r3, r1, #1
 8008804:	e7e7      	b.n	80087d6 <_printf_float+0x192>
 8008806:	2900      	cmp	r1, #0
 8008808:	bfd4      	ite	le
 800880a:	f1c1 0202 	rsble	r2, r1, #2
 800880e:	2201      	movgt	r2, #1
 8008810:	4413      	add	r3, r2
 8008812:	e7e0      	b.n	80087d6 <_printf_float+0x192>
 8008814:	6823      	ldr	r3, [r4, #0]
 8008816:	055a      	lsls	r2, r3, #21
 8008818:	d407      	bmi.n	800882a <_printf_float+0x1e6>
 800881a:	6923      	ldr	r3, [r4, #16]
 800881c:	4642      	mov	r2, r8
 800881e:	4631      	mov	r1, r6
 8008820:	4628      	mov	r0, r5
 8008822:	47b8      	blx	r7
 8008824:	3001      	adds	r0, #1
 8008826:	d12b      	bne.n	8008880 <_printf_float+0x23c>
 8008828:	e767      	b.n	80086fa <_printf_float+0xb6>
 800882a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800882e:	f240 80dd 	bls.w	80089ec <_printf_float+0x3a8>
 8008832:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008836:	2200      	movs	r2, #0
 8008838:	2300      	movs	r3, #0
 800883a:	f7f8 f94d 	bl	8000ad8 <__aeabi_dcmpeq>
 800883e:	2800      	cmp	r0, #0
 8008840:	d033      	beq.n	80088aa <_printf_float+0x266>
 8008842:	4a37      	ldr	r2, [pc, #220]	@ (8008920 <_printf_float+0x2dc>)
 8008844:	2301      	movs	r3, #1
 8008846:	4631      	mov	r1, r6
 8008848:	4628      	mov	r0, r5
 800884a:	47b8      	blx	r7
 800884c:	3001      	adds	r0, #1
 800884e:	f43f af54 	beq.w	80086fa <_printf_float+0xb6>
 8008852:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8008856:	4543      	cmp	r3, r8
 8008858:	db02      	blt.n	8008860 <_printf_float+0x21c>
 800885a:	6823      	ldr	r3, [r4, #0]
 800885c:	07d8      	lsls	r0, r3, #31
 800885e:	d50f      	bpl.n	8008880 <_printf_float+0x23c>
 8008860:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008864:	4631      	mov	r1, r6
 8008866:	4628      	mov	r0, r5
 8008868:	47b8      	blx	r7
 800886a:	3001      	adds	r0, #1
 800886c:	f43f af45 	beq.w	80086fa <_printf_float+0xb6>
 8008870:	f04f 0900 	mov.w	r9, #0
 8008874:	f108 38ff 	add.w	r8, r8, #4294967295
 8008878:	f104 0a1a 	add.w	sl, r4, #26
 800887c:	45c8      	cmp	r8, r9
 800887e:	dc09      	bgt.n	8008894 <_printf_float+0x250>
 8008880:	6823      	ldr	r3, [r4, #0]
 8008882:	079b      	lsls	r3, r3, #30
 8008884:	f100 8103 	bmi.w	8008a8e <_printf_float+0x44a>
 8008888:	68e0      	ldr	r0, [r4, #12]
 800888a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800888c:	4298      	cmp	r0, r3
 800888e:	bfb8      	it	lt
 8008890:	4618      	movlt	r0, r3
 8008892:	e734      	b.n	80086fe <_printf_float+0xba>
 8008894:	2301      	movs	r3, #1
 8008896:	4652      	mov	r2, sl
 8008898:	4631      	mov	r1, r6
 800889a:	4628      	mov	r0, r5
 800889c:	47b8      	blx	r7
 800889e:	3001      	adds	r0, #1
 80088a0:	f43f af2b 	beq.w	80086fa <_printf_float+0xb6>
 80088a4:	f109 0901 	add.w	r9, r9, #1
 80088a8:	e7e8      	b.n	800887c <_printf_float+0x238>
 80088aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	dc39      	bgt.n	8008924 <_printf_float+0x2e0>
 80088b0:	4a1b      	ldr	r2, [pc, #108]	@ (8008920 <_printf_float+0x2dc>)
 80088b2:	2301      	movs	r3, #1
 80088b4:	4631      	mov	r1, r6
 80088b6:	4628      	mov	r0, r5
 80088b8:	47b8      	blx	r7
 80088ba:	3001      	adds	r0, #1
 80088bc:	f43f af1d 	beq.w	80086fa <_printf_float+0xb6>
 80088c0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80088c4:	ea59 0303 	orrs.w	r3, r9, r3
 80088c8:	d102      	bne.n	80088d0 <_printf_float+0x28c>
 80088ca:	6823      	ldr	r3, [r4, #0]
 80088cc:	07d9      	lsls	r1, r3, #31
 80088ce:	d5d7      	bpl.n	8008880 <_printf_float+0x23c>
 80088d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80088d4:	4631      	mov	r1, r6
 80088d6:	4628      	mov	r0, r5
 80088d8:	47b8      	blx	r7
 80088da:	3001      	adds	r0, #1
 80088dc:	f43f af0d 	beq.w	80086fa <_printf_float+0xb6>
 80088e0:	f04f 0a00 	mov.w	sl, #0
 80088e4:	f104 0b1a 	add.w	fp, r4, #26
 80088e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80088ea:	425b      	negs	r3, r3
 80088ec:	4553      	cmp	r3, sl
 80088ee:	dc01      	bgt.n	80088f4 <_printf_float+0x2b0>
 80088f0:	464b      	mov	r3, r9
 80088f2:	e793      	b.n	800881c <_printf_float+0x1d8>
 80088f4:	2301      	movs	r3, #1
 80088f6:	465a      	mov	r2, fp
 80088f8:	4631      	mov	r1, r6
 80088fa:	4628      	mov	r0, r5
 80088fc:	47b8      	blx	r7
 80088fe:	3001      	adds	r0, #1
 8008900:	f43f aefb 	beq.w	80086fa <_printf_float+0xb6>
 8008904:	f10a 0a01 	add.w	sl, sl, #1
 8008908:	e7ee      	b.n	80088e8 <_printf_float+0x2a4>
 800890a:	bf00      	nop
 800890c:	7fefffff 	.word	0x7fefffff
 8008910:	0800c678 	.word	0x0800c678
 8008914:	0800c67c 	.word	0x0800c67c
 8008918:	0800c680 	.word	0x0800c680
 800891c:	0800c684 	.word	0x0800c684
 8008920:	0800c688 	.word	0x0800c688
 8008924:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008926:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800892a:	4553      	cmp	r3, sl
 800892c:	bfa8      	it	ge
 800892e:	4653      	movge	r3, sl
 8008930:	2b00      	cmp	r3, #0
 8008932:	4699      	mov	r9, r3
 8008934:	dc36      	bgt.n	80089a4 <_printf_float+0x360>
 8008936:	f04f 0b00 	mov.w	fp, #0
 800893a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800893e:	f104 021a 	add.w	r2, r4, #26
 8008942:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008944:	9306      	str	r3, [sp, #24]
 8008946:	eba3 0309 	sub.w	r3, r3, r9
 800894a:	455b      	cmp	r3, fp
 800894c:	dc31      	bgt.n	80089b2 <_printf_float+0x36e>
 800894e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008950:	459a      	cmp	sl, r3
 8008952:	dc3a      	bgt.n	80089ca <_printf_float+0x386>
 8008954:	6823      	ldr	r3, [r4, #0]
 8008956:	07da      	lsls	r2, r3, #31
 8008958:	d437      	bmi.n	80089ca <_printf_float+0x386>
 800895a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800895c:	ebaa 0903 	sub.w	r9, sl, r3
 8008960:	9b06      	ldr	r3, [sp, #24]
 8008962:	ebaa 0303 	sub.w	r3, sl, r3
 8008966:	4599      	cmp	r9, r3
 8008968:	bfa8      	it	ge
 800896a:	4699      	movge	r9, r3
 800896c:	f1b9 0f00 	cmp.w	r9, #0
 8008970:	dc33      	bgt.n	80089da <_printf_float+0x396>
 8008972:	f04f 0800 	mov.w	r8, #0
 8008976:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800897a:	f104 0b1a 	add.w	fp, r4, #26
 800897e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008980:	ebaa 0303 	sub.w	r3, sl, r3
 8008984:	eba3 0309 	sub.w	r3, r3, r9
 8008988:	4543      	cmp	r3, r8
 800898a:	f77f af79 	ble.w	8008880 <_printf_float+0x23c>
 800898e:	2301      	movs	r3, #1
 8008990:	465a      	mov	r2, fp
 8008992:	4631      	mov	r1, r6
 8008994:	4628      	mov	r0, r5
 8008996:	47b8      	blx	r7
 8008998:	3001      	adds	r0, #1
 800899a:	f43f aeae 	beq.w	80086fa <_printf_float+0xb6>
 800899e:	f108 0801 	add.w	r8, r8, #1
 80089a2:	e7ec      	b.n	800897e <_printf_float+0x33a>
 80089a4:	4642      	mov	r2, r8
 80089a6:	4631      	mov	r1, r6
 80089a8:	4628      	mov	r0, r5
 80089aa:	47b8      	blx	r7
 80089ac:	3001      	adds	r0, #1
 80089ae:	d1c2      	bne.n	8008936 <_printf_float+0x2f2>
 80089b0:	e6a3      	b.n	80086fa <_printf_float+0xb6>
 80089b2:	2301      	movs	r3, #1
 80089b4:	4631      	mov	r1, r6
 80089b6:	4628      	mov	r0, r5
 80089b8:	9206      	str	r2, [sp, #24]
 80089ba:	47b8      	blx	r7
 80089bc:	3001      	adds	r0, #1
 80089be:	f43f ae9c 	beq.w	80086fa <_printf_float+0xb6>
 80089c2:	9a06      	ldr	r2, [sp, #24]
 80089c4:	f10b 0b01 	add.w	fp, fp, #1
 80089c8:	e7bb      	b.n	8008942 <_printf_float+0x2fe>
 80089ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80089ce:	4631      	mov	r1, r6
 80089d0:	4628      	mov	r0, r5
 80089d2:	47b8      	blx	r7
 80089d4:	3001      	adds	r0, #1
 80089d6:	d1c0      	bne.n	800895a <_printf_float+0x316>
 80089d8:	e68f      	b.n	80086fa <_printf_float+0xb6>
 80089da:	9a06      	ldr	r2, [sp, #24]
 80089dc:	464b      	mov	r3, r9
 80089de:	4442      	add	r2, r8
 80089e0:	4631      	mov	r1, r6
 80089e2:	4628      	mov	r0, r5
 80089e4:	47b8      	blx	r7
 80089e6:	3001      	adds	r0, #1
 80089e8:	d1c3      	bne.n	8008972 <_printf_float+0x32e>
 80089ea:	e686      	b.n	80086fa <_printf_float+0xb6>
 80089ec:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80089f0:	f1ba 0f01 	cmp.w	sl, #1
 80089f4:	dc01      	bgt.n	80089fa <_printf_float+0x3b6>
 80089f6:	07db      	lsls	r3, r3, #31
 80089f8:	d536      	bpl.n	8008a68 <_printf_float+0x424>
 80089fa:	2301      	movs	r3, #1
 80089fc:	4642      	mov	r2, r8
 80089fe:	4631      	mov	r1, r6
 8008a00:	4628      	mov	r0, r5
 8008a02:	47b8      	blx	r7
 8008a04:	3001      	adds	r0, #1
 8008a06:	f43f ae78 	beq.w	80086fa <_printf_float+0xb6>
 8008a0a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008a0e:	4631      	mov	r1, r6
 8008a10:	4628      	mov	r0, r5
 8008a12:	47b8      	blx	r7
 8008a14:	3001      	adds	r0, #1
 8008a16:	f43f ae70 	beq.w	80086fa <_printf_float+0xb6>
 8008a1a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008a1e:	2200      	movs	r2, #0
 8008a20:	2300      	movs	r3, #0
 8008a22:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008a26:	f7f8 f857 	bl	8000ad8 <__aeabi_dcmpeq>
 8008a2a:	b9c0      	cbnz	r0, 8008a5e <_printf_float+0x41a>
 8008a2c:	4653      	mov	r3, sl
 8008a2e:	f108 0201 	add.w	r2, r8, #1
 8008a32:	4631      	mov	r1, r6
 8008a34:	4628      	mov	r0, r5
 8008a36:	47b8      	blx	r7
 8008a38:	3001      	adds	r0, #1
 8008a3a:	d10c      	bne.n	8008a56 <_printf_float+0x412>
 8008a3c:	e65d      	b.n	80086fa <_printf_float+0xb6>
 8008a3e:	2301      	movs	r3, #1
 8008a40:	465a      	mov	r2, fp
 8008a42:	4631      	mov	r1, r6
 8008a44:	4628      	mov	r0, r5
 8008a46:	47b8      	blx	r7
 8008a48:	3001      	adds	r0, #1
 8008a4a:	f43f ae56 	beq.w	80086fa <_printf_float+0xb6>
 8008a4e:	f108 0801 	add.w	r8, r8, #1
 8008a52:	45d0      	cmp	r8, sl
 8008a54:	dbf3      	blt.n	8008a3e <_printf_float+0x3fa>
 8008a56:	464b      	mov	r3, r9
 8008a58:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008a5c:	e6df      	b.n	800881e <_printf_float+0x1da>
 8008a5e:	f04f 0800 	mov.w	r8, #0
 8008a62:	f104 0b1a 	add.w	fp, r4, #26
 8008a66:	e7f4      	b.n	8008a52 <_printf_float+0x40e>
 8008a68:	2301      	movs	r3, #1
 8008a6a:	4642      	mov	r2, r8
 8008a6c:	e7e1      	b.n	8008a32 <_printf_float+0x3ee>
 8008a6e:	2301      	movs	r3, #1
 8008a70:	464a      	mov	r2, r9
 8008a72:	4631      	mov	r1, r6
 8008a74:	4628      	mov	r0, r5
 8008a76:	47b8      	blx	r7
 8008a78:	3001      	adds	r0, #1
 8008a7a:	f43f ae3e 	beq.w	80086fa <_printf_float+0xb6>
 8008a7e:	f108 0801 	add.w	r8, r8, #1
 8008a82:	68e3      	ldr	r3, [r4, #12]
 8008a84:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008a86:	1a5b      	subs	r3, r3, r1
 8008a88:	4543      	cmp	r3, r8
 8008a8a:	dcf0      	bgt.n	8008a6e <_printf_float+0x42a>
 8008a8c:	e6fc      	b.n	8008888 <_printf_float+0x244>
 8008a8e:	f04f 0800 	mov.w	r8, #0
 8008a92:	f104 0919 	add.w	r9, r4, #25
 8008a96:	e7f4      	b.n	8008a82 <_printf_float+0x43e>

08008a98 <_printf_common>:
 8008a98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a9c:	4616      	mov	r6, r2
 8008a9e:	4698      	mov	r8, r3
 8008aa0:	688a      	ldr	r2, [r1, #8]
 8008aa2:	690b      	ldr	r3, [r1, #16]
 8008aa4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008aa8:	4293      	cmp	r3, r2
 8008aaa:	bfb8      	it	lt
 8008aac:	4613      	movlt	r3, r2
 8008aae:	6033      	str	r3, [r6, #0]
 8008ab0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008ab4:	4607      	mov	r7, r0
 8008ab6:	460c      	mov	r4, r1
 8008ab8:	b10a      	cbz	r2, 8008abe <_printf_common+0x26>
 8008aba:	3301      	adds	r3, #1
 8008abc:	6033      	str	r3, [r6, #0]
 8008abe:	6823      	ldr	r3, [r4, #0]
 8008ac0:	0699      	lsls	r1, r3, #26
 8008ac2:	bf42      	ittt	mi
 8008ac4:	6833      	ldrmi	r3, [r6, #0]
 8008ac6:	3302      	addmi	r3, #2
 8008ac8:	6033      	strmi	r3, [r6, #0]
 8008aca:	6825      	ldr	r5, [r4, #0]
 8008acc:	f015 0506 	ands.w	r5, r5, #6
 8008ad0:	d106      	bne.n	8008ae0 <_printf_common+0x48>
 8008ad2:	f104 0a19 	add.w	sl, r4, #25
 8008ad6:	68e3      	ldr	r3, [r4, #12]
 8008ad8:	6832      	ldr	r2, [r6, #0]
 8008ada:	1a9b      	subs	r3, r3, r2
 8008adc:	42ab      	cmp	r3, r5
 8008ade:	dc26      	bgt.n	8008b2e <_printf_common+0x96>
 8008ae0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008ae4:	6822      	ldr	r2, [r4, #0]
 8008ae6:	3b00      	subs	r3, #0
 8008ae8:	bf18      	it	ne
 8008aea:	2301      	movne	r3, #1
 8008aec:	0692      	lsls	r2, r2, #26
 8008aee:	d42b      	bmi.n	8008b48 <_printf_common+0xb0>
 8008af0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008af4:	4641      	mov	r1, r8
 8008af6:	4638      	mov	r0, r7
 8008af8:	47c8      	blx	r9
 8008afa:	3001      	adds	r0, #1
 8008afc:	d01e      	beq.n	8008b3c <_printf_common+0xa4>
 8008afe:	6823      	ldr	r3, [r4, #0]
 8008b00:	6922      	ldr	r2, [r4, #16]
 8008b02:	f003 0306 	and.w	r3, r3, #6
 8008b06:	2b04      	cmp	r3, #4
 8008b08:	bf02      	ittt	eq
 8008b0a:	68e5      	ldreq	r5, [r4, #12]
 8008b0c:	6833      	ldreq	r3, [r6, #0]
 8008b0e:	1aed      	subeq	r5, r5, r3
 8008b10:	68a3      	ldr	r3, [r4, #8]
 8008b12:	bf0c      	ite	eq
 8008b14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008b18:	2500      	movne	r5, #0
 8008b1a:	4293      	cmp	r3, r2
 8008b1c:	bfc4      	itt	gt
 8008b1e:	1a9b      	subgt	r3, r3, r2
 8008b20:	18ed      	addgt	r5, r5, r3
 8008b22:	2600      	movs	r6, #0
 8008b24:	341a      	adds	r4, #26
 8008b26:	42b5      	cmp	r5, r6
 8008b28:	d11a      	bne.n	8008b60 <_printf_common+0xc8>
 8008b2a:	2000      	movs	r0, #0
 8008b2c:	e008      	b.n	8008b40 <_printf_common+0xa8>
 8008b2e:	2301      	movs	r3, #1
 8008b30:	4652      	mov	r2, sl
 8008b32:	4641      	mov	r1, r8
 8008b34:	4638      	mov	r0, r7
 8008b36:	47c8      	blx	r9
 8008b38:	3001      	adds	r0, #1
 8008b3a:	d103      	bne.n	8008b44 <_printf_common+0xac>
 8008b3c:	f04f 30ff 	mov.w	r0, #4294967295
 8008b40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b44:	3501      	adds	r5, #1
 8008b46:	e7c6      	b.n	8008ad6 <_printf_common+0x3e>
 8008b48:	18e1      	adds	r1, r4, r3
 8008b4a:	1c5a      	adds	r2, r3, #1
 8008b4c:	2030      	movs	r0, #48	@ 0x30
 8008b4e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008b52:	4422      	add	r2, r4
 8008b54:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008b58:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008b5c:	3302      	adds	r3, #2
 8008b5e:	e7c7      	b.n	8008af0 <_printf_common+0x58>
 8008b60:	2301      	movs	r3, #1
 8008b62:	4622      	mov	r2, r4
 8008b64:	4641      	mov	r1, r8
 8008b66:	4638      	mov	r0, r7
 8008b68:	47c8      	blx	r9
 8008b6a:	3001      	adds	r0, #1
 8008b6c:	d0e6      	beq.n	8008b3c <_printf_common+0xa4>
 8008b6e:	3601      	adds	r6, #1
 8008b70:	e7d9      	b.n	8008b26 <_printf_common+0x8e>
	...

08008b74 <_printf_i>:
 8008b74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008b78:	7e0f      	ldrb	r7, [r1, #24]
 8008b7a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008b7c:	2f78      	cmp	r7, #120	@ 0x78
 8008b7e:	4691      	mov	r9, r2
 8008b80:	4680      	mov	r8, r0
 8008b82:	460c      	mov	r4, r1
 8008b84:	469a      	mov	sl, r3
 8008b86:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008b8a:	d807      	bhi.n	8008b9c <_printf_i+0x28>
 8008b8c:	2f62      	cmp	r7, #98	@ 0x62
 8008b8e:	d80a      	bhi.n	8008ba6 <_printf_i+0x32>
 8008b90:	2f00      	cmp	r7, #0
 8008b92:	f000 80d2 	beq.w	8008d3a <_printf_i+0x1c6>
 8008b96:	2f58      	cmp	r7, #88	@ 0x58
 8008b98:	f000 80b9 	beq.w	8008d0e <_printf_i+0x19a>
 8008b9c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008ba0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008ba4:	e03a      	b.n	8008c1c <_printf_i+0xa8>
 8008ba6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008baa:	2b15      	cmp	r3, #21
 8008bac:	d8f6      	bhi.n	8008b9c <_printf_i+0x28>
 8008bae:	a101      	add	r1, pc, #4	@ (adr r1, 8008bb4 <_printf_i+0x40>)
 8008bb0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008bb4:	08008c0d 	.word	0x08008c0d
 8008bb8:	08008c21 	.word	0x08008c21
 8008bbc:	08008b9d 	.word	0x08008b9d
 8008bc0:	08008b9d 	.word	0x08008b9d
 8008bc4:	08008b9d 	.word	0x08008b9d
 8008bc8:	08008b9d 	.word	0x08008b9d
 8008bcc:	08008c21 	.word	0x08008c21
 8008bd0:	08008b9d 	.word	0x08008b9d
 8008bd4:	08008b9d 	.word	0x08008b9d
 8008bd8:	08008b9d 	.word	0x08008b9d
 8008bdc:	08008b9d 	.word	0x08008b9d
 8008be0:	08008d21 	.word	0x08008d21
 8008be4:	08008c4b 	.word	0x08008c4b
 8008be8:	08008cdb 	.word	0x08008cdb
 8008bec:	08008b9d 	.word	0x08008b9d
 8008bf0:	08008b9d 	.word	0x08008b9d
 8008bf4:	08008d43 	.word	0x08008d43
 8008bf8:	08008b9d 	.word	0x08008b9d
 8008bfc:	08008c4b 	.word	0x08008c4b
 8008c00:	08008b9d 	.word	0x08008b9d
 8008c04:	08008b9d 	.word	0x08008b9d
 8008c08:	08008ce3 	.word	0x08008ce3
 8008c0c:	6833      	ldr	r3, [r6, #0]
 8008c0e:	1d1a      	adds	r2, r3, #4
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	6032      	str	r2, [r6, #0]
 8008c14:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008c18:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008c1c:	2301      	movs	r3, #1
 8008c1e:	e09d      	b.n	8008d5c <_printf_i+0x1e8>
 8008c20:	6833      	ldr	r3, [r6, #0]
 8008c22:	6820      	ldr	r0, [r4, #0]
 8008c24:	1d19      	adds	r1, r3, #4
 8008c26:	6031      	str	r1, [r6, #0]
 8008c28:	0606      	lsls	r6, r0, #24
 8008c2a:	d501      	bpl.n	8008c30 <_printf_i+0xbc>
 8008c2c:	681d      	ldr	r5, [r3, #0]
 8008c2e:	e003      	b.n	8008c38 <_printf_i+0xc4>
 8008c30:	0645      	lsls	r5, r0, #25
 8008c32:	d5fb      	bpl.n	8008c2c <_printf_i+0xb8>
 8008c34:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008c38:	2d00      	cmp	r5, #0
 8008c3a:	da03      	bge.n	8008c44 <_printf_i+0xd0>
 8008c3c:	232d      	movs	r3, #45	@ 0x2d
 8008c3e:	426d      	negs	r5, r5
 8008c40:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008c44:	4859      	ldr	r0, [pc, #356]	@ (8008dac <_printf_i+0x238>)
 8008c46:	230a      	movs	r3, #10
 8008c48:	e011      	b.n	8008c6e <_printf_i+0xfa>
 8008c4a:	6821      	ldr	r1, [r4, #0]
 8008c4c:	6833      	ldr	r3, [r6, #0]
 8008c4e:	0608      	lsls	r0, r1, #24
 8008c50:	f853 5b04 	ldr.w	r5, [r3], #4
 8008c54:	d402      	bmi.n	8008c5c <_printf_i+0xe8>
 8008c56:	0649      	lsls	r1, r1, #25
 8008c58:	bf48      	it	mi
 8008c5a:	b2ad      	uxthmi	r5, r5
 8008c5c:	2f6f      	cmp	r7, #111	@ 0x6f
 8008c5e:	4853      	ldr	r0, [pc, #332]	@ (8008dac <_printf_i+0x238>)
 8008c60:	6033      	str	r3, [r6, #0]
 8008c62:	bf14      	ite	ne
 8008c64:	230a      	movne	r3, #10
 8008c66:	2308      	moveq	r3, #8
 8008c68:	2100      	movs	r1, #0
 8008c6a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008c6e:	6866      	ldr	r6, [r4, #4]
 8008c70:	60a6      	str	r6, [r4, #8]
 8008c72:	2e00      	cmp	r6, #0
 8008c74:	bfa2      	ittt	ge
 8008c76:	6821      	ldrge	r1, [r4, #0]
 8008c78:	f021 0104 	bicge.w	r1, r1, #4
 8008c7c:	6021      	strge	r1, [r4, #0]
 8008c7e:	b90d      	cbnz	r5, 8008c84 <_printf_i+0x110>
 8008c80:	2e00      	cmp	r6, #0
 8008c82:	d04b      	beq.n	8008d1c <_printf_i+0x1a8>
 8008c84:	4616      	mov	r6, r2
 8008c86:	fbb5 f1f3 	udiv	r1, r5, r3
 8008c8a:	fb03 5711 	mls	r7, r3, r1, r5
 8008c8e:	5dc7      	ldrb	r7, [r0, r7]
 8008c90:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008c94:	462f      	mov	r7, r5
 8008c96:	42bb      	cmp	r3, r7
 8008c98:	460d      	mov	r5, r1
 8008c9a:	d9f4      	bls.n	8008c86 <_printf_i+0x112>
 8008c9c:	2b08      	cmp	r3, #8
 8008c9e:	d10b      	bne.n	8008cb8 <_printf_i+0x144>
 8008ca0:	6823      	ldr	r3, [r4, #0]
 8008ca2:	07df      	lsls	r7, r3, #31
 8008ca4:	d508      	bpl.n	8008cb8 <_printf_i+0x144>
 8008ca6:	6923      	ldr	r3, [r4, #16]
 8008ca8:	6861      	ldr	r1, [r4, #4]
 8008caa:	4299      	cmp	r1, r3
 8008cac:	bfde      	ittt	le
 8008cae:	2330      	movle	r3, #48	@ 0x30
 8008cb0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008cb4:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008cb8:	1b92      	subs	r2, r2, r6
 8008cba:	6122      	str	r2, [r4, #16]
 8008cbc:	f8cd a000 	str.w	sl, [sp]
 8008cc0:	464b      	mov	r3, r9
 8008cc2:	aa03      	add	r2, sp, #12
 8008cc4:	4621      	mov	r1, r4
 8008cc6:	4640      	mov	r0, r8
 8008cc8:	f7ff fee6 	bl	8008a98 <_printf_common>
 8008ccc:	3001      	adds	r0, #1
 8008cce:	d14a      	bne.n	8008d66 <_printf_i+0x1f2>
 8008cd0:	f04f 30ff 	mov.w	r0, #4294967295
 8008cd4:	b004      	add	sp, #16
 8008cd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008cda:	6823      	ldr	r3, [r4, #0]
 8008cdc:	f043 0320 	orr.w	r3, r3, #32
 8008ce0:	6023      	str	r3, [r4, #0]
 8008ce2:	4833      	ldr	r0, [pc, #204]	@ (8008db0 <_printf_i+0x23c>)
 8008ce4:	2778      	movs	r7, #120	@ 0x78
 8008ce6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008cea:	6823      	ldr	r3, [r4, #0]
 8008cec:	6831      	ldr	r1, [r6, #0]
 8008cee:	061f      	lsls	r7, r3, #24
 8008cf0:	f851 5b04 	ldr.w	r5, [r1], #4
 8008cf4:	d402      	bmi.n	8008cfc <_printf_i+0x188>
 8008cf6:	065f      	lsls	r7, r3, #25
 8008cf8:	bf48      	it	mi
 8008cfa:	b2ad      	uxthmi	r5, r5
 8008cfc:	6031      	str	r1, [r6, #0]
 8008cfe:	07d9      	lsls	r1, r3, #31
 8008d00:	bf44      	itt	mi
 8008d02:	f043 0320 	orrmi.w	r3, r3, #32
 8008d06:	6023      	strmi	r3, [r4, #0]
 8008d08:	b11d      	cbz	r5, 8008d12 <_printf_i+0x19e>
 8008d0a:	2310      	movs	r3, #16
 8008d0c:	e7ac      	b.n	8008c68 <_printf_i+0xf4>
 8008d0e:	4827      	ldr	r0, [pc, #156]	@ (8008dac <_printf_i+0x238>)
 8008d10:	e7e9      	b.n	8008ce6 <_printf_i+0x172>
 8008d12:	6823      	ldr	r3, [r4, #0]
 8008d14:	f023 0320 	bic.w	r3, r3, #32
 8008d18:	6023      	str	r3, [r4, #0]
 8008d1a:	e7f6      	b.n	8008d0a <_printf_i+0x196>
 8008d1c:	4616      	mov	r6, r2
 8008d1e:	e7bd      	b.n	8008c9c <_printf_i+0x128>
 8008d20:	6833      	ldr	r3, [r6, #0]
 8008d22:	6825      	ldr	r5, [r4, #0]
 8008d24:	6961      	ldr	r1, [r4, #20]
 8008d26:	1d18      	adds	r0, r3, #4
 8008d28:	6030      	str	r0, [r6, #0]
 8008d2a:	062e      	lsls	r6, r5, #24
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	d501      	bpl.n	8008d34 <_printf_i+0x1c0>
 8008d30:	6019      	str	r1, [r3, #0]
 8008d32:	e002      	b.n	8008d3a <_printf_i+0x1c6>
 8008d34:	0668      	lsls	r0, r5, #25
 8008d36:	d5fb      	bpl.n	8008d30 <_printf_i+0x1bc>
 8008d38:	8019      	strh	r1, [r3, #0]
 8008d3a:	2300      	movs	r3, #0
 8008d3c:	6123      	str	r3, [r4, #16]
 8008d3e:	4616      	mov	r6, r2
 8008d40:	e7bc      	b.n	8008cbc <_printf_i+0x148>
 8008d42:	6833      	ldr	r3, [r6, #0]
 8008d44:	1d1a      	adds	r2, r3, #4
 8008d46:	6032      	str	r2, [r6, #0]
 8008d48:	681e      	ldr	r6, [r3, #0]
 8008d4a:	6862      	ldr	r2, [r4, #4]
 8008d4c:	2100      	movs	r1, #0
 8008d4e:	4630      	mov	r0, r6
 8008d50:	f7f7 fa46 	bl	80001e0 <memchr>
 8008d54:	b108      	cbz	r0, 8008d5a <_printf_i+0x1e6>
 8008d56:	1b80      	subs	r0, r0, r6
 8008d58:	6060      	str	r0, [r4, #4]
 8008d5a:	6863      	ldr	r3, [r4, #4]
 8008d5c:	6123      	str	r3, [r4, #16]
 8008d5e:	2300      	movs	r3, #0
 8008d60:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008d64:	e7aa      	b.n	8008cbc <_printf_i+0x148>
 8008d66:	6923      	ldr	r3, [r4, #16]
 8008d68:	4632      	mov	r2, r6
 8008d6a:	4649      	mov	r1, r9
 8008d6c:	4640      	mov	r0, r8
 8008d6e:	47d0      	blx	sl
 8008d70:	3001      	adds	r0, #1
 8008d72:	d0ad      	beq.n	8008cd0 <_printf_i+0x15c>
 8008d74:	6823      	ldr	r3, [r4, #0]
 8008d76:	079b      	lsls	r3, r3, #30
 8008d78:	d413      	bmi.n	8008da2 <_printf_i+0x22e>
 8008d7a:	68e0      	ldr	r0, [r4, #12]
 8008d7c:	9b03      	ldr	r3, [sp, #12]
 8008d7e:	4298      	cmp	r0, r3
 8008d80:	bfb8      	it	lt
 8008d82:	4618      	movlt	r0, r3
 8008d84:	e7a6      	b.n	8008cd4 <_printf_i+0x160>
 8008d86:	2301      	movs	r3, #1
 8008d88:	4632      	mov	r2, r6
 8008d8a:	4649      	mov	r1, r9
 8008d8c:	4640      	mov	r0, r8
 8008d8e:	47d0      	blx	sl
 8008d90:	3001      	adds	r0, #1
 8008d92:	d09d      	beq.n	8008cd0 <_printf_i+0x15c>
 8008d94:	3501      	adds	r5, #1
 8008d96:	68e3      	ldr	r3, [r4, #12]
 8008d98:	9903      	ldr	r1, [sp, #12]
 8008d9a:	1a5b      	subs	r3, r3, r1
 8008d9c:	42ab      	cmp	r3, r5
 8008d9e:	dcf2      	bgt.n	8008d86 <_printf_i+0x212>
 8008da0:	e7eb      	b.n	8008d7a <_printf_i+0x206>
 8008da2:	2500      	movs	r5, #0
 8008da4:	f104 0619 	add.w	r6, r4, #25
 8008da8:	e7f5      	b.n	8008d96 <_printf_i+0x222>
 8008daa:	bf00      	nop
 8008dac:	0800c68a 	.word	0x0800c68a
 8008db0:	0800c69b 	.word	0x0800c69b

08008db4 <std>:
 8008db4:	2300      	movs	r3, #0
 8008db6:	b510      	push	{r4, lr}
 8008db8:	4604      	mov	r4, r0
 8008dba:	e9c0 3300 	strd	r3, r3, [r0]
 8008dbe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008dc2:	6083      	str	r3, [r0, #8]
 8008dc4:	8181      	strh	r1, [r0, #12]
 8008dc6:	6643      	str	r3, [r0, #100]	@ 0x64
 8008dc8:	81c2      	strh	r2, [r0, #14]
 8008dca:	6183      	str	r3, [r0, #24]
 8008dcc:	4619      	mov	r1, r3
 8008dce:	2208      	movs	r2, #8
 8008dd0:	305c      	adds	r0, #92	@ 0x5c
 8008dd2:	f000 f928 	bl	8009026 <memset>
 8008dd6:	4b0d      	ldr	r3, [pc, #52]	@ (8008e0c <std+0x58>)
 8008dd8:	6263      	str	r3, [r4, #36]	@ 0x24
 8008dda:	4b0d      	ldr	r3, [pc, #52]	@ (8008e10 <std+0x5c>)
 8008ddc:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008dde:	4b0d      	ldr	r3, [pc, #52]	@ (8008e14 <std+0x60>)
 8008de0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008de2:	4b0d      	ldr	r3, [pc, #52]	@ (8008e18 <std+0x64>)
 8008de4:	6323      	str	r3, [r4, #48]	@ 0x30
 8008de6:	4b0d      	ldr	r3, [pc, #52]	@ (8008e1c <std+0x68>)
 8008de8:	6224      	str	r4, [r4, #32]
 8008dea:	429c      	cmp	r4, r3
 8008dec:	d006      	beq.n	8008dfc <std+0x48>
 8008dee:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008df2:	4294      	cmp	r4, r2
 8008df4:	d002      	beq.n	8008dfc <std+0x48>
 8008df6:	33d0      	adds	r3, #208	@ 0xd0
 8008df8:	429c      	cmp	r4, r3
 8008dfa:	d105      	bne.n	8008e08 <std+0x54>
 8008dfc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008e00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008e04:	f000 b98c 	b.w	8009120 <__retarget_lock_init_recursive>
 8008e08:	bd10      	pop	{r4, pc}
 8008e0a:	bf00      	nop
 8008e0c:	08008fa1 	.word	0x08008fa1
 8008e10:	08008fc3 	.word	0x08008fc3
 8008e14:	08008ffb 	.word	0x08008ffb
 8008e18:	0800901f 	.word	0x0800901f
 8008e1c:	20000594 	.word	0x20000594

08008e20 <stdio_exit_handler>:
 8008e20:	4a02      	ldr	r2, [pc, #8]	@ (8008e2c <stdio_exit_handler+0xc>)
 8008e22:	4903      	ldr	r1, [pc, #12]	@ (8008e30 <stdio_exit_handler+0x10>)
 8008e24:	4803      	ldr	r0, [pc, #12]	@ (8008e34 <stdio_exit_handler+0x14>)
 8008e26:	f000 b869 	b.w	8008efc <_fwalk_sglue>
 8008e2a:	bf00      	nop
 8008e2c:	2000000c 	.word	0x2000000c
 8008e30:	0800aa7d 	.word	0x0800aa7d
 8008e34:	2000001c 	.word	0x2000001c

08008e38 <cleanup_stdio>:
 8008e38:	6841      	ldr	r1, [r0, #4]
 8008e3a:	4b0c      	ldr	r3, [pc, #48]	@ (8008e6c <cleanup_stdio+0x34>)
 8008e3c:	4299      	cmp	r1, r3
 8008e3e:	b510      	push	{r4, lr}
 8008e40:	4604      	mov	r4, r0
 8008e42:	d001      	beq.n	8008e48 <cleanup_stdio+0x10>
 8008e44:	f001 fe1a 	bl	800aa7c <_fflush_r>
 8008e48:	68a1      	ldr	r1, [r4, #8]
 8008e4a:	4b09      	ldr	r3, [pc, #36]	@ (8008e70 <cleanup_stdio+0x38>)
 8008e4c:	4299      	cmp	r1, r3
 8008e4e:	d002      	beq.n	8008e56 <cleanup_stdio+0x1e>
 8008e50:	4620      	mov	r0, r4
 8008e52:	f001 fe13 	bl	800aa7c <_fflush_r>
 8008e56:	68e1      	ldr	r1, [r4, #12]
 8008e58:	4b06      	ldr	r3, [pc, #24]	@ (8008e74 <cleanup_stdio+0x3c>)
 8008e5a:	4299      	cmp	r1, r3
 8008e5c:	d004      	beq.n	8008e68 <cleanup_stdio+0x30>
 8008e5e:	4620      	mov	r0, r4
 8008e60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008e64:	f001 be0a 	b.w	800aa7c <_fflush_r>
 8008e68:	bd10      	pop	{r4, pc}
 8008e6a:	bf00      	nop
 8008e6c:	20000594 	.word	0x20000594
 8008e70:	200005fc 	.word	0x200005fc
 8008e74:	20000664 	.word	0x20000664

08008e78 <global_stdio_init.part.0>:
 8008e78:	b510      	push	{r4, lr}
 8008e7a:	4b0b      	ldr	r3, [pc, #44]	@ (8008ea8 <global_stdio_init.part.0+0x30>)
 8008e7c:	4c0b      	ldr	r4, [pc, #44]	@ (8008eac <global_stdio_init.part.0+0x34>)
 8008e7e:	4a0c      	ldr	r2, [pc, #48]	@ (8008eb0 <global_stdio_init.part.0+0x38>)
 8008e80:	601a      	str	r2, [r3, #0]
 8008e82:	4620      	mov	r0, r4
 8008e84:	2200      	movs	r2, #0
 8008e86:	2104      	movs	r1, #4
 8008e88:	f7ff ff94 	bl	8008db4 <std>
 8008e8c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008e90:	2201      	movs	r2, #1
 8008e92:	2109      	movs	r1, #9
 8008e94:	f7ff ff8e 	bl	8008db4 <std>
 8008e98:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008e9c:	2202      	movs	r2, #2
 8008e9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008ea2:	2112      	movs	r1, #18
 8008ea4:	f7ff bf86 	b.w	8008db4 <std>
 8008ea8:	200006cc 	.word	0x200006cc
 8008eac:	20000594 	.word	0x20000594
 8008eb0:	08008e21 	.word	0x08008e21

08008eb4 <__sfp_lock_acquire>:
 8008eb4:	4801      	ldr	r0, [pc, #4]	@ (8008ebc <__sfp_lock_acquire+0x8>)
 8008eb6:	f000 b934 	b.w	8009122 <__retarget_lock_acquire_recursive>
 8008eba:	bf00      	nop
 8008ebc:	200006d5 	.word	0x200006d5

08008ec0 <__sfp_lock_release>:
 8008ec0:	4801      	ldr	r0, [pc, #4]	@ (8008ec8 <__sfp_lock_release+0x8>)
 8008ec2:	f000 b92f 	b.w	8009124 <__retarget_lock_release_recursive>
 8008ec6:	bf00      	nop
 8008ec8:	200006d5 	.word	0x200006d5

08008ecc <__sinit>:
 8008ecc:	b510      	push	{r4, lr}
 8008ece:	4604      	mov	r4, r0
 8008ed0:	f7ff fff0 	bl	8008eb4 <__sfp_lock_acquire>
 8008ed4:	6a23      	ldr	r3, [r4, #32]
 8008ed6:	b11b      	cbz	r3, 8008ee0 <__sinit+0x14>
 8008ed8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008edc:	f7ff bff0 	b.w	8008ec0 <__sfp_lock_release>
 8008ee0:	4b04      	ldr	r3, [pc, #16]	@ (8008ef4 <__sinit+0x28>)
 8008ee2:	6223      	str	r3, [r4, #32]
 8008ee4:	4b04      	ldr	r3, [pc, #16]	@ (8008ef8 <__sinit+0x2c>)
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d1f5      	bne.n	8008ed8 <__sinit+0xc>
 8008eec:	f7ff ffc4 	bl	8008e78 <global_stdio_init.part.0>
 8008ef0:	e7f2      	b.n	8008ed8 <__sinit+0xc>
 8008ef2:	bf00      	nop
 8008ef4:	08008e39 	.word	0x08008e39
 8008ef8:	200006cc 	.word	0x200006cc

08008efc <_fwalk_sglue>:
 8008efc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f00:	4607      	mov	r7, r0
 8008f02:	4688      	mov	r8, r1
 8008f04:	4614      	mov	r4, r2
 8008f06:	2600      	movs	r6, #0
 8008f08:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008f0c:	f1b9 0901 	subs.w	r9, r9, #1
 8008f10:	d505      	bpl.n	8008f1e <_fwalk_sglue+0x22>
 8008f12:	6824      	ldr	r4, [r4, #0]
 8008f14:	2c00      	cmp	r4, #0
 8008f16:	d1f7      	bne.n	8008f08 <_fwalk_sglue+0xc>
 8008f18:	4630      	mov	r0, r6
 8008f1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f1e:	89ab      	ldrh	r3, [r5, #12]
 8008f20:	2b01      	cmp	r3, #1
 8008f22:	d907      	bls.n	8008f34 <_fwalk_sglue+0x38>
 8008f24:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008f28:	3301      	adds	r3, #1
 8008f2a:	d003      	beq.n	8008f34 <_fwalk_sglue+0x38>
 8008f2c:	4629      	mov	r1, r5
 8008f2e:	4638      	mov	r0, r7
 8008f30:	47c0      	blx	r8
 8008f32:	4306      	orrs	r6, r0
 8008f34:	3568      	adds	r5, #104	@ 0x68
 8008f36:	e7e9      	b.n	8008f0c <_fwalk_sglue+0x10>

08008f38 <sniprintf>:
 8008f38:	b40c      	push	{r2, r3}
 8008f3a:	b530      	push	{r4, r5, lr}
 8008f3c:	4b17      	ldr	r3, [pc, #92]	@ (8008f9c <sniprintf+0x64>)
 8008f3e:	1e0c      	subs	r4, r1, #0
 8008f40:	681d      	ldr	r5, [r3, #0]
 8008f42:	b09d      	sub	sp, #116	@ 0x74
 8008f44:	da08      	bge.n	8008f58 <sniprintf+0x20>
 8008f46:	238b      	movs	r3, #139	@ 0x8b
 8008f48:	602b      	str	r3, [r5, #0]
 8008f4a:	f04f 30ff 	mov.w	r0, #4294967295
 8008f4e:	b01d      	add	sp, #116	@ 0x74
 8008f50:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008f54:	b002      	add	sp, #8
 8008f56:	4770      	bx	lr
 8008f58:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8008f5c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008f60:	bf14      	ite	ne
 8008f62:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008f66:	4623      	moveq	r3, r4
 8008f68:	9304      	str	r3, [sp, #16]
 8008f6a:	9307      	str	r3, [sp, #28]
 8008f6c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008f70:	9002      	str	r0, [sp, #8]
 8008f72:	9006      	str	r0, [sp, #24]
 8008f74:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008f78:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8008f7a:	ab21      	add	r3, sp, #132	@ 0x84
 8008f7c:	a902      	add	r1, sp, #8
 8008f7e:	4628      	mov	r0, r5
 8008f80:	9301      	str	r3, [sp, #4]
 8008f82:	f001 fbfb 	bl	800a77c <_svfiprintf_r>
 8008f86:	1c43      	adds	r3, r0, #1
 8008f88:	bfbc      	itt	lt
 8008f8a:	238b      	movlt	r3, #139	@ 0x8b
 8008f8c:	602b      	strlt	r3, [r5, #0]
 8008f8e:	2c00      	cmp	r4, #0
 8008f90:	d0dd      	beq.n	8008f4e <sniprintf+0x16>
 8008f92:	9b02      	ldr	r3, [sp, #8]
 8008f94:	2200      	movs	r2, #0
 8008f96:	701a      	strb	r2, [r3, #0]
 8008f98:	e7d9      	b.n	8008f4e <sniprintf+0x16>
 8008f9a:	bf00      	nop
 8008f9c:	20000018 	.word	0x20000018

08008fa0 <__sread>:
 8008fa0:	b510      	push	{r4, lr}
 8008fa2:	460c      	mov	r4, r1
 8008fa4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008fa8:	f000 f86c 	bl	8009084 <_read_r>
 8008fac:	2800      	cmp	r0, #0
 8008fae:	bfab      	itete	ge
 8008fb0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008fb2:	89a3      	ldrhlt	r3, [r4, #12]
 8008fb4:	181b      	addge	r3, r3, r0
 8008fb6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008fba:	bfac      	ite	ge
 8008fbc:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008fbe:	81a3      	strhlt	r3, [r4, #12]
 8008fc0:	bd10      	pop	{r4, pc}

08008fc2 <__swrite>:
 8008fc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008fc6:	461f      	mov	r7, r3
 8008fc8:	898b      	ldrh	r3, [r1, #12]
 8008fca:	05db      	lsls	r3, r3, #23
 8008fcc:	4605      	mov	r5, r0
 8008fce:	460c      	mov	r4, r1
 8008fd0:	4616      	mov	r6, r2
 8008fd2:	d505      	bpl.n	8008fe0 <__swrite+0x1e>
 8008fd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008fd8:	2302      	movs	r3, #2
 8008fda:	2200      	movs	r2, #0
 8008fdc:	f000 f840 	bl	8009060 <_lseek_r>
 8008fe0:	89a3      	ldrh	r3, [r4, #12]
 8008fe2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008fe6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008fea:	81a3      	strh	r3, [r4, #12]
 8008fec:	4632      	mov	r2, r6
 8008fee:	463b      	mov	r3, r7
 8008ff0:	4628      	mov	r0, r5
 8008ff2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008ff6:	f000 b857 	b.w	80090a8 <_write_r>

08008ffa <__sseek>:
 8008ffa:	b510      	push	{r4, lr}
 8008ffc:	460c      	mov	r4, r1
 8008ffe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009002:	f000 f82d 	bl	8009060 <_lseek_r>
 8009006:	1c43      	adds	r3, r0, #1
 8009008:	89a3      	ldrh	r3, [r4, #12]
 800900a:	bf15      	itete	ne
 800900c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800900e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009012:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009016:	81a3      	strheq	r3, [r4, #12]
 8009018:	bf18      	it	ne
 800901a:	81a3      	strhne	r3, [r4, #12]
 800901c:	bd10      	pop	{r4, pc}

0800901e <__sclose>:
 800901e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009022:	f000 b80d 	b.w	8009040 <_close_r>

08009026 <memset>:
 8009026:	4402      	add	r2, r0
 8009028:	4603      	mov	r3, r0
 800902a:	4293      	cmp	r3, r2
 800902c:	d100      	bne.n	8009030 <memset+0xa>
 800902e:	4770      	bx	lr
 8009030:	f803 1b01 	strb.w	r1, [r3], #1
 8009034:	e7f9      	b.n	800902a <memset+0x4>
	...

08009038 <_localeconv_r>:
 8009038:	4800      	ldr	r0, [pc, #0]	@ (800903c <_localeconv_r+0x4>)
 800903a:	4770      	bx	lr
 800903c:	20000158 	.word	0x20000158

08009040 <_close_r>:
 8009040:	b538      	push	{r3, r4, r5, lr}
 8009042:	4d06      	ldr	r5, [pc, #24]	@ (800905c <_close_r+0x1c>)
 8009044:	2300      	movs	r3, #0
 8009046:	4604      	mov	r4, r0
 8009048:	4608      	mov	r0, r1
 800904a:	602b      	str	r3, [r5, #0]
 800904c:	f7f8 fd3a 	bl	8001ac4 <_close>
 8009050:	1c43      	adds	r3, r0, #1
 8009052:	d102      	bne.n	800905a <_close_r+0x1a>
 8009054:	682b      	ldr	r3, [r5, #0]
 8009056:	b103      	cbz	r3, 800905a <_close_r+0x1a>
 8009058:	6023      	str	r3, [r4, #0]
 800905a:	bd38      	pop	{r3, r4, r5, pc}
 800905c:	200006d0 	.word	0x200006d0

08009060 <_lseek_r>:
 8009060:	b538      	push	{r3, r4, r5, lr}
 8009062:	4d07      	ldr	r5, [pc, #28]	@ (8009080 <_lseek_r+0x20>)
 8009064:	4604      	mov	r4, r0
 8009066:	4608      	mov	r0, r1
 8009068:	4611      	mov	r1, r2
 800906a:	2200      	movs	r2, #0
 800906c:	602a      	str	r2, [r5, #0]
 800906e:	461a      	mov	r2, r3
 8009070:	f7f8 fd4f 	bl	8001b12 <_lseek>
 8009074:	1c43      	adds	r3, r0, #1
 8009076:	d102      	bne.n	800907e <_lseek_r+0x1e>
 8009078:	682b      	ldr	r3, [r5, #0]
 800907a:	b103      	cbz	r3, 800907e <_lseek_r+0x1e>
 800907c:	6023      	str	r3, [r4, #0]
 800907e:	bd38      	pop	{r3, r4, r5, pc}
 8009080:	200006d0 	.word	0x200006d0

08009084 <_read_r>:
 8009084:	b538      	push	{r3, r4, r5, lr}
 8009086:	4d07      	ldr	r5, [pc, #28]	@ (80090a4 <_read_r+0x20>)
 8009088:	4604      	mov	r4, r0
 800908a:	4608      	mov	r0, r1
 800908c:	4611      	mov	r1, r2
 800908e:	2200      	movs	r2, #0
 8009090:	602a      	str	r2, [r5, #0]
 8009092:	461a      	mov	r2, r3
 8009094:	f7f8 fcdd 	bl	8001a52 <_read>
 8009098:	1c43      	adds	r3, r0, #1
 800909a:	d102      	bne.n	80090a2 <_read_r+0x1e>
 800909c:	682b      	ldr	r3, [r5, #0]
 800909e:	b103      	cbz	r3, 80090a2 <_read_r+0x1e>
 80090a0:	6023      	str	r3, [r4, #0]
 80090a2:	bd38      	pop	{r3, r4, r5, pc}
 80090a4:	200006d0 	.word	0x200006d0

080090a8 <_write_r>:
 80090a8:	b538      	push	{r3, r4, r5, lr}
 80090aa:	4d07      	ldr	r5, [pc, #28]	@ (80090c8 <_write_r+0x20>)
 80090ac:	4604      	mov	r4, r0
 80090ae:	4608      	mov	r0, r1
 80090b0:	4611      	mov	r1, r2
 80090b2:	2200      	movs	r2, #0
 80090b4:	602a      	str	r2, [r5, #0]
 80090b6:	461a      	mov	r2, r3
 80090b8:	f7f8 fce8 	bl	8001a8c <_write>
 80090bc:	1c43      	adds	r3, r0, #1
 80090be:	d102      	bne.n	80090c6 <_write_r+0x1e>
 80090c0:	682b      	ldr	r3, [r5, #0]
 80090c2:	b103      	cbz	r3, 80090c6 <_write_r+0x1e>
 80090c4:	6023      	str	r3, [r4, #0]
 80090c6:	bd38      	pop	{r3, r4, r5, pc}
 80090c8:	200006d0 	.word	0x200006d0

080090cc <__errno>:
 80090cc:	4b01      	ldr	r3, [pc, #4]	@ (80090d4 <__errno+0x8>)
 80090ce:	6818      	ldr	r0, [r3, #0]
 80090d0:	4770      	bx	lr
 80090d2:	bf00      	nop
 80090d4:	20000018 	.word	0x20000018

080090d8 <__libc_init_array>:
 80090d8:	b570      	push	{r4, r5, r6, lr}
 80090da:	4d0d      	ldr	r5, [pc, #52]	@ (8009110 <__libc_init_array+0x38>)
 80090dc:	4c0d      	ldr	r4, [pc, #52]	@ (8009114 <__libc_init_array+0x3c>)
 80090de:	1b64      	subs	r4, r4, r5
 80090e0:	10a4      	asrs	r4, r4, #2
 80090e2:	2600      	movs	r6, #0
 80090e4:	42a6      	cmp	r6, r4
 80090e6:	d109      	bne.n	80090fc <__libc_init_array+0x24>
 80090e8:	4d0b      	ldr	r5, [pc, #44]	@ (8009118 <__libc_init_array+0x40>)
 80090ea:	4c0c      	ldr	r4, [pc, #48]	@ (800911c <__libc_init_array+0x44>)
 80090ec:	f003 fa8e 	bl	800c60c <_init>
 80090f0:	1b64      	subs	r4, r4, r5
 80090f2:	10a4      	asrs	r4, r4, #2
 80090f4:	2600      	movs	r6, #0
 80090f6:	42a6      	cmp	r6, r4
 80090f8:	d105      	bne.n	8009106 <__libc_init_array+0x2e>
 80090fa:	bd70      	pop	{r4, r5, r6, pc}
 80090fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8009100:	4798      	blx	r3
 8009102:	3601      	adds	r6, #1
 8009104:	e7ee      	b.n	80090e4 <__libc_init_array+0xc>
 8009106:	f855 3b04 	ldr.w	r3, [r5], #4
 800910a:	4798      	blx	r3
 800910c:	3601      	adds	r6, #1
 800910e:	e7f2      	b.n	80090f6 <__libc_init_array+0x1e>
 8009110:	0800ca20 	.word	0x0800ca20
 8009114:	0800ca20 	.word	0x0800ca20
 8009118:	0800ca20 	.word	0x0800ca20
 800911c:	0800ca24 	.word	0x0800ca24

08009120 <__retarget_lock_init_recursive>:
 8009120:	4770      	bx	lr

08009122 <__retarget_lock_acquire_recursive>:
 8009122:	4770      	bx	lr

08009124 <__retarget_lock_release_recursive>:
 8009124:	4770      	bx	lr

08009126 <quorem>:
 8009126:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800912a:	6903      	ldr	r3, [r0, #16]
 800912c:	690c      	ldr	r4, [r1, #16]
 800912e:	42a3      	cmp	r3, r4
 8009130:	4607      	mov	r7, r0
 8009132:	db7e      	blt.n	8009232 <quorem+0x10c>
 8009134:	3c01      	subs	r4, #1
 8009136:	f101 0814 	add.w	r8, r1, #20
 800913a:	00a3      	lsls	r3, r4, #2
 800913c:	f100 0514 	add.w	r5, r0, #20
 8009140:	9300      	str	r3, [sp, #0]
 8009142:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009146:	9301      	str	r3, [sp, #4]
 8009148:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800914c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009150:	3301      	adds	r3, #1
 8009152:	429a      	cmp	r2, r3
 8009154:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009158:	fbb2 f6f3 	udiv	r6, r2, r3
 800915c:	d32e      	bcc.n	80091bc <quorem+0x96>
 800915e:	f04f 0a00 	mov.w	sl, #0
 8009162:	46c4      	mov	ip, r8
 8009164:	46ae      	mov	lr, r5
 8009166:	46d3      	mov	fp, sl
 8009168:	f85c 3b04 	ldr.w	r3, [ip], #4
 800916c:	b298      	uxth	r0, r3
 800916e:	fb06 a000 	mla	r0, r6, r0, sl
 8009172:	0c02      	lsrs	r2, r0, #16
 8009174:	0c1b      	lsrs	r3, r3, #16
 8009176:	fb06 2303 	mla	r3, r6, r3, r2
 800917a:	f8de 2000 	ldr.w	r2, [lr]
 800917e:	b280      	uxth	r0, r0
 8009180:	b292      	uxth	r2, r2
 8009182:	1a12      	subs	r2, r2, r0
 8009184:	445a      	add	r2, fp
 8009186:	f8de 0000 	ldr.w	r0, [lr]
 800918a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800918e:	b29b      	uxth	r3, r3
 8009190:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8009194:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8009198:	b292      	uxth	r2, r2
 800919a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800919e:	45e1      	cmp	r9, ip
 80091a0:	f84e 2b04 	str.w	r2, [lr], #4
 80091a4:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80091a8:	d2de      	bcs.n	8009168 <quorem+0x42>
 80091aa:	9b00      	ldr	r3, [sp, #0]
 80091ac:	58eb      	ldr	r3, [r5, r3]
 80091ae:	b92b      	cbnz	r3, 80091bc <quorem+0x96>
 80091b0:	9b01      	ldr	r3, [sp, #4]
 80091b2:	3b04      	subs	r3, #4
 80091b4:	429d      	cmp	r5, r3
 80091b6:	461a      	mov	r2, r3
 80091b8:	d32f      	bcc.n	800921a <quorem+0xf4>
 80091ba:	613c      	str	r4, [r7, #16]
 80091bc:	4638      	mov	r0, r7
 80091be:	f001 f979 	bl	800a4b4 <__mcmp>
 80091c2:	2800      	cmp	r0, #0
 80091c4:	db25      	blt.n	8009212 <quorem+0xec>
 80091c6:	4629      	mov	r1, r5
 80091c8:	2000      	movs	r0, #0
 80091ca:	f858 2b04 	ldr.w	r2, [r8], #4
 80091ce:	f8d1 c000 	ldr.w	ip, [r1]
 80091d2:	fa1f fe82 	uxth.w	lr, r2
 80091d6:	fa1f f38c 	uxth.w	r3, ip
 80091da:	eba3 030e 	sub.w	r3, r3, lr
 80091de:	4403      	add	r3, r0
 80091e0:	0c12      	lsrs	r2, r2, #16
 80091e2:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80091e6:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80091ea:	b29b      	uxth	r3, r3
 80091ec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80091f0:	45c1      	cmp	r9, r8
 80091f2:	f841 3b04 	str.w	r3, [r1], #4
 80091f6:	ea4f 4022 	mov.w	r0, r2, asr #16
 80091fa:	d2e6      	bcs.n	80091ca <quorem+0xa4>
 80091fc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009200:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009204:	b922      	cbnz	r2, 8009210 <quorem+0xea>
 8009206:	3b04      	subs	r3, #4
 8009208:	429d      	cmp	r5, r3
 800920a:	461a      	mov	r2, r3
 800920c:	d30b      	bcc.n	8009226 <quorem+0x100>
 800920e:	613c      	str	r4, [r7, #16]
 8009210:	3601      	adds	r6, #1
 8009212:	4630      	mov	r0, r6
 8009214:	b003      	add	sp, #12
 8009216:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800921a:	6812      	ldr	r2, [r2, #0]
 800921c:	3b04      	subs	r3, #4
 800921e:	2a00      	cmp	r2, #0
 8009220:	d1cb      	bne.n	80091ba <quorem+0x94>
 8009222:	3c01      	subs	r4, #1
 8009224:	e7c6      	b.n	80091b4 <quorem+0x8e>
 8009226:	6812      	ldr	r2, [r2, #0]
 8009228:	3b04      	subs	r3, #4
 800922a:	2a00      	cmp	r2, #0
 800922c:	d1ef      	bne.n	800920e <quorem+0xe8>
 800922e:	3c01      	subs	r4, #1
 8009230:	e7ea      	b.n	8009208 <quorem+0xe2>
 8009232:	2000      	movs	r0, #0
 8009234:	e7ee      	b.n	8009214 <quorem+0xee>
	...

08009238 <_dtoa_r>:
 8009238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800923c:	69c7      	ldr	r7, [r0, #28]
 800923e:	b099      	sub	sp, #100	@ 0x64
 8009240:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009244:	ec55 4b10 	vmov	r4, r5, d0
 8009248:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800924a:	9109      	str	r1, [sp, #36]	@ 0x24
 800924c:	4683      	mov	fp, r0
 800924e:	920e      	str	r2, [sp, #56]	@ 0x38
 8009250:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009252:	b97f      	cbnz	r7, 8009274 <_dtoa_r+0x3c>
 8009254:	2010      	movs	r0, #16
 8009256:	f000 fdfd 	bl	8009e54 <malloc>
 800925a:	4602      	mov	r2, r0
 800925c:	f8cb 001c 	str.w	r0, [fp, #28]
 8009260:	b920      	cbnz	r0, 800926c <_dtoa_r+0x34>
 8009262:	4ba7      	ldr	r3, [pc, #668]	@ (8009500 <_dtoa_r+0x2c8>)
 8009264:	21ef      	movs	r1, #239	@ 0xef
 8009266:	48a7      	ldr	r0, [pc, #668]	@ (8009504 <_dtoa_r+0x2cc>)
 8009268:	f001 fc68 	bl	800ab3c <__assert_func>
 800926c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009270:	6007      	str	r7, [r0, #0]
 8009272:	60c7      	str	r7, [r0, #12]
 8009274:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009278:	6819      	ldr	r1, [r3, #0]
 800927a:	b159      	cbz	r1, 8009294 <_dtoa_r+0x5c>
 800927c:	685a      	ldr	r2, [r3, #4]
 800927e:	604a      	str	r2, [r1, #4]
 8009280:	2301      	movs	r3, #1
 8009282:	4093      	lsls	r3, r2
 8009284:	608b      	str	r3, [r1, #8]
 8009286:	4658      	mov	r0, fp
 8009288:	f000 feda 	bl	800a040 <_Bfree>
 800928c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009290:	2200      	movs	r2, #0
 8009292:	601a      	str	r2, [r3, #0]
 8009294:	1e2b      	subs	r3, r5, #0
 8009296:	bfb9      	ittee	lt
 8009298:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800929c:	9303      	strlt	r3, [sp, #12]
 800929e:	2300      	movge	r3, #0
 80092a0:	6033      	strge	r3, [r6, #0]
 80092a2:	9f03      	ldr	r7, [sp, #12]
 80092a4:	4b98      	ldr	r3, [pc, #608]	@ (8009508 <_dtoa_r+0x2d0>)
 80092a6:	bfbc      	itt	lt
 80092a8:	2201      	movlt	r2, #1
 80092aa:	6032      	strlt	r2, [r6, #0]
 80092ac:	43bb      	bics	r3, r7
 80092ae:	d112      	bne.n	80092d6 <_dtoa_r+0x9e>
 80092b0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80092b2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80092b6:	6013      	str	r3, [r2, #0]
 80092b8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80092bc:	4323      	orrs	r3, r4
 80092be:	f000 854d 	beq.w	8009d5c <_dtoa_r+0xb24>
 80092c2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80092c4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800951c <_dtoa_r+0x2e4>
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	f000 854f 	beq.w	8009d6c <_dtoa_r+0xb34>
 80092ce:	f10a 0303 	add.w	r3, sl, #3
 80092d2:	f000 bd49 	b.w	8009d68 <_dtoa_r+0xb30>
 80092d6:	ed9d 7b02 	vldr	d7, [sp, #8]
 80092da:	2200      	movs	r2, #0
 80092dc:	ec51 0b17 	vmov	r0, r1, d7
 80092e0:	2300      	movs	r3, #0
 80092e2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80092e6:	f7f7 fbf7 	bl	8000ad8 <__aeabi_dcmpeq>
 80092ea:	4680      	mov	r8, r0
 80092ec:	b158      	cbz	r0, 8009306 <_dtoa_r+0xce>
 80092ee:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80092f0:	2301      	movs	r3, #1
 80092f2:	6013      	str	r3, [r2, #0]
 80092f4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80092f6:	b113      	cbz	r3, 80092fe <_dtoa_r+0xc6>
 80092f8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80092fa:	4b84      	ldr	r3, [pc, #528]	@ (800950c <_dtoa_r+0x2d4>)
 80092fc:	6013      	str	r3, [r2, #0]
 80092fe:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8009520 <_dtoa_r+0x2e8>
 8009302:	f000 bd33 	b.w	8009d6c <_dtoa_r+0xb34>
 8009306:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800930a:	aa16      	add	r2, sp, #88	@ 0x58
 800930c:	a917      	add	r1, sp, #92	@ 0x5c
 800930e:	4658      	mov	r0, fp
 8009310:	f001 f980 	bl	800a614 <__d2b>
 8009314:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8009318:	4681      	mov	r9, r0
 800931a:	2e00      	cmp	r6, #0
 800931c:	d077      	beq.n	800940e <_dtoa_r+0x1d6>
 800931e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009320:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8009324:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009328:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800932c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009330:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8009334:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009338:	4619      	mov	r1, r3
 800933a:	2200      	movs	r2, #0
 800933c:	4b74      	ldr	r3, [pc, #464]	@ (8009510 <_dtoa_r+0x2d8>)
 800933e:	f7f6 ffab 	bl	8000298 <__aeabi_dsub>
 8009342:	a369      	add	r3, pc, #420	@ (adr r3, 80094e8 <_dtoa_r+0x2b0>)
 8009344:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009348:	f7f7 f95e 	bl	8000608 <__aeabi_dmul>
 800934c:	a368      	add	r3, pc, #416	@ (adr r3, 80094f0 <_dtoa_r+0x2b8>)
 800934e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009352:	f7f6 ffa3 	bl	800029c <__adddf3>
 8009356:	4604      	mov	r4, r0
 8009358:	4630      	mov	r0, r6
 800935a:	460d      	mov	r5, r1
 800935c:	f7f7 f8ea 	bl	8000534 <__aeabi_i2d>
 8009360:	a365      	add	r3, pc, #404	@ (adr r3, 80094f8 <_dtoa_r+0x2c0>)
 8009362:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009366:	f7f7 f94f 	bl	8000608 <__aeabi_dmul>
 800936a:	4602      	mov	r2, r0
 800936c:	460b      	mov	r3, r1
 800936e:	4620      	mov	r0, r4
 8009370:	4629      	mov	r1, r5
 8009372:	f7f6 ff93 	bl	800029c <__adddf3>
 8009376:	4604      	mov	r4, r0
 8009378:	460d      	mov	r5, r1
 800937a:	f7f7 fbf5 	bl	8000b68 <__aeabi_d2iz>
 800937e:	2200      	movs	r2, #0
 8009380:	4607      	mov	r7, r0
 8009382:	2300      	movs	r3, #0
 8009384:	4620      	mov	r0, r4
 8009386:	4629      	mov	r1, r5
 8009388:	f7f7 fbb0 	bl	8000aec <__aeabi_dcmplt>
 800938c:	b140      	cbz	r0, 80093a0 <_dtoa_r+0x168>
 800938e:	4638      	mov	r0, r7
 8009390:	f7f7 f8d0 	bl	8000534 <__aeabi_i2d>
 8009394:	4622      	mov	r2, r4
 8009396:	462b      	mov	r3, r5
 8009398:	f7f7 fb9e 	bl	8000ad8 <__aeabi_dcmpeq>
 800939c:	b900      	cbnz	r0, 80093a0 <_dtoa_r+0x168>
 800939e:	3f01      	subs	r7, #1
 80093a0:	2f16      	cmp	r7, #22
 80093a2:	d851      	bhi.n	8009448 <_dtoa_r+0x210>
 80093a4:	4b5b      	ldr	r3, [pc, #364]	@ (8009514 <_dtoa_r+0x2dc>)
 80093a6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80093aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093ae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80093b2:	f7f7 fb9b 	bl	8000aec <__aeabi_dcmplt>
 80093b6:	2800      	cmp	r0, #0
 80093b8:	d048      	beq.n	800944c <_dtoa_r+0x214>
 80093ba:	3f01      	subs	r7, #1
 80093bc:	2300      	movs	r3, #0
 80093be:	9312      	str	r3, [sp, #72]	@ 0x48
 80093c0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80093c2:	1b9b      	subs	r3, r3, r6
 80093c4:	1e5a      	subs	r2, r3, #1
 80093c6:	bf44      	itt	mi
 80093c8:	f1c3 0801 	rsbmi	r8, r3, #1
 80093cc:	2300      	movmi	r3, #0
 80093ce:	9208      	str	r2, [sp, #32]
 80093d0:	bf54      	ite	pl
 80093d2:	f04f 0800 	movpl.w	r8, #0
 80093d6:	9308      	strmi	r3, [sp, #32]
 80093d8:	2f00      	cmp	r7, #0
 80093da:	db39      	blt.n	8009450 <_dtoa_r+0x218>
 80093dc:	9b08      	ldr	r3, [sp, #32]
 80093de:	970f      	str	r7, [sp, #60]	@ 0x3c
 80093e0:	443b      	add	r3, r7
 80093e2:	9308      	str	r3, [sp, #32]
 80093e4:	2300      	movs	r3, #0
 80093e6:	930a      	str	r3, [sp, #40]	@ 0x28
 80093e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80093ea:	2b09      	cmp	r3, #9
 80093ec:	d864      	bhi.n	80094b8 <_dtoa_r+0x280>
 80093ee:	2b05      	cmp	r3, #5
 80093f0:	bfc4      	itt	gt
 80093f2:	3b04      	subgt	r3, #4
 80093f4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80093f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80093f8:	f1a3 0302 	sub.w	r3, r3, #2
 80093fc:	bfcc      	ite	gt
 80093fe:	2400      	movgt	r4, #0
 8009400:	2401      	movle	r4, #1
 8009402:	2b03      	cmp	r3, #3
 8009404:	d863      	bhi.n	80094ce <_dtoa_r+0x296>
 8009406:	e8df f003 	tbb	[pc, r3]
 800940a:	372a      	.short	0x372a
 800940c:	5535      	.short	0x5535
 800940e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8009412:	441e      	add	r6, r3
 8009414:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8009418:	2b20      	cmp	r3, #32
 800941a:	bfc1      	itttt	gt
 800941c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8009420:	409f      	lslgt	r7, r3
 8009422:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8009426:	fa24 f303 	lsrgt.w	r3, r4, r3
 800942a:	bfd6      	itet	le
 800942c:	f1c3 0320 	rsble	r3, r3, #32
 8009430:	ea47 0003 	orrgt.w	r0, r7, r3
 8009434:	fa04 f003 	lslle.w	r0, r4, r3
 8009438:	f7f7 f86c 	bl	8000514 <__aeabi_ui2d>
 800943c:	2201      	movs	r2, #1
 800943e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8009442:	3e01      	subs	r6, #1
 8009444:	9214      	str	r2, [sp, #80]	@ 0x50
 8009446:	e777      	b.n	8009338 <_dtoa_r+0x100>
 8009448:	2301      	movs	r3, #1
 800944a:	e7b8      	b.n	80093be <_dtoa_r+0x186>
 800944c:	9012      	str	r0, [sp, #72]	@ 0x48
 800944e:	e7b7      	b.n	80093c0 <_dtoa_r+0x188>
 8009450:	427b      	negs	r3, r7
 8009452:	930a      	str	r3, [sp, #40]	@ 0x28
 8009454:	2300      	movs	r3, #0
 8009456:	eba8 0807 	sub.w	r8, r8, r7
 800945a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800945c:	e7c4      	b.n	80093e8 <_dtoa_r+0x1b0>
 800945e:	2300      	movs	r3, #0
 8009460:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009462:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009464:	2b00      	cmp	r3, #0
 8009466:	dc35      	bgt.n	80094d4 <_dtoa_r+0x29c>
 8009468:	2301      	movs	r3, #1
 800946a:	9300      	str	r3, [sp, #0]
 800946c:	9307      	str	r3, [sp, #28]
 800946e:	461a      	mov	r2, r3
 8009470:	920e      	str	r2, [sp, #56]	@ 0x38
 8009472:	e00b      	b.n	800948c <_dtoa_r+0x254>
 8009474:	2301      	movs	r3, #1
 8009476:	e7f3      	b.n	8009460 <_dtoa_r+0x228>
 8009478:	2300      	movs	r3, #0
 800947a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800947c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800947e:	18fb      	adds	r3, r7, r3
 8009480:	9300      	str	r3, [sp, #0]
 8009482:	3301      	adds	r3, #1
 8009484:	2b01      	cmp	r3, #1
 8009486:	9307      	str	r3, [sp, #28]
 8009488:	bfb8      	it	lt
 800948a:	2301      	movlt	r3, #1
 800948c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8009490:	2100      	movs	r1, #0
 8009492:	2204      	movs	r2, #4
 8009494:	f102 0514 	add.w	r5, r2, #20
 8009498:	429d      	cmp	r5, r3
 800949a:	d91f      	bls.n	80094dc <_dtoa_r+0x2a4>
 800949c:	6041      	str	r1, [r0, #4]
 800949e:	4658      	mov	r0, fp
 80094a0:	f000 fd8e 	bl	8009fc0 <_Balloc>
 80094a4:	4682      	mov	sl, r0
 80094a6:	2800      	cmp	r0, #0
 80094a8:	d13c      	bne.n	8009524 <_dtoa_r+0x2ec>
 80094aa:	4b1b      	ldr	r3, [pc, #108]	@ (8009518 <_dtoa_r+0x2e0>)
 80094ac:	4602      	mov	r2, r0
 80094ae:	f240 11af 	movw	r1, #431	@ 0x1af
 80094b2:	e6d8      	b.n	8009266 <_dtoa_r+0x2e>
 80094b4:	2301      	movs	r3, #1
 80094b6:	e7e0      	b.n	800947a <_dtoa_r+0x242>
 80094b8:	2401      	movs	r4, #1
 80094ba:	2300      	movs	r3, #0
 80094bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80094be:	940b      	str	r4, [sp, #44]	@ 0x2c
 80094c0:	f04f 33ff 	mov.w	r3, #4294967295
 80094c4:	9300      	str	r3, [sp, #0]
 80094c6:	9307      	str	r3, [sp, #28]
 80094c8:	2200      	movs	r2, #0
 80094ca:	2312      	movs	r3, #18
 80094cc:	e7d0      	b.n	8009470 <_dtoa_r+0x238>
 80094ce:	2301      	movs	r3, #1
 80094d0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80094d2:	e7f5      	b.n	80094c0 <_dtoa_r+0x288>
 80094d4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80094d6:	9300      	str	r3, [sp, #0]
 80094d8:	9307      	str	r3, [sp, #28]
 80094da:	e7d7      	b.n	800948c <_dtoa_r+0x254>
 80094dc:	3101      	adds	r1, #1
 80094de:	0052      	lsls	r2, r2, #1
 80094e0:	e7d8      	b.n	8009494 <_dtoa_r+0x25c>
 80094e2:	bf00      	nop
 80094e4:	f3af 8000 	nop.w
 80094e8:	636f4361 	.word	0x636f4361
 80094ec:	3fd287a7 	.word	0x3fd287a7
 80094f0:	8b60c8b3 	.word	0x8b60c8b3
 80094f4:	3fc68a28 	.word	0x3fc68a28
 80094f8:	509f79fb 	.word	0x509f79fb
 80094fc:	3fd34413 	.word	0x3fd34413
 8009500:	0800c6b9 	.word	0x0800c6b9
 8009504:	0800c6d0 	.word	0x0800c6d0
 8009508:	7ff00000 	.word	0x7ff00000
 800950c:	0800c689 	.word	0x0800c689
 8009510:	3ff80000 	.word	0x3ff80000
 8009514:	0800c7c8 	.word	0x0800c7c8
 8009518:	0800c728 	.word	0x0800c728
 800951c:	0800c6b5 	.word	0x0800c6b5
 8009520:	0800c688 	.word	0x0800c688
 8009524:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009528:	6018      	str	r0, [r3, #0]
 800952a:	9b07      	ldr	r3, [sp, #28]
 800952c:	2b0e      	cmp	r3, #14
 800952e:	f200 80a4 	bhi.w	800967a <_dtoa_r+0x442>
 8009532:	2c00      	cmp	r4, #0
 8009534:	f000 80a1 	beq.w	800967a <_dtoa_r+0x442>
 8009538:	2f00      	cmp	r7, #0
 800953a:	dd33      	ble.n	80095a4 <_dtoa_r+0x36c>
 800953c:	4bad      	ldr	r3, [pc, #692]	@ (80097f4 <_dtoa_r+0x5bc>)
 800953e:	f007 020f 	and.w	r2, r7, #15
 8009542:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009546:	ed93 7b00 	vldr	d7, [r3]
 800954a:	05f8      	lsls	r0, r7, #23
 800954c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8009550:	ea4f 1427 	mov.w	r4, r7, asr #4
 8009554:	d516      	bpl.n	8009584 <_dtoa_r+0x34c>
 8009556:	4ba8      	ldr	r3, [pc, #672]	@ (80097f8 <_dtoa_r+0x5c0>)
 8009558:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800955c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009560:	f7f7 f97c 	bl	800085c <__aeabi_ddiv>
 8009564:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009568:	f004 040f 	and.w	r4, r4, #15
 800956c:	2603      	movs	r6, #3
 800956e:	4da2      	ldr	r5, [pc, #648]	@ (80097f8 <_dtoa_r+0x5c0>)
 8009570:	b954      	cbnz	r4, 8009588 <_dtoa_r+0x350>
 8009572:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009576:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800957a:	f7f7 f96f 	bl	800085c <__aeabi_ddiv>
 800957e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009582:	e028      	b.n	80095d6 <_dtoa_r+0x39e>
 8009584:	2602      	movs	r6, #2
 8009586:	e7f2      	b.n	800956e <_dtoa_r+0x336>
 8009588:	07e1      	lsls	r1, r4, #31
 800958a:	d508      	bpl.n	800959e <_dtoa_r+0x366>
 800958c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009590:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009594:	f7f7 f838 	bl	8000608 <__aeabi_dmul>
 8009598:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800959c:	3601      	adds	r6, #1
 800959e:	1064      	asrs	r4, r4, #1
 80095a0:	3508      	adds	r5, #8
 80095a2:	e7e5      	b.n	8009570 <_dtoa_r+0x338>
 80095a4:	f000 80d2 	beq.w	800974c <_dtoa_r+0x514>
 80095a8:	427c      	negs	r4, r7
 80095aa:	4b92      	ldr	r3, [pc, #584]	@ (80097f4 <_dtoa_r+0x5bc>)
 80095ac:	4d92      	ldr	r5, [pc, #584]	@ (80097f8 <_dtoa_r+0x5c0>)
 80095ae:	f004 020f 	and.w	r2, r4, #15
 80095b2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80095b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095ba:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80095be:	f7f7 f823 	bl	8000608 <__aeabi_dmul>
 80095c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80095c6:	1124      	asrs	r4, r4, #4
 80095c8:	2300      	movs	r3, #0
 80095ca:	2602      	movs	r6, #2
 80095cc:	2c00      	cmp	r4, #0
 80095ce:	f040 80b2 	bne.w	8009736 <_dtoa_r+0x4fe>
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d1d3      	bne.n	800957e <_dtoa_r+0x346>
 80095d6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80095d8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80095dc:	2b00      	cmp	r3, #0
 80095de:	f000 80b7 	beq.w	8009750 <_dtoa_r+0x518>
 80095e2:	4b86      	ldr	r3, [pc, #536]	@ (80097fc <_dtoa_r+0x5c4>)
 80095e4:	2200      	movs	r2, #0
 80095e6:	4620      	mov	r0, r4
 80095e8:	4629      	mov	r1, r5
 80095ea:	f7f7 fa7f 	bl	8000aec <__aeabi_dcmplt>
 80095ee:	2800      	cmp	r0, #0
 80095f0:	f000 80ae 	beq.w	8009750 <_dtoa_r+0x518>
 80095f4:	9b07      	ldr	r3, [sp, #28]
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	f000 80aa 	beq.w	8009750 <_dtoa_r+0x518>
 80095fc:	9b00      	ldr	r3, [sp, #0]
 80095fe:	2b00      	cmp	r3, #0
 8009600:	dd37      	ble.n	8009672 <_dtoa_r+0x43a>
 8009602:	1e7b      	subs	r3, r7, #1
 8009604:	9304      	str	r3, [sp, #16]
 8009606:	4620      	mov	r0, r4
 8009608:	4b7d      	ldr	r3, [pc, #500]	@ (8009800 <_dtoa_r+0x5c8>)
 800960a:	2200      	movs	r2, #0
 800960c:	4629      	mov	r1, r5
 800960e:	f7f6 fffb 	bl	8000608 <__aeabi_dmul>
 8009612:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009616:	9c00      	ldr	r4, [sp, #0]
 8009618:	3601      	adds	r6, #1
 800961a:	4630      	mov	r0, r6
 800961c:	f7f6 ff8a 	bl	8000534 <__aeabi_i2d>
 8009620:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009624:	f7f6 fff0 	bl	8000608 <__aeabi_dmul>
 8009628:	4b76      	ldr	r3, [pc, #472]	@ (8009804 <_dtoa_r+0x5cc>)
 800962a:	2200      	movs	r2, #0
 800962c:	f7f6 fe36 	bl	800029c <__adddf3>
 8009630:	4605      	mov	r5, r0
 8009632:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8009636:	2c00      	cmp	r4, #0
 8009638:	f040 808d 	bne.w	8009756 <_dtoa_r+0x51e>
 800963c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009640:	4b71      	ldr	r3, [pc, #452]	@ (8009808 <_dtoa_r+0x5d0>)
 8009642:	2200      	movs	r2, #0
 8009644:	f7f6 fe28 	bl	8000298 <__aeabi_dsub>
 8009648:	4602      	mov	r2, r0
 800964a:	460b      	mov	r3, r1
 800964c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009650:	462a      	mov	r2, r5
 8009652:	4633      	mov	r3, r6
 8009654:	f7f7 fa68 	bl	8000b28 <__aeabi_dcmpgt>
 8009658:	2800      	cmp	r0, #0
 800965a:	f040 828b 	bne.w	8009b74 <_dtoa_r+0x93c>
 800965e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009662:	462a      	mov	r2, r5
 8009664:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8009668:	f7f7 fa40 	bl	8000aec <__aeabi_dcmplt>
 800966c:	2800      	cmp	r0, #0
 800966e:	f040 8128 	bne.w	80098c2 <_dtoa_r+0x68a>
 8009672:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8009676:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800967a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800967c:	2b00      	cmp	r3, #0
 800967e:	f2c0 815a 	blt.w	8009936 <_dtoa_r+0x6fe>
 8009682:	2f0e      	cmp	r7, #14
 8009684:	f300 8157 	bgt.w	8009936 <_dtoa_r+0x6fe>
 8009688:	4b5a      	ldr	r3, [pc, #360]	@ (80097f4 <_dtoa_r+0x5bc>)
 800968a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800968e:	ed93 7b00 	vldr	d7, [r3]
 8009692:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009694:	2b00      	cmp	r3, #0
 8009696:	ed8d 7b00 	vstr	d7, [sp]
 800969a:	da03      	bge.n	80096a4 <_dtoa_r+0x46c>
 800969c:	9b07      	ldr	r3, [sp, #28]
 800969e:	2b00      	cmp	r3, #0
 80096a0:	f340 8101 	ble.w	80098a6 <_dtoa_r+0x66e>
 80096a4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80096a8:	4656      	mov	r6, sl
 80096aa:	e9dd 2300 	ldrd	r2, r3, [sp]
 80096ae:	4620      	mov	r0, r4
 80096b0:	4629      	mov	r1, r5
 80096b2:	f7f7 f8d3 	bl	800085c <__aeabi_ddiv>
 80096b6:	f7f7 fa57 	bl	8000b68 <__aeabi_d2iz>
 80096ba:	4680      	mov	r8, r0
 80096bc:	f7f6 ff3a 	bl	8000534 <__aeabi_i2d>
 80096c0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80096c4:	f7f6 ffa0 	bl	8000608 <__aeabi_dmul>
 80096c8:	4602      	mov	r2, r0
 80096ca:	460b      	mov	r3, r1
 80096cc:	4620      	mov	r0, r4
 80096ce:	4629      	mov	r1, r5
 80096d0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80096d4:	f7f6 fde0 	bl	8000298 <__aeabi_dsub>
 80096d8:	f806 4b01 	strb.w	r4, [r6], #1
 80096dc:	9d07      	ldr	r5, [sp, #28]
 80096de:	eba6 040a 	sub.w	r4, r6, sl
 80096e2:	42a5      	cmp	r5, r4
 80096e4:	4602      	mov	r2, r0
 80096e6:	460b      	mov	r3, r1
 80096e8:	f040 8117 	bne.w	800991a <_dtoa_r+0x6e2>
 80096ec:	f7f6 fdd6 	bl	800029c <__adddf3>
 80096f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80096f4:	4604      	mov	r4, r0
 80096f6:	460d      	mov	r5, r1
 80096f8:	f7f7 fa16 	bl	8000b28 <__aeabi_dcmpgt>
 80096fc:	2800      	cmp	r0, #0
 80096fe:	f040 80f9 	bne.w	80098f4 <_dtoa_r+0x6bc>
 8009702:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009706:	4620      	mov	r0, r4
 8009708:	4629      	mov	r1, r5
 800970a:	f7f7 f9e5 	bl	8000ad8 <__aeabi_dcmpeq>
 800970e:	b118      	cbz	r0, 8009718 <_dtoa_r+0x4e0>
 8009710:	f018 0f01 	tst.w	r8, #1
 8009714:	f040 80ee 	bne.w	80098f4 <_dtoa_r+0x6bc>
 8009718:	4649      	mov	r1, r9
 800971a:	4658      	mov	r0, fp
 800971c:	f000 fc90 	bl	800a040 <_Bfree>
 8009720:	2300      	movs	r3, #0
 8009722:	7033      	strb	r3, [r6, #0]
 8009724:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009726:	3701      	adds	r7, #1
 8009728:	601f      	str	r7, [r3, #0]
 800972a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800972c:	2b00      	cmp	r3, #0
 800972e:	f000 831d 	beq.w	8009d6c <_dtoa_r+0xb34>
 8009732:	601e      	str	r6, [r3, #0]
 8009734:	e31a      	b.n	8009d6c <_dtoa_r+0xb34>
 8009736:	07e2      	lsls	r2, r4, #31
 8009738:	d505      	bpl.n	8009746 <_dtoa_r+0x50e>
 800973a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800973e:	f7f6 ff63 	bl	8000608 <__aeabi_dmul>
 8009742:	3601      	adds	r6, #1
 8009744:	2301      	movs	r3, #1
 8009746:	1064      	asrs	r4, r4, #1
 8009748:	3508      	adds	r5, #8
 800974a:	e73f      	b.n	80095cc <_dtoa_r+0x394>
 800974c:	2602      	movs	r6, #2
 800974e:	e742      	b.n	80095d6 <_dtoa_r+0x39e>
 8009750:	9c07      	ldr	r4, [sp, #28]
 8009752:	9704      	str	r7, [sp, #16]
 8009754:	e761      	b.n	800961a <_dtoa_r+0x3e2>
 8009756:	4b27      	ldr	r3, [pc, #156]	@ (80097f4 <_dtoa_r+0x5bc>)
 8009758:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800975a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800975e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009762:	4454      	add	r4, sl
 8009764:	2900      	cmp	r1, #0
 8009766:	d053      	beq.n	8009810 <_dtoa_r+0x5d8>
 8009768:	4928      	ldr	r1, [pc, #160]	@ (800980c <_dtoa_r+0x5d4>)
 800976a:	2000      	movs	r0, #0
 800976c:	f7f7 f876 	bl	800085c <__aeabi_ddiv>
 8009770:	4633      	mov	r3, r6
 8009772:	462a      	mov	r2, r5
 8009774:	f7f6 fd90 	bl	8000298 <__aeabi_dsub>
 8009778:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800977c:	4656      	mov	r6, sl
 800977e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009782:	f7f7 f9f1 	bl	8000b68 <__aeabi_d2iz>
 8009786:	4605      	mov	r5, r0
 8009788:	f7f6 fed4 	bl	8000534 <__aeabi_i2d>
 800978c:	4602      	mov	r2, r0
 800978e:	460b      	mov	r3, r1
 8009790:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009794:	f7f6 fd80 	bl	8000298 <__aeabi_dsub>
 8009798:	3530      	adds	r5, #48	@ 0x30
 800979a:	4602      	mov	r2, r0
 800979c:	460b      	mov	r3, r1
 800979e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80097a2:	f806 5b01 	strb.w	r5, [r6], #1
 80097a6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80097aa:	f7f7 f99f 	bl	8000aec <__aeabi_dcmplt>
 80097ae:	2800      	cmp	r0, #0
 80097b0:	d171      	bne.n	8009896 <_dtoa_r+0x65e>
 80097b2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80097b6:	4911      	ldr	r1, [pc, #68]	@ (80097fc <_dtoa_r+0x5c4>)
 80097b8:	2000      	movs	r0, #0
 80097ba:	f7f6 fd6d 	bl	8000298 <__aeabi_dsub>
 80097be:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80097c2:	f7f7 f993 	bl	8000aec <__aeabi_dcmplt>
 80097c6:	2800      	cmp	r0, #0
 80097c8:	f040 8095 	bne.w	80098f6 <_dtoa_r+0x6be>
 80097cc:	42a6      	cmp	r6, r4
 80097ce:	f43f af50 	beq.w	8009672 <_dtoa_r+0x43a>
 80097d2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80097d6:	4b0a      	ldr	r3, [pc, #40]	@ (8009800 <_dtoa_r+0x5c8>)
 80097d8:	2200      	movs	r2, #0
 80097da:	f7f6 ff15 	bl	8000608 <__aeabi_dmul>
 80097de:	4b08      	ldr	r3, [pc, #32]	@ (8009800 <_dtoa_r+0x5c8>)
 80097e0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80097e4:	2200      	movs	r2, #0
 80097e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80097ea:	f7f6 ff0d 	bl	8000608 <__aeabi_dmul>
 80097ee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80097f2:	e7c4      	b.n	800977e <_dtoa_r+0x546>
 80097f4:	0800c7c8 	.word	0x0800c7c8
 80097f8:	0800c7a0 	.word	0x0800c7a0
 80097fc:	3ff00000 	.word	0x3ff00000
 8009800:	40240000 	.word	0x40240000
 8009804:	401c0000 	.word	0x401c0000
 8009808:	40140000 	.word	0x40140000
 800980c:	3fe00000 	.word	0x3fe00000
 8009810:	4631      	mov	r1, r6
 8009812:	4628      	mov	r0, r5
 8009814:	f7f6 fef8 	bl	8000608 <__aeabi_dmul>
 8009818:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800981c:	9415      	str	r4, [sp, #84]	@ 0x54
 800981e:	4656      	mov	r6, sl
 8009820:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009824:	f7f7 f9a0 	bl	8000b68 <__aeabi_d2iz>
 8009828:	4605      	mov	r5, r0
 800982a:	f7f6 fe83 	bl	8000534 <__aeabi_i2d>
 800982e:	4602      	mov	r2, r0
 8009830:	460b      	mov	r3, r1
 8009832:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009836:	f7f6 fd2f 	bl	8000298 <__aeabi_dsub>
 800983a:	3530      	adds	r5, #48	@ 0x30
 800983c:	f806 5b01 	strb.w	r5, [r6], #1
 8009840:	4602      	mov	r2, r0
 8009842:	460b      	mov	r3, r1
 8009844:	42a6      	cmp	r6, r4
 8009846:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800984a:	f04f 0200 	mov.w	r2, #0
 800984e:	d124      	bne.n	800989a <_dtoa_r+0x662>
 8009850:	4bac      	ldr	r3, [pc, #688]	@ (8009b04 <_dtoa_r+0x8cc>)
 8009852:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009856:	f7f6 fd21 	bl	800029c <__adddf3>
 800985a:	4602      	mov	r2, r0
 800985c:	460b      	mov	r3, r1
 800985e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009862:	f7f7 f961 	bl	8000b28 <__aeabi_dcmpgt>
 8009866:	2800      	cmp	r0, #0
 8009868:	d145      	bne.n	80098f6 <_dtoa_r+0x6be>
 800986a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800986e:	49a5      	ldr	r1, [pc, #660]	@ (8009b04 <_dtoa_r+0x8cc>)
 8009870:	2000      	movs	r0, #0
 8009872:	f7f6 fd11 	bl	8000298 <__aeabi_dsub>
 8009876:	4602      	mov	r2, r0
 8009878:	460b      	mov	r3, r1
 800987a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800987e:	f7f7 f935 	bl	8000aec <__aeabi_dcmplt>
 8009882:	2800      	cmp	r0, #0
 8009884:	f43f aef5 	beq.w	8009672 <_dtoa_r+0x43a>
 8009888:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800988a:	1e73      	subs	r3, r6, #1
 800988c:	9315      	str	r3, [sp, #84]	@ 0x54
 800988e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009892:	2b30      	cmp	r3, #48	@ 0x30
 8009894:	d0f8      	beq.n	8009888 <_dtoa_r+0x650>
 8009896:	9f04      	ldr	r7, [sp, #16]
 8009898:	e73e      	b.n	8009718 <_dtoa_r+0x4e0>
 800989a:	4b9b      	ldr	r3, [pc, #620]	@ (8009b08 <_dtoa_r+0x8d0>)
 800989c:	f7f6 feb4 	bl	8000608 <__aeabi_dmul>
 80098a0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80098a4:	e7bc      	b.n	8009820 <_dtoa_r+0x5e8>
 80098a6:	d10c      	bne.n	80098c2 <_dtoa_r+0x68a>
 80098a8:	4b98      	ldr	r3, [pc, #608]	@ (8009b0c <_dtoa_r+0x8d4>)
 80098aa:	2200      	movs	r2, #0
 80098ac:	e9dd 0100 	ldrd	r0, r1, [sp]
 80098b0:	f7f6 feaa 	bl	8000608 <__aeabi_dmul>
 80098b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80098b8:	f7f7 f92c 	bl	8000b14 <__aeabi_dcmpge>
 80098bc:	2800      	cmp	r0, #0
 80098be:	f000 8157 	beq.w	8009b70 <_dtoa_r+0x938>
 80098c2:	2400      	movs	r4, #0
 80098c4:	4625      	mov	r5, r4
 80098c6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80098c8:	43db      	mvns	r3, r3
 80098ca:	9304      	str	r3, [sp, #16]
 80098cc:	4656      	mov	r6, sl
 80098ce:	2700      	movs	r7, #0
 80098d0:	4621      	mov	r1, r4
 80098d2:	4658      	mov	r0, fp
 80098d4:	f000 fbb4 	bl	800a040 <_Bfree>
 80098d8:	2d00      	cmp	r5, #0
 80098da:	d0dc      	beq.n	8009896 <_dtoa_r+0x65e>
 80098dc:	b12f      	cbz	r7, 80098ea <_dtoa_r+0x6b2>
 80098de:	42af      	cmp	r7, r5
 80098e0:	d003      	beq.n	80098ea <_dtoa_r+0x6b2>
 80098e2:	4639      	mov	r1, r7
 80098e4:	4658      	mov	r0, fp
 80098e6:	f000 fbab 	bl	800a040 <_Bfree>
 80098ea:	4629      	mov	r1, r5
 80098ec:	4658      	mov	r0, fp
 80098ee:	f000 fba7 	bl	800a040 <_Bfree>
 80098f2:	e7d0      	b.n	8009896 <_dtoa_r+0x65e>
 80098f4:	9704      	str	r7, [sp, #16]
 80098f6:	4633      	mov	r3, r6
 80098f8:	461e      	mov	r6, r3
 80098fa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80098fe:	2a39      	cmp	r2, #57	@ 0x39
 8009900:	d107      	bne.n	8009912 <_dtoa_r+0x6da>
 8009902:	459a      	cmp	sl, r3
 8009904:	d1f8      	bne.n	80098f8 <_dtoa_r+0x6c0>
 8009906:	9a04      	ldr	r2, [sp, #16]
 8009908:	3201      	adds	r2, #1
 800990a:	9204      	str	r2, [sp, #16]
 800990c:	2230      	movs	r2, #48	@ 0x30
 800990e:	f88a 2000 	strb.w	r2, [sl]
 8009912:	781a      	ldrb	r2, [r3, #0]
 8009914:	3201      	adds	r2, #1
 8009916:	701a      	strb	r2, [r3, #0]
 8009918:	e7bd      	b.n	8009896 <_dtoa_r+0x65e>
 800991a:	4b7b      	ldr	r3, [pc, #492]	@ (8009b08 <_dtoa_r+0x8d0>)
 800991c:	2200      	movs	r2, #0
 800991e:	f7f6 fe73 	bl	8000608 <__aeabi_dmul>
 8009922:	2200      	movs	r2, #0
 8009924:	2300      	movs	r3, #0
 8009926:	4604      	mov	r4, r0
 8009928:	460d      	mov	r5, r1
 800992a:	f7f7 f8d5 	bl	8000ad8 <__aeabi_dcmpeq>
 800992e:	2800      	cmp	r0, #0
 8009930:	f43f aebb 	beq.w	80096aa <_dtoa_r+0x472>
 8009934:	e6f0      	b.n	8009718 <_dtoa_r+0x4e0>
 8009936:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009938:	2a00      	cmp	r2, #0
 800993a:	f000 80db 	beq.w	8009af4 <_dtoa_r+0x8bc>
 800993e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009940:	2a01      	cmp	r2, #1
 8009942:	f300 80bf 	bgt.w	8009ac4 <_dtoa_r+0x88c>
 8009946:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8009948:	2a00      	cmp	r2, #0
 800994a:	f000 80b7 	beq.w	8009abc <_dtoa_r+0x884>
 800994e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8009952:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009954:	4646      	mov	r6, r8
 8009956:	9a08      	ldr	r2, [sp, #32]
 8009958:	2101      	movs	r1, #1
 800995a:	441a      	add	r2, r3
 800995c:	4658      	mov	r0, fp
 800995e:	4498      	add	r8, r3
 8009960:	9208      	str	r2, [sp, #32]
 8009962:	f000 fc21 	bl	800a1a8 <__i2b>
 8009966:	4605      	mov	r5, r0
 8009968:	b15e      	cbz	r6, 8009982 <_dtoa_r+0x74a>
 800996a:	9b08      	ldr	r3, [sp, #32]
 800996c:	2b00      	cmp	r3, #0
 800996e:	dd08      	ble.n	8009982 <_dtoa_r+0x74a>
 8009970:	42b3      	cmp	r3, r6
 8009972:	9a08      	ldr	r2, [sp, #32]
 8009974:	bfa8      	it	ge
 8009976:	4633      	movge	r3, r6
 8009978:	eba8 0803 	sub.w	r8, r8, r3
 800997c:	1af6      	subs	r6, r6, r3
 800997e:	1ad3      	subs	r3, r2, r3
 8009980:	9308      	str	r3, [sp, #32]
 8009982:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009984:	b1f3      	cbz	r3, 80099c4 <_dtoa_r+0x78c>
 8009986:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009988:	2b00      	cmp	r3, #0
 800998a:	f000 80b7 	beq.w	8009afc <_dtoa_r+0x8c4>
 800998e:	b18c      	cbz	r4, 80099b4 <_dtoa_r+0x77c>
 8009990:	4629      	mov	r1, r5
 8009992:	4622      	mov	r2, r4
 8009994:	4658      	mov	r0, fp
 8009996:	f000 fcc7 	bl	800a328 <__pow5mult>
 800999a:	464a      	mov	r2, r9
 800999c:	4601      	mov	r1, r0
 800999e:	4605      	mov	r5, r0
 80099a0:	4658      	mov	r0, fp
 80099a2:	f000 fc17 	bl	800a1d4 <__multiply>
 80099a6:	4649      	mov	r1, r9
 80099a8:	9004      	str	r0, [sp, #16]
 80099aa:	4658      	mov	r0, fp
 80099ac:	f000 fb48 	bl	800a040 <_Bfree>
 80099b0:	9b04      	ldr	r3, [sp, #16]
 80099b2:	4699      	mov	r9, r3
 80099b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80099b6:	1b1a      	subs	r2, r3, r4
 80099b8:	d004      	beq.n	80099c4 <_dtoa_r+0x78c>
 80099ba:	4649      	mov	r1, r9
 80099bc:	4658      	mov	r0, fp
 80099be:	f000 fcb3 	bl	800a328 <__pow5mult>
 80099c2:	4681      	mov	r9, r0
 80099c4:	2101      	movs	r1, #1
 80099c6:	4658      	mov	r0, fp
 80099c8:	f000 fbee 	bl	800a1a8 <__i2b>
 80099cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80099ce:	4604      	mov	r4, r0
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	f000 81cf 	beq.w	8009d74 <_dtoa_r+0xb3c>
 80099d6:	461a      	mov	r2, r3
 80099d8:	4601      	mov	r1, r0
 80099da:	4658      	mov	r0, fp
 80099dc:	f000 fca4 	bl	800a328 <__pow5mult>
 80099e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80099e2:	2b01      	cmp	r3, #1
 80099e4:	4604      	mov	r4, r0
 80099e6:	f300 8095 	bgt.w	8009b14 <_dtoa_r+0x8dc>
 80099ea:	9b02      	ldr	r3, [sp, #8]
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	f040 8087 	bne.w	8009b00 <_dtoa_r+0x8c8>
 80099f2:	9b03      	ldr	r3, [sp, #12]
 80099f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	f040 8089 	bne.w	8009b10 <_dtoa_r+0x8d8>
 80099fe:	9b03      	ldr	r3, [sp, #12]
 8009a00:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009a04:	0d1b      	lsrs	r3, r3, #20
 8009a06:	051b      	lsls	r3, r3, #20
 8009a08:	b12b      	cbz	r3, 8009a16 <_dtoa_r+0x7de>
 8009a0a:	9b08      	ldr	r3, [sp, #32]
 8009a0c:	3301      	adds	r3, #1
 8009a0e:	9308      	str	r3, [sp, #32]
 8009a10:	f108 0801 	add.w	r8, r8, #1
 8009a14:	2301      	movs	r3, #1
 8009a16:	930a      	str	r3, [sp, #40]	@ 0x28
 8009a18:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	f000 81b0 	beq.w	8009d80 <_dtoa_r+0xb48>
 8009a20:	6923      	ldr	r3, [r4, #16]
 8009a22:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009a26:	6918      	ldr	r0, [r3, #16]
 8009a28:	f000 fb72 	bl	800a110 <__hi0bits>
 8009a2c:	f1c0 0020 	rsb	r0, r0, #32
 8009a30:	9b08      	ldr	r3, [sp, #32]
 8009a32:	4418      	add	r0, r3
 8009a34:	f010 001f 	ands.w	r0, r0, #31
 8009a38:	d077      	beq.n	8009b2a <_dtoa_r+0x8f2>
 8009a3a:	f1c0 0320 	rsb	r3, r0, #32
 8009a3e:	2b04      	cmp	r3, #4
 8009a40:	dd6b      	ble.n	8009b1a <_dtoa_r+0x8e2>
 8009a42:	9b08      	ldr	r3, [sp, #32]
 8009a44:	f1c0 001c 	rsb	r0, r0, #28
 8009a48:	4403      	add	r3, r0
 8009a4a:	4480      	add	r8, r0
 8009a4c:	4406      	add	r6, r0
 8009a4e:	9308      	str	r3, [sp, #32]
 8009a50:	f1b8 0f00 	cmp.w	r8, #0
 8009a54:	dd05      	ble.n	8009a62 <_dtoa_r+0x82a>
 8009a56:	4649      	mov	r1, r9
 8009a58:	4642      	mov	r2, r8
 8009a5a:	4658      	mov	r0, fp
 8009a5c:	f000 fcbe 	bl	800a3dc <__lshift>
 8009a60:	4681      	mov	r9, r0
 8009a62:	9b08      	ldr	r3, [sp, #32]
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	dd05      	ble.n	8009a74 <_dtoa_r+0x83c>
 8009a68:	4621      	mov	r1, r4
 8009a6a:	461a      	mov	r2, r3
 8009a6c:	4658      	mov	r0, fp
 8009a6e:	f000 fcb5 	bl	800a3dc <__lshift>
 8009a72:	4604      	mov	r4, r0
 8009a74:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d059      	beq.n	8009b2e <_dtoa_r+0x8f6>
 8009a7a:	4621      	mov	r1, r4
 8009a7c:	4648      	mov	r0, r9
 8009a7e:	f000 fd19 	bl	800a4b4 <__mcmp>
 8009a82:	2800      	cmp	r0, #0
 8009a84:	da53      	bge.n	8009b2e <_dtoa_r+0x8f6>
 8009a86:	1e7b      	subs	r3, r7, #1
 8009a88:	9304      	str	r3, [sp, #16]
 8009a8a:	4649      	mov	r1, r9
 8009a8c:	2300      	movs	r3, #0
 8009a8e:	220a      	movs	r2, #10
 8009a90:	4658      	mov	r0, fp
 8009a92:	f000 faf7 	bl	800a084 <__multadd>
 8009a96:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009a98:	4681      	mov	r9, r0
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	f000 8172 	beq.w	8009d84 <_dtoa_r+0xb4c>
 8009aa0:	2300      	movs	r3, #0
 8009aa2:	4629      	mov	r1, r5
 8009aa4:	220a      	movs	r2, #10
 8009aa6:	4658      	mov	r0, fp
 8009aa8:	f000 faec 	bl	800a084 <__multadd>
 8009aac:	9b00      	ldr	r3, [sp, #0]
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	4605      	mov	r5, r0
 8009ab2:	dc67      	bgt.n	8009b84 <_dtoa_r+0x94c>
 8009ab4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ab6:	2b02      	cmp	r3, #2
 8009ab8:	dc41      	bgt.n	8009b3e <_dtoa_r+0x906>
 8009aba:	e063      	b.n	8009b84 <_dtoa_r+0x94c>
 8009abc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009abe:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8009ac2:	e746      	b.n	8009952 <_dtoa_r+0x71a>
 8009ac4:	9b07      	ldr	r3, [sp, #28]
 8009ac6:	1e5c      	subs	r4, r3, #1
 8009ac8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009aca:	42a3      	cmp	r3, r4
 8009acc:	bfbf      	itttt	lt
 8009ace:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8009ad0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8009ad2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8009ad4:	1ae3      	sublt	r3, r4, r3
 8009ad6:	bfb4      	ite	lt
 8009ad8:	18d2      	addlt	r2, r2, r3
 8009ada:	1b1c      	subge	r4, r3, r4
 8009adc:	9b07      	ldr	r3, [sp, #28]
 8009ade:	bfbc      	itt	lt
 8009ae0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8009ae2:	2400      	movlt	r4, #0
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	bfb5      	itete	lt
 8009ae8:	eba8 0603 	sublt.w	r6, r8, r3
 8009aec:	9b07      	ldrge	r3, [sp, #28]
 8009aee:	2300      	movlt	r3, #0
 8009af0:	4646      	movge	r6, r8
 8009af2:	e730      	b.n	8009956 <_dtoa_r+0x71e>
 8009af4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009af6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8009af8:	4646      	mov	r6, r8
 8009afa:	e735      	b.n	8009968 <_dtoa_r+0x730>
 8009afc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009afe:	e75c      	b.n	80099ba <_dtoa_r+0x782>
 8009b00:	2300      	movs	r3, #0
 8009b02:	e788      	b.n	8009a16 <_dtoa_r+0x7de>
 8009b04:	3fe00000 	.word	0x3fe00000
 8009b08:	40240000 	.word	0x40240000
 8009b0c:	40140000 	.word	0x40140000
 8009b10:	9b02      	ldr	r3, [sp, #8]
 8009b12:	e780      	b.n	8009a16 <_dtoa_r+0x7de>
 8009b14:	2300      	movs	r3, #0
 8009b16:	930a      	str	r3, [sp, #40]	@ 0x28
 8009b18:	e782      	b.n	8009a20 <_dtoa_r+0x7e8>
 8009b1a:	d099      	beq.n	8009a50 <_dtoa_r+0x818>
 8009b1c:	9a08      	ldr	r2, [sp, #32]
 8009b1e:	331c      	adds	r3, #28
 8009b20:	441a      	add	r2, r3
 8009b22:	4498      	add	r8, r3
 8009b24:	441e      	add	r6, r3
 8009b26:	9208      	str	r2, [sp, #32]
 8009b28:	e792      	b.n	8009a50 <_dtoa_r+0x818>
 8009b2a:	4603      	mov	r3, r0
 8009b2c:	e7f6      	b.n	8009b1c <_dtoa_r+0x8e4>
 8009b2e:	9b07      	ldr	r3, [sp, #28]
 8009b30:	9704      	str	r7, [sp, #16]
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	dc20      	bgt.n	8009b78 <_dtoa_r+0x940>
 8009b36:	9300      	str	r3, [sp, #0]
 8009b38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b3a:	2b02      	cmp	r3, #2
 8009b3c:	dd1e      	ble.n	8009b7c <_dtoa_r+0x944>
 8009b3e:	9b00      	ldr	r3, [sp, #0]
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	f47f aec0 	bne.w	80098c6 <_dtoa_r+0x68e>
 8009b46:	4621      	mov	r1, r4
 8009b48:	2205      	movs	r2, #5
 8009b4a:	4658      	mov	r0, fp
 8009b4c:	f000 fa9a 	bl	800a084 <__multadd>
 8009b50:	4601      	mov	r1, r0
 8009b52:	4604      	mov	r4, r0
 8009b54:	4648      	mov	r0, r9
 8009b56:	f000 fcad 	bl	800a4b4 <__mcmp>
 8009b5a:	2800      	cmp	r0, #0
 8009b5c:	f77f aeb3 	ble.w	80098c6 <_dtoa_r+0x68e>
 8009b60:	4656      	mov	r6, sl
 8009b62:	2331      	movs	r3, #49	@ 0x31
 8009b64:	f806 3b01 	strb.w	r3, [r6], #1
 8009b68:	9b04      	ldr	r3, [sp, #16]
 8009b6a:	3301      	adds	r3, #1
 8009b6c:	9304      	str	r3, [sp, #16]
 8009b6e:	e6ae      	b.n	80098ce <_dtoa_r+0x696>
 8009b70:	9c07      	ldr	r4, [sp, #28]
 8009b72:	9704      	str	r7, [sp, #16]
 8009b74:	4625      	mov	r5, r4
 8009b76:	e7f3      	b.n	8009b60 <_dtoa_r+0x928>
 8009b78:	9b07      	ldr	r3, [sp, #28]
 8009b7a:	9300      	str	r3, [sp, #0]
 8009b7c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	f000 8104 	beq.w	8009d8c <_dtoa_r+0xb54>
 8009b84:	2e00      	cmp	r6, #0
 8009b86:	dd05      	ble.n	8009b94 <_dtoa_r+0x95c>
 8009b88:	4629      	mov	r1, r5
 8009b8a:	4632      	mov	r2, r6
 8009b8c:	4658      	mov	r0, fp
 8009b8e:	f000 fc25 	bl	800a3dc <__lshift>
 8009b92:	4605      	mov	r5, r0
 8009b94:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d05a      	beq.n	8009c50 <_dtoa_r+0xa18>
 8009b9a:	6869      	ldr	r1, [r5, #4]
 8009b9c:	4658      	mov	r0, fp
 8009b9e:	f000 fa0f 	bl	8009fc0 <_Balloc>
 8009ba2:	4606      	mov	r6, r0
 8009ba4:	b928      	cbnz	r0, 8009bb2 <_dtoa_r+0x97a>
 8009ba6:	4b84      	ldr	r3, [pc, #528]	@ (8009db8 <_dtoa_r+0xb80>)
 8009ba8:	4602      	mov	r2, r0
 8009baa:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8009bae:	f7ff bb5a 	b.w	8009266 <_dtoa_r+0x2e>
 8009bb2:	692a      	ldr	r2, [r5, #16]
 8009bb4:	3202      	adds	r2, #2
 8009bb6:	0092      	lsls	r2, r2, #2
 8009bb8:	f105 010c 	add.w	r1, r5, #12
 8009bbc:	300c      	adds	r0, #12
 8009bbe:	f000 ffaf 	bl	800ab20 <memcpy>
 8009bc2:	2201      	movs	r2, #1
 8009bc4:	4631      	mov	r1, r6
 8009bc6:	4658      	mov	r0, fp
 8009bc8:	f000 fc08 	bl	800a3dc <__lshift>
 8009bcc:	f10a 0301 	add.w	r3, sl, #1
 8009bd0:	9307      	str	r3, [sp, #28]
 8009bd2:	9b00      	ldr	r3, [sp, #0]
 8009bd4:	4453      	add	r3, sl
 8009bd6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009bd8:	9b02      	ldr	r3, [sp, #8]
 8009bda:	f003 0301 	and.w	r3, r3, #1
 8009bde:	462f      	mov	r7, r5
 8009be0:	930a      	str	r3, [sp, #40]	@ 0x28
 8009be2:	4605      	mov	r5, r0
 8009be4:	9b07      	ldr	r3, [sp, #28]
 8009be6:	4621      	mov	r1, r4
 8009be8:	3b01      	subs	r3, #1
 8009bea:	4648      	mov	r0, r9
 8009bec:	9300      	str	r3, [sp, #0]
 8009bee:	f7ff fa9a 	bl	8009126 <quorem>
 8009bf2:	4639      	mov	r1, r7
 8009bf4:	9002      	str	r0, [sp, #8]
 8009bf6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009bfa:	4648      	mov	r0, r9
 8009bfc:	f000 fc5a 	bl	800a4b4 <__mcmp>
 8009c00:	462a      	mov	r2, r5
 8009c02:	9008      	str	r0, [sp, #32]
 8009c04:	4621      	mov	r1, r4
 8009c06:	4658      	mov	r0, fp
 8009c08:	f000 fc70 	bl	800a4ec <__mdiff>
 8009c0c:	68c2      	ldr	r2, [r0, #12]
 8009c0e:	4606      	mov	r6, r0
 8009c10:	bb02      	cbnz	r2, 8009c54 <_dtoa_r+0xa1c>
 8009c12:	4601      	mov	r1, r0
 8009c14:	4648      	mov	r0, r9
 8009c16:	f000 fc4d 	bl	800a4b4 <__mcmp>
 8009c1a:	4602      	mov	r2, r0
 8009c1c:	4631      	mov	r1, r6
 8009c1e:	4658      	mov	r0, fp
 8009c20:	920e      	str	r2, [sp, #56]	@ 0x38
 8009c22:	f000 fa0d 	bl	800a040 <_Bfree>
 8009c26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c28:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009c2a:	9e07      	ldr	r6, [sp, #28]
 8009c2c:	ea43 0102 	orr.w	r1, r3, r2
 8009c30:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009c32:	4319      	orrs	r1, r3
 8009c34:	d110      	bne.n	8009c58 <_dtoa_r+0xa20>
 8009c36:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009c3a:	d029      	beq.n	8009c90 <_dtoa_r+0xa58>
 8009c3c:	9b08      	ldr	r3, [sp, #32]
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	dd02      	ble.n	8009c48 <_dtoa_r+0xa10>
 8009c42:	9b02      	ldr	r3, [sp, #8]
 8009c44:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8009c48:	9b00      	ldr	r3, [sp, #0]
 8009c4a:	f883 8000 	strb.w	r8, [r3]
 8009c4e:	e63f      	b.n	80098d0 <_dtoa_r+0x698>
 8009c50:	4628      	mov	r0, r5
 8009c52:	e7bb      	b.n	8009bcc <_dtoa_r+0x994>
 8009c54:	2201      	movs	r2, #1
 8009c56:	e7e1      	b.n	8009c1c <_dtoa_r+0x9e4>
 8009c58:	9b08      	ldr	r3, [sp, #32]
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	db04      	blt.n	8009c68 <_dtoa_r+0xa30>
 8009c5e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009c60:	430b      	orrs	r3, r1
 8009c62:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009c64:	430b      	orrs	r3, r1
 8009c66:	d120      	bne.n	8009caa <_dtoa_r+0xa72>
 8009c68:	2a00      	cmp	r2, #0
 8009c6a:	dded      	ble.n	8009c48 <_dtoa_r+0xa10>
 8009c6c:	4649      	mov	r1, r9
 8009c6e:	2201      	movs	r2, #1
 8009c70:	4658      	mov	r0, fp
 8009c72:	f000 fbb3 	bl	800a3dc <__lshift>
 8009c76:	4621      	mov	r1, r4
 8009c78:	4681      	mov	r9, r0
 8009c7a:	f000 fc1b 	bl	800a4b4 <__mcmp>
 8009c7e:	2800      	cmp	r0, #0
 8009c80:	dc03      	bgt.n	8009c8a <_dtoa_r+0xa52>
 8009c82:	d1e1      	bne.n	8009c48 <_dtoa_r+0xa10>
 8009c84:	f018 0f01 	tst.w	r8, #1
 8009c88:	d0de      	beq.n	8009c48 <_dtoa_r+0xa10>
 8009c8a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009c8e:	d1d8      	bne.n	8009c42 <_dtoa_r+0xa0a>
 8009c90:	9a00      	ldr	r2, [sp, #0]
 8009c92:	2339      	movs	r3, #57	@ 0x39
 8009c94:	7013      	strb	r3, [r2, #0]
 8009c96:	4633      	mov	r3, r6
 8009c98:	461e      	mov	r6, r3
 8009c9a:	3b01      	subs	r3, #1
 8009c9c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009ca0:	2a39      	cmp	r2, #57	@ 0x39
 8009ca2:	d052      	beq.n	8009d4a <_dtoa_r+0xb12>
 8009ca4:	3201      	adds	r2, #1
 8009ca6:	701a      	strb	r2, [r3, #0]
 8009ca8:	e612      	b.n	80098d0 <_dtoa_r+0x698>
 8009caa:	2a00      	cmp	r2, #0
 8009cac:	dd07      	ble.n	8009cbe <_dtoa_r+0xa86>
 8009cae:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009cb2:	d0ed      	beq.n	8009c90 <_dtoa_r+0xa58>
 8009cb4:	9a00      	ldr	r2, [sp, #0]
 8009cb6:	f108 0301 	add.w	r3, r8, #1
 8009cba:	7013      	strb	r3, [r2, #0]
 8009cbc:	e608      	b.n	80098d0 <_dtoa_r+0x698>
 8009cbe:	9b07      	ldr	r3, [sp, #28]
 8009cc0:	9a07      	ldr	r2, [sp, #28]
 8009cc2:	f803 8c01 	strb.w	r8, [r3, #-1]
 8009cc6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009cc8:	4293      	cmp	r3, r2
 8009cca:	d028      	beq.n	8009d1e <_dtoa_r+0xae6>
 8009ccc:	4649      	mov	r1, r9
 8009cce:	2300      	movs	r3, #0
 8009cd0:	220a      	movs	r2, #10
 8009cd2:	4658      	mov	r0, fp
 8009cd4:	f000 f9d6 	bl	800a084 <__multadd>
 8009cd8:	42af      	cmp	r7, r5
 8009cda:	4681      	mov	r9, r0
 8009cdc:	f04f 0300 	mov.w	r3, #0
 8009ce0:	f04f 020a 	mov.w	r2, #10
 8009ce4:	4639      	mov	r1, r7
 8009ce6:	4658      	mov	r0, fp
 8009ce8:	d107      	bne.n	8009cfa <_dtoa_r+0xac2>
 8009cea:	f000 f9cb 	bl	800a084 <__multadd>
 8009cee:	4607      	mov	r7, r0
 8009cf0:	4605      	mov	r5, r0
 8009cf2:	9b07      	ldr	r3, [sp, #28]
 8009cf4:	3301      	adds	r3, #1
 8009cf6:	9307      	str	r3, [sp, #28]
 8009cf8:	e774      	b.n	8009be4 <_dtoa_r+0x9ac>
 8009cfa:	f000 f9c3 	bl	800a084 <__multadd>
 8009cfe:	4629      	mov	r1, r5
 8009d00:	4607      	mov	r7, r0
 8009d02:	2300      	movs	r3, #0
 8009d04:	220a      	movs	r2, #10
 8009d06:	4658      	mov	r0, fp
 8009d08:	f000 f9bc 	bl	800a084 <__multadd>
 8009d0c:	4605      	mov	r5, r0
 8009d0e:	e7f0      	b.n	8009cf2 <_dtoa_r+0xaba>
 8009d10:	9b00      	ldr	r3, [sp, #0]
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	bfcc      	ite	gt
 8009d16:	461e      	movgt	r6, r3
 8009d18:	2601      	movle	r6, #1
 8009d1a:	4456      	add	r6, sl
 8009d1c:	2700      	movs	r7, #0
 8009d1e:	4649      	mov	r1, r9
 8009d20:	2201      	movs	r2, #1
 8009d22:	4658      	mov	r0, fp
 8009d24:	f000 fb5a 	bl	800a3dc <__lshift>
 8009d28:	4621      	mov	r1, r4
 8009d2a:	4681      	mov	r9, r0
 8009d2c:	f000 fbc2 	bl	800a4b4 <__mcmp>
 8009d30:	2800      	cmp	r0, #0
 8009d32:	dcb0      	bgt.n	8009c96 <_dtoa_r+0xa5e>
 8009d34:	d102      	bne.n	8009d3c <_dtoa_r+0xb04>
 8009d36:	f018 0f01 	tst.w	r8, #1
 8009d3a:	d1ac      	bne.n	8009c96 <_dtoa_r+0xa5e>
 8009d3c:	4633      	mov	r3, r6
 8009d3e:	461e      	mov	r6, r3
 8009d40:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009d44:	2a30      	cmp	r2, #48	@ 0x30
 8009d46:	d0fa      	beq.n	8009d3e <_dtoa_r+0xb06>
 8009d48:	e5c2      	b.n	80098d0 <_dtoa_r+0x698>
 8009d4a:	459a      	cmp	sl, r3
 8009d4c:	d1a4      	bne.n	8009c98 <_dtoa_r+0xa60>
 8009d4e:	9b04      	ldr	r3, [sp, #16]
 8009d50:	3301      	adds	r3, #1
 8009d52:	9304      	str	r3, [sp, #16]
 8009d54:	2331      	movs	r3, #49	@ 0x31
 8009d56:	f88a 3000 	strb.w	r3, [sl]
 8009d5a:	e5b9      	b.n	80098d0 <_dtoa_r+0x698>
 8009d5c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009d5e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8009dbc <_dtoa_r+0xb84>
 8009d62:	b11b      	cbz	r3, 8009d6c <_dtoa_r+0xb34>
 8009d64:	f10a 0308 	add.w	r3, sl, #8
 8009d68:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8009d6a:	6013      	str	r3, [r2, #0]
 8009d6c:	4650      	mov	r0, sl
 8009d6e:	b019      	add	sp, #100	@ 0x64
 8009d70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d74:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d76:	2b01      	cmp	r3, #1
 8009d78:	f77f ae37 	ble.w	80099ea <_dtoa_r+0x7b2>
 8009d7c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009d7e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009d80:	2001      	movs	r0, #1
 8009d82:	e655      	b.n	8009a30 <_dtoa_r+0x7f8>
 8009d84:	9b00      	ldr	r3, [sp, #0]
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	f77f aed6 	ble.w	8009b38 <_dtoa_r+0x900>
 8009d8c:	4656      	mov	r6, sl
 8009d8e:	4621      	mov	r1, r4
 8009d90:	4648      	mov	r0, r9
 8009d92:	f7ff f9c8 	bl	8009126 <quorem>
 8009d96:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009d9a:	f806 8b01 	strb.w	r8, [r6], #1
 8009d9e:	9b00      	ldr	r3, [sp, #0]
 8009da0:	eba6 020a 	sub.w	r2, r6, sl
 8009da4:	4293      	cmp	r3, r2
 8009da6:	ddb3      	ble.n	8009d10 <_dtoa_r+0xad8>
 8009da8:	4649      	mov	r1, r9
 8009daa:	2300      	movs	r3, #0
 8009dac:	220a      	movs	r2, #10
 8009dae:	4658      	mov	r0, fp
 8009db0:	f000 f968 	bl	800a084 <__multadd>
 8009db4:	4681      	mov	r9, r0
 8009db6:	e7ea      	b.n	8009d8e <_dtoa_r+0xb56>
 8009db8:	0800c728 	.word	0x0800c728
 8009dbc:	0800c6ac 	.word	0x0800c6ac

08009dc0 <_free_r>:
 8009dc0:	b538      	push	{r3, r4, r5, lr}
 8009dc2:	4605      	mov	r5, r0
 8009dc4:	2900      	cmp	r1, #0
 8009dc6:	d041      	beq.n	8009e4c <_free_r+0x8c>
 8009dc8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009dcc:	1f0c      	subs	r4, r1, #4
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	bfb8      	it	lt
 8009dd2:	18e4      	addlt	r4, r4, r3
 8009dd4:	f000 f8e8 	bl	8009fa8 <__malloc_lock>
 8009dd8:	4a1d      	ldr	r2, [pc, #116]	@ (8009e50 <_free_r+0x90>)
 8009dda:	6813      	ldr	r3, [r2, #0]
 8009ddc:	b933      	cbnz	r3, 8009dec <_free_r+0x2c>
 8009dde:	6063      	str	r3, [r4, #4]
 8009de0:	6014      	str	r4, [r2, #0]
 8009de2:	4628      	mov	r0, r5
 8009de4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009de8:	f000 b8e4 	b.w	8009fb4 <__malloc_unlock>
 8009dec:	42a3      	cmp	r3, r4
 8009dee:	d908      	bls.n	8009e02 <_free_r+0x42>
 8009df0:	6820      	ldr	r0, [r4, #0]
 8009df2:	1821      	adds	r1, r4, r0
 8009df4:	428b      	cmp	r3, r1
 8009df6:	bf01      	itttt	eq
 8009df8:	6819      	ldreq	r1, [r3, #0]
 8009dfa:	685b      	ldreq	r3, [r3, #4]
 8009dfc:	1809      	addeq	r1, r1, r0
 8009dfe:	6021      	streq	r1, [r4, #0]
 8009e00:	e7ed      	b.n	8009dde <_free_r+0x1e>
 8009e02:	461a      	mov	r2, r3
 8009e04:	685b      	ldr	r3, [r3, #4]
 8009e06:	b10b      	cbz	r3, 8009e0c <_free_r+0x4c>
 8009e08:	42a3      	cmp	r3, r4
 8009e0a:	d9fa      	bls.n	8009e02 <_free_r+0x42>
 8009e0c:	6811      	ldr	r1, [r2, #0]
 8009e0e:	1850      	adds	r0, r2, r1
 8009e10:	42a0      	cmp	r0, r4
 8009e12:	d10b      	bne.n	8009e2c <_free_r+0x6c>
 8009e14:	6820      	ldr	r0, [r4, #0]
 8009e16:	4401      	add	r1, r0
 8009e18:	1850      	adds	r0, r2, r1
 8009e1a:	4283      	cmp	r3, r0
 8009e1c:	6011      	str	r1, [r2, #0]
 8009e1e:	d1e0      	bne.n	8009de2 <_free_r+0x22>
 8009e20:	6818      	ldr	r0, [r3, #0]
 8009e22:	685b      	ldr	r3, [r3, #4]
 8009e24:	6053      	str	r3, [r2, #4]
 8009e26:	4408      	add	r0, r1
 8009e28:	6010      	str	r0, [r2, #0]
 8009e2a:	e7da      	b.n	8009de2 <_free_r+0x22>
 8009e2c:	d902      	bls.n	8009e34 <_free_r+0x74>
 8009e2e:	230c      	movs	r3, #12
 8009e30:	602b      	str	r3, [r5, #0]
 8009e32:	e7d6      	b.n	8009de2 <_free_r+0x22>
 8009e34:	6820      	ldr	r0, [r4, #0]
 8009e36:	1821      	adds	r1, r4, r0
 8009e38:	428b      	cmp	r3, r1
 8009e3a:	bf04      	itt	eq
 8009e3c:	6819      	ldreq	r1, [r3, #0]
 8009e3e:	685b      	ldreq	r3, [r3, #4]
 8009e40:	6063      	str	r3, [r4, #4]
 8009e42:	bf04      	itt	eq
 8009e44:	1809      	addeq	r1, r1, r0
 8009e46:	6021      	streq	r1, [r4, #0]
 8009e48:	6054      	str	r4, [r2, #4]
 8009e4a:	e7ca      	b.n	8009de2 <_free_r+0x22>
 8009e4c:	bd38      	pop	{r3, r4, r5, pc}
 8009e4e:	bf00      	nop
 8009e50:	200006dc 	.word	0x200006dc

08009e54 <malloc>:
 8009e54:	4b02      	ldr	r3, [pc, #8]	@ (8009e60 <malloc+0xc>)
 8009e56:	4601      	mov	r1, r0
 8009e58:	6818      	ldr	r0, [r3, #0]
 8009e5a:	f000 b825 	b.w	8009ea8 <_malloc_r>
 8009e5e:	bf00      	nop
 8009e60:	20000018 	.word	0x20000018

08009e64 <sbrk_aligned>:
 8009e64:	b570      	push	{r4, r5, r6, lr}
 8009e66:	4e0f      	ldr	r6, [pc, #60]	@ (8009ea4 <sbrk_aligned+0x40>)
 8009e68:	460c      	mov	r4, r1
 8009e6a:	6831      	ldr	r1, [r6, #0]
 8009e6c:	4605      	mov	r5, r0
 8009e6e:	b911      	cbnz	r1, 8009e76 <sbrk_aligned+0x12>
 8009e70:	f000 fe46 	bl	800ab00 <_sbrk_r>
 8009e74:	6030      	str	r0, [r6, #0]
 8009e76:	4621      	mov	r1, r4
 8009e78:	4628      	mov	r0, r5
 8009e7a:	f000 fe41 	bl	800ab00 <_sbrk_r>
 8009e7e:	1c43      	adds	r3, r0, #1
 8009e80:	d103      	bne.n	8009e8a <sbrk_aligned+0x26>
 8009e82:	f04f 34ff 	mov.w	r4, #4294967295
 8009e86:	4620      	mov	r0, r4
 8009e88:	bd70      	pop	{r4, r5, r6, pc}
 8009e8a:	1cc4      	adds	r4, r0, #3
 8009e8c:	f024 0403 	bic.w	r4, r4, #3
 8009e90:	42a0      	cmp	r0, r4
 8009e92:	d0f8      	beq.n	8009e86 <sbrk_aligned+0x22>
 8009e94:	1a21      	subs	r1, r4, r0
 8009e96:	4628      	mov	r0, r5
 8009e98:	f000 fe32 	bl	800ab00 <_sbrk_r>
 8009e9c:	3001      	adds	r0, #1
 8009e9e:	d1f2      	bne.n	8009e86 <sbrk_aligned+0x22>
 8009ea0:	e7ef      	b.n	8009e82 <sbrk_aligned+0x1e>
 8009ea2:	bf00      	nop
 8009ea4:	200006d8 	.word	0x200006d8

08009ea8 <_malloc_r>:
 8009ea8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009eac:	1ccd      	adds	r5, r1, #3
 8009eae:	f025 0503 	bic.w	r5, r5, #3
 8009eb2:	3508      	adds	r5, #8
 8009eb4:	2d0c      	cmp	r5, #12
 8009eb6:	bf38      	it	cc
 8009eb8:	250c      	movcc	r5, #12
 8009eba:	2d00      	cmp	r5, #0
 8009ebc:	4606      	mov	r6, r0
 8009ebe:	db01      	blt.n	8009ec4 <_malloc_r+0x1c>
 8009ec0:	42a9      	cmp	r1, r5
 8009ec2:	d904      	bls.n	8009ece <_malloc_r+0x26>
 8009ec4:	230c      	movs	r3, #12
 8009ec6:	6033      	str	r3, [r6, #0]
 8009ec8:	2000      	movs	r0, #0
 8009eca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009ece:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009fa4 <_malloc_r+0xfc>
 8009ed2:	f000 f869 	bl	8009fa8 <__malloc_lock>
 8009ed6:	f8d8 3000 	ldr.w	r3, [r8]
 8009eda:	461c      	mov	r4, r3
 8009edc:	bb44      	cbnz	r4, 8009f30 <_malloc_r+0x88>
 8009ede:	4629      	mov	r1, r5
 8009ee0:	4630      	mov	r0, r6
 8009ee2:	f7ff ffbf 	bl	8009e64 <sbrk_aligned>
 8009ee6:	1c43      	adds	r3, r0, #1
 8009ee8:	4604      	mov	r4, r0
 8009eea:	d158      	bne.n	8009f9e <_malloc_r+0xf6>
 8009eec:	f8d8 4000 	ldr.w	r4, [r8]
 8009ef0:	4627      	mov	r7, r4
 8009ef2:	2f00      	cmp	r7, #0
 8009ef4:	d143      	bne.n	8009f7e <_malloc_r+0xd6>
 8009ef6:	2c00      	cmp	r4, #0
 8009ef8:	d04b      	beq.n	8009f92 <_malloc_r+0xea>
 8009efa:	6823      	ldr	r3, [r4, #0]
 8009efc:	4639      	mov	r1, r7
 8009efe:	4630      	mov	r0, r6
 8009f00:	eb04 0903 	add.w	r9, r4, r3
 8009f04:	f000 fdfc 	bl	800ab00 <_sbrk_r>
 8009f08:	4581      	cmp	r9, r0
 8009f0a:	d142      	bne.n	8009f92 <_malloc_r+0xea>
 8009f0c:	6821      	ldr	r1, [r4, #0]
 8009f0e:	1a6d      	subs	r5, r5, r1
 8009f10:	4629      	mov	r1, r5
 8009f12:	4630      	mov	r0, r6
 8009f14:	f7ff ffa6 	bl	8009e64 <sbrk_aligned>
 8009f18:	3001      	adds	r0, #1
 8009f1a:	d03a      	beq.n	8009f92 <_malloc_r+0xea>
 8009f1c:	6823      	ldr	r3, [r4, #0]
 8009f1e:	442b      	add	r3, r5
 8009f20:	6023      	str	r3, [r4, #0]
 8009f22:	f8d8 3000 	ldr.w	r3, [r8]
 8009f26:	685a      	ldr	r2, [r3, #4]
 8009f28:	bb62      	cbnz	r2, 8009f84 <_malloc_r+0xdc>
 8009f2a:	f8c8 7000 	str.w	r7, [r8]
 8009f2e:	e00f      	b.n	8009f50 <_malloc_r+0xa8>
 8009f30:	6822      	ldr	r2, [r4, #0]
 8009f32:	1b52      	subs	r2, r2, r5
 8009f34:	d420      	bmi.n	8009f78 <_malloc_r+0xd0>
 8009f36:	2a0b      	cmp	r2, #11
 8009f38:	d917      	bls.n	8009f6a <_malloc_r+0xc2>
 8009f3a:	1961      	adds	r1, r4, r5
 8009f3c:	42a3      	cmp	r3, r4
 8009f3e:	6025      	str	r5, [r4, #0]
 8009f40:	bf18      	it	ne
 8009f42:	6059      	strne	r1, [r3, #4]
 8009f44:	6863      	ldr	r3, [r4, #4]
 8009f46:	bf08      	it	eq
 8009f48:	f8c8 1000 	streq.w	r1, [r8]
 8009f4c:	5162      	str	r2, [r4, r5]
 8009f4e:	604b      	str	r3, [r1, #4]
 8009f50:	4630      	mov	r0, r6
 8009f52:	f000 f82f 	bl	8009fb4 <__malloc_unlock>
 8009f56:	f104 000b 	add.w	r0, r4, #11
 8009f5a:	1d23      	adds	r3, r4, #4
 8009f5c:	f020 0007 	bic.w	r0, r0, #7
 8009f60:	1ac2      	subs	r2, r0, r3
 8009f62:	bf1c      	itt	ne
 8009f64:	1a1b      	subne	r3, r3, r0
 8009f66:	50a3      	strne	r3, [r4, r2]
 8009f68:	e7af      	b.n	8009eca <_malloc_r+0x22>
 8009f6a:	6862      	ldr	r2, [r4, #4]
 8009f6c:	42a3      	cmp	r3, r4
 8009f6e:	bf0c      	ite	eq
 8009f70:	f8c8 2000 	streq.w	r2, [r8]
 8009f74:	605a      	strne	r2, [r3, #4]
 8009f76:	e7eb      	b.n	8009f50 <_malloc_r+0xa8>
 8009f78:	4623      	mov	r3, r4
 8009f7a:	6864      	ldr	r4, [r4, #4]
 8009f7c:	e7ae      	b.n	8009edc <_malloc_r+0x34>
 8009f7e:	463c      	mov	r4, r7
 8009f80:	687f      	ldr	r7, [r7, #4]
 8009f82:	e7b6      	b.n	8009ef2 <_malloc_r+0x4a>
 8009f84:	461a      	mov	r2, r3
 8009f86:	685b      	ldr	r3, [r3, #4]
 8009f88:	42a3      	cmp	r3, r4
 8009f8a:	d1fb      	bne.n	8009f84 <_malloc_r+0xdc>
 8009f8c:	2300      	movs	r3, #0
 8009f8e:	6053      	str	r3, [r2, #4]
 8009f90:	e7de      	b.n	8009f50 <_malloc_r+0xa8>
 8009f92:	230c      	movs	r3, #12
 8009f94:	6033      	str	r3, [r6, #0]
 8009f96:	4630      	mov	r0, r6
 8009f98:	f000 f80c 	bl	8009fb4 <__malloc_unlock>
 8009f9c:	e794      	b.n	8009ec8 <_malloc_r+0x20>
 8009f9e:	6005      	str	r5, [r0, #0]
 8009fa0:	e7d6      	b.n	8009f50 <_malloc_r+0xa8>
 8009fa2:	bf00      	nop
 8009fa4:	200006dc 	.word	0x200006dc

08009fa8 <__malloc_lock>:
 8009fa8:	4801      	ldr	r0, [pc, #4]	@ (8009fb0 <__malloc_lock+0x8>)
 8009faa:	f7ff b8ba 	b.w	8009122 <__retarget_lock_acquire_recursive>
 8009fae:	bf00      	nop
 8009fb0:	200006d4 	.word	0x200006d4

08009fb4 <__malloc_unlock>:
 8009fb4:	4801      	ldr	r0, [pc, #4]	@ (8009fbc <__malloc_unlock+0x8>)
 8009fb6:	f7ff b8b5 	b.w	8009124 <__retarget_lock_release_recursive>
 8009fba:	bf00      	nop
 8009fbc:	200006d4 	.word	0x200006d4

08009fc0 <_Balloc>:
 8009fc0:	b570      	push	{r4, r5, r6, lr}
 8009fc2:	69c6      	ldr	r6, [r0, #28]
 8009fc4:	4604      	mov	r4, r0
 8009fc6:	460d      	mov	r5, r1
 8009fc8:	b976      	cbnz	r6, 8009fe8 <_Balloc+0x28>
 8009fca:	2010      	movs	r0, #16
 8009fcc:	f7ff ff42 	bl	8009e54 <malloc>
 8009fd0:	4602      	mov	r2, r0
 8009fd2:	61e0      	str	r0, [r4, #28]
 8009fd4:	b920      	cbnz	r0, 8009fe0 <_Balloc+0x20>
 8009fd6:	4b18      	ldr	r3, [pc, #96]	@ (800a038 <_Balloc+0x78>)
 8009fd8:	4818      	ldr	r0, [pc, #96]	@ (800a03c <_Balloc+0x7c>)
 8009fda:	216b      	movs	r1, #107	@ 0x6b
 8009fdc:	f000 fdae 	bl	800ab3c <__assert_func>
 8009fe0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009fe4:	6006      	str	r6, [r0, #0]
 8009fe6:	60c6      	str	r6, [r0, #12]
 8009fe8:	69e6      	ldr	r6, [r4, #28]
 8009fea:	68f3      	ldr	r3, [r6, #12]
 8009fec:	b183      	cbz	r3, 800a010 <_Balloc+0x50>
 8009fee:	69e3      	ldr	r3, [r4, #28]
 8009ff0:	68db      	ldr	r3, [r3, #12]
 8009ff2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009ff6:	b9b8      	cbnz	r0, 800a028 <_Balloc+0x68>
 8009ff8:	2101      	movs	r1, #1
 8009ffa:	fa01 f605 	lsl.w	r6, r1, r5
 8009ffe:	1d72      	adds	r2, r6, #5
 800a000:	0092      	lsls	r2, r2, #2
 800a002:	4620      	mov	r0, r4
 800a004:	f000 fdb8 	bl	800ab78 <_calloc_r>
 800a008:	b160      	cbz	r0, 800a024 <_Balloc+0x64>
 800a00a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a00e:	e00e      	b.n	800a02e <_Balloc+0x6e>
 800a010:	2221      	movs	r2, #33	@ 0x21
 800a012:	2104      	movs	r1, #4
 800a014:	4620      	mov	r0, r4
 800a016:	f000 fdaf 	bl	800ab78 <_calloc_r>
 800a01a:	69e3      	ldr	r3, [r4, #28]
 800a01c:	60f0      	str	r0, [r6, #12]
 800a01e:	68db      	ldr	r3, [r3, #12]
 800a020:	2b00      	cmp	r3, #0
 800a022:	d1e4      	bne.n	8009fee <_Balloc+0x2e>
 800a024:	2000      	movs	r0, #0
 800a026:	bd70      	pop	{r4, r5, r6, pc}
 800a028:	6802      	ldr	r2, [r0, #0]
 800a02a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a02e:	2300      	movs	r3, #0
 800a030:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a034:	e7f7      	b.n	800a026 <_Balloc+0x66>
 800a036:	bf00      	nop
 800a038:	0800c6b9 	.word	0x0800c6b9
 800a03c:	0800c739 	.word	0x0800c739

0800a040 <_Bfree>:
 800a040:	b570      	push	{r4, r5, r6, lr}
 800a042:	69c6      	ldr	r6, [r0, #28]
 800a044:	4605      	mov	r5, r0
 800a046:	460c      	mov	r4, r1
 800a048:	b976      	cbnz	r6, 800a068 <_Bfree+0x28>
 800a04a:	2010      	movs	r0, #16
 800a04c:	f7ff ff02 	bl	8009e54 <malloc>
 800a050:	4602      	mov	r2, r0
 800a052:	61e8      	str	r0, [r5, #28]
 800a054:	b920      	cbnz	r0, 800a060 <_Bfree+0x20>
 800a056:	4b09      	ldr	r3, [pc, #36]	@ (800a07c <_Bfree+0x3c>)
 800a058:	4809      	ldr	r0, [pc, #36]	@ (800a080 <_Bfree+0x40>)
 800a05a:	218f      	movs	r1, #143	@ 0x8f
 800a05c:	f000 fd6e 	bl	800ab3c <__assert_func>
 800a060:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a064:	6006      	str	r6, [r0, #0]
 800a066:	60c6      	str	r6, [r0, #12]
 800a068:	b13c      	cbz	r4, 800a07a <_Bfree+0x3a>
 800a06a:	69eb      	ldr	r3, [r5, #28]
 800a06c:	6862      	ldr	r2, [r4, #4]
 800a06e:	68db      	ldr	r3, [r3, #12]
 800a070:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a074:	6021      	str	r1, [r4, #0]
 800a076:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a07a:	bd70      	pop	{r4, r5, r6, pc}
 800a07c:	0800c6b9 	.word	0x0800c6b9
 800a080:	0800c739 	.word	0x0800c739

0800a084 <__multadd>:
 800a084:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a088:	690d      	ldr	r5, [r1, #16]
 800a08a:	4607      	mov	r7, r0
 800a08c:	460c      	mov	r4, r1
 800a08e:	461e      	mov	r6, r3
 800a090:	f101 0c14 	add.w	ip, r1, #20
 800a094:	2000      	movs	r0, #0
 800a096:	f8dc 3000 	ldr.w	r3, [ip]
 800a09a:	b299      	uxth	r1, r3
 800a09c:	fb02 6101 	mla	r1, r2, r1, r6
 800a0a0:	0c1e      	lsrs	r6, r3, #16
 800a0a2:	0c0b      	lsrs	r3, r1, #16
 800a0a4:	fb02 3306 	mla	r3, r2, r6, r3
 800a0a8:	b289      	uxth	r1, r1
 800a0aa:	3001      	adds	r0, #1
 800a0ac:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a0b0:	4285      	cmp	r5, r0
 800a0b2:	f84c 1b04 	str.w	r1, [ip], #4
 800a0b6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a0ba:	dcec      	bgt.n	800a096 <__multadd+0x12>
 800a0bc:	b30e      	cbz	r6, 800a102 <__multadd+0x7e>
 800a0be:	68a3      	ldr	r3, [r4, #8]
 800a0c0:	42ab      	cmp	r3, r5
 800a0c2:	dc19      	bgt.n	800a0f8 <__multadd+0x74>
 800a0c4:	6861      	ldr	r1, [r4, #4]
 800a0c6:	4638      	mov	r0, r7
 800a0c8:	3101      	adds	r1, #1
 800a0ca:	f7ff ff79 	bl	8009fc0 <_Balloc>
 800a0ce:	4680      	mov	r8, r0
 800a0d0:	b928      	cbnz	r0, 800a0de <__multadd+0x5a>
 800a0d2:	4602      	mov	r2, r0
 800a0d4:	4b0c      	ldr	r3, [pc, #48]	@ (800a108 <__multadd+0x84>)
 800a0d6:	480d      	ldr	r0, [pc, #52]	@ (800a10c <__multadd+0x88>)
 800a0d8:	21ba      	movs	r1, #186	@ 0xba
 800a0da:	f000 fd2f 	bl	800ab3c <__assert_func>
 800a0de:	6922      	ldr	r2, [r4, #16]
 800a0e0:	3202      	adds	r2, #2
 800a0e2:	f104 010c 	add.w	r1, r4, #12
 800a0e6:	0092      	lsls	r2, r2, #2
 800a0e8:	300c      	adds	r0, #12
 800a0ea:	f000 fd19 	bl	800ab20 <memcpy>
 800a0ee:	4621      	mov	r1, r4
 800a0f0:	4638      	mov	r0, r7
 800a0f2:	f7ff ffa5 	bl	800a040 <_Bfree>
 800a0f6:	4644      	mov	r4, r8
 800a0f8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a0fc:	3501      	adds	r5, #1
 800a0fe:	615e      	str	r6, [r3, #20]
 800a100:	6125      	str	r5, [r4, #16]
 800a102:	4620      	mov	r0, r4
 800a104:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a108:	0800c728 	.word	0x0800c728
 800a10c:	0800c739 	.word	0x0800c739

0800a110 <__hi0bits>:
 800a110:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a114:	4603      	mov	r3, r0
 800a116:	bf36      	itet	cc
 800a118:	0403      	lslcc	r3, r0, #16
 800a11a:	2000      	movcs	r0, #0
 800a11c:	2010      	movcc	r0, #16
 800a11e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a122:	bf3c      	itt	cc
 800a124:	021b      	lslcc	r3, r3, #8
 800a126:	3008      	addcc	r0, #8
 800a128:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a12c:	bf3c      	itt	cc
 800a12e:	011b      	lslcc	r3, r3, #4
 800a130:	3004      	addcc	r0, #4
 800a132:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a136:	bf3c      	itt	cc
 800a138:	009b      	lslcc	r3, r3, #2
 800a13a:	3002      	addcc	r0, #2
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	db05      	blt.n	800a14c <__hi0bits+0x3c>
 800a140:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a144:	f100 0001 	add.w	r0, r0, #1
 800a148:	bf08      	it	eq
 800a14a:	2020      	moveq	r0, #32
 800a14c:	4770      	bx	lr

0800a14e <__lo0bits>:
 800a14e:	6803      	ldr	r3, [r0, #0]
 800a150:	4602      	mov	r2, r0
 800a152:	f013 0007 	ands.w	r0, r3, #7
 800a156:	d00b      	beq.n	800a170 <__lo0bits+0x22>
 800a158:	07d9      	lsls	r1, r3, #31
 800a15a:	d421      	bmi.n	800a1a0 <__lo0bits+0x52>
 800a15c:	0798      	lsls	r0, r3, #30
 800a15e:	bf49      	itett	mi
 800a160:	085b      	lsrmi	r3, r3, #1
 800a162:	089b      	lsrpl	r3, r3, #2
 800a164:	2001      	movmi	r0, #1
 800a166:	6013      	strmi	r3, [r2, #0]
 800a168:	bf5c      	itt	pl
 800a16a:	6013      	strpl	r3, [r2, #0]
 800a16c:	2002      	movpl	r0, #2
 800a16e:	4770      	bx	lr
 800a170:	b299      	uxth	r1, r3
 800a172:	b909      	cbnz	r1, 800a178 <__lo0bits+0x2a>
 800a174:	0c1b      	lsrs	r3, r3, #16
 800a176:	2010      	movs	r0, #16
 800a178:	b2d9      	uxtb	r1, r3
 800a17a:	b909      	cbnz	r1, 800a180 <__lo0bits+0x32>
 800a17c:	3008      	adds	r0, #8
 800a17e:	0a1b      	lsrs	r3, r3, #8
 800a180:	0719      	lsls	r1, r3, #28
 800a182:	bf04      	itt	eq
 800a184:	091b      	lsreq	r3, r3, #4
 800a186:	3004      	addeq	r0, #4
 800a188:	0799      	lsls	r1, r3, #30
 800a18a:	bf04      	itt	eq
 800a18c:	089b      	lsreq	r3, r3, #2
 800a18e:	3002      	addeq	r0, #2
 800a190:	07d9      	lsls	r1, r3, #31
 800a192:	d403      	bmi.n	800a19c <__lo0bits+0x4e>
 800a194:	085b      	lsrs	r3, r3, #1
 800a196:	f100 0001 	add.w	r0, r0, #1
 800a19a:	d003      	beq.n	800a1a4 <__lo0bits+0x56>
 800a19c:	6013      	str	r3, [r2, #0]
 800a19e:	4770      	bx	lr
 800a1a0:	2000      	movs	r0, #0
 800a1a2:	4770      	bx	lr
 800a1a4:	2020      	movs	r0, #32
 800a1a6:	4770      	bx	lr

0800a1a8 <__i2b>:
 800a1a8:	b510      	push	{r4, lr}
 800a1aa:	460c      	mov	r4, r1
 800a1ac:	2101      	movs	r1, #1
 800a1ae:	f7ff ff07 	bl	8009fc0 <_Balloc>
 800a1b2:	4602      	mov	r2, r0
 800a1b4:	b928      	cbnz	r0, 800a1c2 <__i2b+0x1a>
 800a1b6:	4b05      	ldr	r3, [pc, #20]	@ (800a1cc <__i2b+0x24>)
 800a1b8:	4805      	ldr	r0, [pc, #20]	@ (800a1d0 <__i2b+0x28>)
 800a1ba:	f240 1145 	movw	r1, #325	@ 0x145
 800a1be:	f000 fcbd 	bl	800ab3c <__assert_func>
 800a1c2:	2301      	movs	r3, #1
 800a1c4:	6144      	str	r4, [r0, #20]
 800a1c6:	6103      	str	r3, [r0, #16]
 800a1c8:	bd10      	pop	{r4, pc}
 800a1ca:	bf00      	nop
 800a1cc:	0800c728 	.word	0x0800c728
 800a1d0:	0800c739 	.word	0x0800c739

0800a1d4 <__multiply>:
 800a1d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1d8:	4614      	mov	r4, r2
 800a1da:	690a      	ldr	r2, [r1, #16]
 800a1dc:	6923      	ldr	r3, [r4, #16]
 800a1de:	429a      	cmp	r2, r3
 800a1e0:	bfa8      	it	ge
 800a1e2:	4623      	movge	r3, r4
 800a1e4:	460f      	mov	r7, r1
 800a1e6:	bfa4      	itt	ge
 800a1e8:	460c      	movge	r4, r1
 800a1ea:	461f      	movge	r7, r3
 800a1ec:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800a1f0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800a1f4:	68a3      	ldr	r3, [r4, #8]
 800a1f6:	6861      	ldr	r1, [r4, #4]
 800a1f8:	eb0a 0609 	add.w	r6, sl, r9
 800a1fc:	42b3      	cmp	r3, r6
 800a1fe:	b085      	sub	sp, #20
 800a200:	bfb8      	it	lt
 800a202:	3101      	addlt	r1, #1
 800a204:	f7ff fedc 	bl	8009fc0 <_Balloc>
 800a208:	b930      	cbnz	r0, 800a218 <__multiply+0x44>
 800a20a:	4602      	mov	r2, r0
 800a20c:	4b44      	ldr	r3, [pc, #272]	@ (800a320 <__multiply+0x14c>)
 800a20e:	4845      	ldr	r0, [pc, #276]	@ (800a324 <__multiply+0x150>)
 800a210:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a214:	f000 fc92 	bl	800ab3c <__assert_func>
 800a218:	f100 0514 	add.w	r5, r0, #20
 800a21c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a220:	462b      	mov	r3, r5
 800a222:	2200      	movs	r2, #0
 800a224:	4543      	cmp	r3, r8
 800a226:	d321      	bcc.n	800a26c <__multiply+0x98>
 800a228:	f107 0114 	add.w	r1, r7, #20
 800a22c:	f104 0214 	add.w	r2, r4, #20
 800a230:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800a234:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800a238:	9302      	str	r3, [sp, #8]
 800a23a:	1b13      	subs	r3, r2, r4
 800a23c:	3b15      	subs	r3, #21
 800a23e:	f023 0303 	bic.w	r3, r3, #3
 800a242:	3304      	adds	r3, #4
 800a244:	f104 0715 	add.w	r7, r4, #21
 800a248:	42ba      	cmp	r2, r7
 800a24a:	bf38      	it	cc
 800a24c:	2304      	movcc	r3, #4
 800a24e:	9301      	str	r3, [sp, #4]
 800a250:	9b02      	ldr	r3, [sp, #8]
 800a252:	9103      	str	r1, [sp, #12]
 800a254:	428b      	cmp	r3, r1
 800a256:	d80c      	bhi.n	800a272 <__multiply+0x9e>
 800a258:	2e00      	cmp	r6, #0
 800a25a:	dd03      	ble.n	800a264 <__multiply+0x90>
 800a25c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a260:	2b00      	cmp	r3, #0
 800a262:	d05b      	beq.n	800a31c <__multiply+0x148>
 800a264:	6106      	str	r6, [r0, #16]
 800a266:	b005      	add	sp, #20
 800a268:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a26c:	f843 2b04 	str.w	r2, [r3], #4
 800a270:	e7d8      	b.n	800a224 <__multiply+0x50>
 800a272:	f8b1 a000 	ldrh.w	sl, [r1]
 800a276:	f1ba 0f00 	cmp.w	sl, #0
 800a27a:	d024      	beq.n	800a2c6 <__multiply+0xf2>
 800a27c:	f104 0e14 	add.w	lr, r4, #20
 800a280:	46a9      	mov	r9, r5
 800a282:	f04f 0c00 	mov.w	ip, #0
 800a286:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a28a:	f8d9 3000 	ldr.w	r3, [r9]
 800a28e:	fa1f fb87 	uxth.w	fp, r7
 800a292:	b29b      	uxth	r3, r3
 800a294:	fb0a 330b 	mla	r3, sl, fp, r3
 800a298:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800a29c:	f8d9 7000 	ldr.w	r7, [r9]
 800a2a0:	4463      	add	r3, ip
 800a2a2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a2a6:	fb0a c70b 	mla	r7, sl, fp, ip
 800a2aa:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800a2ae:	b29b      	uxth	r3, r3
 800a2b0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a2b4:	4572      	cmp	r2, lr
 800a2b6:	f849 3b04 	str.w	r3, [r9], #4
 800a2ba:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a2be:	d8e2      	bhi.n	800a286 <__multiply+0xb2>
 800a2c0:	9b01      	ldr	r3, [sp, #4]
 800a2c2:	f845 c003 	str.w	ip, [r5, r3]
 800a2c6:	9b03      	ldr	r3, [sp, #12]
 800a2c8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a2cc:	3104      	adds	r1, #4
 800a2ce:	f1b9 0f00 	cmp.w	r9, #0
 800a2d2:	d021      	beq.n	800a318 <__multiply+0x144>
 800a2d4:	682b      	ldr	r3, [r5, #0]
 800a2d6:	f104 0c14 	add.w	ip, r4, #20
 800a2da:	46ae      	mov	lr, r5
 800a2dc:	f04f 0a00 	mov.w	sl, #0
 800a2e0:	f8bc b000 	ldrh.w	fp, [ip]
 800a2e4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800a2e8:	fb09 770b 	mla	r7, r9, fp, r7
 800a2ec:	4457      	add	r7, sl
 800a2ee:	b29b      	uxth	r3, r3
 800a2f0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a2f4:	f84e 3b04 	str.w	r3, [lr], #4
 800a2f8:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a2fc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a300:	f8be 3000 	ldrh.w	r3, [lr]
 800a304:	fb09 330a 	mla	r3, r9, sl, r3
 800a308:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800a30c:	4562      	cmp	r2, ip
 800a30e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a312:	d8e5      	bhi.n	800a2e0 <__multiply+0x10c>
 800a314:	9f01      	ldr	r7, [sp, #4]
 800a316:	51eb      	str	r3, [r5, r7]
 800a318:	3504      	adds	r5, #4
 800a31a:	e799      	b.n	800a250 <__multiply+0x7c>
 800a31c:	3e01      	subs	r6, #1
 800a31e:	e79b      	b.n	800a258 <__multiply+0x84>
 800a320:	0800c728 	.word	0x0800c728
 800a324:	0800c739 	.word	0x0800c739

0800a328 <__pow5mult>:
 800a328:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a32c:	4615      	mov	r5, r2
 800a32e:	f012 0203 	ands.w	r2, r2, #3
 800a332:	4607      	mov	r7, r0
 800a334:	460e      	mov	r6, r1
 800a336:	d007      	beq.n	800a348 <__pow5mult+0x20>
 800a338:	4c25      	ldr	r4, [pc, #148]	@ (800a3d0 <__pow5mult+0xa8>)
 800a33a:	3a01      	subs	r2, #1
 800a33c:	2300      	movs	r3, #0
 800a33e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a342:	f7ff fe9f 	bl	800a084 <__multadd>
 800a346:	4606      	mov	r6, r0
 800a348:	10ad      	asrs	r5, r5, #2
 800a34a:	d03d      	beq.n	800a3c8 <__pow5mult+0xa0>
 800a34c:	69fc      	ldr	r4, [r7, #28]
 800a34e:	b97c      	cbnz	r4, 800a370 <__pow5mult+0x48>
 800a350:	2010      	movs	r0, #16
 800a352:	f7ff fd7f 	bl	8009e54 <malloc>
 800a356:	4602      	mov	r2, r0
 800a358:	61f8      	str	r0, [r7, #28]
 800a35a:	b928      	cbnz	r0, 800a368 <__pow5mult+0x40>
 800a35c:	4b1d      	ldr	r3, [pc, #116]	@ (800a3d4 <__pow5mult+0xac>)
 800a35e:	481e      	ldr	r0, [pc, #120]	@ (800a3d8 <__pow5mult+0xb0>)
 800a360:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a364:	f000 fbea 	bl	800ab3c <__assert_func>
 800a368:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a36c:	6004      	str	r4, [r0, #0]
 800a36e:	60c4      	str	r4, [r0, #12]
 800a370:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a374:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a378:	b94c      	cbnz	r4, 800a38e <__pow5mult+0x66>
 800a37a:	f240 2171 	movw	r1, #625	@ 0x271
 800a37e:	4638      	mov	r0, r7
 800a380:	f7ff ff12 	bl	800a1a8 <__i2b>
 800a384:	2300      	movs	r3, #0
 800a386:	f8c8 0008 	str.w	r0, [r8, #8]
 800a38a:	4604      	mov	r4, r0
 800a38c:	6003      	str	r3, [r0, #0]
 800a38e:	f04f 0900 	mov.w	r9, #0
 800a392:	07eb      	lsls	r3, r5, #31
 800a394:	d50a      	bpl.n	800a3ac <__pow5mult+0x84>
 800a396:	4631      	mov	r1, r6
 800a398:	4622      	mov	r2, r4
 800a39a:	4638      	mov	r0, r7
 800a39c:	f7ff ff1a 	bl	800a1d4 <__multiply>
 800a3a0:	4631      	mov	r1, r6
 800a3a2:	4680      	mov	r8, r0
 800a3a4:	4638      	mov	r0, r7
 800a3a6:	f7ff fe4b 	bl	800a040 <_Bfree>
 800a3aa:	4646      	mov	r6, r8
 800a3ac:	106d      	asrs	r5, r5, #1
 800a3ae:	d00b      	beq.n	800a3c8 <__pow5mult+0xa0>
 800a3b0:	6820      	ldr	r0, [r4, #0]
 800a3b2:	b938      	cbnz	r0, 800a3c4 <__pow5mult+0x9c>
 800a3b4:	4622      	mov	r2, r4
 800a3b6:	4621      	mov	r1, r4
 800a3b8:	4638      	mov	r0, r7
 800a3ba:	f7ff ff0b 	bl	800a1d4 <__multiply>
 800a3be:	6020      	str	r0, [r4, #0]
 800a3c0:	f8c0 9000 	str.w	r9, [r0]
 800a3c4:	4604      	mov	r4, r0
 800a3c6:	e7e4      	b.n	800a392 <__pow5mult+0x6a>
 800a3c8:	4630      	mov	r0, r6
 800a3ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a3ce:	bf00      	nop
 800a3d0:	0800c794 	.word	0x0800c794
 800a3d4:	0800c6b9 	.word	0x0800c6b9
 800a3d8:	0800c739 	.word	0x0800c739

0800a3dc <__lshift>:
 800a3dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a3e0:	460c      	mov	r4, r1
 800a3e2:	6849      	ldr	r1, [r1, #4]
 800a3e4:	6923      	ldr	r3, [r4, #16]
 800a3e6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a3ea:	68a3      	ldr	r3, [r4, #8]
 800a3ec:	4607      	mov	r7, r0
 800a3ee:	4691      	mov	r9, r2
 800a3f0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a3f4:	f108 0601 	add.w	r6, r8, #1
 800a3f8:	42b3      	cmp	r3, r6
 800a3fa:	db0b      	blt.n	800a414 <__lshift+0x38>
 800a3fc:	4638      	mov	r0, r7
 800a3fe:	f7ff fddf 	bl	8009fc0 <_Balloc>
 800a402:	4605      	mov	r5, r0
 800a404:	b948      	cbnz	r0, 800a41a <__lshift+0x3e>
 800a406:	4602      	mov	r2, r0
 800a408:	4b28      	ldr	r3, [pc, #160]	@ (800a4ac <__lshift+0xd0>)
 800a40a:	4829      	ldr	r0, [pc, #164]	@ (800a4b0 <__lshift+0xd4>)
 800a40c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a410:	f000 fb94 	bl	800ab3c <__assert_func>
 800a414:	3101      	adds	r1, #1
 800a416:	005b      	lsls	r3, r3, #1
 800a418:	e7ee      	b.n	800a3f8 <__lshift+0x1c>
 800a41a:	2300      	movs	r3, #0
 800a41c:	f100 0114 	add.w	r1, r0, #20
 800a420:	f100 0210 	add.w	r2, r0, #16
 800a424:	4618      	mov	r0, r3
 800a426:	4553      	cmp	r3, sl
 800a428:	db33      	blt.n	800a492 <__lshift+0xb6>
 800a42a:	6920      	ldr	r0, [r4, #16]
 800a42c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a430:	f104 0314 	add.w	r3, r4, #20
 800a434:	f019 091f 	ands.w	r9, r9, #31
 800a438:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a43c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a440:	d02b      	beq.n	800a49a <__lshift+0xbe>
 800a442:	f1c9 0e20 	rsb	lr, r9, #32
 800a446:	468a      	mov	sl, r1
 800a448:	2200      	movs	r2, #0
 800a44a:	6818      	ldr	r0, [r3, #0]
 800a44c:	fa00 f009 	lsl.w	r0, r0, r9
 800a450:	4310      	orrs	r0, r2
 800a452:	f84a 0b04 	str.w	r0, [sl], #4
 800a456:	f853 2b04 	ldr.w	r2, [r3], #4
 800a45a:	459c      	cmp	ip, r3
 800a45c:	fa22 f20e 	lsr.w	r2, r2, lr
 800a460:	d8f3      	bhi.n	800a44a <__lshift+0x6e>
 800a462:	ebac 0304 	sub.w	r3, ip, r4
 800a466:	3b15      	subs	r3, #21
 800a468:	f023 0303 	bic.w	r3, r3, #3
 800a46c:	3304      	adds	r3, #4
 800a46e:	f104 0015 	add.w	r0, r4, #21
 800a472:	4584      	cmp	ip, r0
 800a474:	bf38      	it	cc
 800a476:	2304      	movcc	r3, #4
 800a478:	50ca      	str	r2, [r1, r3]
 800a47a:	b10a      	cbz	r2, 800a480 <__lshift+0xa4>
 800a47c:	f108 0602 	add.w	r6, r8, #2
 800a480:	3e01      	subs	r6, #1
 800a482:	4638      	mov	r0, r7
 800a484:	612e      	str	r6, [r5, #16]
 800a486:	4621      	mov	r1, r4
 800a488:	f7ff fdda 	bl	800a040 <_Bfree>
 800a48c:	4628      	mov	r0, r5
 800a48e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a492:	f842 0f04 	str.w	r0, [r2, #4]!
 800a496:	3301      	adds	r3, #1
 800a498:	e7c5      	b.n	800a426 <__lshift+0x4a>
 800a49a:	3904      	subs	r1, #4
 800a49c:	f853 2b04 	ldr.w	r2, [r3], #4
 800a4a0:	f841 2f04 	str.w	r2, [r1, #4]!
 800a4a4:	459c      	cmp	ip, r3
 800a4a6:	d8f9      	bhi.n	800a49c <__lshift+0xc0>
 800a4a8:	e7ea      	b.n	800a480 <__lshift+0xa4>
 800a4aa:	bf00      	nop
 800a4ac:	0800c728 	.word	0x0800c728
 800a4b0:	0800c739 	.word	0x0800c739

0800a4b4 <__mcmp>:
 800a4b4:	690a      	ldr	r2, [r1, #16]
 800a4b6:	4603      	mov	r3, r0
 800a4b8:	6900      	ldr	r0, [r0, #16]
 800a4ba:	1a80      	subs	r0, r0, r2
 800a4bc:	b530      	push	{r4, r5, lr}
 800a4be:	d10e      	bne.n	800a4de <__mcmp+0x2a>
 800a4c0:	3314      	adds	r3, #20
 800a4c2:	3114      	adds	r1, #20
 800a4c4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a4c8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a4cc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a4d0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a4d4:	4295      	cmp	r5, r2
 800a4d6:	d003      	beq.n	800a4e0 <__mcmp+0x2c>
 800a4d8:	d205      	bcs.n	800a4e6 <__mcmp+0x32>
 800a4da:	f04f 30ff 	mov.w	r0, #4294967295
 800a4de:	bd30      	pop	{r4, r5, pc}
 800a4e0:	42a3      	cmp	r3, r4
 800a4e2:	d3f3      	bcc.n	800a4cc <__mcmp+0x18>
 800a4e4:	e7fb      	b.n	800a4de <__mcmp+0x2a>
 800a4e6:	2001      	movs	r0, #1
 800a4e8:	e7f9      	b.n	800a4de <__mcmp+0x2a>
	...

0800a4ec <__mdiff>:
 800a4ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4f0:	4689      	mov	r9, r1
 800a4f2:	4606      	mov	r6, r0
 800a4f4:	4611      	mov	r1, r2
 800a4f6:	4648      	mov	r0, r9
 800a4f8:	4614      	mov	r4, r2
 800a4fa:	f7ff ffdb 	bl	800a4b4 <__mcmp>
 800a4fe:	1e05      	subs	r5, r0, #0
 800a500:	d112      	bne.n	800a528 <__mdiff+0x3c>
 800a502:	4629      	mov	r1, r5
 800a504:	4630      	mov	r0, r6
 800a506:	f7ff fd5b 	bl	8009fc0 <_Balloc>
 800a50a:	4602      	mov	r2, r0
 800a50c:	b928      	cbnz	r0, 800a51a <__mdiff+0x2e>
 800a50e:	4b3f      	ldr	r3, [pc, #252]	@ (800a60c <__mdiff+0x120>)
 800a510:	f240 2137 	movw	r1, #567	@ 0x237
 800a514:	483e      	ldr	r0, [pc, #248]	@ (800a610 <__mdiff+0x124>)
 800a516:	f000 fb11 	bl	800ab3c <__assert_func>
 800a51a:	2301      	movs	r3, #1
 800a51c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a520:	4610      	mov	r0, r2
 800a522:	b003      	add	sp, #12
 800a524:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a528:	bfbc      	itt	lt
 800a52a:	464b      	movlt	r3, r9
 800a52c:	46a1      	movlt	r9, r4
 800a52e:	4630      	mov	r0, r6
 800a530:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a534:	bfba      	itte	lt
 800a536:	461c      	movlt	r4, r3
 800a538:	2501      	movlt	r5, #1
 800a53a:	2500      	movge	r5, #0
 800a53c:	f7ff fd40 	bl	8009fc0 <_Balloc>
 800a540:	4602      	mov	r2, r0
 800a542:	b918      	cbnz	r0, 800a54c <__mdiff+0x60>
 800a544:	4b31      	ldr	r3, [pc, #196]	@ (800a60c <__mdiff+0x120>)
 800a546:	f240 2145 	movw	r1, #581	@ 0x245
 800a54a:	e7e3      	b.n	800a514 <__mdiff+0x28>
 800a54c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a550:	6926      	ldr	r6, [r4, #16]
 800a552:	60c5      	str	r5, [r0, #12]
 800a554:	f109 0310 	add.w	r3, r9, #16
 800a558:	f109 0514 	add.w	r5, r9, #20
 800a55c:	f104 0e14 	add.w	lr, r4, #20
 800a560:	f100 0b14 	add.w	fp, r0, #20
 800a564:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a568:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a56c:	9301      	str	r3, [sp, #4]
 800a56e:	46d9      	mov	r9, fp
 800a570:	f04f 0c00 	mov.w	ip, #0
 800a574:	9b01      	ldr	r3, [sp, #4]
 800a576:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a57a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a57e:	9301      	str	r3, [sp, #4]
 800a580:	fa1f f38a 	uxth.w	r3, sl
 800a584:	4619      	mov	r1, r3
 800a586:	b283      	uxth	r3, r0
 800a588:	1acb      	subs	r3, r1, r3
 800a58a:	0c00      	lsrs	r0, r0, #16
 800a58c:	4463      	add	r3, ip
 800a58e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a592:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a596:	b29b      	uxth	r3, r3
 800a598:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a59c:	4576      	cmp	r6, lr
 800a59e:	f849 3b04 	str.w	r3, [r9], #4
 800a5a2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a5a6:	d8e5      	bhi.n	800a574 <__mdiff+0x88>
 800a5a8:	1b33      	subs	r3, r6, r4
 800a5aa:	3b15      	subs	r3, #21
 800a5ac:	f023 0303 	bic.w	r3, r3, #3
 800a5b0:	3415      	adds	r4, #21
 800a5b2:	3304      	adds	r3, #4
 800a5b4:	42a6      	cmp	r6, r4
 800a5b6:	bf38      	it	cc
 800a5b8:	2304      	movcc	r3, #4
 800a5ba:	441d      	add	r5, r3
 800a5bc:	445b      	add	r3, fp
 800a5be:	461e      	mov	r6, r3
 800a5c0:	462c      	mov	r4, r5
 800a5c2:	4544      	cmp	r4, r8
 800a5c4:	d30e      	bcc.n	800a5e4 <__mdiff+0xf8>
 800a5c6:	f108 0103 	add.w	r1, r8, #3
 800a5ca:	1b49      	subs	r1, r1, r5
 800a5cc:	f021 0103 	bic.w	r1, r1, #3
 800a5d0:	3d03      	subs	r5, #3
 800a5d2:	45a8      	cmp	r8, r5
 800a5d4:	bf38      	it	cc
 800a5d6:	2100      	movcc	r1, #0
 800a5d8:	440b      	add	r3, r1
 800a5da:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a5de:	b191      	cbz	r1, 800a606 <__mdiff+0x11a>
 800a5e0:	6117      	str	r7, [r2, #16]
 800a5e2:	e79d      	b.n	800a520 <__mdiff+0x34>
 800a5e4:	f854 1b04 	ldr.w	r1, [r4], #4
 800a5e8:	46e6      	mov	lr, ip
 800a5ea:	0c08      	lsrs	r0, r1, #16
 800a5ec:	fa1c fc81 	uxtah	ip, ip, r1
 800a5f0:	4471      	add	r1, lr
 800a5f2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a5f6:	b289      	uxth	r1, r1
 800a5f8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a5fc:	f846 1b04 	str.w	r1, [r6], #4
 800a600:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a604:	e7dd      	b.n	800a5c2 <__mdiff+0xd6>
 800a606:	3f01      	subs	r7, #1
 800a608:	e7e7      	b.n	800a5da <__mdiff+0xee>
 800a60a:	bf00      	nop
 800a60c:	0800c728 	.word	0x0800c728
 800a610:	0800c739 	.word	0x0800c739

0800a614 <__d2b>:
 800a614:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a618:	460f      	mov	r7, r1
 800a61a:	2101      	movs	r1, #1
 800a61c:	ec59 8b10 	vmov	r8, r9, d0
 800a620:	4616      	mov	r6, r2
 800a622:	f7ff fccd 	bl	8009fc0 <_Balloc>
 800a626:	4604      	mov	r4, r0
 800a628:	b930      	cbnz	r0, 800a638 <__d2b+0x24>
 800a62a:	4602      	mov	r2, r0
 800a62c:	4b23      	ldr	r3, [pc, #140]	@ (800a6bc <__d2b+0xa8>)
 800a62e:	4824      	ldr	r0, [pc, #144]	@ (800a6c0 <__d2b+0xac>)
 800a630:	f240 310f 	movw	r1, #783	@ 0x30f
 800a634:	f000 fa82 	bl	800ab3c <__assert_func>
 800a638:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a63c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a640:	b10d      	cbz	r5, 800a646 <__d2b+0x32>
 800a642:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a646:	9301      	str	r3, [sp, #4]
 800a648:	f1b8 0300 	subs.w	r3, r8, #0
 800a64c:	d023      	beq.n	800a696 <__d2b+0x82>
 800a64e:	4668      	mov	r0, sp
 800a650:	9300      	str	r3, [sp, #0]
 800a652:	f7ff fd7c 	bl	800a14e <__lo0bits>
 800a656:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a65a:	b1d0      	cbz	r0, 800a692 <__d2b+0x7e>
 800a65c:	f1c0 0320 	rsb	r3, r0, #32
 800a660:	fa02 f303 	lsl.w	r3, r2, r3
 800a664:	430b      	orrs	r3, r1
 800a666:	40c2      	lsrs	r2, r0
 800a668:	6163      	str	r3, [r4, #20]
 800a66a:	9201      	str	r2, [sp, #4]
 800a66c:	9b01      	ldr	r3, [sp, #4]
 800a66e:	61a3      	str	r3, [r4, #24]
 800a670:	2b00      	cmp	r3, #0
 800a672:	bf0c      	ite	eq
 800a674:	2201      	moveq	r2, #1
 800a676:	2202      	movne	r2, #2
 800a678:	6122      	str	r2, [r4, #16]
 800a67a:	b1a5      	cbz	r5, 800a6a6 <__d2b+0x92>
 800a67c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a680:	4405      	add	r5, r0
 800a682:	603d      	str	r5, [r7, #0]
 800a684:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a688:	6030      	str	r0, [r6, #0]
 800a68a:	4620      	mov	r0, r4
 800a68c:	b003      	add	sp, #12
 800a68e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a692:	6161      	str	r1, [r4, #20]
 800a694:	e7ea      	b.n	800a66c <__d2b+0x58>
 800a696:	a801      	add	r0, sp, #4
 800a698:	f7ff fd59 	bl	800a14e <__lo0bits>
 800a69c:	9b01      	ldr	r3, [sp, #4]
 800a69e:	6163      	str	r3, [r4, #20]
 800a6a0:	3020      	adds	r0, #32
 800a6a2:	2201      	movs	r2, #1
 800a6a4:	e7e8      	b.n	800a678 <__d2b+0x64>
 800a6a6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a6aa:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a6ae:	6038      	str	r0, [r7, #0]
 800a6b0:	6918      	ldr	r0, [r3, #16]
 800a6b2:	f7ff fd2d 	bl	800a110 <__hi0bits>
 800a6b6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a6ba:	e7e5      	b.n	800a688 <__d2b+0x74>
 800a6bc:	0800c728 	.word	0x0800c728
 800a6c0:	0800c739 	.word	0x0800c739

0800a6c4 <__ssputs_r>:
 800a6c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a6c8:	688e      	ldr	r6, [r1, #8]
 800a6ca:	461f      	mov	r7, r3
 800a6cc:	42be      	cmp	r6, r7
 800a6ce:	680b      	ldr	r3, [r1, #0]
 800a6d0:	4682      	mov	sl, r0
 800a6d2:	460c      	mov	r4, r1
 800a6d4:	4690      	mov	r8, r2
 800a6d6:	d82d      	bhi.n	800a734 <__ssputs_r+0x70>
 800a6d8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a6dc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a6e0:	d026      	beq.n	800a730 <__ssputs_r+0x6c>
 800a6e2:	6965      	ldr	r5, [r4, #20]
 800a6e4:	6909      	ldr	r1, [r1, #16]
 800a6e6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a6ea:	eba3 0901 	sub.w	r9, r3, r1
 800a6ee:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a6f2:	1c7b      	adds	r3, r7, #1
 800a6f4:	444b      	add	r3, r9
 800a6f6:	106d      	asrs	r5, r5, #1
 800a6f8:	429d      	cmp	r5, r3
 800a6fa:	bf38      	it	cc
 800a6fc:	461d      	movcc	r5, r3
 800a6fe:	0553      	lsls	r3, r2, #21
 800a700:	d527      	bpl.n	800a752 <__ssputs_r+0x8e>
 800a702:	4629      	mov	r1, r5
 800a704:	f7ff fbd0 	bl	8009ea8 <_malloc_r>
 800a708:	4606      	mov	r6, r0
 800a70a:	b360      	cbz	r0, 800a766 <__ssputs_r+0xa2>
 800a70c:	6921      	ldr	r1, [r4, #16]
 800a70e:	464a      	mov	r2, r9
 800a710:	f000 fa06 	bl	800ab20 <memcpy>
 800a714:	89a3      	ldrh	r3, [r4, #12]
 800a716:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a71a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a71e:	81a3      	strh	r3, [r4, #12]
 800a720:	6126      	str	r6, [r4, #16]
 800a722:	6165      	str	r5, [r4, #20]
 800a724:	444e      	add	r6, r9
 800a726:	eba5 0509 	sub.w	r5, r5, r9
 800a72a:	6026      	str	r6, [r4, #0]
 800a72c:	60a5      	str	r5, [r4, #8]
 800a72e:	463e      	mov	r6, r7
 800a730:	42be      	cmp	r6, r7
 800a732:	d900      	bls.n	800a736 <__ssputs_r+0x72>
 800a734:	463e      	mov	r6, r7
 800a736:	6820      	ldr	r0, [r4, #0]
 800a738:	4632      	mov	r2, r6
 800a73a:	4641      	mov	r1, r8
 800a73c:	f000 f9c6 	bl	800aacc <memmove>
 800a740:	68a3      	ldr	r3, [r4, #8]
 800a742:	1b9b      	subs	r3, r3, r6
 800a744:	60a3      	str	r3, [r4, #8]
 800a746:	6823      	ldr	r3, [r4, #0]
 800a748:	4433      	add	r3, r6
 800a74a:	6023      	str	r3, [r4, #0]
 800a74c:	2000      	movs	r0, #0
 800a74e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a752:	462a      	mov	r2, r5
 800a754:	f000 fa36 	bl	800abc4 <_realloc_r>
 800a758:	4606      	mov	r6, r0
 800a75a:	2800      	cmp	r0, #0
 800a75c:	d1e0      	bne.n	800a720 <__ssputs_r+0x5c>
 800a75e:	6921      	ldr	r1, [r4, #16]
 800a760:	4650      	mov	r0, sl
 800a762:	f7ff fb2d 	bl	8009dc0 <_free_r>
 800a766:	230c      	movs	r3, #12
 800a768:	f8ca 3000 	str.w	r3, [sl]
 800a76c:	89a3      	ldrh	r3, [r4, #12]
 800a76e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a772:	81a3      	strh	r3, [r4, #12]
 800a774:	f04f 30ff 	mov.w	r0, #4294967295
 800a778:	e7e9      	b.n	800a74e <__ssputs_r+0x8a>
	...

0800a77c <_svfiprintf_r>:
 800a77c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a780:	4698      	mov	r8, r3
 800a782:	898b      	ldrh	r3, [r1, #12]
 800a784:	061b      	lsls	r3, r3, #24
 800a786:	b09d      	sub	sp, #116	@ 0x74
 800a788:	4607      	mov	r7, r0
 800a78a:	460d      	mov	r5, r1
 800a78c:	4614      	mov	r4, r2
 800a78e:	d510      	bpl.n	800a7b2 <_svfiprintf_r+0x36>
 800a790:	690b      	ldr	r3, [r1, #16]
 800a792:	b973      	cbnz	r3, 800a7b2 <_svfiprintf_r+0x36>
 800a794:	2140      	movs	r1, #64	@ 0x40
 800a796:	f7ff fb87 	bl	8009ea8 <_malloc_r>
 800a79a:	6028      	str	r0, [r5, #0]
 800a79c:	6128      	str	r0, [r5, #16]
 800a79e:	b930      	cbnz	r0, 800a7ae <_svfiprintf_r+0x32>
 800a7a0:	230c      	movs	r3, #12
 800a7a2:	603b      	str	r3, [r7, #0]
 800a7a4:	f04f 30ff 	mov.w	r0, #4294967295
 800a7a8:	b01d      	add	sp, #116	@ 0x74
 800a7aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7ae:	2340      	movs	r3, #64	@ 0x40
 800a7b0:	616b      	str	r3, [r5, #20]
 800a7b2:	2300      	movs	r3, #0
 800a7b4:	9309      	str	r3, [sp, #36]	@ 0x24
 800a7b6:	2320      	movs	r3, #32
 800a7b8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a7bc:	f8cd 800c 	str.w	r8, [sp, #12]
 800a7c0:	2330      	movs	r3, #48	@ 0x30
 800a7c2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a960 <_svfiprintf_r+0x1e4>
 800a7c6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a7ca:	f04f 0901 	mov.w	r9, #1
 800a7ce:	4623      	mov	r3, r4
 800a7d0:	469a      	mov	sl, r3
 800a7d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a7d6:	b10a      	cbz	r2, 800a7dc <_svfiprintf_r+0x60>
 800a7d8:	2a25      	cmp	r2, #37	@ 0x25
 800a7da:	d1f9      	bne.n	800a7d0 <_svfiprintf_r+0x54>
 800a7dc:	ebba 0b04 	subs.w	fp, sl, r4
 800a7e0:	d00b      	beq.n	800a7fa <_svfiprintf_r+0x7e>
 800a7e2:	465b      	mov	r3, fp
 800a7e4:	4622      	mov	r2, r4
 800a7e6:	4629      	mov	r1, r5
 800a7e8:	4638      	mov	r0, r7
 800a7ea:	f7ff ff6b 	bl	800a6c4 <__ssputs_r>
 800a7ee:	3001      	adds	r0, #1
 800a7f0:	f000 80a7 	beq.w	800a942 <_svfiprintf_r+0x1c6>
 800a7f4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a7f6:	445a      	add	r2, fp
 800a7f8:	9209      	str	r2, [sp, #36]	@ 0x24
 800a7fa:	f89a 3000 	ldrb.w	r3, [sl]
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	f000 809f 	beq.w	800a942 <_svfiprintf_r+0x1c6>
 800a804:	2300      	movs	r3, #0
 800a806:	f04f 32ff 	mov.w	r2, #4294967295
 800a80a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a80e:	f10a 0a01 	add.w	sl, sl, #1
 800a812:	9304      	str	r3, [sp, #16]
 800a814:	9307      	str	r3, [sp, #28]
 800a816:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a81a:	931a      	str	r3, [sp, #104]	@ 0x68
 800a81c:	4654      	mov	r4, sl
 800a81e:	2205      	movs	r2, #5
 800a820:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a824:	484e      	ldr	r0, [pc, #312]	@ (800a960 <_svfiprintf_r+0x1e4>)
 800a826:	f7f5 fcdb 	bl	80001e0 <memchr>
 800a82a:	9a04      	ldr	r2, [sp, #16]
 800a82c:	b9d8      	cbnz	r0, 800a866 <_svfiprintf_r+0xea>
 800a82e:	06d0      	lsls	r0, r2, #27
 800a830:	bf44      	itt	mi
 800a832:	2320      	movmi	r3, #32
 800a834:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a838:	0711      	lsls	r1, r2, #28
 800a83a:	bf44      	itt	mi
 800a83c:	232b      	movmi	r3, #43	@ 0x2b
 800a83e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a842:	f89a 3000 	ldrb.w	r3, [sl]
 800a846:	2b2a      	cmp	r3, #42	@ 0x2a
 800a848:	d015      	beq.n	800a876 <_svfiprintf_r+0xfa>
 800a84a:	9a07      	ldr	r2, [sp, #28]
 800a84c:	4654      	mov	r4, sl
 800a84e:	2000      	movs	r0, #0
 800a850:	f04f 0c0a 	mov.w	ip, #10
 800a854:	4621      	mov	r1, r4
 800a856:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a85a:	3b30      	subs	r3, #48	@ 0x30
 800a85c:	2b09      	cmp	r3, #9
 800a85e:	d94b      	bls.n	800a8f8 <_svfiprintf_r+0x17c>
 800a860:	b1b0      	cbz	r0, 800a890 <_svfiprintf_r+0x114>
 800a862:	9207      	str	r2, [sp, #28]
 800a864:	e014      	b.n	800a890 <_svfiprintf_r+0x114>
 800a866:	eba0 0308 	sub.w	r3, r0, r8
 800a86a:	fa09 f303 	lsl.w	r3, r9, r3
 800a86e:	4313      	orrs	r3, r2
 800a870:	9304      	str	r3, [sp, #16]
 800a872:	46a2      	mov	sl, r4
 800a874:	e7d2      	b.n	800a81c <_svfiprintf_r+0xa0>
 800a876:	9b03      	ldr	r3, [sp, #12]
 800a878:	1d19      	adds	r1, r3, #4
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	9103      	str	r1, [sp, #12]
 800a87e:	2b00      	cmp	r3, #0
 800a880:	bfbb      	ittet	lt
 800a882:	425b      	neglt	r3, r3
 800a884:	f042 0202 	orrlt.w	r2, r2, #2
 800a888:	9307      	strge	r3, [sp, #28]
 800a88a:	9307      	strlt	r3, [sp, #28]
 800a88c:	bfb8      	it	lt
 800a88e:	9204      	strlt	r2, [sp, #16]
 800a890:	7823      	ldrb	r3, [r4, #0]
 800a892:	2b2e      	cmp	r3, #46	@ 0x2e
 800a894:	d10a      	bne.n	800a8ac <_svfiprintf_r+0x130>
 800a896:	7863      	ldrb	r3, [r4, #1]
 800a898:	2b2a      	cmp	r3, #42	@ 0x2a
 800a89a:	d132      	bne.n	800a902 <_svfiprintf_r+0x186>
 800a89c:	9b03      	ldr	r3, [sp, #12]
 800a89e:	1d1a      	adds	r2, r3, #4
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	9203      	str	r2, [sp, #12]
 800a8a4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a8a8:	3402      	adds	r4, #2
 800a8aa:	9305      	str	r3, [sp, #20]
 800a8ac:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a970 <_svfiprintf_r+0x1f4>
 800a8b0:	7821      	ldrb	r1, [r4, #0]
 800a8b2:	2203      	movs	r2, #3
 800a8b4:	4650      	mov	r0, sl
 800a8b6:	f7f5 fc93 	bl	80001e0 <memchr>
 800a8ba:	b138      	cbz	r0, 800a8cc <_svfiprintf_r+0x150>
 800a8bc:	9b04      	ldr	r3, [sp, #16]
 800a8be:	eba0 000a 	sub.w	r0, r0, sl
 800a8c2:	2240      	movs	r2, #64	@ 0x40
 800a8c4:	4082      	lsls	r2, r0
 800a8c6:	4313      	orrs	r3, r2
 800a8c8:	3401      	adds	r4, #1
 800a8ca:	9304      	str	r3, [sp, #16]
 800a8cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a8d0:	4824      	ldr	r0, [pc, #144]	@ (800a964 <_svfiprintf_r+0x1e8>)
 800a8d2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a8d6:	2206      	movs	r2, #6
 800a8d8:	f7f5 fc82 	bl	80001e0 <memchr>
 800a8dc:	2800      	cmp	r0, #0
 800a8de:	d036      	beq.n	800a94e <_svfiprintf_r+0x1d2>
 800a8e0:	4b21      	ldr	r3, [pc, #132]	@ (800a968 <_svfiprintf_r+0x1ec>)
 800a8e2:	bb1b      	cbnz	r3, 800a92c <_svfiprintf_r+0x1b0>
 800a8e4:	9b03      	ldr	r3, [sp, #12]
 800a8e6:	3307      	adds	r3, #7
 800a8e8:	f023 0307 	bic.w	r3, r3, #7
 800a8ec:	3308      	adds	r3, #8
 800a8ee:	9303      	str	r3, [sp, #12]
 800a8f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a8f2:	4433      	add	r3, r6
 800a8f4:	9309      	str	r3, [sp, #36]	@ 0x24
 800a8f6:	e76a      	b.n	800a7ce <_svfiprintf_r+0x52>
 800a8f8:	fb0c 3202 	mla	r2, ip, r2, r3
 800a8fc:	460c      	mov	r4, r1
 800a8fe:	2001      	movs	r0, #1
 800a900:	e7a8      	b.n	800a854 <_svfiprintf_r+0xd8>
 800a902:	2300      	movs	r3, #0
 800a904:	3401      	adds	r4, #1
 800a906:	9305      	str	r3, [sp, #20]
 800a908:	4619      	mov	r1, r3
 800a90a:	f04f 0c0a 	mov.w	ip, #10
 800a90e:	4620      	mov	r0, r4
 800a910:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a914:	3a30      	subs	r2, #48	@ 0x30
 800a916:	2a09      	cmp	r2, #9
 800a918:	d903      	bls.n	800a922 <_svfiprintf_r+0x1a6>
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d0c6      	beq.n	800a8ac <_svfiprintf_r+0x130>
 800a91e:	9105      	str	r1, [sp, #20]
 800a920:	e7c4      	b.n	800a8ac <_svfiprintf_r+0x130>
 800a922:	fb0c 2101 	mla	r1, ip, r1, r2
 800a926:	4604      	mov	r4, r0
 800a928:	2301      	movs	r3, #1
 800a92a:	e7f0      	b.n	800a90e <_svfiprintf_r+0x192>
 800a92c:	ab03      	add	r3, sp, #12
 800a92e:	9300      	str	r3, [sp, #0]
 800a930:	462a      	mov	r2, r5
 800a932:	4b0e      	ldr	r3, [pc, #56]	@ (800a96c <_svfiprintf_r+0x1f0>)
 800a934:	a904      	add	r1, sp, #16
 800a936:	4638      	mov	r0, r7
 800a938:	f7fd fe84 	bl	8008644 <_printf_float>
 800a93c:	1c42      	adds	r2, r0, #1
 800a93e:	4606      	mov	r6, r0
 800a940:	d1d6      	bne.n	800a8f0 <_svfiprintf_r+0x174>
 800a942:	89ab      	ldrh	r3, [r5, #12]
 800a944:	065b      	lsls	r3, r3, #25
 800a946:	f53f af2d 	bmi.w	800a7a4 <_svfiprintf_r+0x28>
 800a94a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a94c:	e72c      	b.n	800a7a8 <_svfiprintf_r+0x2c>
 800a94e:	ab03      	add	r3, sp, #12
 800a950:	9300      	str	r3, [sp, #0]
 800a952:	462a      	mov	r2, r5
 800a954:	4b05      	ldr	r3, [pc, #20]	@ (800a96c <_svfiprintf_r+0x1f0>)
 800a956:	a904      	add	r1, sp, #16
 800a958:	4638      	mov	r0, r7
 800a95a:	f7fe f90b 	bl	8008b74 <_printf_i>
 800a95e:	e7ed      	b.n	800a93c <_svfiprintf_r+0x1c0>
 800a960:	0800c890 	.word	0x0800c890
 800a964:	0800c89a 	.word	0x0800c89a
 800a968:	08008645 	.word	0x08008645
 800a96c:	0800a6c5 	.word	0x0800a6c5
 800a970:	0800c896 	.word	0x0800c896

0800a974 <__sflush_r>:
 800a974:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a978:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a97c:	0716      	lsls	r6, r2, #28
 800a97e:	4605      	mov	r5, r0
 800a980:	460c      	mov	r4, r1
 800a982:	d454      	bmi.n	800aa2e <__sflush_r+0xba>
 800a984:	684b      	ldr	r3, [r1, #4]
 800a986:	2b00      	cmp	r3, #0
 800a988:	dc02      	bgt.n	800a990 <__sflush_r+0x1c>
 800a98a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	dd48      	ble.n	800aa22 <__sflush_r+0xae>
 800a990:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a992:	2e00      	cmp	r6, #0
 800a994:	d045      	beq.n	800aa22 <__sflush_r+0xae>
 800a996:	2300      	movs	r3, #0
 800a998:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a99c:	682f      	ldr	r7, [r5, #0]
 800a99e:	6a21      	ldr	r1, [r4, #32]
 800a9a0:	602b      	str	r3, [r5, #0]
 800a9a2:	d030      	beq.n	800aa06 <__sflush_r+0x92>
 800a9a4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a9a6:	89a3      	ldrh	r3, [r4, #12]
 800a9a8:	0759      	lsls	r1, r3, #29
 800a9aa:	d505      	bpl.n	800a9b8 <__sflush_r+0x44>
 800a9ac:	6863      	ldr	r3, [r4, #4]
 800a9ae:	1ad2      	subs	r2, r2, r3
 800a9b0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a9b2:	b10b      	cbz	r3, 800a9b8 <__sflush_r+0x44>
 800a9b4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a9b6:	1ad2      	subs	r2, r2, r3
 800a9b8:	2300      	movs	r3, #0
 800a9ba:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a9bc:	6a21      	ldr	r1, [r4, #32]
 800a9be:	4628      	mov	r0, r5
 800a9c0:	47b0      	blx	r6
 800a9c2:	1c43      	adds	r3, r0, #1
 800a9c4:	89a3      	ldrh	r3, [r4, #12]
 800a9c6:	d106      	bne.n	800a9d6 <__sflush_r+0x62>
 800a9c8:	6829      	ldr	r1, [r5, #0]
 800a9ca:	291d      	cmp	r1, #29
 800a9cc:	d82b      	bhi.n	800aa26 <__sflush_r+0xb2>
 800a9ce:	4a2a      	ldr	r2, [pc, #168]	@ (800aa78 <__sflush_r+0x104>)
 800a9d0:	410a      	asrs	r2, r1
 800a9d2:	07d6      	lsls	r6, r2, #31
 800a9d4:	d427      	bmi.n	800aa26 <__sflush_r+0xb2>
 800a9d6:	2200      	movs	r2, #0
 800a9d8:	6062      	str	r2, [r4, #4]
 800a9da:	04d9      	lsls	r1, r3, #19
 800a9dc:	6922      	ldr	r2, [r4, #16]
 800a9de:	6022      	str	r2, [r4, #0]
 800a9e0:	d504      	bpl.n	800a9ec <__sflush_r+0x78>
 800a9e2:	1c42      	adds	r2, r0, #1
 800a9e4:	d101      	bne.n	800a9ea <__sflush_r+0x76>
 800a9e6:	682b      	ldr	r3, [r5, #0]
 800a9e8:	b903      	cbnz	r3, 800a9ec <__sflush_r+0x78>
 800a9ea:	6560      	str	r0, [r4, #84]	@ 0x54
 800a9ec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a9ee:	602f      	str	r7, [r5, #0]
 800a9f0:	b1b9      	cbz	r1, 800aa22 <__sflush_r+0xae>
 800a9f2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a9f6:	4299      	cmp	r1, r3
 800a9f8:	d002      	beq.n	800aa00 <__sflush_r+0x8c>
 800a9fa:	4628      	mov	r0, r5
 800a9fc:	f7ff f9e0 	bl	8009dc0 <_free_r>
 800aa00:	2300      	movs	r3, #0
 800aa02:	6363      	str	r3, [r4, #52]	@ 0x34
 800aa04:	e00d      	b.n	800aa22 <__sflush_r+0xae>
 800aa06:	2301      	movs	r3, #1
 800aa08:	4628      	mov	r0, r5
 800aa0a:	47b0      	blx	r6
 800aa0c:	4602      	mov	r2, r0
 800aa0e:	1c50      	adds	r0, r2, #1
 800aa10:	d1c9      	bne.n	800a9a6 <__sflush_r+0x32>
 800aa12:	682b      	ldr	r3, [r5, #0]
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d0c6      	beq.n	800a9a6 <__sflush_r+0x32>
 800aa18:	2b1d      	cmp	r3, #29
 800aa1a:	d001      	beq.n	800aa20 <__sflush_r+0xac>
 800aa1c:	2b16      	cmp	r3, #22
 800aa1e:	d11e      	bne.n	800aa5e <__sflush_r+0xea>
 800aa20:	602f      	str	r7, [r5, #0]
 800aa22:	2000      	movs	r0, #0
 800aa24:	e022      	b.n	800aa6c <__sflush_r+0xf8>
 800aa26:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aa2a:	b21b      	sxth	r3, r3
 800aa2c:	e01b      	b.n	800aa66 <__sflush_r+0xf2>
 800aa2e:	690f      	ldr	r7, [r1, #16]
 800aa30:	2f00      	cmp	r7, #0
 800aa32:	d0f6      	beq.n	800aa22 <__sflush_r+0xae>
 800aa34:	0793      	lsls	r3, r2, #30
 800aa36:	680e      	ldr	r6, [r1, #0]
 800aa38:	bf08      	it	eq
 800aa3a:	694b      	ldreq	r3, [r1, #20]
 800aa3c:	600f      	str	r7, [r1, #0]
 800aa3e:	bf18      	it	ne
 800aa40:	2300      	movne	r3, #0
 800aa42:	eba6 0807 	sub.w	r8, r6, r7
 800aa46:	608b      	str	r3, [r1, #8]
 800aa48:	f1b8 0f00 	cmp.w	r8, #0
 800aa4c:	dde9      	ble.n	800aa22 <__sflush_r+0xae>
 800aa4e:	6a21      	ldr	r1, [r4, #32]
 800aa50:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800aa52:	4643      	mov	r3, r8
 800aa54:	463a      	mov	r2, r7
 800aa56:	4628      	mov	r0, r5
 800aa58:	47b0      	blx	r6
 800aa5a:	2800      	cmp	r0, #0
 800aa5c:	dc08      	bgt.n	800aa70 <__sflush_r+0xfc>
 800aa5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aa62:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aa66:	81a3      	strh	r3, [r4, #12]
 800aa68:	f04f 30ff 	mov.w	r0, #4294967295
 800aa6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa70:	4407      	add	r7, r0
 800aa72:	eba8 0800 	sub.w	r8, r8, r0
 800aa76:	e7e7      	b.n	800aa48 <__sflush_r+0xd4>
 800aa78:	dfbffffe 	.word	0xdfbffffe

0800aa7c <_fflush_r>:
 800aa7c:	b538      	push	{r3, r4, r5, lr}
 800aa7e:	690b      	ldr	r3, [r1, #16]
 800aa80:	4605      	mov	r5, r0
 800aa82:	460c      	mov	r4, r1
 800aa84:	b913      	cbnz	r3, 800aa8c <_fflush_r+0x10>
 800aa86:	2500      	movs	r5, #0
 800aa88:	4628      	mov	r0, r5
 800aa8a:	bd38      	pop	{r3, r4, r5, pc}
 800aa8c:	b118      	cbz	r0, 800aa96 <_fflush_r+0x1a>
 800aa8e:	6a03      	ldr	r3, [r0, #32]
 800aa90:	b90b      	cbnz	r3, 800aa96 <_fflush_r+0x1a>
 800aa92:	f7fe fa1b 	bl	8008ecc <__sinit>
 800aa96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d0f3      	beq.n	800aa86 <_fflush_r+0xa>
 800aa9e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800aaa0:	07d0      	lsls	r0, r2, #31
 800aaa2:	d404      	bmi.n	800aaae <_fflush_r+0x32>
 800aaa4:	0599      	lsls	r1, r3, #22
 800aaa6:	d402      	bmi.n	800aaae <_fflush_r+0x32>
 800aaa8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800aaaa:	f7fe fb3a 	bl	8009122 <__retarget_lock_acquire_recursive>
 800aaae:	4628      	mov	r0, r5
 800aab0:	4621      	mov	r1, r4
 800aab2:	f7ff ff5f 	bl	800a974 <__sflush_r>
 800aab6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800aab8:	07da      	lsls	r2, r3, #31
 800aaba:	4605      	mov	r5, r0
 800aabc:	d4e4      	bmi.n	800aa88 <_fflush_r+0xc>
 800aabe:	89a3      	ldrh	r3, [r4, #12]
 800aac0:	059b      	lsls	r3, r3, #22
 800aac2:	d4e1      	bmi.n	800aa88 <_fflush_r+0xc>
 800aac4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800aac6:	f7fe fb2d 	bl	8009124 <__retarget_lock_release_recursive>
 800aaca:	e7dd      	b.n	800aa88 <_fflush_r+0xc>

0800aacc <memmove>:
 800aacc:	4288      	cmp	r0, r1
 800aace:	b510      	push	{r4, lr}
 800aad0:	eb01 0402 	add.w	r4, r1, r2
 800aad4:	d902      	bls.n	800aadc <memmove+0x10>
 800aad6:	4284      	cmp	r4, r0
 800aad8:	4623      	mov	r3, r4
 800aada:	d807      	bhi.n	800aaec <memmove+0x20>
 800aadc:	1e43      	subs	r3, r0, #1
 800aade:	42a1      	cmp	r1, r4
 800aae0:	d008      	beq.n	800aaf4 <memmove+0x28>
 800aae2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800aae6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800aaea:	e7f8      	b.n	800aade <memmove+0x12>
 800aaec:	4402      	add	r2, r0
 800aaee:	4601      	mov	r1, r0
 800aaf0:	428a      	cmp	r2, r1
 800aaf2:	d100      	bne.n	800aaf6 <memmove+0x2a>
 800aaf4:	bd10      	pop	{r4, pc}
 800aaf6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800aafa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800aafe:	e7f7      	b.n	800aaf0 <memmove+0x24>

0800ab00 <_sbrk_r>:
 800ab00:	b538      	push	{r3, r4, r5, lr}
 800ab02:	4d06      	ldr	r5, [pc, #24]	@ (800ab1c <_sbrk_r+0x1c>)
 800ab04:	2300      	movs	r3, #0
 800ab06:	4604      	mov	r4, r0
 800ab08:	4608      	mov	r0, r1
 800ab0a:	602b      	str	r3, [r5, #0]
 800ab0c:	f7f7 f80e 	bl	8001b2c <_sbrk>
 800ab10:	1c43      	adds	r3, r0, #1
 800ab12:	d102      	bne.n	800ab1a <_sbrk_r+0x1a>
 800ab14:	682b      	ldr	r3, [r5, #0]
 800ab16:	b103      	cbz	r3, 800ab1a <_sbrk_r+0x1a>
 800ab18:	6023      	str	r3, [r4, #0]
 800ab1a:	bd38      	pop	{r3, r4, r5, pc}
 800ab1c:	200006d0 	.word	0x200006d0

0800ab20 <memcpy>:
 800ab20:	440a      	add	r2, r1
 800ab22:	4291      	cmp	r1, r2
 800ab24:	f100 33ff 	add.w	r3, r0, #4294967295
 800ab28:	d100      	bne.n	800ab2c <memcpy+0xc>
 800ab2a:	4770      	bx	lr
 800ab2c:	b510      	push	{r4, lr}
 800ab2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ab32:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ab36:	4291      	cmp	r1, r2
 800ab38:	d1f9      	bne.n	800ab2e <memcpy+0xe>
 800ab3a:	bd10      	pop	{r4, pc}

0800ab3c <__assert_func>:
 800ab3c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ab3e:	4614      	mov	r4, r2
 800ab40:	461a      	mov	r2, r3
 800ab42:	4b09      	ldr	r3, [pc, #36]	@ (800ab68 <__assert_func+0x2c>)
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	4605      	mov	r5, r0
 800ab48:	68d8      	ldr	r0, [r3, #12]
 800ab4a:	b954      	cbnz	r4, 800ab62 <__assert_func+0x26>
 800ab4c:	4b07      	ldr	r3, [pc, #28]	@ (800ab6c <__assert_func+0x30>)
 800ab4e:	461c      	mov	r4, r3
 800ab50:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ab54:	9100      	str	r1, [sp, #0]
 800ab56:	462b      	mov	r3, r5
 800ab58:	4905      	ldr	r1, [pc, #20]	@ (800ab70 <__assert_func+0x34>)
 800ab5a:	f000 f86f 	bl	800ac3c <fiprintf>
 800ab5e:	f000 f87f 	bl	800ac60 <abort>
 800ab62:	4b04      	ldr	r3, [pc, #16]	@ (800ab74 <__assert_func+0x38>)
 800ab64:	e7f4      	b.n	800ab50 <__assert_func+0x14>
 800ab66:	bf00      	nop
 800ab68:	20000018 	.word	0x20000018
 800ab6c:	0800c8e6 	.word	0x0800c8e6
 800ab70:	0800c8b8 	.word	0x0800c8b8
 800ab74:	0800c8ab 	.word	0x0800c8ab

0800ab78 <_calloc_r>:
 800ab78:	b570      	push	{r4, r5, r6, lr}
 800ab7a:	fba1 5402 	umull	r5, r4, r1, r2
 800ab7e:	b93c      	cbnz	r4, 800ab90 <_calloc_r+0x18>
 800ab80:	4629      	mov	r1, r5
 800ab82:	f7ff f991 	bl	8009ea8 <_malloc_r>
 800ab86:	4606      	mov	r6, r0
 800ab88:	b928      	cbnz	r0, 800ab96 <_calloc_r+0x1e>
 800ab8a:	2600      	movs	r6, #0
 800ab8c:	4630      	mov	r0, r6
 800ab8e:	bd70      	pop	{r4, r5, r6, pc}
 800ab90:	220c      	movs	r2, #12
 800ab92:	6002      	str	r2, [r0, #0]
 800ab94:	e7f9      	b.n	800ab8a <_calloc_r+0x12>
 800ab96:	462a      	mov	r2, r5
 800ab98:	4621      	mov	r1, r4
 800ab9a:	f7fe fa44 	bl	8009026 <memset>
 800ab9e:	e7f5      	b.n	800ab8c <_calloc_r+0x14>

0800aba0 <__ascii_mbtowc>:
 800aba0:	b082      	sub	sp, #8
 800aba2:	b901      	cbnz	r1, 800aba6 <__ascii_mbtowc+0x6>
 800aba4:	a901      	add	r1, sp, #4
 800aba6:	b142      	cbz	r2, 800abba <__ascii_mbtowc+0x1a>
 800aba8:	b14b      	cbz	r3, 800abbe <__ascii_mbtowc+0x1e>
 800abaa:	7813      	ldrb	r3, [r2, #0]
 800abac:	600b      	str	r3, [r1, #0]
 800abae:	7812      	ldrb	r2, [r2, #0]
 800abb0:	1e10      	subs	r0, r2, #0
 800abb2:	bf18      	it	ne
 800abb4:	2001      	movne	r0, #1
 800abb6:	b002      	add	sp, #8
 800abb8:	4770      	bx	lr
 800abba:	4610      	mov	r0, r2
 800abbc:	e7fb      	b.n	800abb6 <__ascii_mbtowc+0x16>
 800abbe:	f06f 0001 	mvn.w	r0, #1
 800abc2:	e7f8      	b.n	800abb6 <__ascii_mbtowc+0x16>

0800abc4 <_realloc_r>:
 800abc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800abc8:	4680      	mov	r8, r0
 800abca:	4615      	mov	r5, r2
 800abcc:	460c      	mov	r4, r1
 800abce:	b921      	cbnz	r1, 800abda <_realloc_r+0x16>
 800abd0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800abd4:	4611      	mov	r1, r2
 800abd6:	f7ff b967 	b.w	8009ea8 <_malloc_r>
 800abda:	b92a      	cbnz	r2, 800abe8 <_realloc_r+0x24>
 800abdc:	f7ff f8f0 	bl	8009dc0 <_free_r>
 800abe0:	2400      	movs	r4, #0
 800abe2:	4620      	mov	r0, r4
 800abe4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800abe8:	f000 f841 	bl	800ac6e <_malloc_usable_size_r>
 800abec:	4285      	cmp	r5, r0
 800abee:	4606      	mov	r6, r0
 800abf0:	d802      	bhi.n	800abf8 <_realloc_r+0x34>
 800abf2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800abf6:	d8f4      	bhi.n	800abe2 <_realloc_r+0x1e>
 800abf8:	4629      	mov	r1, r5
 800abfa:	4640      	mov	r0, r8
 800abfc:	f7ff f954 	bl	8009ea8 <_malloc_r>
 800ac00:	4607      	mov	r7, r0
 800ac02:	2800      	cmp	r0, #0
 800ac04:	d0ec      	beq.n	800abe0 <_realloc_r+0x1c>
 800ac06:	42b5      	cmp	r5, r6
 800ac08:	462a      	mov	r2, r5
 800ac0a:	4621      	mov	r1, r4
 800ac0c:	bf28      	it	cs
 800ac0e:	4632      	movcs	r2, r6
 800ac10:	f7ff ff86 	bl	800ab20 <memcpy>
 800ac14:	4621      	mov	r1, r4
 800ac16:	4640      	mov	r0, r8
 800ac18:	f7ff f8d2 	bl	8009dc0 <_free_r>
 800ac1c:	463c      	mov	r4, r7
 800ac1e:	e7e0      	b.n	800abe2 <_realloc_r+0x1e>

0800ac20 <__ascii_wctomb>:
 800ac20:	4603      	mov	r3, r0
 800ac22:	4608      	mov	r0, r1
 800ac24:	b141      	cbz	r1, 800ac38 <__ascii_wctomb+0x18>
 800ac26:	2aff      	cmp	r2, #255	@ 0xff
 800ac28:	d904      	bls.n	800ac34 <__ascii_wctomb+0x14>
 800ac2a:	228a      	movs	r2, #138	@ 0x8a
 800ac2c:	601a      	str	r2, [r3, #0]
 800ac2e:	f04f 30ff 	mov.w	r0, #4294967295
 800ac32:	4770      	bx	lr
 800ac34:	700a      	strb	r2, [r1, #0]
 800ac36:	2001      	movs	r0, #1
 800ac38:	4770      	bx	lr
	...

0800ac3c <fiprintf>:
 800ac3c:	b40e      	push	{r1, r2, r3}
 800ac3e:	b503      	push	{r0, r1, lr}
 800ac40:	4601      	mov	r1, r0
 800ac42:	ab03      	add	r3, sp, #12
 800ac44:	4805      	ldr	r0, [pc, #20]	@ (800ac5c <fiprintf+0x20>)
 800ac46:	f853 2b04 	ldr.w	r2, [r3], #4
 800ac4a:	6800      	ldr	r0, [r0, #0]
 800ac4c:	9301      	str	r3, [sp, #4]
 800ac4e:	f000 f83f 	bl	800acd0 <_vfiprintf_r>
 800ac52:	b002      	add	sp, #8
 800ac54:	f85d eb04 	ldr.w	lr, [sp], #4
 800ac58:	b003      	add	sp, #12
 800ac5a:	4770      	bx	lr
 800ac5c:	20000018 	.word	0x20000018

0800ac60 <abort>:
 800ac60:	b508      	push	{r3, lr}
 800ac62:	2006      	movs	r0, #6
 800ac64:	f000 fa08 	bl	800b078 <raise>
 800ac68:	2001      	movs	r0, #1
 800ac6a:	f7f6 fee7 	bl	8001a3c <_exit>

0800ac6e <_malloc_usable_size_r>:
 800ac6e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ac72:	1f18      	subs	r0, r3, #4
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	bfbc      	itt	lt
 800ac78:	580b      	ldrlt	r3, [r1, r0]
 800ac7a:	18c0      	addlt	r0, r0, r3
 800ac7c:	4770      	bx	lr

0800ac7e <__sfputc_r>:
 800ac7e:	6893      	ldr	r3, [r2, #8]
 800ac80:	3b01      	subs	r3, #1
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	b410      	push	{r4}
 800ac86:	6093      	str	r3, [r2, #8]
 800ac88:	da08      	bge.n	800ac9c <__sfputc_r+0x1e>
 800ac8a:	6994      	ldr	r4, [r2, #24]
 800ac8c:	42a3      	cmp	r3, r4
 800ac8e:	db01      	blt.n	800ac94 <__sfputc_r+0x16>
 800ac90:	290a      	cmp	r1, #10
 800ac92:	d103      	bne.n	800ac9c <__sfputc_r+0x1e>
 800ac94:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ac98:	f000 b932 	b.w	800af00 <__swbuf_r>
 800ac9c:	6813      	ldr	r3, [r2, #0]
 800ac9e:	1c58      	adds	r0, r3, #1
 800aca0:	6010      	str	r0, [r2, #0]
 800aca2:	7019      	strb	r1, [r3, #0]
 800aca4:	4608      	mov	r0, r1
 800aca6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800acaa:	4770      	bx	lr

0800acac <__sfputs_r>:
 800acac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acae:	4606      	mov	r6, r0
 800acb0:	460f      	mov	r7, r1
 800acb2:	4614      	mov	r4, r2
 800acb4:	18d5      	adds	r5, r2, r3
 800acb6:	42ac      	cmp	r4, r5
 800acb8:	d101      	bne.n	800acbe <__sfputs_r+0x12>
 800acba:	2000      	movs	r0, #0
 800acbc:	e007      	b.n	800acce <__sfputs_r+0x22>
 800acbe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800acc2:	463a      	mov	r2, r7
 800acc4:	4630      	mov	r0, r6
 800acc6:	f7ff ffda 	bl	800ac7e <__sfputc_r>
 800acca:	1c43      	adds	r3, r0, #1
 800accc:	d1f3      	bne.n	800acb6 <__sfputs_r+0xa>
 800acce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800acd0 <_vfiprintf_r>:
 800acd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acd4:	460d      	mov	r5, r1
 800acd6:	b09d      	sub	sp, #116	@ 0x74
 800acd8:	4614      	mov	r4, r2
 800acda:	4698      	mov	r8, r3
 800acdc:	4606      	mov	r6, r0
 800acde:	b118      	cbz	r0, 800ace8 <_vfiprintf_r+0x18>
 800ace0:	6a03      	ldr	r3, [r0, #32]
 800ace2:	b90b      	cbnz	r3, 800ace8 <_vfiprintf_r+0x18>
 800ace4:	f7fe f8f2 	bl	8008ecc <__sinit>
 800ace8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800acea:	07d9      	lsls	r1, r3, #31
 800acec:	d405      	bmi.n	800acfa <_vfiprintf_r+0x2a>
 800acee:	89ab      	ldrh	r3, [r5, #12]
 800acf0:	059a      	lsls	r2, r3, #22
 800acf2:	d402      	bmi.n	800acfa <_vfiprintf_r+0x2a>
 800acf4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800acf6:	f7fe fa14 	bl	8009122 <__retarget_lock_acquire_recursive>
 800acfa:	89ab      	ldrh	r3, [r5, #12]
 800acfc:	071b      	lsls	r3, r3, #28
 800acfe:	d501      	bpl.n	800ad04 <_vfiprintf_r+0x34>
 800ad00:	692b      	ldr	r3, [r5, #16]
 800ad02:	b99b      	cbnz	r3, 800ad2c <_vfiprintf_r+0x5c>
 800ad04:	4629      	mov	r1, r5
 800ad06:	4630      	mov	r0, r6
 800ad08:	f000 f938 	bl	800af7c <__swsetup_r>
 800ad0c:	b170      	cbz	r0, 800ad2c <_vfiprintf_r+0x5c>
 800ad0e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ad10:	07dc      	lsls	r4, r3, #31
 800ad12:	d504      	bpl.n	800ad1e <_vfiprintf_r+0x4e>
 800ad14:	f04f 30ff 	mov.w	r0, #4294967295
 800ad18:	b01d      	add	sp, #116	@ 0x74
 800ad1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad1e:	89ab      	ldrh	r3, [r5, #12]
 800ad20:	0598      	lsls	r0, r3, #22
 800ad22:	d4f7      	bmi.n	800ad14 <_vfiprintf_r+0x44>
 800ad24:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ad26:	f7fe f9fd 	bl	8009124 <__retarget_lock_release_recursive>
 800ad2a:	e7f3      	b.n	800ad14 <_vfiprintf_r+0x44>
 800ad2c:	2300      	movs	r3, #0
 800ad2e:	9309      	str	r3, [sp, #36]	@ 0x24
 800ad30:	2320      	movs	r3, #32
 800ad32:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ad36:	f8cd 800c 	str.w	r8, [sp, #12]
 800ad3a:	2330      	movs	r3, #48	@ 0x30
 800ad3c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800aeec <_vfiprintf_r+0x21c>
 800ad40:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ad44:	f04f 0901 	mov.w	r9, #1
 800ad48:	4623      	mov	r3, r4
 800ad4a:	469a      	mov	sl, r3
 800ad4c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ad50:	b10a      	cbz	r2, 800ad56 <_vfiprintf_r+0x86>
 800ad52:	2a25      	cmp	r2, #37	@ 0x25
 800ad54:	d1f9      	bne.n	800ad4a <_vfiprintf_r+0x7a>
 800ad56:	ebba 0b04 	subs.w	fp, sl, r4
 800ad5a:	d00b      	beq.n	800ad74 <_vfiprintf_r+0xa4>
 800ad5c:	465b      	mov	r3, fp
 800ad5e:	4622      	mov	r2, r4
 800ad60:	4629      	mov	r1, r5
 800ad62:	4630      	mov	r0, r6
 800ad64:	f7ff ffa2 	bl	800acac <__sfputs_r>
 800ad68:	3001      	adds	r0, #1
 800ad6a:	f000 80a7 	beq.w	800aebc <_vfiprintf_r+0x1ec>
 800ad6e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ad70:	445a      	add	r2, fp
 800ad72:	9209      	str	r2, [sp, #36]	@ 0x24
 800ad74:	f89a 3000 	ldrb.w	r3, [sl]
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	f000 809f 	beq.w	800aebc <_vfiprintf_r+0x1ec>
 800ad7e:	2300      	movs	r3, #0
 800ad80:	f04f 32ff 	mov.w	r2, #4294967295
 800ad84:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ad88:	f10a 0a01 	add.w	sl, sl, #1
 800ad8c:	9304      	str	r3, [sp, #16]
 800ad8e:	9307      	str	r3, [sp, #28]
 800ad90:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ad94:	931a      	str	r3, [sp, #104]	@ 0x68
 800ad96:	4654      	mov	r4, sl
 800ad98:	2205      	movs	r2, #5
 800ad9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad9e:	4853      	ldr	r0, [pc, #332]	@ (800aeec <_vfiprintf_r+0x21c>)
 800ada0:	f7f5 fa1e 	bl	80001e0 <memchr>
 800ada4:	9a04      	ldr	r2, [sp, #16]
 800ada6:	b9d8      	cbnz	r0, 800ade0 <_vfiprintf_r+0x110>
 800ada8:	06d1      	lsls	r1, r2, #27
 800adaa:	bf44      	itt	mi
 800adac:	2320      	movmi	r3, #32
 800adae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800adb2:	0713      	lsls	r3, r2, #28
 800adb4:	bf44      	itt	mi
 800adb6:	232b      	movmi	r3, #43	@ 0x2b
 800adb8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800adbc:	f89a 3000 	ldrb.w	r3, [sl]
 800adc0:	2b2a      	cmp	r3, #42	@ 0x2a
 800adc2:	d015      	beq.n	800adf0 <_vfiprintf_r+0x120>
 800adc4:	9a07      	ldr	r2, [sp, #28]
 800adc6:	4654      	mov	r4, sl
 800adc8:	2000      	movs	r0, #0
 800adca:	f04f 0c0a 	mov.w	ip, #10
 800adce:	4621      	mov	r1, r4
 800add0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800add4:	3b30      	subs	r3, #48	@ 0x30
 800add6:	2b09      	cmp	r3, #9
 800add8:	d94b      	bls.n	800ae72 <_vfiprintf_r+0x1a2>
 800adda:	b1b0      	cbz	r0, 800ae0a <_vfiprintf_r+0x13a>
 800addc:	9207      	str	r2, [sp, #28]
 800adde:	e014      	b.n	800ae0a <_vfiprintf_r+0x13a>
 800ade0:	eba0 0308 	sub.w	r3, r0, r8
 800ade4:	fa09 f303 	lsl.w	r3, r9, r3
 800ade8:	4313      	orrs	r3, r2
 800adea:	9304      	str	r3, [sp, #16]
 800adec:	46a2      	mov	sl, r4
 800adee:	e7d2      	b.n	800ad96 <_vfiprintf_r+0xc6>
 800adf0:	9b03      	ldr	r3, [sp, #12]
 800adf2:	1d19      	adds	r1, r3, #4
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	9103      	str	r1, [sp, #12]
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	bfbb      	ittet	lt
 800adfc:	425b      	neglt	r3, r3
 800adfe:	f042 0202 	orrlt.w	r2, r2, #2
 800ae02:	9307      	strge	r3, [sp, #28]
 800ae04:	9307      	strlt	r3, [sp, #28]
 800ae06:	bfb8      	it	lt
 800ae08:	9204      	strlt	r2, [sp, #16]
 800ae0a:	7823      	ldrb	r3, [r4, #0]
 800ae0c:	2b2e      	cmp	r3, #46	@ 0x2e
 800ae0e:	d10a      	bne.n	800ae26 <_vfiprintf_r+0x156>
 800ae10:	7863      	ldrb	r3, [r4, #1]
 800ae12:	2b2a      	cmp	r3, #42	@ 0x2a
 800ae14:	d132      	bne.n	800ae7c <_vfiprintf_r+0x1ac>
 800ae16:	9b03      	ldr	r3, [sp, #12]
 800ae18:	1d1a      	adds	r2, r3, #4
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	9203      	str	r2, [sp, #12]
 800ae1e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ae22:	3402      	adds	r4, #2
 800ae24:	9305      	str	r3, [sp, #20]
 800ae26:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800aefc <_vfiprintf_r+0x22c>
 800ae2a:	7821      	ldrb	r1, [r4, #0]
 800ae2c:	2203      	movs	r2, #3
 800ae2e:	4650      	mov	r0, sl
 800ae30:	f7f5 f9d6 	bl	80001e0 <memchr>
 800ae34:	b138      	cbz	r0, 800ae46 <_vfiprintf_r+0x176>
 800ae36:	9b04      	ldr	r3, [sp, #16]
 800ae38:	eba0 000a 	sub.w	r0, r0, sl
 800ae3c:	2240      	movs	r2, #64	@ 0x40
 800ae3e:	4082      	lsls	r2, r0
 800ae40:	4313      	orrs	r3, r2
 800ae42:	3401      	adds	r4, #1
 800ae44:	9304      	str	r3, [sp, #16]
 800ae46:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae4a:	4829      	ldr	r0, [pc, #164]	@ (800aef0 <_vfiprintf_r+0x220>)
 800ae4c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ae50:	2206      	movs	r2, #6
 800ae52:	f7f5 f9c5 	bl	80001e0 <memchr>
 800ae56:	2800      	cmp	r0, #0
 800ae58:	d03f      	beq.n	800aeda <_vfiprintf_r+0x20a>
 800ae5a:	4b26      	ldr	r3, [pc, #152]	@ (800aef4 <_vfiprintf_r+0x224>)
 800ae5c:	bb1b      	cbnz	r3, 800aea6 <_vfiprintf_r+0x1d6>
 800ae5e:	9b03      	ldr	r3, [sp, #12]
 800ae60:	3307      	adds	r3, #7
 800ae62:	f023 0307 	bic.w	r3, r3, #7
 800ae66:	3308      	adds	r3, #8
 800ae68:	9303      	str	r3, [sp, #12]
 800ae6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae6c:	443b      	add	r3, r7
 800ae6e:	9309      	str	r3, [sp, #36]	@ 0x24
 800ae70:	e76a      	b.n	800ad48 <_vfiprintf_r+0x78>
 800ae72:	fb0c 3202 	mla	r2, ip, r2, r3
 800ae76:	460c      	mov	r4, r1
 800ae78:	2001      	movs	r0, #1
 800ae7a:	e7a8      	b.n	800adce <_vfiprintf_r+0xfe>
 800ae7c:	2300      	movs	r3, #0
 800ae7e:	3401      	adds	r4, #1
 800ae80:	9305      	str	r3, [sp, #20]
 800ae82:	4619      	mov	r1, r3
 800ae84:	f04f 0c0a 	mov.w	ip, #10
 800ae88:	4620      	mov	r0, r4
 800ae8a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ae8e:	3a30      	subs	r2, #48	@ 0x30
 800ae90:	2a09      	cmp	r2, #9
 800ae92:	d903      	bls.n	800ae9c <_vfiprintf_r+0x1cc>
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d0c6      	beq.n	800ae26 <_vfiprintf_r+0x156>
 800ae98:	9105      	str	r1, [sp, #20]
 800ae9a:	e7c4      	b.n	800ae26 <_vfiprintf_r+0x156>
 800ae9c:	fb0c 2101 	mla	r1, ip, r1, r2
 800aea0:	4604      	mov	r4, r0
 800aea2:	2301      	movs	r3, #1
 800aea4:	e7f0      	b.n	800ae88 <_vfiprintf_r+0x1b8>
 800aea6:	ab03      	add	r3, sp, #12
 800aea8:	9300      	str	r3, [sp, #0]
 800aeaa:	462a      	mov	r2, r5
 800aeac:	4b12      	ldr	r3, [pc, #72]	@ (800aef8 <_vfiprintf_r+0x228>)
 800aeae:	a904      	add	r1, sp, #16
 800aeb0:	4630      	mov	r0, r6
 800aeb2:	f7fd fbc7 	bl	8008644 <_printf_float>
 800aeb6:	4607      	mov	r7, r0
 800aeb8:	1c78      	adds	r0, r7, #1
 800aeba:	d1d6      	bne.n	800ae6a <_vfiprintf_r+0x19a>
 800aebc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800aebe:	07d9      	lsls	r1, r3, #31
 800aec0:	d405      	bmi.n	800aece <_vfiprintf_r+0x1fe>
 800aec2:	89ab      	ldrh	r3, [r5, #12]
 800aec4:	059a      	lsls	r2, r3, #22
 800aec6:	d402      	bmi.n	800aece <_vfiprintf_r+0x1fe>
 800aec8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800aeca:	f7fe f92b 	bl	8009124 <__retarget_lock_release_recursive>
 800aece:	89ab      	ldrh	r3, [r5, #12]
 800aed0:	065b      	lsls	r3, r3, #25
 800aed2:	f53f af1f 	bmi.w	800ad14 <_vfiprintf_r+0x44>
 800aed6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800aed8:	e71e      	b.n	800ad18 <_vfiprintf_r+0x48>
 800aeda:	ab03      	add	r3, sp, #12
 800aedc:	9300      	str	r3, [sp, #0]
 800aede:	462a      	mov	r2, r5
 800aee0:	4b05      	ldr	r3, [pc, #20]	@ (800aef8 <_vfiprintf_r+0x228>)
 800aee2:	a904      	add	r1, sp, #16
 800aee4:	4630      	mov	r0, r6
 800aee6:	f7fd fe45 	bl	8008b74 <_printf_i>
 800aeea:	e7e4      	b.n	800aeb6 <_vfiprintf_r+0x1e6>
 800aeec:	0800c890 	.word	0x0800c890
 800aef0:	0800c89a 	.word	0x0800c89a
 800aef4:	08008645 	.word	0x08008645
 800aef8:	0800acad 	.word	0x0800acad
 800aefc:	0800c896 	.word	0x0800c896

0800af00 <__swbuf_r>:
 800af00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af02:	460e      	mov	r6, r1
 800af04:	4614      	mov	r4, r2
 800af06:	4605      	mov	r5, r0
 800af08:	b118      	cbz	r0, 800af12 <__swbuf_r+0x12>
 800af0a:	6a03      	ldr	r3, [r0, #32]
 800af0c:	b90b      	cbnz	r3, 800af12 <__swbuf_r+0x12>
 800af0e:	f7fd ffdd 	bl	8008ecc <__sinit>
 800af12:	69a3      	ldr	r3, [r4, #24]
 800af14:	60a3      	str	r3, [r4, #8]
 800af16:	89a3      	ldrh	r3, [r4, #12]
 800af18:	071a      	lsls	r2, r3, #28
 800af1a:	d501      	bpl.n	800af20 <__swbuf_r+0x20>
 800af1c:	6923      	ldr	r3, [r4, #16]
 800af1e:	b943      	cbnz	r3, 800af32 <__swbuf_r+0x32>
 800af20:	4621      	mov	r1, r4
 800af22:	4628      	mov	r0, r5
 800af24:	f000 f82a 	bl	800af7c <__swsetup_r>
 800af28:	b118      	cbz	r0, 800af32 <__swbuf_r+0x32>
 800af2a:	f04f 37ff 	mov.w	r7, #4294967295
 800af2e:	4638      	mov	r0, r7
 800af30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800af32:	6823      	ldr	r3, [r4, #0]
 800af34:	6922      	ldr	r2, [r4, #16]
 800af36:	1a98      	subs	r0, r3, r2
 800af38:	6963      	ldr	r3, [r4, #20]
 800af3a:	b2f6      	uxtb	r6, r6
 800af3c:	4283      	cmp	r3, r0
 800af3e:	4637      	mov	r7, r6
 800af40:	dc05      	bgt.n	800af4e <__swbuf_r+0x4e>
 800af42:	4621      	mov	r1, r4
 800af44:	4628      	mov	r0, r5
 800af46:	f7ff fd99 	bl	800aa7c <_fflush_r>
 800af4a:	2800      	cmp	r0, #0
 800af4c:	d1ed      	bne.n	800af2a <__swbuf_r+0x2a>
 800af4e:	68a3      	ldr	r3, [r4, #8]
 800af50:	3b01      	subs	r3, #1
 800af52:	60a3      	str	r3, [r4, #8]
 800af54:	6823      	ldr	r3, [r4, #0]
 800af56:	1c5a      	adds	r2, r3, #1
 800af58:	6022      	str	r2, [r4, #0]
 800af5a:	701e      	strb	r6, [r3, #0]
 800af5c:	6962      	ldr	r2, [r4, #20]
 800af5e:	1c43      	adds	r3, r0, #1
 800af60:	429a      	cmp	r2, r3
 800af62:	d004      	beq.n	800af6e <__swbuf_r+0x6e>
 800af64:	89a3      	ldrh	r3, [r4, #12]
 800af66:	07db      	lsls	r3, r3, #31
 800af68:	d5e1      	bpl.n	800af2e <__swbuf_r+0x2e>
 800af6a:	2e0a      	cmp	r6, #10
 800af6c:	d1df      	bne.n	800af2e <__swbuf_r+0x2e>
 800af6e:	4621      	mov	r1, r4
 800af70:	4628      	mov	r0, r5
 800af72:	f7ff fd83 	bl	800aa7c <_fflush_r>
 800af76:	2800      	cmp	r0, #0
 800af78:	d0d9      	beq.n	800af2e <__swbuf_r+0x2e>
 800af7a:	e7d6      	b.n	800af2a <__swbuf_r+0x2a>

0800af7c <__swsetup_r>:
 800af7c:	b538      	push	{r3, r4, r5, lr}
 800af7e:	4b29      	ldr	r3, [pc, #164]	@ (800b024 <__swsetup_r+0xa8>)
 800af80:	4605      	mov	r5, r0
 800af82:	6818      	ldr	r0, [r3, #0]
 800af84:	460c      	mov	r4, r1
 800af86:	b118      	cbz	r0, 800af90 <__swsetup_r+0x14>
 800af88:	6a03      	ldr	r3, [r0, #32]
 800af8a:	b90b      	cbnz	r3, 800af90 <__swsetup_r+0x14>
 800af8c:	f7fd ff9e 	bl	8008ecc <__sinit>
 800af90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800af94:	0719      	lsls	r1, r3, #28
 800af96:	d422      	bmi.n	800afde <__swsetup_r+0x62>
 800af98:	06da      	lsls	r2, r3, #27
 800af9a:	d407      	bmi.n	800afac <__swsetup_r+0x30>
 800af9c:	2209      	movs	r2, #9
 800af9e:	602a      	str	r2, [r5, #0]
 800afa0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800afa4:	81a3      	strh	r3, [r4, #12]
 800afa6:	f04f 30ff 	mov.w	r0, #4294967295
 800afaa:	e033      	b.n	800b014 <__swsetup_r+0x98>
 800afac:	0758      	lsls	r0, r3, #29
 800afae:	d512      	bpl.n	800afd6 <__swsetup_r+0x5a>
 800afb0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800afb2:	b141      	cbz	r1, 800afc6 <__swsetup_r+0x4a>
 800afb4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800afb8:	4299      	cmp	r1, r3
 800afba:	d002      	beq.n	800afc2 <__swsetup_r+0x46>
 800afbc:	4628      	mov	r0, r5
 800afbe:	f7fe feff 	bl	8009dc0 <_free_r>
 800afc2:	2300      	movs	r3, #0
 800afc4:	6363      	str	r3, [r4, #52]	@ 0x34
 800afc6:	89a3      	ldrh	r3, [r4, #12]
 800afc8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800afcc:	81a3      	strh	r3, [r4, #12]
 800afce:	2300      	movs	r3, #0
 800afd0:	6063      	str	r3, [r4, #4]
 800afd2:	6923      	ldr	r3, [r4, #16]
 800afd4:	6023      	str	r3, [r4, #0]
 800afd6:	89a3      	ldrh	r3, [r4, #12]
 800afd8:	f043 0308 	orr.w	r3, r3, #8
 800afdc:	81a3      	strh	r3, [r4, #12]
 800afde:	6923      	ldr	r3, [r4, #16]
 800afe0:	b94b      	cbnz	r3, 800aff6 <__swsetup_r+0x7a>
 800afe2:	89a3      	ldrh	r3, [r4, #12]
 800afe4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800afe8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800afec:	d003      	beq.n	800aff6 <__swsetup_r+0x7a>
 800afee:	4621      	mov	r1, r4
 800aff0:	4628      	mov	r0, r5
 800aff2:	f000 f883 	bl	800b0fc <__smakebuf_r>
 800aff6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800affa:	f013 0201 	ands.w	r2, r3, #1
 800affe:	d00a      	beq.n	800b016 <__swsetup_r+0x9a>
 800b000:	2200      	movs	r2, #0
 800b002:	60a2      	str	r2, [r4, #8]
 800b004:	6962      	ldr	r2, [r4, #20]
 800b006:	4252      	negs	r2, r2
 800b008:	61a2      	str	r2, [r4, #24]
 800b00a:	6922      	ldr	r2, [r4, #16]
 800b00c:	b942      	cbnz	r2, 800b020 <__swsetup_r+0xa4>
 800b00e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b012:	d1c5      	bne.n	800afa0 <__swsetup_r+0x24>
 800b014:	bd38      	pop	{r3, r4, r5, pc}
 800b016:	0799      	lsls	r1, r3, #30
 800b018:	bf58      	it	pl
 800b01a:	6962      	ldrpl	r2, [r4, #20]
 800b01c:	60a2      	str	r2, [r4, #8]
 800b01e:	e7f4      	b.n	800b00a <__swsetup_r+0x8e>
 800b020:	2000      	movs	r0, #0
 800b022:	e7f7      	b.n	800b014 <__swsetup_r+0x98>
 800b024:	20000018 	.word	0x20000018

0800b028 <_raise_r>:
 800b028:	291f      	cmp	r1, #31
 800b02a:	b538      	push	{r3, r4, r5, lr}
 800b02c:	4605      	mov	r5, r0
 800b02e:	460c      	mov	r4, r1
 800b030:	d904      	bls.n	800b03c <_raise_r+0x14>
 800b032:	2316      	movs	r3, #22
 800b034:	6003      	str	r3, [r0, #0]
 800b036:	f04f 30ff 	mov.w	r0, #4294967295
 800b03a:	bd38      	pop	{r3, r4, r5, pc}
 800b03c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b03e:	b112      	cbz	r2, 800b046 <_raise_r+0x1e>
 800b040:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b044:	b94b      	cbnz	r3, 800b05a <_raise_r+0x32>
 800b046:	4628      	mov	r0, r5
 800b048:	f000 f830 	bl	800b0ac <_getpid_r>
 800b04c:	4622      	mov	r2, r4
 800b04e:	4601      	mov	r1, r0
 800b050:	4628      	mov	r0, r5
 800b052:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b056:	f000 b817 	b.w	800b088 <_kill_r>
 800b05a:	2b01      	cmp	r3, #1
 800b05c:	d00a      	beq.n	800b074 <_raise_r+0x4c>
 800b05e:	1c59      	adds	r1, r3, #1
 800b060:	d103      	bne.n	800b06a <_raise_r+0x42>
 800b062:	2316      	movs	r3, #22
 800b064:	6003      	str	r3, [r0, #0]
 800b066:	2001      	movs	r0, #1
 800b068:	e7e7      	b.n	800b03a <_raise_r+0x12>
 800b06a:	2100      	movs	r1, #0
 800b06c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b070:	4620      	mov	r0, r4
 800b072:	4798      	blx	r3
 800b074:	2000      	movs	r0, #0
 800b076:	e7e0      	b.n	800b03a <_raise_r+0x12>

0800b078 <raise>:
 800b078:	4b02      	ldr	r3, [pc, #8]	@ (800b084 <raise+0xc>)
 800b07a:	4601      	mov	r1, r0
 800b07c:	6818      	ldr	r0, [r3, #0]
 800b07e:	f7ff bfd3 	b.w	800b028 <_raise_r>
 800b082:	bf00      	nop
 800b084:	20000018 	.word	0x20000018

0800b088 <_kill_r>:
 800b088:	b538      	push	{r3, r4, r5, lr}
 800b08a:	4d07      	ldr	r5, [pc, #28]	@ (800b0a8 <_kill_r+0x20>)
 800b08c:	2300      	movs	r3, #0
 800b08e:	4604      	mov	r4, r0
 800b090:	4608      	mov	r0, r1
 800b092:	4611      	mov	r1, r2
 800b094:	602b      	str	r3, [r5, #0]
 800b096:	f7f6 fcc1 	bl	8001a1c <_kill>
 800b09a:	1c43      	adds	r3, r0, #1
 800b09c:	d102      	bne.n	800b0a4 <_kill_r+0x1c>
 800b09e:	682b      	ldr	r3, [r5, #0]
 800b0a0:	b103      	cbz	r3, 800b0a4 <_kill_r+0x1c>
 800b0a2:	6023      	str	r3, [r4, #0]
 800b0a4:	bd38      	pop	{r3, r4, r5, pc}
 800b0a6:	bf00      	nop
 800b0a8:	200006d0 	.word	0x200006d0

0800b0ac <_getpid_r>:
 800b0ac:	f7f6 bcae 	b.w	8001a0c <_getpid>

0800b0b0 <__swhatbuf_r>:
 800b0b0:	b570      	push	{r4, r5, r6, lr}
 800b0b2:	460c      	mov	r4, r1
 800b0b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b0b8:	2900      	cmp	r1, #0
 800b0ba:	b096      	sub	sp, #88	@ 0x58
 800b0bc:	4615      	mov	r5, r2
 800b0be:	461e      	mov	r6, r3
 800b0c0:	da0d      	bge.n	800b0de <__swhatbuf_r+0x2e>
 800b0c2:	89a3      	ldrh	r3, [r4, #12]
 800b0c4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b0c8:	f04f 0100 	mov.w	r1, #0
 800b0cc:	bf14      	ite	ne
 800b0ce:	2340      	movne	r3, #64	@ 0x40
 800b0d0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b0d4:	2000      	movs	r0, #0
 800b0d6:	6031      	str	r1, [r6, #0]
 800b0d8:	602b      	str	r3, [r5, #0]
 800b0da:	b016      	add	sp, #88	@ 0x58
 800b0dc:	bd70      	pop	{r4, r5, r6, pc}
 800b0de:	466a      	mov	r2, sp
 800b0e0:	f000 f848 	bl	800b174 <_fstat_r>
 800b0e4:	2800      	cmp	r0, #0
 800b0e6:	dbec      	blt.n	800b0c2 <__swhatbuf_r+0x12>
 800b0e8:	9901      	ldr	r1, [sp, #4]
 800b0ea:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b0ee:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b0f2:	4259      	negs	r1, r3
 800b0f4:	4159      	adcs	r1, r3
 800b0f6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b0fa:	e7eb      	b.n	800b0d4 <__swhatbuf_r+0x24>

0800b0fc <__smakebuf_r>:
 800b0fc:	898b      	ldrh	r3, [r1, #12]
 800b0fe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b100:	079d      	lsls	r5, r3, #30
 800b102:	4606      	mov	r6, r0
 800b104:	460c      	mov	r4, r1
 800b106:	d507      	bpl.n	800b118 <__smakebuf_r+0x1c>
 800b108:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b10c:	6023      	str	r3, [r4, #0]
 800b10e:	6123      	str	r3, [r4, #16]
 800b110:	2301      	movs	r3, #1
 800b112:	6163      	str	r3, [r4, #20]
 800b114:	b003      	add	sp, #12
 800b116:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b118:	ab01      	add	r3, sp, #4
 800b11a:	466a      	mov	r2, sp
 800b11c:	f7ff ffc8 	bl	800b0b0 <__swhatbuf_r>
 800b120:	9f00      	ldr	r7, [sp, #0]
 800b122:	4605      	mov	r5, r0
 800b124:	4639      	mov	r1, r7
 800b126:	4630      	mov	r0, r6
 800b128:	f7fe febe 	bl	8009ea8 <_malloc_r>
 800b12c:	b948      	cbnz	r0, 800b142 <__smakebuf_r+0x46>
 800b12e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b132:	059a      	lsls	r2, r3, #22
 800b134:	d4ee      	bmi.n	800b114 <__smakebuf_r+0x18>
 800b136:	f023 0303 	bic.w	r3, r3, #3
 800b13a:	f043 0302 	orr.w	r3, r3, #2
 800b13e:	81a3      	strh	r3, [r4, #12]
 800b140:	e7e2      	b.n	800b108 <__smakebuf_r+0xc>
 800b142:	89a3      	ldrh	r3, [r4, #12]
 800b144:	6020      	str	r0, [r4, #0]
 800b146:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b14a:	81a3      	strh	r3, [r4, #12]
 800b14c:	9b01      	ldr	r3, [sp, #4]
 800b14e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b152:	b15b      	cbz	r3, 800b16c <__smakebuf_r+0x70>
 800b154:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b158:	4630      	mov	r0, r6
 800b15a:	f000 f81d 	bl	800b198 <_isatty_r>
 800b15e:	b128      	cbz	r0, 800b16c <__smakebuf_r+0x70>
 800b160:	89a3      	ldrh	r3, [r4, #12]
 800b162:	f023 0303 	bic.w	r3, r3, #3
 800b166:	f043 0301 	orr.w	r3, r3, #1
 800b16a:	81a3      	strh	r3, [r4, #12]
 800b16c:	89a3      	ldrh	r3, [r4, #12]
 800b16e:	431d      	orrs	r5, r3
 800b170:	81a5      	strh	r5, [r4, #12]
 800b172:	e7cf      	b.n	800b114 <__smakebuf_r+0x18>

0800b174 <_fstat_r>:
 800b174:	b538      	push	{r3, r4, r5, lr}
 800b176:	4d07      	ldr	r5, [pc, #28]	@ (800b194 <_fstat_r+0x20>)
 800b178:	2300      	movs	r3, #0
 800b17a:	4604      	mov	r4, r0
 800b17c:	4608      	mov	r0, r1
 800b17e:	4611      	mov	r1, r2
 800b180:	602b      	str	r3, [r5, #0]
 800b182:	f7f6 fcab 	bl	8001adc <_fstat>
 800b186:	1c43      	adds	r3, r0, #1
 800b188:	d102      	bne.n	800b190 <_fstat_r+0x1c>
 800b18a:	682b      	ldr	r3, [r5, #0]
 800b18c:	b103      	cbz	r3, 800b190 <_fstat_r+0x1c>
 800b18e:	6023      	str	r3, [r4, #0]
 800b190:	bd38      	pop	{r3, r4, r5, pc}
 800b192:	bf00      	nop
 800b194:	200006d0 	.word	0x200006d0

0800b198 <_isatty_r>:
 800b198:	b538      	push	{r3, r4, r5, lr}
 800b19a:	4d06      	ldr	r5, [pc, #24]	@ (800b1b4 <_isatty_r+0x1c>)
 800b19c:	2300      	movs	r3, #0
 800b19e:	4604      	mov	r4, r0
 800b1a0:	4608      	mov	r0, r1
 800b1a2:	602b      	str	r3, [r5, #0]
 800b1a4:	f7f6 fcaa 	bl	8001afc <_isatty>
 800b1a8:	1c43      	adds	r3, r0, #1
 800b1aa:	d102      	bne.n	800b1b2 <_isatty_r+0x1a>
 800b1ac:	682b      	ldr	r3, [r5, #0]
 800b1ae:	b103      	cbz	r3, 800b1b2 <_isatty_r+0x1a>
 800b1b0:	6023      	str	r3, [r4, #0]
 800b1b2:	bd38      	pop	{r3, r4, r5, pc}
 800b1b4:	200006d0 	.word	0x200006d0

0800b1b8 <log>:
 800b1b8:	b538      	push	{r3, r4, r5, lr}
 800b1ba:	ed2d 8b02 	vpush	{d8}
 800b1be:	ec55 4b10 	vmov	r4, r5, d0
 800b1c2:	f000 f8fd 	bl	800b3c0 <__ieee754_log>
 800b1c6:	4622      	mov	r2, r4
 800b1c8:	462b      	mov	r3, r5
 800b1ca:	4620      	mov	r0, r4
 800b1cc:	4629      	mov	r1, r5
 800b1ce:	eeb0 8a40 	vmov.f32	s16, s0
 800b1d2:	eef0 8a60 	vmov.f32	s17, s1
 800b1d6:	f7f5 fcb1 	bl	8000b3c <__aeabi_dcmpun>
 800b1da:	b998      	cbnz	r0, 800b204 <log+0x4c>
 800b1dc:	2200      	movs	r2, #0
 800b1de:	2300      	movs	r3, #0
 800b1e0:	4620      	mov	r0, r4
 800b1e2:	4629      	mov	r1, r5
 800b1e4:	f7f5 fca0 	bl	8000b28 <__aeabi_dcmpgt>
 800b1e8:	b960      	cbnz	r0, 800b204 <log+0x4c>
 800b1ea:	2200      	movs	r2, #0
 800b1ec:	2300      	movs	r3, #0
 800b1ee:	4620      	mov	r0, r4
 800b1f0:	4629      	mov	r1, r5
 800b1f2:	f7f5 fc71 	bl	8000ad8 <__aeabi_dcmpeq>
 800b1f6:	b160      	cbz	r0, 800b212 <log+0x5a>
 800b1f8:	f7fd ff68 	bl	80090cc <__errno>
 800b1fc:	ed9f 8b0a 	vldr	d8, [pc, #40]	@ 800b228 <log+0x70>
 800b200:	2322      	movs	r3, #34	@ 0x22
 800b202:	6003      	str	r3, [r0, #0]
 800b204:	eeb0 0a48 	vmov.f32	s0, s16
 800b208:	eef0 0a68 	vmov.f32	s1, s17
 800b20c:	ecbd 8b02 	vpop	{d8}
 800b210:	bd38      	pop	{r3, r4, r5, pc}
 800b212:	f7fd ff5b 	bl	80090cc <__errno>
 800b216:	ecbd 8b02 	vpop	{d8}
 800b21a:	2321      	movs	r3, #33	@ 0x21
 800b21c:	6003      	str	r3, [r0, #0]
 800b21e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b222:	4803      	ldr	r0, [pc, #12]	@ (800b230 <log+0x78>)
 800b224:	f000 b8c4 	b.w	800b3b0 <nan>
 800b228:	00000000 	.word	0x00000000
 800b22c:	fff00000 	.word	0xfff00000
 800b230:	0800c8e6 	.word	0x0800c8e6
 800b234:	00000000 	.word	0x00000000

0800b238 <log10>:
 800b238:	b538      	push	{r3, r4, r5, lr}
 800b23a:	ed2d 8b02 	vpush	{d8}
 800b23e:	ec55 4b10 	vmov	r4, r5, d0
 800b242:	f000 fa75 	bl	800b730 <__ieee754_log10>
 800b246:	4622      	mov	r2, r4
 800b248:	462b      	mov	r3, r5
 800b24a:	4620      	mov	r0, r4
 800b24c:	4629      	mov	r1, r5
 800b24e:	eeb0 8a40 	vmov.f32	s16, s0
 800b252:	eef0 8a60 	vmov.f32	s17, s1
 800b256:	f7f5 fc71 	bl	8000b3c <__aeabi_dcmpun>
 800b25a:	b998      	cbnz	r0, 800b284 <log10+0x4c>
 800b25c:	2200      	movs	r2, #0
 800b25e:	2300      	movs	r3, #0
 800b260:	4620      	mov	r0, r4
 800b262:	4629      	mov	r1, r5
 800b264:	f7f5 fc4c 	bl	8000b00 <__aeabi_dcmple>
 800b268:	b160      	cbz	r0, 800b284 <log10+0x4c>
 800b26a:	2200      	movs	r2, #0
 800b26c:	2300      	movs	r3, #0
 800b26e:	4620      	mov	r0, r4
 800b270:	4629      	mov	r1, r5
 800b272:	f7f5 fc31 	bl	8000ad8 <__aeabi_dcmpeq>
 800b276:	b160      	cbz	r0, 800b292 <log10+0x5a>
 800b278:	f7fd ff28 	bl	80090cc <__errno>
 800b27c:	ed9f 8b0a 	vldr	d8, [pc, #40]	@ 800b2a8 <log10+0x70>
 800b280:	2322      	movs	r3, #34	@ 0x22
 800b282:	6003      	str	r3, [r0, #0]
 800b284:	eeb0 0a48 	vmov.f32	s0, s16
 800b288:	eef0 0a68 	vmov.f32	s1, s17
 800b28c:	ecbd 8b02 	vpop	{d8}
 800b290:	bd38      	pop	{r3, r4, r5, pc}
 800b292:	f7fd ff1b 	bl	80090cc <__errno>
 800b296:	ecbd 8b02 	vpop	{d8}
 800b29a:	2321      	movs	r3, #33	@ 0x21
 800b29c:	6003      	str	r3, [r0, #0]
 800b29e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b2a2:	4803      	ldr	r0, [pc, #12]	@ (800b2b0 <log10+0x78>)
 800b2a4:	f000 b884 	b.w	800b3b0 <nan>
 800b2a8:	00000000 	.word	0x00000000
 800b2ac:	fff00000 	.word	0xfff00000
 800b2b0:	0800c8e6 	.word	0x0800c8e6

0800b2b4 <pow>:
 800b2b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2b6:	ed2d 8b02 	vpush	{d8}
 800b2ba:	eeb0 8a40 	vmov.f32	s16, s0
 800b2be:	eef0 8a60 	vmov.f32	s17, s1
 800b2c2:	ec55 4b11 	vmov	r4, r5, d1
 800b2c6:	f000 fabf 	bl	800b848 <__ieee754_pow>
 800b2ca:	4622      	mov	r2, r4
 800b2cc:	462b      	mov	r3, r5
 800b2ce:	4620      	mov	r0, r4
 800b2d0:	4629      	mov	r1, r5
 800b2d2:	ec57 6b10 	vmov	r6, r7, d0
 800b2d6:	f7f5 fc31 	bl	8000b3c <__aeabi_dcmpun>
 800b2da:	2800      	cmp	r0, #0
 800b2dc:	d13b      	bne.n	800b356 <pow+0xa2>
 800b2de:	ec51 0b18 	vmov	r0, r1, d8
 800b2e2:	2200      	movs	r2, #0
 800b2e4:	2300      	movs	r3, #0
 800b2e6:	f7f5 fbf7 	bl	8000ad8 <__aeabi_dcmpeq>
 800b2ea:	b1b8      	cbz	r0, 800b31c <pow+0x68>
 800b2ec:	2200      	movs	r2, #0
 800b2ee:	2300      	movs	r3, #0
 800b2f0:	4620      	mov	r0, r4
 800b2f2:	4629      	mov	r1, r5
 800b2f4:	f7f5 fbf0 	bl	8000ad8 <__aeabi_dcmpeq>
 800b2f8:	2800      	cmp	r0, #0
 800b2fa:	d146      	bne.n	800b38a <pow+0xd6>
 800b2fc:	ec45 4b10 	vmov	d0, r4, r5
 800b300:	f000 f848 	bl	800b394 <finite>
 800b304:	b338      	cbz	r0, 800b356 <pow+0xa2>
 800b306:	2200      	movs	r2, #0
 800b308:	2300      	movs	r3, #0
 800b30a:	4620      	mov	r0, r4
 800b30c:	4629      	mov	r1, r5
 800b30e:	f7f5 fbed 	bl	8000aec <__aeabi_dcmplt>
 800b312:	b300      	cbz	r0, 800b356 <pow+0xa2>
 800b314:	f7fd feda 	bl	80090cc <__errno>
 800b318:	2322      	movs	r3, #34	@ 0x22
 800b31a:	e01b      	b.n	800b354 <pow+0xa0>
 800b31c:	ec47 6b10 	vmov	d0, r6, r7
 800b320:	f000 f838 	bl	800b394 <finite>
 800b324:	b9e0      	cbnz	r0, 800b360 <pow+0xac>
 800b326:	eeb0 0a48 	vmov.f32	s0, s16
 800b32a:	eef0 0a68 	vmov.f32	s1, s17
 800b32e:	f000 f831 	bl	800b394 <finite>
 800b332:	b1a8      	cbz	r0, 800b360 <pow+0xac>
 800b334:	ec45 4b10 	vmov	d0, r4, r5
 800b338:	f000 f82c 	bl	800b394 <finite>
 800b33c:	b180      	cbz	r0, 800b360 <pow+0xac>
 800b33e:	4632      	mov	r2, r6
 800b340:	463b      	mov	r3, r7
 800b342:	4630      	mov	r0, r6
 800b344:	4639      	mov	r1, r7
 800b346:	f7f5 fbf9 	bl	8000b3c <__aeabi_dcmpun>
 800b34a:	2800      	cmp	r0, #0
 800b34c:	d0e2      	beq.n	800b314 <pow+0x60>
 800b34e:	f7fd febd 	bl	80090cc <__errno>
 800b352:	2321      	movs	r3, #33	@ 0x21
 800b354:	6003      	str	r3, [r0, #0]
 800b356:	ecbd 8b02 	vpop	{d8}
 800b35a:	ec47 6b10 	vmov	d0, r6, r7
 800b35e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b360:	2200      	movs	r2, #0
 800b362:	2300      	movs	r3, #0
 800b364:	4630      	mov	r0, r6
 800b366:	4639      	mov	r1, r7
 800b368:	f7f5 fbb6 	bl	8000ad8 <__aeabi_dcmpeq>
 800b36c:	2800      	cmp	r0, #0
 800b36e:	d0f2      	beq.n	800b356 <pow+0xa2>
 800b370:	eeb0 0a48 	vmov.f32	s0, s16
 800b374:	eef0 0a68 	vmov.f32	s1, s17
 800b378:	f000 f80c 	bl	800b394 <finite>
 800b37c:	2800      	cmp	r0, #0
 800b37e:	d0ea      	beq.n	800b356 <pow+0xa2>
 800b380:	ec45 4b10 	vmov	d0, r4, r5
 800b384:	f000 f806 	bl	800b394 <finite>
 800b388:	e7c3      	b.n	800b312 <pow+0x5e>
 800b38a:	4f01      	ldr	r7, [pc, #4]	@ (800b390 <pow+0xdc>)
 800b38c:	2600      	movs	r6, #0
 800b38e:	e7e2      	b.n	800b356 <pow+0xa2>
 800b390:	3ff00000 	.word	0x3ff00000

0800b394 <finite>:
 800b394:	b082      	sub	sp, #8
 800b396:	ed8d 0b00 	vstr	d0, [sp]
 800b39a:	9801      	ldr	r0, [sp, #4]
 800b39c:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 800b3a0:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800b3a4:	0fc0      	lsrs	r0, r0, #31
 800b3a6:	b002      	add	sp, #8
 800b3a8:	4770      	bx	lr
 800b3aa:	0000      	movs	r0, r0
 800b3ac:	0000      	movs	r0, r0
	...

0800b3b0 <nan>:
 800b3b0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800b3b8 <nan+0x8>
 800b3b4:	4770      	bx	lr
 800b3b6:	bf00      	nop
 800b3b8:	00000000 	.word	0x00000000
 800b3bc:	7ff80000 	.word	0x7ff80000

0800b3c0 <__ieee754_log>:
 800b3c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3c4:	ec51 0b10 	vmov	r0, r1, d0
 800b3c8:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800b3cc:	b087      	sub	sp, #28
 800b3ce:	460d      	mov	r5, r1
 800b3d0:	da26      	bge.n	800b420 <__ieee754_log+0x60>
 800b3d2:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800b3d6:	4303      	orrs	r3, r0
 800b3d8:	4602      	mov	r2, r0
 800b3da:	d10a      	bne.n	800b3f2 <__ieee754_log+0x32>
 800b3dc:	49ce      	ldr	r1, [pc, #824]	@ (800b718 <__ieee754_log+0x358>)
 800b3de:	2200      	movs	r2, #0
 800b3e0:	2300      	movs	r3, #0
 800b3e2:	2000      	movs	r0, #0
 800b3e4:	f7f5 fa3a 	bl	800085c <__aeabi_ddiv>
 800b3e8:	ec41 0b10 	vmov	d0, r0, r1
 800b3ec:	b007      	add	sp, #28
 800b3ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3f2:	2900      	cmp	r1, #0
 800b3f4:	da05      	bge.n	800b402 <__ieee754_log+0x42>
 800b3f6:	460b      	mov	r3, r1
 800b3f8:	f7f4 ff4e 	bl	8000298 <__aeabi_dsub>
 800b3fc:	2200      	movs	r2, #0
 800b3fe:	2300      	movs	r3, #0
 800b400:	e7f0      	b.n	800b3e4 <__ieee754_log+0x24>
 800b402:	4bc6      	ldr	r3, [pc, #792]	@ (800b71c <__ieee754_log+0x35c>)
 800b404:	2200      	movs	r2, #0
 800b406:	f7f5 f8ff 	bl	8000608 <__aeabi_dmul>
 800b40a:	f06f 0335 	mvn.w	r3, #53	@ 0x35
 800b40e:	460d      	mov	r5, r1
 800b410:	4ac3      	ldr	r2, [pc, #780]	@ (800b720 <__ieee754_log+0x360>)
 800b412:	4295      	cmp	r5, r2
 800b414:	dd06      	ble.n	800b424 <__ieee754_log+0x64>
 800b416:	4602      	mov	r2, r0
 800b418:	460b      	mov	r3, r1
 800b41a:	f7f4 ff3f 	bl	800029c <__adddf3>
 800b41e:	e7e3      	b.n	800b3e8 <__ieee754_log+0x28>
 800b420:	2300      	movs	r3, #0
 800b422:	e7f5      	b.n	800b410 <__ieee754_log+0x50>
 800b424:	152c      	asrs	r4, r5, #20
 800b426:	f2a4 34ff 	subw	r4, r4, #1023	@ 0x3ff
 800b42a:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800b42e:	441c      	add	r4, r3
 800b430:	f505 2315 	add.w	r3, r5, #610304	@ 0x95000
 800b434:	f603 7364 	addw	r3, r3, #3940	@ 0xf64
 800b438:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b43c:	f083 527f 	eor.w	r2, r3, #1069547520	@ 0x3fc00000
 800b440:	f482 1240 	eor.w	r2, r2, #3145728	@ 0x300000
 800b444:	ea42 0105 	orr.w	r1, r2, r5
 800b448:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 800b44c:	2200      	movs	r2, #0
 800b44e:	4bb5      	ldr	r3, [pc, #724]	@ (800b724 <__ieee754_log+0x364>)
 800b450:	f7f4 ff22 	bl	8000298 <__aeabi_dsub>
 800b454:	1cab      	adds	r3, r5, #2
 800b456:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b45a:	2b02      	cmp	r3, #2
 800b45c:	4682      	mov	sl, r0
 800b45e:	468b      	mov	fp, r1
 800b460:	f04f 0200 	mov.w	r2, #0
 800b464:	dc53      	bgt.n	800b50e <__ieee754_log+0x14e>
 800b466:	2300      	movs	r3, #0
 800b468:	f7f5 fb36 	bl	8000ad8 <__aeabi_dcmpeq>
 800b46c:	b1d0      	cbz	r0, 800b4a4 <__ieee754_log+0xe4>
 800b46e:	2c00      	cmp	r4, #0
 800b470:	f000 8120 	beq.w	800b6b4 <__ieee754_log+0x2f4>
 800b474:	4620      	mov	r0, r4
 800b476:	f7f5 f85d 	bl	8000534 <__aeabi_i2d>
 800b47a:	a391      	add	r3, pc, #580	@ (adr r3, 800b6c0 <__ieee754_log+0x300>)
 800b47c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b480:	4606      	mov	r6, r0
 800b482:	460f      	mov	r7, r1
 800b484:	f7f5 f8c0 	bl	8000608 <__aeabi_dmul>
 800b488:	a38f      	add	r3, pc, #572	@ (adr r3, 800b6c8 <__ieee754_log+0x308>)
 800b48a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b48e:	4604      	mov	r4, r0
 800b490:	460d      	mov	r5, r1
 800b492:	4630      	mov	r0, r6
 800b494:	4639      	mov	r1, r7
 800b496:	f7f5 f8b7 	bl	8000608 <__aeabi_dmul>
 800b49a:	4602      	mov	r2, r0
 800b49c:	460b      	mov	r3, r1
 800b49e:	4620      	mov	r0, r4
 800b4a0:	4629      	mov	r1, r5
 800b4a2:	e7ba      	b.n	800b41a <__ieee754_log+0x5a>
 800b4a4:	a38a      	add	r3, pc, #552	@ (adr r3, 800b6d0 <__ieee754_log+0x310>)
 800b4a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4aa:	4650      	mov	r0, sl
 800b4ac:	4659      	mov	r1, fp
 800b4ae:	f7f5 f8ab 	bl	8000608 <__aeabi_dmul>
 800b4b2:	4602      	mov	r2, r0
 800b4b4:	460b      	mov	r3, r1
 800b4b6:	2000      	movs	r0, #0
 800b4b8:	499b      	ldr	r1, [pc, #620]	@ (800b728 <__ieee754_log+0x368>)
 800b4ba:	f7f4 feed 	bl	8000298 <__aeabi_dsub>
 800b4be:	4652      	mov	r2, sl
 800b4c0:	4606      	mov	r6, r0
 800b4c2:	460f      	mov	r7, r1
 800b4c4:	465b      	mov	r3, fp
 800b4c6:	4650      	mov	r0, sl
 800b4c8:	4659      	mov	r1, fp
 800b4ca:	f7f5 f89d 	bl	8000608 <__aeabi_dmul>
 800b4ce:	4602      	mov	r2, r0
 800b4d0:	460b      	mov	r3, r1
 800b4d2:	4630      	mov	r0, r6
 800b4d4:	4639      	mov	r1, r7
 800b4d6:	f7f5 f897 	bl	8000608 <__aeabi_dmul>
 800b4da:	4606      	mov	r6, r0
 800b4dc:	460f      	mov	r7, r1
 800b4de:	b914      	cbnz	r4, 800b4e6 <__ieee754_log+0x126>
 800b4e0:	4632      	mov	r2, r6
 800b4e2:	463b      	mov	r3, r7
 800b4e4:	e0a0      	b.n	800b628 <__ieee754_log+0x268>
 800b4e6:	4620      	mov	r0, r4
 800b4e8:	f7f5 f824 	bl	8000534 <__aeabi_i2d>
 800b4ec:	a374      	add	r3, pc, #464	@ (adr r3, 800b6c0 <__ieee754_log+0x300>)
 800b4ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4f2:	4680      	mov	r8, r0
 800b4f4:	4689      	mov	r9, r1
 800b4f6:	f7f5 f887 	bl	8000608 <__aeabi_dmul>
 800b4fa:	a373      	add	r3, pc, #460	@ (adr r3, 800b6c8 <__ieee754_log+0x308>)
 800b4fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b500:	4604      	mov	r4, r0
 800b502:	460d      	mov	r5, r1
 800b504:	4640      	mov	r0, r8
 800b506:	4649      	mov	r1, r9
 800b508:	f7f5 f87e 	bl	8000608 <__aeabi_dmul>
 800b50c:	e0a5      	b.n	800b65a <__ieee754_log+0x29a>
 800b50e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800b512:	f7f4 fec3 	bl	800029c <__adddf3>
 800b516:	4602      	mov	r2, r0
 800b518:	460b      	mov	r3, r1
 800b51a:	4650      	mov	r0, sl
 800b51c:	4659      	mov	r1, fp
 800b51e:	f7f5 f99d 	bl	800085c <__aeabi_ddiv>
 800b522:	e9cd 0100 	strd	r0, r1, [sp]
 800b526:	4620      	mov	r0, r4
 800b528:	f7f5 f804 	bl	8000534 <__aeabi_i2d>
 800b52c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b530:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b534:	4610      	mov	r0, r2
 800b536:	4619      	mov	r1, r3
 800b538:	f7f5 f866 	bl	8000608 <__aeabi_dmul>
 800b53c:	4602      	mov	r2, r0
 800b53e:	460b      	mov	r3, r1
 800b540:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b544:	f7f5 f860 	bl	8000608 <__aeabi_dmul>
 800b548:	a363      	add	r3, pc, #396	@ (adr r3, 800b6d8 <__ieee754_log+0x318>)
 800b54a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b54e:	4680      	mov	r8, r0
 800b550:	4689      	mov	r9, r1
 800b552:	f7f5 f859 	bl	8000608 <__aeabi_dmul>
 800b556:	a362      	add	r3, pc, #392	@ (adr r3, 800b6e0 <__ieee754_log+0x320>)
 800b558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b55c:	f7f4 fe9e 	bl	800029c <__adddf3>
 800b560:	4642      	mov	r2, r8
 800b562:	464b      	mov	r3, r9
 800b564:	f7f5 f850 	bl	8000608 <__aeabi_dmul>
 800b568:	a35f      	add	r3, pc, #380	@ (adr r3, 800b6e8 <__ieee754_log+0x328>)
 800b56a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b56e:	f7f4 fe95 	bl	800029c <__adddf3>
 800b572:	4642      	mov	r2, r8
 800b574:	464b      	mov	r3, r9
 800b576:	f7f5 f847 	bl	8000608 <__aeabi_dmul>
 800b57a:	a35d      	add	r3, pc, #372	@ (adr r3, 800b6f0 <__ieee754_log+0x330>)
 800b57c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b580:	f7f4 fe8c 	bl	800029c <__adddf3>
 800b584:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b588:	f7f5 f83e 	bl	8000608 <__aeabi_dmul>
 800b58c:	a35a      	add	r3, pc, #360	@ (adr r3, 800b6f8 <__ieee754_log+0x338>)
 800b58e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b592:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b596:	4640      	mov	r0, r8
 800b598:	4649      	mov	r1, r9
 800b59a:	f7f5 f835 	bl	8000608 <__aeabi_dmul>
 800b59e:	a358      	add	r3, pc, #352	@ (adr r3, 800b700 <__ieee754_log+0x340>)
 800b5a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5a4:	f7f4 fe7a 	bl	800029c <__adddf3>
 800b5a8:	4642      	mov	r2, r8
 800b5aa:	464b      	mov	r3, r9
 800b5ac:	f7f5 f82c 	bl	8000608 <__aeabi_dmul>
 800b5b0:	a355      	add	r3, pc, #340	@ (adr r3, 800b708 <__ieee754_log+0x348>)
 800b5b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5b6:	f7f4 fe71 	bl	800029c <__adddf3>
 800b5ba:	4642      	mov	r2, r8
 800b5bc:	464b      	mov	r3, r9
 800b5be:	f7f5 f823 	bl	8000608 <__aeabi_dmul>
 800b5c2:	f5a5 26c2 	sub.w	r6, r5, #397312	@ 0x61000
 800b5c6:	4602      	mov	r2, r0
 800b5c8:	460b      	mov	r3, r1
 800b5ca:	f5c5 25d7 	rsb	r5, r5, #440320	@ 0x6b800
 800b5ce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b5d2:	f7f4 fe63 	bl	800029c <__adddf3>
 800b5d6:	f2a6 467a 	subw	r6, r6, #1146	@ 0x47a
 800b5da:	3551      	adds	r5, #81	@ 0x51
 800b5dc:	4335      	orrs	r5, r6
 800b5de:	2d00      	cmp	r5, #0
 800b5e0:	4680      	mov	r8, r0
 800b5e2:	4689      	mov	r9, r1
 800b5e4:	dd48      	ble.n	800b678 <__ieee754_log+0x2b8>
 800b5e6:	4b50      	ldr	r3, [pc, #320]	@ (800b728 <__ieee754_log+0x368>)
 800b5e8:	2200      	movs	r2, #0
 800b5ea:	4650      	mov	r0, sl
 800b5ec:	4659      	mov	r1, fp
 800b5ee:	f7f5 f80b 	bl	8000608 <__aeabi_dmul>
 800b5f2:	4652      	mov	r2, sl
 800b5f4:	465b      	mov	r3, fp
 800b5f6:	f7f5 f807 	bl	8000608 <__aeabi_dmul>
 800b5fa:	4602      	mov	r2, r0
 800b5fc:	460b      	mov	r3, r1
 800b5fe:	4606      	mov	r6, r0
 800b600:	460f      	mov	r7, r1
 800b602:	4640      	mov	r0, r8
 800b604:	4649      	mov	r1, r9
 800b606:	f7f4 fe49 	bl	800029c <__adddf3>
 800b60a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b60e:	f7f4 fffb 	bl	8000608 <__aeabi_dmul>
 800b612:	4680      	mov	r8, r0
 800b614:	4689      	mov	r9, r1
 800b616:	b964      	cbnz	r4, 800b632 <__ieee754_log+0x272>
 800b618:	4602      	mov	r2, r0
 800b61a:	460b      	mov	r3, r1
 800b61c:	4630      	mov	r0, r6
 800b61e:	4639      	mov	r1, r7
 800b620:	f7f4 fe3a 	bl	8000298 <__aeabi_dsub>
 800b624:	4602      	mov	r2, r0
 800b626:	460b      	mov	r3, r1
 800b628:	4650      	mov	r0, sl
 800b62a:	4659      	mov	r1, fp
 800b62c:	f7f4 fe34 	bl	8000298 <__aeabi_dsub>
 800b630:	e6da      	b.n	800b3e8 <__ieee754_log+0x28>
 800b632:	a323      	add	r3, pc, #140	@ (adr r3, 800b6c0 <__ieee754_log+0x300>)
 800b634:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b638:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b63c:	f7f4 ffe4 	bl	8000608 <__aeabi_dmul>
 800b640:	a321      	add	r3, pc, #132	@ (adr r3, 800b6c8 <__ieee754_log+0x308>)
 800b642:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b646:	4604      	mov	r4, r0
 800b648:	460d      	mov	r5, r1
 800b64a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b64e:	f7f4 ffdb 	bl	8000608 <__aeabi_dmul>
 800b652:	4642      	mov	r2, r8
 800b654:	464b      	mov	r3, r9
 800b656:	f7f4 fe21 	bl	800029c <__adddf3>
 800b65a:	4602      	mov	r2, r0
 800b65c:	460b      	mov	r3, r1
 800b65e:	4630      	mov	r0, r6
 800b660:	4639      	mov	r1, r7
 800b662:	f7f4 fe19 	bl	8000298 <__aeabi_dsub>
 800b666:	4652      	mov	r2, sl
 800b668:	465b      	mov	r3, fp
 800b66a:	f7f4 fe15 	bl	8000298 <__aeabi_dsub>
 800b66e:	4602      	mov	r2, r0
 800b670:	460b      	mov	r3, r1
 800b672:	4620      	mov	r0, r4
 800b674:	4629      	mov	r1, r5
 800b676:	e7d9      	b.n	800b62c <__ieee754_log+0x26c>
 800b678:	4602      	mov	r2, r0
 800b67a:	460b      	mov	r3, r1
 800b67c:	4650      	mov	r0, sl
 800b67e:	4659      	mov	r1, fp
 800b680:	f7f4 fe0a 	bl	8000298 <__aeabi_dsub>
 800b684:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b688:	f7f4 ffbe 	bl	8000608 <__aeabi_dmul>
 800b68c:	4606      	mov	r6, r0
 800b68e:	460f      	mov	r7, r1
 800b690:	2c00      	cmp	r4, #0
 800b692:	f43f af25 	beq.w	800b4e0 <__ieee754_log+0x120>
 800b696:	a30a      	add	r3, pc, #40	@ (adr r3, 800b6c0 <__ieee754_log+0x300>)
 800b698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b69c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b6a0:	f7f4 ffb2 	bl	8000608 <__aeabi_dmul>
 800b6a4:	a308      	add	r3, pc, #32	@ (adr r3, 800b6c8 <__ieee754_log+0x308>)
 800b6a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6aa:	4604      	mov	r4, r0
 800b6ac:	460d      	mov	r5, r1
 800b6ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b6b2:	e729      	b.n	800b508 <__ieee754_log+0x148>
 800b6b4:	ed9f 0b16 	vldr	d0, [pc, #88]	@ 800b710 <__ieee754_log+0x350>
 800b6b8:	e698      	b.n	800b3ec <__ieee754_log+0x2c>
 800b6ba:	bf00      	nop
 800b6bc:	f3af 8000 	nop.w
 800b6c0:	fee00000 	.word	0xfee00000
 800b6c4:	3fe62e42 	.word	0x3fe62e42
 800b6c8:	35793c76 	.word	0x35793c76
 800b6cc:	3dea39ef 	.word	0x3dea39ef
 800b6d0:	55555555 	.word	0x55555555
 800b6d4:	3fd55555 	.word	0x3fd55555
 800b6d8:	df3e5244 	.word	0xdf3e5244
 800b6dc:	3fc2f112 	.word	0x3fc2f112
 800b6e0:	96cb03de 	.word	0x96cb03de
 800b6e4:	3fc74664 	.word	0x3fc74664
 800b6e8:	94229359 	.word	0x94229359
 800b6ec:	3fd24924 	.word	0x3fd24924
 800b6f0:	55555593 	.word	0x55555593
 800b6f4:	3fe55555 	.word	0x3fe55555
 800b6f8:	d078c69f 	.word	0xd078c69f
 800b6fc:	3fc39a09 	.word	0x3fc39a09
 800b700:	1d8e78af 	.word	0x1d8e78af
 800b704:	3fcc71c5 	.word	0x3fcc71c5
 800b708:	9997fa04 	.word	0x9997fa04
 800b70c:	3fd99999 	.word	0x3fd99999
	...
 800b718:	c3500000 	.word	0xc3500000
 800b71c:	43500000 	.word	0x43500000
 800b720:	7fefffff 	.word	0x7fefffff
 800b724:	3ff00000 	.word	0x3ff00000
 800b728:	3fe00000 	.word	0x3fe00000
 800b72c:	00000000 	.word	0x00000000

0800b730 <__ieee754_log10>:
 800b730:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b734:	ec55 4b10 	vmov	r4, r5, d0
 800b738:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
 800b73c:	ed2d 8b02 	vpush	{d8}
 800b740:	462b      	mov	r3, r5
 800b742:	da2e      	bge.n	800b7a2 <__ieee754_log10+0x72>
 800b744:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800b748:	4322      	orrs	r2, r4
 800b74a:	d10b      	bne.n	800b764 <__ieee754_log10+0x34>
 800b74c:	493a      	ldr	r1, [pc, #232]	@ (800b838 <__ieee754_log10+0x108>)
 800b74e:	2200      	movs	r2, #0
 800b750:	2300      	movs	r3, #0
 800b752:	2000      	movs	r0, #0
 800b754:	f7f5 f882 	bl	800085c <__aeabi_ddiv>
 800b758:	ecbd 8b02 	vpop	{d8}
 800b75c:	ec41 0b10 	vmov	d0, r0, r1
 800b760:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b764:	2d00      	cmp	r5, #0
 800b766:	da07      	bge.n	800b778 <__ieee754_log10+0x48>
 800b768:	4622      	mov	r2, r4
 800b76a:	4620      	mov	r0, r4
 800b76c:	4629      	mov	r1, r5
 800b76e:	f7f4 fd93 	bl	8000298 <__aeabi_dsub>
 800b772:	2200      	movs	r2, #0
 800b774:	2300      	movs	r3, #0
 800b776:	e7ed      	b.n	800b754 <__ieee754_log10+0x24>
 800b778:	4b30      	ldr	r3, [pc, #192]	@ (800b83c <__ieee754_log10+0x10c>)
 800b77a:	2200      	movs	r2, #0
 800b77c:	4620      	mov	r0, r4
 800b77e:	4629      	mov	r1, r5
 800b780:	f7f4 ff42 	bl	8000608 <__aeabi_dmul>
 800b784:	f06f 0235 	mvn.w	r2, #53	@ 0x35
 800b788:	4604      	mov	r4, r0
 800b78a:	460d      	mov	r5, r1
 800b78c:	460b      	mov	r3, r1
 800b78e:	492c      	ldr	r1, [pc, #176]	@ (800b840 <__ieee754_log10+0x110>)
 800b790:	428b      	cmp	r3, r1
 800b792:	dd08      	ble.n	800b7a6 <__ieee754_log10+0x76>
 800b794:	4622      	mov	r2, r4
 800b796:	462b      	mov	r3, r5
 800b798:	4620      	mov	r0, r4
 800b79a:	4629      	mov	r1, r5
 800b79c:	f7f4 fd7e 	bl	800029c <__adddf3>
 800b7a0:	e7da      	b.n	800b758 <__ieee754_log10+0x28>
 800b7a2:	2200      	movs	r2, #0
 800b7a4:	e7f3      	b.n	800b78e <__ieee754_log10+0x5e>
 800b7a6:	1518      	asrs	r0, r3, #20
 800b7a8:	f2a0 30ff 	subw	r0, r0, #1023	@ 0x3ff
 800b7ac:	4410      	add	r0, r2
 800b7ae:	ea4f 79d0 	mov.w	r9, r0, lsr #31
 800b7b2:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 800b7b6:	f3c3 0813 	ubfx	r8, r3, #0, #20
 800b7ba:	f7f4 febb 	bl	8000534 <__aeabi_i2d>
 800b7be:	f5c9 737f 	rsb	r3, r9, #1020	@ 0x3fc
 800b7c2:	3303      	adds	r3, #3
 800b7c4:	ea48 5503 	orr.w	r5, r8, r3, lsl #20
 800b7c8:	a315      	add	r3, pc, #84	@ (adr r3, 800b820 <__ieee754_log10+0xf0>)
 800b7ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7ce:	ec45 4b18 	vmov	d8, r4, r5
 800b7d2:	4606      	mov	r6, r0
 800b7d4:	460f      	mov	r7, r1
 800b7d6:	f7f4 ff17 	bl	8000608 <__aeabi_dmul>
 800b7da:	eeb0 0a48 	vmov.f32	s0, s16
 800b7de:	eef0 0a68 	vmov.f32	s1, s17
 800b7e2:	4604      	mov	r4, r0
 800b7e4:	460d      	mov	r5, r1
 800b7e6:	f7ff fdeb 	bl	800b3c0 <__ieee754_log>
 800b7ea:	a30f      	add	r3, pc, #60	@ (adr r3, 800b828 <__ieee754_log10+0xf8>)
 800b7ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7f0:	ec51 0b10 	vmov	r0, r1, d0
 800b7f4:	f7f4 ff08 	bl	8000608 <__aeabi_dmul>
 800b7f8:	4622      	mov	r2, r4
 800b7fa:	462b      	mov	r3, r5
 800b7fc:	f7f4 fd4e 	bl	800029c <__adddf3>
 800b800:	a30b      	add	r3, pc, #44	@ (adr r3, 800b830 <__ieee754_log10+0x100>)
 800b802:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b806:	4604      	mov	r4, r0
 800b808:	460d      	mov	r5, r1
 800b80a:	4630      	mov	r0, r6
 800b80c:	4639      	mov	r1, r7
 800b80e:	f7f4 fefb 	bl	8000608 <__aeabi_dmul>
 800b812:	4602      	mov	r2, r0
 800b814:	460b      	mov	r3, r1
 800b816:	4620      	mov	r0, r4
 800b818:	4629      	mov	r1, r5
 800b81a:	e7bf      	b.n	800b79c <__ieee754_log10+0x6c>
 800b81c:	f3af 8000 	nop.w
 800b820:	11f12b36 	.word	0x11f12b36
 800b824:	3d59fef3 	.word	0x3d59fef3
 800b828:	1526e50e 	.word	0x1526e50e
 800b82c:	3fdbcb7b 	.word	0x3fdbcb7b
 800b830:	509f6000 	.word	0x509f6000
 800b834:	3fd34413 	.word	0x3fd34413
 800b838:	c3500000 	.word	0xc3500000
 800b83c:	43500000 	.word	0x43500000
 800b840:	7fefffff 	.word	0x7fefffff
 800b844:	00000000 	.word	0x00000000

0800b848 <__ieee754_pow>:
 800b848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b84c:	b091      	sub	sp, #68	@ 0x44
 800b84e:	ed8d 1b00 	vstr	d1, [sp]
 800b852:	e9dd 1900 	ldrd	r1, r9, [sp]
 800b856:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 800b85a:	ea5a 0001 	orrs.w	r0, sl, r1
 800b85e:	ec57 6b10 	vmov	r6, r7, d0
 800b862:	d113      	bne.n	800b88c <__ieee754_pow+0x44>
 800b864:	19b3      	adds	r3, r6, r6
 800b866:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 800b86a:	4152      	adcs	r2, r2
 800b86c:	4298      	cmp	r0, r3
 800b86e:	4b98      	ldr	r3, [pc, #608]	@ (800bad0 <__ieee754_pow+0x288>)
 800b870:	4193      	sbcs	r3, r2
 800b872:	f080 84ea 	bcs.w	800c24a <__ieee754_pow+0xa02>
 800b876:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b87a:	4630      	mov	r0, r6
 800b87c:	4639      	mov	r1, r7
 800b87e:	f7f4 fd0d 	bl	800029c <__adddf3>
 800b882:	ec41 0b10 	vmov	d0, r0, r1
 800b886:	b011      	add	sp, #68	@ 0x44
 800b888:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b88c:	4a91      	ldr	r2, [pc, #580]	@ (800bad4 <__ieee754_pow+0x28c>)
 800b88e:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800b892:	4590      	cmp	r8, r2
 800b894:	463d      	mov	r5, r7
 800b896:	4633      	mov	r3, r6
 800b898:	d806      	bhi.n	800b8a8 <__ieee754_pow+0x60>
 800b89a:	d101      	bne.n	800b8a0 <__ieee754_pow+0x58>
 800b89c:	2e00      	cmp	r6, #0
 800b89e:	d1ea      	bne.n	800b876 <__ieee754_pow+0x2e>
 800b8a0:	4592      	cmp	sl, r2
 800b8a2:	d801      	bhi.n	800b8a8 <__ieee754_pow+0x60>
 800b8a4:	d10e      	bne.n	800b8c4 <__ieee754_pow+0x7c>
 800b8a6:	b169      	cbz	r1, 800b8c4 <__ieee754_pow+0x7c>
 800b8a8:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 800b8ac:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 800b8b0:	431d      	orrs	r5, r3
 800b8b2:	d1e0      	bne.n	800b876 <__ieee754_pow+0x2e>
 800b8b4:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b8b8:	18db      	adds	r3, r3, r3
 800b8ba:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 800b8be:	4152      	adcs	r2, r2
 800b8c0:	429d      	cmp	r5, r3
 800b8c2:	e7d4      	b.n	800b86e <__ieee754_pow+0x26>
 800b8c4:	2d00      	cmp	r5, #0
 800b8c6:	46c3      	mov	fp, r8
 800b8c8:	da3a      	bge.n	800b940 <__ieee754_pow+0xf8>
 800b8ca:	4a83      	ldr	r2, [pc, #524]	@ (800bad8 <__ieee754_pow+0x290>)
 800b8cc:	4592      	cmp	sl, r2
 800b8ce:	d84d      	bhi.n	800b96c <__ieee754_pow+0x124>
 800b8d0:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 800b8d4:	4592      	cmp	sl, r2
 800b8d6:	f240 84c7 	bls.w	800c268 <__ieee754_pow+0xa20>
 800b8da:	ea4f 522a 	mov.w	r2, sl, asr #20
 800b8de:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800b8e2:	2a14      	cmp	r2, #20
 800b8e4:	dd0f      	ble.n	800b906 <__ieee754_pow+0xbe>
 800b8e6:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800b8ea:	fa21 f402 	lsr.w	r4, r1, r2
 800b8ee:	fa04 f202 	lsl.w	r2, r4, r2
 800b8f2:	428a      	cmp	r2, r1
 800b8f4:	f040 84b8 	bne.w	800c268 <__ieee754_pow+0xa20>
 800b8f8:	f004 0401 	and.w	r4, r4, #1
 800b8fc:	f1c4 0402 	rsb	r4, r4, #2
 800b900:	2900      	cmp	r1, #0
 800b902:	d158      	bne.n	800b9b6 <__ieee754_pow+0x16e>
 800b904:	e00e      	b.n	800b924 <__ieee754_pow+0xdc>
 800b906:	2900      	cmp	r1, #0
 800b908:	d154      	bne.n	800b9b4 <__ieee754_pow+0x16c>
 800b90a:	f1c2 0214 	rsb	r2, r2, #20
 800b90e:	fa4a f402 	asr.w	r4, sl, r2
 800b912:	fa04 f202 	lsl.w	r2, r4, r2
 800b916:	4552      	cmp	r2, sl
 800b918:	f040 84a3 	bne.w	800c262 <__ieee754_pow+0xa1a>
 800b91c:	f004 0401 	and.w	r4, r4, #1
 800b920:	f1c4 0402 	rsb	r4, r4, #2
 800b924:	4a6d      	ldr	r2, [pc, #436]	@ (800badc <__ieee754_pow+0x294>)
 800b926:	4592      	cmp	sl, r2
 800b928:	d12e      	bne.n	800b988 <__ieee754_pow+0x140>
 800b92a:	f1b9 0f00 	cmp.w	r9, #0
 800b92e:	f280 8494 	bge.w	800c25a <__ieee754_pow+0xa12>
 800b932:	496a      	ldr	r1, [pc, #424]	@ (800badc <__ieee754_pow+0x294>)
 800b934:	4632      	mov	r2, r6
 800b936:	463b      	mov	r3, r7
 800b938:	2000      	movs	r0, #0
 800b93a:	f7f4 ff8f 	bl	800085c <__aeabi_ddiv>
 800b93e:	e7a0      	b.n	800b882 <__ieee754_pow+0x3a>
 800b940:	2400      	movs	r4, #0
 800b942:	bbc1      	cbnz	r1, 800b9b6 <__ieee754_pow+0x16e>
 800b944:	4a63      	ldr	r2, [pc, #396]	@ (800bad4 <__ieee754_pow+0x28c>)
 800b946:	4592      	cmp	sl, r2
 800b948:	d1ec      	bne.n	800b924 <__ieee754_pow+0xdc>
 800b94a:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 800b94e:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 800b952:	431a      	orrs	r2, r3
 800b954:	f000 8479 	beq.w	800c24a <__ieee754_pow+0xa02>
 800b958:	4b61      	ldr	r3, [pc, #388]	@ (800bae0 <__ieee754_pow+0x298>)
 800b95a:	4598      	cmp	r8, r3
 800b95c:	d908      	bls.n	800b970 <__ieee754_pow+0x128>
 800b95e:	f1b9 0f00 	cmp.w	r9, #0
 800b962:	f2c0 8476 	blt.w	800c252 <__ieee754_pow+0xa0a>
 800b966:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b96a:	e78a      	b.n	800b882 <__ieee754_pow+0x3a>
 800b96c:	2402      	movs	r4, #2
 800b96e:	e7e8      	b.n	800b942 <__ieee754_pow+0xfa>
 800b970:	f1b9 0f00 	cmp.w	r9, #0
 800b974:	f04f 0000 	mov.w	r0, #0
 800b978:	f04f 0100 	mov.w	r1, #0
 800b97c:	da81      	bge.n	800b882 <__ieee754_pow+0x3a>
 800b97e:	e9dd 0300 	ldrd	r0, r3, [sp]
 800b982:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800b986:	e77c      	b.n	800b882 <__ieee754_pow+0x3a>
 800b988:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 800b98c:	d106      	bne.n	800b99c <__ieee754_pow+0x154>
 800b98e:	4632      	mov	r2, r6
 800b990:	463b      	mov	r3, r7
 800b992:	4630      	mov	r0, r6
 800b994:	4639      	mov	r1, r7
 800b996:	f7f4 fe37 	bl	8000608 <__aeabi_dmul>
 800b99a:	e772      	b.n	800b882 <__ieee754_pow+0x3a>
 800b99c:	4a51      	ldr	r2, [pc, #324]	@ (800bae4 <__ieee754_pow+0x29c>)
 800b99e:	4591      	cmp	r9, r2
 800b9a0:	d109      	bne.n	800b9b6 <__ieee754_pow+0x16e>
 800b9a2:	2d00      	cmp	r5, #0
 800b9a4:	db07      	blt.n	800b9b6 <__ieee754_pow+0x16e>
 800b9a6:	ec47 6b10 	vmov	d0, r6, r7
 800b9aa:	b011      	add	sp, #68	@ 0x44
 800b9ac:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9b0:	f000 bd52 	b.w	800c458 <__ieee754_sqrt>
 800b9b4:	2400      	movs	r4, #0
 800b9b6:	ec47 6b10 	vmov	d0, r6, r7
 800b9ba:	9302      	str	r3, [sp, #8]
 800b9bc:	f000 fc88 	bl	800c2d0 <fabs>
 800b9c0:	9b02      	ldr	r3, [sp, #8]
 800b9c2:	ec51 0b10 	vmov	r0, r1, d0
 800b9c6:	bb53      	cbnz	r3, 800ba1e <__ieee754_pow+0x1d6>
 800b9c8:	4b44      	ldr	r3, [pc, #272]	@ (800badc <__ieee754_pow+0x294>)
 800b9ca:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 800b9ce:	429a      	cmp	r2, r3
 800b9d0:	d002      	beq.n	800b9d8 <__ieee754_pow+0x190>
 800b9d2:	f1b8 0f00 	cmp.w	r8, #0
 800b9d6:	d122      	bne.n	800ba1e <__ieee754_pow+0x1d6>
 800b9d8:	f1b9 0f00 	cmp.w	r9, #0
 800b9dc:	da05      	bge.n	800b9ea <__ieee754_pow+0x1a2>
 800b9de:	4602      	mov	r2, r0
 800b9e0:	460b      	mov	r3, r1
 800b9e2:	2000      	movs	r0, #0
 800b9e4:	493d      	ldr	r1, [pc, #244]	@ (800badc <__ieee754_pow+0x294>)
 800b9e6:	f7f4 ff39 	bl	800085c <__aeabi_ddiv>
 800b9ea:	2d00      	cmp	r5, #0
 800b9ec:	f6bf af49 	bge.w	800b882 <__ieee754_pow+0x3a>
 800b9f0:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 800b9f4:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 800b9f8:	ea58 0804 	orrs.w	r8, r8, r4
 800b9fc:	d108      	bne.n	800ba10 <__ieee754_pow+0x1c8>
 800b9fe:	4602      	mov	r2, r0
 800ba00:	460b      	mov	r3, r1
 800ba02:	4610      	mov	r0, r2
 800ba04:	4619      	mov	r1, r3
 800ba06:	f7f4 fc47 	bl	8000298 <__aeabi_dsub>
 800ba0a:	4602      	mov	r2, r0
 800ba0c:	460b      	mov	r3, r1
 800ba0e:	e794      	b.n	800b93a <__ieee754_pow+0xf2>
 800ba10:	2c01      	cmp	r4, #1
 800ba12:	f47f af36 	bne.w	800b882 <__ieee754_pow+0x3a>
 800ba16:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ba1a:	4619      	mov	r1, r3
 800ba1c:	e731      	b.n	800b882 <__ieee754_pow+0x3a>
 800ba1e:	0feb      	lsrs	r3, r5, #31
 800ba20:	3b01      	subs	r3, #1
 800ba22:	ea53 0204 	orrs.w	r2, r3, r4
 800ba26:	d102      	bne.n	800ba2e <__ieee754_pow+0x1e6>
 800ba28:	4632      	mov	r2, r6
 800ba2a:	463b      	mov	r3, r7
 800ba2c:	e7e9      	b.n	800ba02 <__ieee754_pow+0x1ba>
 800ba2e:	3c01      	subs	r4, #1
 800ba30:	431c      	orrs	r4, r3
 800ba32:	d016      	beq.n	800ba62 <__ieee754_pow+0x21a>
 800ba34:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 800bac0 <__ieee754_pow+0x278>
 800ba38:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 800ba3c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ba40:	f240 8112 	bls.w	800bc68 <__ieee754_pow+0x420>
 800ba44:	4b28      	ldr	r3, [pc, #160]	@ (800bae8 <__ieee754_pow+0x2a0>)
 800ba46:	459a      	cmp	sl, r3
 800ba48:	4b25      	ldr	r3, [pc, #148]	@ (800bae0 <__ieee754_pow+0x298>)
 800ba4a:	d916      	bls.n	800ba7a <__ieee754_pow+0x232>
 800ba4c:	4598      	cmp	r8, r3
 800ba4e:	d80b      	bhi.n	800ba68 <__ieee754_pow+0x220>
 800ba50:	f1b9 0f00 	cmp.w	r9, #0
 800ba54:	da0b      	bge.n	800ba6e <__ieee754_pow+0x226>
 800ba56:	2000      	movs	r0, #0
 800ba58:	b011      	add	sp, #68	@ 0x44
 800ba5a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba5e:	f000 bcf3 	b.w	800c448 <__math_oflow>
 800ba62:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 800bac8 <__ieee754_pow+0x280>
 800ba66:	e7e7      	b.n	800ba38 <__ieee754_pow+0x1f0>
 800ba68:	f1b9 0f00 	cmp.w	r9, #0
 800ba6c:	dcf3      	bgt.n	800ba56 <__ieee754_pow+0x20e>
 800ba6e:	2000      	movs	r0, #0
 800ba70:	b011      	add	sp, #68	@ 0x44
 800ba72:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba76:	f000 bcdf 	b.w	800c438 <__math_uflow>
 800ba7a:	4598      	cmp	r8, r3
 800ba7c:	d20c      	bcs.n	800ba98 <__ieee754_pow+0x250>
 800ba7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ba82:	2200      	movs	r2, #0
 800ba84:	2300      	movs	r3, #0
 800ba86:	f7f5 f831 	bl	8000aec <__aeabi_dcmplt>
 800ba8a:	3800      	subs	r0, #0
 800ba8c:	bf18      	it	ne
 800ba8e:	2001      	movne	r0, #1
 800ba90:	f1b9 0f00 	cmp.w	r9, #0
 800ba94:	daec      	bge.n	800ba70 <__ieee754_pow+0x228>
 800ba96:	e7df      	b.n	800ba58 <__ieee754_pow+0x210>
 800ba98:	4b10      	ldr	r3, [pc, #64]	@ (800badc <__ieee754_pow+0x294>)
 800ba9a:	4598      	cmp	r8, r3
 800ba9c:	f04f 0200 	mov.w	r2, #0
 800baa0:	d924      	bls.n	800baec <__ieee754_pow+0x2a4>
 800baa2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800baa6:	2300      	movs	r3, #0
 800baa8:	f7f5 f820 	bl	8000aec <__aeabi_dcmplt>
 800baac:	3800      	subs	r0, #0
 800baae:	bf18      	it	ne
 800bab0:	2001      	movne	r0, #1
 800bab2:	f1b9 0f00 	cmp.w	r9, #0
 800bab6:	dccf      	bgt.n	800ba58 <__ieee754_pow+0x210>
 800bab8:	e7da      	b.n	800ba70 <__ieee754_pow+0x228>
 800baba:	bf00      	nop
 800babc:	f3af 8000 	nop.w
 800bac0:	00000000 	.word	0x00000000
 800bac4:	3ff00000 	.word	0x3ff00000
 800bac8:	00000000 	.word	0x00000000
 800bacc:	bff00000 	.word	0xbff00000
 800bad0:	fff00000 	.word	0xfff00000
 800bad4:	7ff00000 	.word	0x7ff00000
 800bad8:	433fffff 	.word	0x433fffff
 800badc:	3ff00000 	.word	0x3ff00000
 800bae0:	3fefffff 	.word	0x3fefffff
 800bae4:	3fe00000 	.word	0x3fe00000
 800bae8:	43f00000 	.word	0x43f00000
 800baec:	4b5a      	ldr	r3, [pc, #360]	@ (800bc58 <__ieee754_pow+0x410>)
 800baee:	f7f4 fbd3 	bl	8000298 <__aeabi_dsub>
 800baf2:	a351      	add	r3, pc, #324	@ (adr r3, 800bc38 <__ieee754_pow+0x3f0>)
 800baf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baf8:	4604      	mov	r4, r0
 800bafa:	460d      	mov	r5, r1
 800bafc:	f7f4 fd84 	bl	8000608 <__aeabi_dmul>
 800bb00:	a34f      	add	r3, pc, #316	@ (adr r3, 800bc40 <__ieee754_pow+0x3f8>)
 800bb02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb06:	4606      	mov	r6, r0
 800bb08:	460f      	mov	r7, r1
 800bb0a:	4620      	mov	r0, r4
 800bb0c:	4629      	mov	r1, r5
 800bb0e:	f7f4 fd7b 	bl	8000608 <__aeabi_dmul>
 800bb12:	4b52      	ldr	r3, [pc, #328]	@ (800bc5c <__ieee754_pow+0x414>)
 800bb14:	4682      	mov	sl, r0
 800bb16:	468b      	mov	fp, r1
 800bb18:	2200      	movs	r2, #0
 800bb1a:	4620      	mov	r0, r4
 800bb1c:	4629      	mov	r1, r5
 800bb1e:	f7f4 fd73 	bl	8000608 <__aeabi_dmul>
 800bb22:	4602      	mov	r2, r0
 800bb24:	460b      	mov	r3, r1
 800bb26:	a148      	add	r1, pc, #288	@ (adr r1, 800bc48 <__ieee754_pow+0x400>)
 800bb28:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bb2c:	f7f4 fbb4 	bl	8000298 <__aeabi_dsub>
 800bb30:	4622      	mov	r2, r4
 800bb32:	462b      	mov	r3, r5
 800bb34:	f7f4 fd68 	bl	8000608 <__aeabi_dmul>
 800bb38:	4602      	mov	r2, r0
 800bb3a:	460b      	mov	r3, r1
 800bb3c:	2000      	movs	r0, #0
 800bb3e:	4948      	ldr	r1, [pc, #288]	@ (800bc60 <__ieee754_pow+0x418>)
 800bb40:	f7f4 fbaa 	bl	8000298 <__aeabi_dsub>
 800bb44:	4622      	mov	r2, r4
 800bb46:	4680      	mov	r8, r0
 800bb48:	4689      	mov	r9, r1
 800bb4a:	462b      	mov	r3, r5
 800bb4c:	4620      	mov	r0, r4
 800bb4e:	4629      	mov	r1, r5
 800bb50:	f7f4 fd5a 	bl	8000608 <__aeabi_dmul>
 800bb54:	4602      	mov	r2, r0
 800bb56:	460b      	mov	r3, r1
 800bb58:	4640      	mov	r0, r8
 800bb5a:	4649      	mov	r1, r9
 800bb5c:	f7f4 fd54 	bl	8000608 <__aeabi_dmul>
 800bb60:	a33b      	add	r3, pc, #236	@ (adr r3, 800bc50 <__ieee754_pow+0x408>)
 800bb62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb66:	f7f4 fd4f 	bl	8000608 <__aeabi_dmul>
 800bb6a:	4602      	mov	r2, r0
 800bb6c:	460b      	mov	r3, r1
 800bb6e:	4650      	mov	r0, sl
 800bb70:	4659      	mov	r1, fp
 800bb72:	f7f4 fb91 	bl	8000298 <__aeabi_dsub>
 800bb76:	4602      	mov	r2, r0
 800bb78:	460b      	mov	r3, r1
 800bb7a:	4680      	mov	r8, r0
 800bb7c:	4689      	mov	r9, r1
 800bb7e:	4630      	mov	r0, r6
 800bb80:	4639      	mov	r1, r7
 800bb82:	f7f4 fb8b 	bl	800029c <__adddf3>
 800bb86:	2400      	movs	r4, #0
 800bb88:	4632      	mov	r2, r6
 800bb8a:	463b      	mov	r3, r7
 800bb8c:	4620      	mov	r0, r4
 800bb8e:	460d      	mov	r5, r1
 800bb90:	f7f4 fb82 	bl	8000298 <__aeabi_dsub>
 800bb94:	4602      	mov	r2, r0
 800bb96:	460b      	mov	r3, r1
 800bb98:	4640      	mov	r0, r8
 800bb9a:	4649      	mov	r1, r9
 800bb9c:	f7f4 fb7c 	bl	8000298 <__aeabi_dsub>
 800bba0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bba4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800bba8:	2300      	movs	r3, #0
 800bbaa:	9304      	str	r3, [sp, #16]
 800bbac:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800bbb0:	4606      	mov	r6, r0
 800bbb2:	460f      	mov	r7, r1
 800bbb4:	4652      	mov	r2, sl
 800bbb6:	465b      	mov	r3, fp
 800bbb8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bbbc:	f7f4 fb6c 	bl	8000298 <__aeabi_dsub>
 800bbc0:	4622      	mov	r2, r4
 800bbc2:	462b      	mov	r3, r5
 800bbc4:	f7f4 fd20 	bl	8000608 <__aeabi_dmul>
 800bbc8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bbcc:	4680      	mov	r8, r0
 800bbce:	4689      	mov	r9, r1
 800bbd0:	4630      	mov	r0, r6
 800bbd2:	4639      	mov	r1, r7
 800bbd4:	f7f4 fd18 	bl	8000608 <__aeabi_dmul>
 800bbd8:	4602      	mov	r2, r0
 800bbda:	460b      	mov	r3, r1
 800bbdc:	4640      	mov	r0, r8
 800bbde:	4649      	mov	r1, r9
 800bbe0:	f7f4 fb5c 	bl	800029c <__adddf3>
 800bbe4:	4652      	mov	r2, sl
 800bbe6:	465b      	mov	r3, fp
 800bbe8:	4606      	mov	r6, r0
 800bbea:	460f      	mov	r7, r1
 800bbec:	4620      	mov	r0, r4
 800bbee:	4629      	mov	r1, r5
 800bbf0:	f7f4 fd0a 	bl	8000608 <__aeabi_dmul>
 800bbf4:	460b      	mov	r3, r1
 800bbf6:	4602      	mov	r2, r0
 800bbf8:	4680      	mov	r8, r0
 800bbfa:	4689      	mov	r9, r1
 800bbfc:	4630      	mov	r0, r6
 800bbfe:	4639      	mov	r1, r7
 800bc00:	f7f4 fb4c 	bl	800029c <__adddf3>
 800bc04:	4b17      	ldr	r3, [pc, #92]	@ (800bc64 <__ieee754_pow+0x41c>)
 800bc06:	4299      	cmp	r1, r3
 800bc08:	4604      	mov	r4, r0
 800bc0a:	460d      	mov	r5, r1
 800bc0c:	468a      	mov	sl, r1
 800bc0e:	468b      	mov	fp, r1
 800bc10:	f340 82ef 	ble.w	800c1f2 <__ieee754_pow+0x9aa>
 800bc14:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 800bc18:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800bc1c:	4303      	orrs	r3, r0
 800bc1e:	f000 81e8 	beq.w	800bff2 <__ieee754_pow+0x7aa>
 800bc22:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bc26:	2200      	movs	r2, #0
 800bc28:	2300      	movs	r3, #0
 800bc2a:	f7f4 ff5f 	bl	8000aec <__aeabi_dcmplt>
 800bc2e:	3800      	subs	r0, #0
 800bc30:	bf18      	it	ne
 800bc32:	2001      	movne	r0, #1
 800bc34:	e710      	b.n	800ba58 <__ieee754_pow+0x210>
 800bc36:	bf00      	nop
 800bc38:	60000000 	.word	0x60000000
 800bc3c:	3ff71547 	.word	0x3ff71547
 800bc40:	f85ddf44 	.word	0xf85ddf44
 800bc44:	3e54ae0b 	.word	0x3e54ae0b
 800bc48:	55555555 	.word	0x55555555
 800bc4c:	3fd55555 	.word	0x3fd55555
 800bc50:	652b82fe 	.word	0x652b82fe
 800bc54:	3ff71547 	.word	0x3ff71547
 800bc58:	3ff00000 	.word	0x3ff00000
 800bc5c:	3fd00000 	.word	0x3fd00000
 800bc60:	3fe00000 	.word	0x3fe00000
 800bc64:	408fffff 	.word	0x408fffff
 800bc68:	4bd5      	ldr	r3, [pc, #852]	@ (800bfc0 <__ieee754_pow+0x778>)
 800bc6a:	402b      	ands	r3, r5
 800bc6c:	2200      	movs	r2, #0
 800bc6e:	b92b      	cbnz	r3, 800bc7c <__ieee754_pow+0x434>
 800bc70:	4bd4      	ldr	r3, [pc, #848]	@ (800bfc4 <__ieee754_pow+0x77c>)
 800bc72:	f7f4 fcc9 	bl	8000608 <__aeabi_dmul>
 800bc76:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 800bc7a:	468b      	mov	fp, r1
 800bc7c:	ea4f 532b 	mov.w	r3, fp, asr #20
 800bc80:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800bc84:	4413      	add	r3, r2
 800bc86:	930a      	str	r3, [sp, #40]	@ 0x28
 800bc88:	4bcf      	ldr	r3, [pc, #828]	@ (800bfc8 <__ieee754_pow+0x780>)
 800bc8a:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 800bc8e:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 800bc92:	459b      	cmp	fp, r3
 800bc94:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800bc98:	dd08      	ble.n	800bcac <__ieee754_pow+0x464>
 800bc9a:	4bcc      	ldr	r3, [pc, #816]	@ (800bfcc <__ieee754_pow+0x784>)
 800bc9c:	459b      	cmp	fp, r3
 800bc9e:	f340 81a5 	ble.w	800bfec <__ieee754_pow+0x7a4>
 800bca2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bca4:	3301      	adds	r3, #1
 800bca6:	930a      	str	r3, [sp, #40]	@ 0x28
 800bca8:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800bcac:	f04f 0a00 	mov.w	sl, #0
 800bcb0:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800bcb4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bcb6:	4bc6      	ldr	r3, [pc, #792]	@ (800bfd0 <__ieee754_pow+0x788>)
 800bcb8:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800bcbc:	ed93 7b00 	vldr	d7, [r3]
 800bcc0:	4629      	mov	r1, r5
 800bcc2:	ec53 2b17 	vmov	r2, r3, d7
 800bcc6:	ed8d 7b06 	vstr	d7, [sp, #24]
 800bcca:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800bcce:	f7f4 fae3 	bl	8000298 <__aeabi_dsub>
 800bcd2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800bcd6:	4606      	mov	r6, r0
 800bcd8:	460f      	mov	r7, r1
 800bcda:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bcde:	f7f4 fadd 	bl	800029c <__adddf3>
 800bce2:	4602      	mov	r2, r0
 800bce4:	460b      	mov	r3, r1
 800bce6:	2000      	movs	r0, #0
 800bce8:	49ba      	ldr	r1, [pc, #744]	@ (800bfd4 <__ieee754_pow+0x78c>)
 800bcea:	f7f4 fdb7 	bl	800085c <__aeabi_ddiv>
 800bcee:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800bcf2:	4602      	mov	r2, r0
 800bcf4:	460b      	mov	r3, r1
 800bcf6:	4630      	mov	r0, r6
 800bcf8:	4639      	mov	r1, r7
 800bcfa:	f7f4 fc85 	bl	8000608 <__aeabi_dmul>
 800bcfe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bd02:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 800bd06:	106d      	asrs	r5, r5, #1
 800bd08:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800bd0c:	f04f 0b00 	mov.w	fp, #0
 800bd10:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 800bd14:	4661      	mov	r1, ip
 800bd16:	2200      	movs	r2, #0
 800bd18:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800bd1c:	4658      	mov	r0, fp
 800bd1e:	46e1      	mov	r9, ip
 800bd20:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 800bd24:	4614      	mov	r4, r2
 800bd26:	461d      	mov	r5, r3
 800bd28:	f7f4 fc6e 	bl	8000608 <__aeabi_dmul>
 800bd2c:	4602      	mov	r2, r0
 800bd2e:	460b      	mov	r3, r1
 800bd30:	4630      	mov	r0, r6
 800bd32:	4639      	mov	r1, r7
 800bd34:	f7f4 fab0 	bl	8000298 <__aeabi_dsub>
 800bd38:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bd3c:	4606      	mov	r6, r0
 800bd3e:	460f      	mov	r7, r1
 800bd40:	4620      	mov	r0, r4
 800bd42:	4629      	mov	r1, r5
 800bd44:	f7f4 faa8 	bl	8000298 <__aeabi_dsub>
 800bd48:	4602      	mov	r2, r0
 800bd4a:	460b      	mov	r3, r1
 800bd4c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800bd50:	f7f4 faa2 	bl	8000298 <__aeabi_dsub>
 800bd54:	465a      	mov	r2, fp
 800bd56:	464b      	mov	r3, r9
 800bd58:	f7f4 fc56 	bl	8000608 <__aeabi_dmul>
 800bd5c:	4602      	mov	r2, r0
 800bd5e:	460b      	mov	r3, r1
 800bd60:	4630      	mov	r0, r6
 800bd62:	4639      	mov	r1, r7
 800bd64:	f7f4 fa98 	bl	8000298 <__aeabi_dsub>
 800bd68:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800bd6c:	f7f4 fc4c 	bl	8000608 <__aeabi_dmul>
 800bd70:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bd74:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800bd78:	4610      	mov	r0, r2
 800bd7a:	4619      	mov	r1, r3
 800bd7c:	f7f4 fc44 	bl	8000608 <__aeabi_dmul>
 800bd80:	a37d      	add	r3, pc, #500	@ (adr r3, 800bf78 <__ieee754_pow+0x730>)
 800bd82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd86:	4604      	mov	r4, r0
 800bd88:	460d      	mov	r5, r1
 800bd8a:	f7f4 fc3d 	bl	8000608 <__aeabi_dmul>
 800bd8e:	a37c      	add	r3, pc, #496	@ (adr r3, 800bf80 <__ieee754_pow+0x738>)
 800bd90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd94:	f7f4 fa82 	bl	800029c <__adddf3>
 800bd98:	4622      	mov	r2, r4
 800bd9a:	462b      	mov	r3, r5
 800bd9c:	f7f4 fc34 	bl	8000608 <__aeabi_dmul>
 800bda0:	a379      	add	r3, pc, #484	@ (adr r3, 800bf88 <__ieee754_pow+0x740>)
 800bda2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bda6:	f7f4 fa79 	bl	800029c <__adddf3>
 800bdaa:	4622      	mov	r2, r4
 800bdac:	462b      	mov	r3, r5
 800bdae:	f7f4 fc2b 	bl	8000608 <__aeabi_dmul>
 800bdb2:	a377      	add	r3, pc, #476	@ (adr r3, 800bf90 <__ieee754_pow+0x748>)
 800bdb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdb8:	f7f4 fa70 	bl	800029c <__adddf3>
 800bdbc:	4622      	mov	r2, r4
 800bdbe:	462b      	mov	r3, r5
 800bdc0:	f7f4 fc22 	bl	8000608 <__aeabi_dmul>
 800bdc4:	a374      	add	r3, pc, #464	@ (adr r3, 800bf98 <__ieee754_pow+0x750>)
 800bdc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdca:	f7f4 fa67 	bl	800029c <__adddf3>
 800bdce:	4622      	mov	r2, r4
 800bdd0:	462b      	mov	r3, r5
 800bdd2:	f7f4 fc19 	bl	8000608 <__aeabi_dmul>
 800bdd6:	a372      	add	r3, pc, #456	@ (adr r3, 800bfa0 <__ieee754_pow+0x758>)
 800bdd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bddc:	f7f4 fa5e 	bl	800029c <__adddf3>
 800bde0:	4622      	mov	r2, r4
 800bde2:	4606      	mov	r6, r0
 800bde4:	460f      	mov	r7, r1
 800bde6:	462b      	mov	r3, r5
 800bde8:	4620      	mov	r0, r4
 800bdea:	4629      	mov	r1, r5
 800bdec:	f7f4 fc0c 	bl	8000608 <__aeabi_dmul>
 800bdf0:	4602      	mov	r2, r0
 800bdf2:	460b      	mov	r3, r1
 800bdf4:	4630      	mov	r0, r6
 800bdf6:	4639      	mov	r1, r7
 800bdf8:	f7f4 fc06 	bl	8000608 <__aeabi_dmul>
 800bdfc:	465a      	mov	r2, fp
 800bdfe:	4604      	mov	r4, r0
 800be00:	460d      	mov	r5, r1
 800be02:	464b      	mov	r3, r9
 800be04:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800be08:	f7f4 fa48 	bl	800029c <__adddf3>
 800be0c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800be10:	f7f4 fbfa 	bl	8000608 <__aeabi_dmul>
 800be14:	4622      	mov	r2, r4
 800be16:	462b      	mov	r3, r5
 800be18:	f7f4 fa40 	bl	800029c <__adddf3>
 800be1c:	465a      	mov	r2, fp
 800be1e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800be22:	464b      	mov	r3, r9
 800be24:	4658      	mov	r0, fp
 800be26:	4649      	mov	r1, r9
 800be28:	f7f4 fbee 	bl	8000608 <__aeabi_dmul>
 800be2c:	4b6a      	ldr	r3, [pc, #424]	@ (800bfd8 <__ieee754_pow+0x790>)
 800be2e:	2200      	movs	r2, #0
 800be30:	4606      	mov	r6, r0
 800be32:	460f      	mov	r7, r1
 800be34:	f7f4 fa32 	bl	800029c <__adddf3>
 800be38:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800be3c:	f7f4 fa2e 	bl	800029c <__adddf3>
 800be40:	46d8      	mov	r8, fp
 800be42:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 800be46:	460d      	mov	r5, r1
 800be48:	465a      	mov	r2, fp
 800be4a:	460b      	mov	r3, r1
 800be4c:	4640      	mov	r0, r8
 800be4e:	4649      	mov	r1, r9
 800be50:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 800be54:	f7f4 fbd8 	bl	8000608 <__aeabi_dmul>
 800be58:	465c      	mov	r4, fp
 800be5a:	4680      	mov	r8, r0
 800be5c:	4689      	mov	r9, r1
 800be5e:	4b5e      	ldr	r3, [pc, #376]	@ (800bfd8 <__ieee754_pow+0x790>)
 800be60:	2200      	movs	r2, #0
 800be62:	4620      	mov	r0, r4
 800be64:	4629      	mov	r1, r5
 800be66:	f7f4 fa17 	bl	8000298 <__aeabi_dsub>
 800be6a:	4632      	mov	r2, r6
 800be6c:	463b      	mov	r3, r7
 800be6e:	f7f4 fa13 	bl	8000298 <__aeabi_dsub>
 800be72:	4602      	mov	r2, r0
 800be74:	460b      	mov	r3, r1
 800be76:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800be7a:	f7f4 fa0d 	bl	8000298 <__aeabi_dsub>
 800be7e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800be82:	f7f4 fbc1 	bl	8000608 <__aeabi_dmul>
 800be86:	4622      	mov	r2, r4
 800be88:	4606      	mov	r6, r0
 800be8a:	460f      	mov	r7, r1
 800be8c:	462b      	mov	r3, r5
 800be8e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800be92:	f7f4 fbb9 	bl	8000608 <__aeabi_dmul>
 800be96:	4602      	mov	r2, r0
 800be98:	460b      	mov	r3, r1
 800be9a:	4630      	mov	r0, r6
 800be9c:	4639      	mov	r1, r7
 800be9e:	f7f4 f9fd 	bl	800029c <__adddf3>
 800bea2:	4606      	mov	r6, r0
 800bea4:	460f      	mov	r7, r1
 800bea6:	4602      	mov	r2, r0
 800bea8:	460b      	mov	r3, r1
 800beaa:	4640      	mov	r0, r8
 800beac:	4649      	mov	r1, r9
 800beae:	f7f4 f9f5 	bl	800029c <__adddf3>
 800beb2:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 800beb6:	a33c      	add	r3, pc, #240	@ (adr r3, 800bfa8 <__ieee754_pow+0x760>)
 800beb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bebc:	4658      	mov	r0, fp
 800bebe:	e9cd bc08 	strd	fp, ip, [sp, #32]
 800bec2:	460d      	mov	r5, r1
 800bec4:	f7f4 fba0 	bl	8000608 <__aeabi_dmul>
 800bec8:	465c      	mov	r4, fp
 800beca:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bece:	4642      	mov	r2, r8
 800bed0:	464b      	mov	r3, r9
 800bed2:	4620      	mov	r0, r4
 800bed4:	4629      	mov	r1, r5
 800bed6:	f7f4 f9df 	bl	8000298 <__aeabi_dsub>
 800beda:	4602      	mov	r2, r0
 800bedc:	460b      	mov	r3, r1
 800bede:	4630      	mov	r0, r6
 800bee0:	4639      	mov	r1, r7
 800bee2:	f7f4 f9d9 	bl	8000298 <__aeabi_dsub>
 800bee6:	a332      	add	r3, pc, #200	@ (adr r3, 800bfb0 <__ieee754_pow+0x768>)
 800bee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800beec:	f7f4 fb8c 	bl	8000608 <__aeabi_dmul>
 800bef0:	a331      	add	r3, pc, #196	@ (adr r3, 800bfb8 <__ieee754_pow+0x770>)
 800bef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bef6:	4606      	mov	r6, r0
 800bef8:	460f      	mov	r7, r1
 800befa:	4620      	mov	r0, r4
 800befc:	4629      	mov	r1, r5
 800befe:	f7f4 fb83 	bl	8000608 <__aeabi_dmul>
 800bf02:	4602      	mov	r2, r0
 800bf04:	460b      	mov	r3, r1
 800bf06:	4630      	mov	r0, r6
 800bf08:	4639      	mov	r1, r7
 800bf0a:	f7f4 f9c7 	bl	800029c <__adddf3>
 800bf0e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800bf10:	4b32      	ldr	r3, [pc, #200]	@ (800bfdc <__ieee754_pow+0x794>)
 800bf12:	4413      	add	r3, r2
 800bf14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf18:	f7f4 f9c0 	bl	800029c <__adddf3>
 800bf1c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800bf20:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800bf22:	f7f4 fb07 	bl	8000534 <__aeabi_i2d>
 800bf26:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800bf28:	4b2d      	ldr	r3, [pc, #180]	@ (800bfe0 <__ieee754_pow+0x798>)
 800bf2a:	4413      	add	r3, r2
 800bf2c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bf30:	4606      	mov	r6, r0
 800bf32:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bf36:	460f      	mov	r7, r1
 800bf38:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bf3c:	f7f4 f9ae 	bl	800029c <__adddf3>
 800bf40:	4642      	mov	r2, r8
 800bf42:	464b      	mov	r3, r9
 800bf44:	f7f4 f9aa 	bl	800029c <__adddf3>
 800bf48:	4632      	mov	r2, r6
 800bf4a:	463b      	mov	r3, r7
 800bf4c:	f7f4 f9a6 	bl	800029c <__adddf3>
 800bf50:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 800bf54:	4632      	mov	r2, r6
 800bf56:	463b      	mov	r3, r7
 800bf58:	4658      	mov	r0, fp
 800bf5a:	460d      	mov	r5, r1
 800bf5c:	f7f4 f99c 	bl	8000298 <__aeabi_dsub>
 800bf60:	4642      	mov	r2, r8
 800bf62:	464b      	mov	r3, r9
 800bf64:	f7f4 f998 	bl	8000298 <__aeabi_dsub>
 800bf68:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bf6c:	f7f4 f994 	bl	8000298 <__aeabi_dsub>
 800bf70:	465c      	mov	r4, fp
 800bf72:	4602      	mov	r2, r0
 800bf74:	e036      	b.n	800bfe4 <__ieee754_pow+0x79c>
 800bf76:	bf00      	nop
 800bf78:	4a454eef 	.word	0x4a454eef
 800bf7c:	3fca7e28 	.word	0x3fca7e28
 800bf80:	93c9db65 	.word	0x93c9db65
 800bf84:	3fcd864a 	.word	0x3fcd864a
 800bf88:	a91d4101 	.word	0xa91d4101
 800bf8c:	3fd17460 	.word	0x3fd17460
 800bf90:	518f264d 	.word	0x518f264d
 800bf94:	3fd55555 	.word	0x3fd55555
 800bf98:	db6fabff 	.word	0xdb6fabff
 800bf9c:	3fdb6db6 	.word	0x3fdb6db6
 800bfa0:	33333303 	.word	0x33333303
 800bfa4:	3fe33333 	.word	0x3fe33333
 800bfa8:	e0000000 	.word	0xe0000000
 800bfac:	3feec709 	.word	0x3feec709
 800bfb0:	dc3a03fd 	.word	0xdc3a03fd
 800bfb4:	3feec709 	.word	0x3feec709
 800bfb8:	145b01f5 	.word	0x145b01f5
 800bfbc:	be3e2fe0 	.word	0xbe3e2fe0
 800bfc0:	7ff00000 	.word	0x7ff00000
 800bfc4:	43400000 	.word	0x43400000
 800bfc8:	0003988e 	.word	0x0003988e
 800bfcc:	000bb679 	.word	0x000bb679
 800bfd0:	0800ca08 	.word	0x0800ca08
 800bfd4:	3ff00000 	.word	0x3ff00000
 800bfd8:	40080000 	.word	0x40080000
 800bfdc:	0800c9e8 	.word	0x0800c9e8
 800bfe0:	0800c9f8 	.word	0x0800c9f8
 800bfe4:	460b      	mov	r3, r1
 800bfe6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bfea:	e5d7      	b.n	800bb9c <__ieee754_pow+0x354>
 800bfec:	f04f 0a01 	mov.w	sl, #1
 800bff0:	e65e      	b.n	800bcb0 <__ieee754_pow+0x468>
 800bff2:	a3b4      	add	r3, pc, #720	@ (adr r3, 800c2c4 <__ieee754_pow+0xa7c>)
 800bff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bff8:	4630      	mov	r0, r6
 800bffa:	4639      	mov	r1, r7
 800bffc:	f7f4 f94e 	bl	800029c <__adddf3>
 800c000:	4642      	mov	r2, r8
 800c002:	e9cd 0100 	strd	r0, r1, [sp]
 800c006:	464b      	mov	r3, r9
 800c008:	4620      	mov	r0, r4
 800c00a:	4629      	mov	r1, r5
 800c00c:	f7f4 f944 	bl	8000298 <__aeabi_dsub>
 800c010:	4602      	mov	r2, r0
 800c012:	460b      	mov	r3, r1
 800c014:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c018:	f7f4 fd86 	bl	8000b28 <__aeabi_dcmpgt>
 800c01c:	2800      	cmp	r0, #0
 800c01e:	f47f ae00 	bne.w	800bc22 <__ieee754_pow+0x3da>
 800c022:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800c026:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800c02a:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 800c02e:	fa43 fa0a 	asr.w	sl, r3, sl
 800c032:	44da      	add	sl, fp
 800c034:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800c038:	489d      	ldr	r0, [pc, #628]	@ (800c2b0 <__ieee754_pow+0xa68>)
 800c03a:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800c03e:	4108      	asrs	r0, r1
 800c040:	ea00 030a 	and.w	r3, r0, sl
 800c044:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800c048:	f1c1 0114 	rsb	r1, r1, #20
 800c04c:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 800c050:	fa4a fa01 	asr.w	sl, sl, r1
 800c054:	f1bb 0f00 	cmp.w	fp, #0
 800c058:	4640      	mov	r0, r8
 800c05a:	4649      	mov	r1, r9
 800c05c:	f04f 0200 	mov.w	r2, #0
 800c060:	bfb8      	it	lt
 800c062:	f1ca 0a00 	rsblt	sl, sl, #0
 800c066:	f7f4 f917 	bl	8000298 <__aeabi_dsub>
 800c06a:	4680      	mov	r8, r0
 800c06c:	4689      	mov	r9, r1
 800c06e:	4632      	mov	r2, r6
 800c070:	463b      	mov	r3, r7
 800c072:	4640      	mov	r0, r8
 800c074:	4649      	mov	r1, r9
 800c076:	f7f4 f911 	bl	800029c <__adddf3>
 800c07a:	2400      	movs	r4, #0
 800c07c:	a37c      	add	r3, pc, #496	@ (adr r3, 800c270 <__ieee754_pow+0xa28>)
 800c07e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c082:	4620      	mov	r0, r4
 800c084:	460d      	mov	r5, r1
 800c086:	f7f4 fabf 	bl	8000608 <__aeabi_dmul>
 800c08a:	4642      	mov	r2, r8
 800c08c:	e9cd 0100 	strd	r0, r1, [sp]
 800c090:	464b      	mov	r3, r9
 800c092:	4620      	mov	r0, r4
 800c094:	4629      	mov	r1, r5
 800c096:	f7f4 f8ff 	bl	8000298 <__aeabi_dsub>
 800c09a:	4602      	mov	r2, r0
 800c09c:	460b      	mov	r3, r1
 800c09e:	4630      	mov	r0, r6
 800c0a0:	4639      	mov	r1, r7
 800c0a2:	f7f4 f8f9 	bl	8000298 <__aeabi_dsub>
 800c0a6:	a374      	add	r3, pc, #464	@ (adr r3, 800c278 <__ieee754_pow+0xa30>)
 800c0a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0ac:	f7f4 faac 	bl	8000608 <__aeabi_dmul>
 800c0b0:	a373      	add	r3, pc, #460	@ (adr r3, 800c280 <__ieee754_pow+0xa38>)
 800c0b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0b6:	4680      	mov	r8, r0
 800c0b8:	4689      	mov	r9, r1
 800c0ba:	4620      	mov	r0, r4
 800c0bc:	4629      	mov	r1, r5
 800c0be:	f7f4 faa3 	bl	8000608 <__aeabi_dmul>
 800c0c2:	4602      	mov	r2, r0
 800c0c4:	460b      	mov	r3, r1
 800c0c6:	4640      	mov	r0, r8
 800c0c8:	4649      	mov	r1, r9
 800c0ca:	f7f4 f8e7 	bl	800029c <__adddf3>
 800c0ce:	4604      	mov	r4, r0
 800c0d0:	460d      	mov	r5, r1
 800c0d2:	4602      	mov	r2, r0
 800c0d4:	460b      	mov	r3, r1
 800c0d6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c0da:	f7f4 f8df 	bl	800029c <__adddf3>
 800c0de:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c0e2:	4680      	mov	r8, r0
 800c0e4:	4689      	mov	r9, r1
 800c0e6:	f7f4 f8d7 	bl	8000298 <__aeabi_dsub>
 800c0ea:	4602      	mov	r2, r0
 800c0ec:	460b      	mov	r3, r1
 800c0ee:	4620      	mov	r0, r4
 800c0f0:	4629      	mov	r1, r5
 800c0f2:	f7f4 f8d1 	bl	8000298 <__aeabi_dsub>
 800c0f6:	4642      	mov	r2, r8
 800c0f8:	4606      	mov	r6, r0
 800c0fa:	460f      	mov	r7, r1
 800c0fc:	464b      	mov	r3, r9
 800c0fe:	4640      	mov	r0, r8
 800c100:	4649      	mov	r1, r9
 800c102:	f7f4 fa81 	bl	8000608 <__aeabi_dmul>
 800c106:	a360      	add	r3, pc, #384	@ (adr r3, 800c288 <__ieee754_pow+0xa40>)
 800c108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c10c:	4604      	mov	r4, r0
 800c10e:	460d      	mov	r5, r1
 800c110:	f7f4 fa7a 	bl	8000608 <__aeabi_dmul>
 800c114:	a35e      	add	r3, pc, #376	@ (adr r3, 800c290 <__ieee754_pow+0xa48>)
 800c116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c11a:	f7f4 f8bd 	bl	8000298 <__aeabi_dsub>
 800c11e:	4622      	mov	r2, r4
 800c120:	462b      	mov	r3, r5
 800c122:	f7f4 fa71 	bl	8000608 <__aeabi_dmul>
 800c126:	a35c      	add	r3, pc, #368	@ (adr r3, 800c298 <__ieee754_pow+0xa50>)
 800c128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c12c:	f7f4 f8b6 	bl	800029c <__adddf3>
 800c130:	4622      	mov	r2, r4
 800c132:	462b      	mov	r3, r5
 800c134:	f7f4 fa68 	bl	8000608 <__aeabi_dmul>
 800c138:	a359      	add	r3, pc, #356	@ (adr r3, 800c2a0 <__ieee754_pow+0xa58>)
 800c13a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c13e:	f7f4 f8ab 	bl	8000298 <__aeabi_dsub>
 800c142:	4622      	mov	r2, r4
 800c144:	462b      	mov	r3, r5
 800c146:	f7f4 fa5f 	bl	8000608 <__aeabi_dmul>
 800c14a:	a357      	add	r3, pc, #348	@ (adr r3, 800c2a8 <__ieee754_pow+0xa60>)
 800c14c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c150:	f7f4 f8a4 	bl	800029c <__adddf3>
 800c154:	4622      	mov	r2, r4
 800c156:	462b      	mov	r3, r5
 800c158:	f7f4 fa56 	bl	8000608 <__aeabi_dmul>
 800c15c:	4602      	mov	r2, r0
 800c15e:	460b      	mov	r3, r1
 800c160:	4640      	mov	r0, r8
 800c162:	4649      	mov	r1, r9
 800c164:	f7f4 f898 	bl	8000298 <__aeabi_dsub>
 800c168:	4604      	mov	r4, r0
 800c16a:	460d      	mov	r5, r1
 800c16c:	4602      	mov	r2, r0
 800c16e:	460b      	mov	r3, r1
 800c170:	4640      	mov	r0, r8
 800c172:	4649      	mov	r1, r9
 800c174:	f7f4 fa48 	bl	8000608 <__aeabi_dmul>
 800c178:	2200      	movs	r2, #0
 800c17a:	e9cd 0100 	strd	r0, r1, [sp]
 800c17e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800c182:	4620      	mov	r0, r4
 800c184:	4629      	mov	r1, r5
 800c186:	f7f4 f887 	bl	8000298 <__aeabi_dsub>
 800c18a:	4602      	mov	r2, r0
 800c18c:	460b      	mov	r3, r1
 800c18e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c192:	f7f4 fb63 	bl	800085c <__aeabi_ddiv>
 800c196:	4632      	mov	r2, r6
 800c198:	4604      	mov	r4, r0
 800c19a:	460d      	mov	r5, r1
 800c19c:	463b      	mov	r3, r7
 800c19e:	4640      	mov	r0, r8
 800c1a0:	4649      	mov	r1, r9
 800c1a2:	f7f4 fa31 	bl	8000608 <__aeabi_dmul>
 800c1a6:	4632      	mov	r2, r6
 800c1a8:	463b      	mov	r3, r7
 800c1aa:	f7f4 f877 	bl	800029c <__adddf3>
 800c1ae:	4602      	mov	r2, r0
 800c1b0:	460b      	mov	r3, r1
 800c1b2:	4620      	mov	r0, r4
 800c1b4:	4629      	mov	r1, r5
 800c1b6:	f7f4 f86f 	bl	8000298 <__aeabi_dsub>
 800c1ba:	4642      	mov	r2, r8
 800c1bc:	464b      	mov	r3, r9
 800c1be:	f7f4 f86b 	bl	8000298 <__aeabi_dsub>
 800c1c2:	460b      	mov	r3, r1
 800c1c4:	4602      	mov	r2, r0
 800c1c6:	493b      	ldr	r1, [pc, #236]	@ (800c2b4 <__ieee754_pow+0xa6c>)
 800c1c8:	2000      	movs	r0, #0
 800c1ca:	f7f4 f865 	bl	8000298 <__aeabi_dsub>
 800c1ce:	ec41 0b10 	vmov	d0, r0, r1
 800c1d2:	ee10 3a90 	vmov	r3, s1
 800c1d6:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800c1da:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c1de:	da30      	bge.n	800c242 <__ieee754_pow+0x9fa>
 800c1e0:	4650      	mov	r0, sl
 800c1e2:	f000 f87d 	bl	800c2e0 <scalbn>
 800c1e6:	ec51 0b10 	vmov	r0, r1, d0
 800c1ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c1ee:	f7ff bbd2 	b.w	800b996 <__ieee754_pow+0x14e>
 800c1f2:	4c31      	ldr	r4, [pc, #196]	@ (800c2b8 <__ieee754_pow+0xa70>)
 800c1f4:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800c1f8:	42a3      	cmp	r3, r4
 800c1fa:	d91a      	bls.n	800c232 <__ieee754_pow+0x9ea>
 800c1fc:	4b2f      	ldr	r3, [pc, #188]	@ (800c2bc <__ieee754_pow+0xa74>)
 800c1fe:	440b      	add	r3, r1
 800c200:	4303      	orrs	r3, r0
 800c202:	d009      	beq.n	800c218 <__ieee754_pow+0x9d0>
 800c204:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c208:	2200      	movs	r2, #0
 800c20a:	2300      	movs	r3, #0
 800c20c:	f7f4 fc6e 	bl	8000aec <__aeabi_dcmplt>
 800c210:	3800      	subs	r0, #0
 800c212:	bf18      	it	ne
 800c214:	2001      	movne	r0, #1
 800c216:	e42b      	b.n	800ba70 <__ieee754_pow+0x228>
 800c218:	4642      	mov	r2, r8
 800c21a:	464b      	mov	r3, r9
 800c21c:	f7f4 f83c 	bl	8000298 <__aeabi_dsub>
 800c220:	4632      	mov	r2, r6
 800c222:	463b      	mov	r3, r7
 800c224:	f7f4 fc76 	bl	8000b14 <__aeabi_dcmpge>
 800c228:	2800      	cmp	r0, #0
 800c22a:	d1eb      	bne.n	800c204 <__ieee754_pow+0x9bc>
 800c22c:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 800c2cc <__ieee754_pow+0xa84>
 800c230:	e6f7      	b.n	800c022 <__ieee754_pow+0x7da>
 800c232:	469a      	mov	sl, r3
 800c234:	4b22      	ldr	r3, [pc, #136]	@ (800c2c0 <__ieee754_pow+0xa78>)
 800c236:	459a      	cmp	sl, r3
 800c238:	f63f aef3 	bhi.w	800c022 <__ieee754_pow+0x7da>
 800c23c:	f8dd a010 	ldr.w	sl, [sp, #16]
 800c240:	e715      	b.n	800c06e <__ieee754_pow+0x826>
 800c242:	ec51 0b10 	vmov	r0, r1, d0
 800c246:	4619      	mov	r1, r3
 800c248:	e7cf      	b.n	800c1ea <__ieee754_pow+0x9a2>
 800c24a:	491a      	ldr	r1, [pc, #104]	@ (800c2b4 <__ieee754_pow+0xa6c>)
 800c24c:	2000      	movs	r0, #0
 800c24e:	f7ff bb18 	b.w	800b882 <__ieee754_pow+0x3a>
 800c252:	2000      	movs	r0, #0
 800c254:	2100      	movs	r1, #0
 800c256:	f7ff bb14 	b.w	800b882 <__ieee754_pow+0x3a>
 800c25a:	4630      	mov	r0, r6
 800c25c:	4639      	mov	r1, r7
 800c25e:	f7ff bb10 	b.w	800b882 <__ieee754_pow+0x3a>
 800c262:	460c      	mov	r4, r1
 800c264:	f7ff bb5e 	b.w	800b924 <__ieee754_pow+0xdc>
 800c268:	2400      	movs	r4, #0
 800c26a:	f7ff bb49 	b.w	800b900 <__ieee754_pow+0xb8>
 800c26e:	bf00      	nop
 800c270:	00000000 	.word	0x00000000
 800c274:	3fe62e43 	.word	0x3fe62e43
 800c278:	fefa39ef 	.word	0xfefa39ef
 800c27c:	3fe62e42 	.word	0x3fe62e42
 800c280:	0ca86c39 	.word	0x0ca86c39
 800c284:	be205c61 	.word	0xbe205c61
 800c288:	72bea4d0 	.word	0x72bea4d0
 800c28c:	3e663769 	.word	0x3e663769
 800c290:	c5d26bf1 	.word	0xc5d26bf1
 800c294:	3ebbbd41 	.word	0x3ebbbd41
 800c298:	af25de2c 	.word	0xaf25de2c
 800c29c:	3f11566a 	.word	0x3f11566a
 800c2a0:	16bebd93 	.word	0x16bebd93
 800c2a4:	3f66c16c 	.word	0x3f66c16c
 800c2a8:	5555553e 	.word	0x5555553e
 800c2ac:	3fc55555 	.word	0x3fc55555
 800c2b0:	fff00000 	.word	0xfff00000
 800c2b4:	3ff00000 	.word	0x3ff00000
 800c2b8:	4090cbff 	.word	0x4090cbff
 800c2bc:	3f6f3400 	.word	0x3f6f3400
 800c2c0:	3fe00000 	.word	0x3fe00000
 800c2c4:	652b82fe 	.word	0x652b82fe
 800c2c8:	3c971547 	.word	0x3c971547
 800c2cc:	4090cc00 	.word	0x4090cc00

0800c2d0 <fabs>:
 800c2d0:	ec51 0b10 	vmov	r0, r1, d0
 800c2d4:	4602      	mov	r2, r0
 800c2d6:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800c2da:	ec43 2b10 	vmov	d0, r2, r3
 800c2de:	4770      	bx	lr

0800c2e0 <scalbn>:
 800c2e0:	b570      	push	{r4, r5, r6, lr}
 800c2e2:	ec55 4b10 	vmov	r4, r5, d0
 800c2e6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800c2ea:	4606      	mov	r6, r0
 800c2ec:	462b      	mov	r3, r5
 800c2ee:	b991      	cbnz	r1, 800c316 <scalbn+0x36>
 800c2f0:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800c2f4:	4323      	orrs	r3, r4
 800c2f6:	d03d      	beq.n	800c374 <scalbn+0x94>
 800c2f8:	4b35      	ldr	r3, [pc, #212]	@ (800c3d0 <scalbn+0xf0>)
 800c2fa:	4620      	mov	r0, r4
 800c2fc:	4629      	mov	r1, r5
 800c2fe:	2200      	movs	r2, #0
 800c300:	f7f4 f982 	bl	8000608 <__aeabi_dmul>
 800c304:	4b33      	ldr	r3, [pc, #204]	@ (800c3d4 <scalbn+0xf4>)
 800c306:	429e      	cmp	r6, r3
 800c308:	4604      	mov	r4, r0
 800c30a:	460d      	mov	r5, r1
 800c30c:	da0f      	bge.n	800c32e <scalbn+0x4e>
 800c30e:	a328      	add	r3, pc, #160	@ (adr r3, 800c3b0 <scalbn+0xd0>)
 800c310:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c314:	e01e      	b.n	800c354 <scalbn+0x74>
 800c316:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800c31a:	4291      	cmp	r1, r2
 800c31c:	d10b      	bne.n	800c336 <scalbn+0x56>
 800c31e:	4622      	mov	r2, r4
 800c320:	4620      	mov	r0, r4
 800c322:	4629      	mov	r1, r5
 800c324:	f7f3 ffba 	bl	800029c <__adddf3>
 800c328:	4604      	mov	r4, r0
 800c32a:	460d      	mov	r5, r1
 800c32c:	e022      	b.n	800c374 <scalbn+0x94>
 800c32e:	460b      	mov	r3, r1
 800c330:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800c334:	3936      	subs	r1, #54	@ 0x36
 800c336:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800c33a:	4296      	cmp	r6, r2
 800c33c:	dd0d      	ble.n	800c35a <scalbn+0x7a>
 800c33e:	2d00      	cmp	r5, #0
 800c340:	a11d      	add	r1, pc, #116	@ (adr r1, 800c3b8 <scalbn+0xd8>)
 800c342:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c346:	da02      	bge.n	800c34e <scalbn+0x6e>
 800c348:	a11d      	add	r1, pc, #116	@ (adr r1, 800c3c0 <scalbn+0xe0>)
 800c34a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c34e:	a31a      	add	r3, pc, #104	@ (adr r3, 800c3b8 <scalbn+0xd8>)
 800c350:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c354:	f7f4 f958 	bl	8000608 <__aeabi_dmul>
 800c358:	e7e6      	b.n	800c328 <scalbn+0x48>
 800c35a:	1872      	adds	r2, r6, r1
 800c35c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800c360:	428a      	cmp	r2, r1
 800c362:	dcec      	bgt.n	800c33e <scalbn+0x5e>
 800c364:	2a00      	cmp	r2, #0
 800c366:	dd08      	ble.n	800c37a <scalbn+0x9a>
 800c368:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800c36c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800c370:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c374:	ec45 4b10 	vmov	d0, r4, r5
 800c378:	bd70      	pop	{r4, r5, r6, pc}
 800c37a:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800c37e:	da08      	bge.n	800c392 <scalbn+0xb2>
 800c380:	2d00      	cmp	r5, #0
 800c382:	a10b      	add	r1, pc, #44	@ (adr r1, 800c3b0 <scalbn+0xd0>)
 800c384:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c388:	dac1      	bge.n	800c30e <scalbn+0x2e>
 800c38a:	a10f      	add	r1, pc, #60	@ (adr r1, 800c3c8 <scalbn+0xe8>)
 800c38c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c390:	e7bd      	b.n	800c30e <scalbn+0x2e>
 800c392:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800c396:	3236      	adds	r2, #54	@ 0x36
 800c398:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800c39c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c3a0:	4620      	mov	r0, r4
 800c3a2:	4b0d      	ldr	r3, [pc, #52]	@ (800c3d8 <scalbn+0xf8>)
 800c3a4:	4629      	mov	r1, r5
 800c3a6:	2200      	movs	r2, #0
 800c3a8:	e7d4      	b.n	800c354 <scalbn+0x74>
 800c3aa:	bf00      	nop
 800c3ac:	f3af 8000 	nop.w
 800c3b0:	c2f8f359 	.word	0xc2f8f359
 800c3b4:	01a56e1f 	.word	0x01a56e1f
 800c3b8:	8800759c 	.word	0x8800759c
 800c3bc:	7e37e43c 	.word	0x7e37e43c
 800c3c0:	8800759c 	.word	0x8800759c
 800c3c4:	fe37e43c 	.word	0xfe37e43c
 800c3c8:	c2f8f359 	.word	0xc2f8f359
 800c3cc:	81a56e1f 	.word	0x81a56e1f
 800c3d0:	43500000 	.word	0x43500000
 800c3d4:	ffff3cb0 	.word	0xffff3cb0
 800c3d8:	3c900000 	.word	0x3c900000

0800c3dc <with_errno>:
 800c3dc:	b510      	push	{r4, lr}
 800c3de:	ed2d 8b02 	vpush	{d8}
 800c3e2:	eeb0 8a40 	vmov.f32	s16, s0
 800c3e6:	eef0 8a60 	vmov.f32	s17, s1
 800c3ea:	4604      	mov	r4, r0
 800c3ec:	f7fc fe6e 	bl	80090cc <__errno>
 800c3f0:	eeb0 0a48 	vmov.f32	s0, s16
 800c3f4:	eef0 0a68 	vmov.f32	s1, s17
 800c3f8:	ecbd 8b02 	vpop	{d8}
 800c3fc:	6004      	str	r4, [r0, #0]
 800c3fe:	bd10      	pop	{r4, pc}

0800c400 <xflow>:
 800c400:	4603      	mov	r3, r0
 800c402:	b507      	push	{r0, r1, r2, lr}
 800c404:	ec51 0b10 	vmov	r0, r1, d0
 800c408:	b183      	cbz	r3, 800c42c <xflow+0x2c>
 800c40a:	4602      	mov	r2, r0
 800c40c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c410:	e9cd 2300 	strd	r2, r3, [sp]
 800c414:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c418:	f7f4 f8f6 	bl	8000608 <__aeabi_dmul>
 800c41c:	ec41 0b10 	vmov	d0, r0, r1
 800c420:	2022      	movs	r0, #34	@ 0x22
 800c422:	b003      	add	sp, #12
 800c424:	f85d eb04 	ldr.w	lr, [sp], #4
 800c428:	f7ff bfd8 	b.w	800c3dc <with_errno>
 800c42c:	4602      	mov	r2, r0
 800c42e:	460b      	mov	r3, r1
 800c430:	e7ee      	b.n	800c410 <xflow+0x10>
 800c432:	0000      	movs	r0, r0
 800c434:	0000      	movs	r0, r0
	...

0800c438 <__math_uflow>:
 800c438:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800c440 <__math_uflow+0x8>
 800c43c:	f7ff bfe0 	b.w	800c400 <xflow>
 800c440:	00000000 	.word	0x00000000
 800c444:	10000000 	.word	0x10000000

0800c448 <__math_oflow>:
 800c448:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800c450 <__math_oflow+0x8>
 800c44c:	f7ff bfd8 	b.w	800c400 <xflow>
 800c450:	00000000 	.word	0x00000000
 800c454:	70000000 	.word	0x70000000

0800c458 <__ieee754_sqrt>:
 800c458:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c45c:	4a68      	ldr	r2, [pc, #416]	@ (800c600 <__ieee754_sqrt+0x1a8>)
 800c45e:	ec55 4b10 	vmov	r4, r5, d0
 800c462:	43aa      	bics	r2, r5
 800c464:	462b      	mov	r3, r5
 800c466:	4621      	mov	r1, r4
 800c468:	d110      	bne.n	800c48c <__ieee754_sqrt+0x34>
 800c46a:	4622      	mov	r2, r4
 800c46c:	4620      	mov	r0, r4
 800c46e:	4629      	mov	r1, r5
 800c470:	f7f4 f8ca 	bl	8000608 <__aeabi_dmul>
 800c474:	4602      	mov	r2, r0
 800c476:	460b      	mov	r3, r1
 800c478:	4620      	mov	r0, r4
 800c47a:	4629      	mov	r1, r5
 800c47c:	f7f3 ff0e 	bl	800029c <__adddf3>
 800c480:	4604      	mov	r4, r0
 800c482:	460d      	mov	r5, r1
 800c484:	ec45 4b10 	vmov	d0, r4, r5
 800c488:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c48c:	2d00      	cmp	r5, #0
 800c48e:	dc0e      	bgt.n	800c4ae <__ieee754_sqrt+0x56>
 800c490:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800c494:	4322      	orrs	r2, r4
 800c496:	d0f5      	beq.n	800c484 <__ieee754_sqrt+0x2c>
 800c498:	b19d      	cbz	r5, 800c4c2 <__ieee754_sqrt+0x6a>
 800c49a:	4622      	mov	r2, r4
 800c49c:	4620      	mov	r0, r4
 800c49e:	4629      	mov	r1, r5
 800c4a0:	f7f3 fefa 	bl	8000298 <__aeabi_dsub>
 800c4a4:	4602      	mov	r2, r0
 800c4a6:	460b      	mov	r3, r1
 800c4a8:	f7f4 f9d8 	bl	800085c <__aeabi_ddiv>
 800c4ac:	e7e8      	b.n	800c480 <__ieee754_sqrt+0x28>
 800c4ae:	152a      	asrs	r2, r5, #20
 800c4b0:	d115      	bne.n	800c4de <__ieee754_sqrt+0x86>
 800c4b2:	2000      	movs	r0, #0
 800c4b4:	e009      	b.n	800c4ca <__ieee754_sqrt+0x72>
 800c4b6:	0acb      	lsrs	r3, r1, #11
 800c4b8:	3a15      	subs	r2, #21
 800c4ba:	0549      	lsls	r1, r1, #21
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d0fa      	beq.n	800c4b6 <__ieee754_sqrt+0x5e>
 800c4c0:	e7f7      	b.n	800c4b2 <__ieee754_sqrt+0x5a>
 800c4c2:	462a      	mov	r2, r5
 800c4c4:	e7fa      	b.n	800c4bc <__ieee754_sqrt+0x64>
 800c4c6:	005b      	lsls	r3, r3, #1
 800c4c8:	3001      	adds	r0, #1
 800c4ca:	02dc      	lsls	r4, r3, #11
 800c4cc:	d5fb      	bpl.n	800c4c6 <__ieee754_sqrt+0x6e>
 800c4ce:	1e44      	subs	r4, r0, #1
 800c4d0:	1b12      	subs	r2, r2, r4
 800c4d2:	f1c0 0420 	rsb	r4, r0, #32
 800c4d6:	fa21 f404 	lsr.w	r4, r1, r4
 800c4da:	4323      	orrs	r3, r4
 800c4dc:	4081      	lsls	r1, r0
 800c4de:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c4e2:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800c4e6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c4ea:	07d2      	lsls	r2, r2, #31
 800c4ec:	bf5c      	itt	pl
 800c4ee:	005b      	lslpl	r3, r3, #1
 800c4f0:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800c4f4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c4f8:	bf58      	it	pl
 800c4fa:	0049      	lslpl	r1, r1, #1
 800c4fc:	2600      	movs	r6, #0
 800c4fe:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800c502:	106d      	asrs	r5, r5, #1
 800c504:	0049      	lsls	r1, r1, #1
 800c506:	2016      	movs	r0, #22
 800c508:	4632      	mov	r2, r6
 800c50a:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800c50e:	1917      	adds	r7, r2, r4
 800c510:	429f      	cmp	r7, r3
 800c512:	bfde      	ittt	le
 800c514:	193a      	addle	r2, r7, r4
 800c516:	1bdb      	suble	r3, r3, r7
 800c518:	1936      	addle	r6, r6, r4
 800c51a:	0fcf      	lsrs	r7, r1, #31
 800c51c:	3801      	subs	r0, #1
 800c51e:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800c522:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800c526:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800c52a:	d1f0      	bne.n	800c50e <__ieee754_sqrt+0xb6>
 800c52c:	4604      	mov	r4, r0
 800c52e:	2720      	movs	r7, #32
 800c530:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800c534:	429a      	cmp	r2, r3
 800c536:	eb00 0e0c 	add.w	lr, r0, ip
 800c53a:	db02      	blt.n	800c542 <__ieee754_sqrt+0xea>
 800c53c:	d113      	bne.n	800c566 <__ieee754_sqrt+0x10e>
 800c53e:	458e      	cmp	lr, r1
 800c540:	d811      	bhi.n	800c566 <__ieee754_sqrt+0x10e>
 800c542:	f1be 0f00 	cmp.w	lr, #0
 800c546:	eb0e 000c 	add.w	r0, lr, ip
 800c54a:	da42      	bge.n	800c5d2 <__ieee754_sqrt+0x17a>
 800c54c:	2800      	cmp	r0, #0
 800c54e:	db40      	blt.n	800c5d2 <__ieee754_sqrt+0x17a>
 800c550:	f102 0801 	add.w	r8, r2, #1
 800c554:	1a9b      	subs	r3, r3, r2
 800c556:	458e      	cmp	lr, r1
 800c558:	bf88      	it	hi
 800c55a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800c55e:	eba1 010e 	sub.w	r1, r1, lr
 800c562:	4464      	add	r4, ip
 800c564:	4642      	mov	r2, r8
 800c566:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800c56a:	3f01      	subs	r7, #1
 800c56c:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800c570:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800c574:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800c578:	d1dc      	bne.n	800c534 <__ieee754_sqrt+0xdc>
 800c57a:	4319      	orrs	r1, r3
 800c57c:	d01b      	beq.n	800c5b6 <__ieee754_sqrt+0x15e>
 800c57e:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800c604 <__ieee754_sqrt+0x1ac>
 800c582:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800c608 <__ieee754_sqrt+0x1b0>
 800c586:	e9da 0100 	ldrd	r0, r1, [sl]
 800c58a:	e9db 2300 	ldrd	r2, r3, [fp]
 800c58e:	f7f3 fe83 	bl	8000298 <__aeabi_dsub>
 800c592:	e9da 8900 	ldrd	r8, r9, [sl]
 800c596:	4602      	mov	r2, r0
 800c598:	460b      	mov	r3, r1
 800c59a:	4640      	mov	r0, r8
 800c59c:	4649      	mov	r1, r9
 800c59e:	f7f4 faaf 	bl	8000b00 <__aeabi_dcmple>
 800c5a2:	b140      	cbz	r0, 800c5b6 <__ieee754_sqrt+0x15e>
 800c5a4:	f1b4 3fff 	cmp.w	r4, #4294967295
 800c5a8:	e9da 0100 	ldrd	r0, r1, [sl]
 800c5ac:	e9db 2300 	ldrd	r2, r3, [fp]
 800c5b0:	d111      	bne.n	800c5d6 <__ieee754_sqrt+0x17e>
 800c5b2:	3601      	adds	r6, #1
 800c5b4:	463c      	mov	r4, r7
 800c5b6:	1072      	asrs	r2, r6, #1
 800c5b8:	0863      	lsrs	r3, r4, #1
 800c5ba:	07f1      	lsls	r1, r6, #31
 800c5bc:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800c5c0:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800c5c4:	bf48      	it	mi
 800c5c6:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800c5ca:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800c5ce:	4618      	mov	r0, r3
 800c5d0:	e756      	b.n	800c480 <__ieee754_sqrt+0x28>
 800c5d2:	4690      	mov	r8, r2
 800c5d4:	e7be      	b.n	800c554 <__ieee754_sqrt+0xfc>
 800c5d6:	f7f3 fe61 	bl	800029c <__adddf3>
 800c5da:	e9da 8900 	ldrd	r8, r9, [sl]
 800c5de:	4602      	mov	r2, r0
 800c5e0:	460b      	mov	r3, r1
 800c5e2:	4640      	mov	r0, r8
 800c5e4:	4649      	mov	r1, r9
 800c5e6:	f7f4 fa81 	bl	8000aec <__aeabi_dcmplt>
 800c5ea:	b120      	cbz	r0, 800c5f6 <__ieee754_sqrt+0x19e>
 800c5ec:	1ca0      	adds	r0, r4, #2
 800c5ee:	bf08      	it	eq
 800c5f0:	3601      	addeq	r6, #1
 800c5f2:	3402      	adds	r4, #2
 800c5f4:	e7df      	b.n	800c5b6 <__ieee754_sqrt+0x15e>
 800c5f6:	1c63      	adds	r3, r4, #1
 800c5f8:	f023 0401 	bic.w	r4, r3, #1
 800c5fc:	e7db      	b.n	800c5b6 <__ieee754_sqrt+0x15e>
 800c5fe:	bf00      	nop
 800c600:	7ff00000 	.word	0x7ff00000
 800c604:	200001e0 	.word	0x200001e0
 800c608:	200001d8 	.word	0x200001d8

0800c60c <_init>:
 800c60c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c60e:	bf00      	nop
 800c610:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c612:	bc08      	pop	{r3}
 800c614:	469e      	mov	lr, r3
 800c616:	4770      	bx	lr

0800c618 <_fini>:
 800c618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c61a:	bf00      	nop
 800c61c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c61e:	bc08      	pop	{r3}
 800c620:	469e      	mov	lr, r3
 800c622:	4770      	bx	lr
